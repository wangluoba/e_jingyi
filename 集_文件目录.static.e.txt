.版本 2

.程序集 集_文件目录
.程序集变量 类变量_6E7E0215, 文本型, , "0"

.子程序 文件_是否被占用, 逻辑型, 公开
    .参数 文件路径, 文本型
    .局部变量 变量_A0D30225, 整数型

    .如果真 (文件是否存在 (文件路径))
        变量_A0D30225 ＝ CreateFileA (文件路径, #GENERIC_WRITE, 0, 0, #OPEN_EXISTING, #FILE_ATTRIBUTE_NORMAL, 0)
        .如果真 (变量_A0D30225 ≠ #INVALID_HANDLE_VALUE)
            CloseHandle (变量_A0D30225)
            返回 (假)
        .如果真结束
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 文件_创建稀疏文件, 整数型, 公开, 成功返回文件句柄
    .参数 参_文件名, 文本型
    .局部变量 变量_6DAD0225, 整数型

    .如果真 (系统_磁盘是否支持稀疏文件 (参_文件名) ＝ 假)
        返回 (0)
    .如果真结束
    .如果真 (文件是否存在 (参_文件名) ＝ 假)
        变量_6DAD0225 ＝ 打开文件 (参_文件名, #改写, )
        写出数据 (变量_6DAD0225, { 0 })
        关闭文件 (变量_6DAD0225)
    .如果真结束
    变量_6DAD0225 ＝ CreateFileA (参_文件名, 位或 (#GENERIC_READ, #GENERIC_WRITE), 位或 (#FILE_SHARE_READ, #FILE_SHARE_WRITE), 0, #OPEN_EXISTING, 0, 0)
    DeviceIoControl1 (变量_6DAD0225, #FSCTL_SET_SPARSE, 0, 0, 0, 0, 0, 0)
    返回 (变量_6DAD0225)

.子程序 文件_是否是稀疏文件, 逻辑型, 公开
    .参数 参_文件名, 文本型
    .局部变量 变量_6FAD0225, 整数型

    变量_6FAD0225 ＝ GetFileAttributesA (参_文件名)
    .如果真 (变量_6FAD0225 ＝ -1)
        返回 (假)
    .如果真结束
    .如果 (位与 (变量_6FAD0225, #FILE_ATTRIBUTE_SPARSE_FILE) ＝ 512)
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    

.子程序 文件_取图标, 字节集, 公开, 返回指定文件路径文件的图标
    .参数 窗口句柄, 整数型, , 当前程序的窗口句柄
    .参数 文件路径, 文本型, , 文件的完整路径
    .参数 宽度, 整数型
    .参数 高度, 整数型
    .参数 背景色, 整数型, 可空
    .局部变量 变量_62790225, 整数型
    .局部变量 变量_63790225, 字节集

    .如果真 (是否为空 (背景色))
        背景色 ＝ #品红
    .如果真结束
    变量_62790225 ＝ 文件_取图标句柄 (文件路径)
    变量_63790225 ＝ 图片_通过句柄取图标 (窗口句柄, 变量_62790225, 宽度, 高度, 背景色)
    DLL_DestroyIcon (变量_62790225)
    返回 (变量_63790225)

.子程序 文件_文件名是否可用, 逻辑型, 公开
    .参数 文件名, 文本型
    .局部变量 变量_AFF50225, 整数型
    .局部变量 变量_B3F50225, 文本型, , "0"
    .局部变量 变量_B5F50225, 整数型

    变量_AFF50225 ＝ 取文本长度 (文件名)
    .如果真 (变量_AFF50225 ＞ 255)
        输出调试文本 (“除非使用UNICODE路径，否则名称不能超过 255 个字符！”)
        返回 (假)
    .如果真结束
    变量_AFF50225 ＝ 文本_逐字分割 (#<?未知本地类型?>, 变量_B3F50225)
    .计次循环首 (变量_AFF50225, 变量_B5F50225)
        .如果真 (寻找文本 (文件名, 变量_B3F50225 [变量_B5F50225], , 假) ≠ -1)
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (文件_是否存在 (文件名))
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 文件_取文件信息, 文本型, 公开, 取指定文件相关信息，默认取备注
    .参数 文件路径, 文本型
    .参数 类型, 整数型, 可空, “1备注”, “2公司名”, “3描述”, “4文件版本”, “5内部名称”, “6版权”, “7合法商标”, “8原文件名”, “9个人用编译版说明”, “10产品名称”, “11产品版本”, “12特殊编译版说明”
    .局部变量 变量_B90E0325, 整数型

    .如果 (类型 ＜ 1 或 类型 ＞ 12)
        变量_B90E0325 ＝ 8
    .否则
        变量_B90E0325 ＝ 多项选择 (类型, 8, 1, 2, 0, 3, 4, 5, 6, 9, 7, 0, 10)
    .如果结束
    返回 (编码_Unicode到Ansi (文件_取文件版本信息W (编码_Ansi到Unicode (文件路径, ), 变量_B90E0325)))

.子程序 文件_取文件版本信息W, 字节集, 公开, 成功返回文件指定类型的信息
    .参数 文件名, 字节集
    .参数 类型, 整数型, 可空, 0、文件版本；1、公司名称；2、文件描述；3、内部名称；4、合法版权；5、合法商标；6、源文件名；7、产品名称；8、备注；9、个人编译版说明；10、特殊编译版说明；11、语言
    .局部变量 变量_2FF80225, 整数型
    .局部变量 变量_30F80225, 整数型
    .局部变量 变量_31F80225, 整数型
    .局部变量 变量_36F80225, 文本型, , "0"
    .局部变量 变量_46F80225, 字节集
    .局部变量 变量_38F80225, 整数型
    .局部变量 变量_3CF80225, 整数型
    .局部变量 变量_42F80225, 字节集
    .局部变量 变量_51F80225, 整数型
    .局部变量 变量_50F80225, 整数型
    .局部变量 变量_61F80225, 短整数型, , "0"
    .局部变量 变量_86F80225, 短整数型
    .局部变量 变量_67F80225, 整数型
    .局部变量 变量_6FF80225, 文本型
    .局部变量 变量_65F80225, 整数型
    .局部变量 变量_66F80225, 整数型

    变量_2FF80225 ＝ DLL_GetFileVersionInfoSizeW (文件名, 变量_30F80225)
    .如果真 (变量_2FF80225 ＞ 0)
        变量_31F80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_2FF80225)
        .如果真 (DLL_GetFileVersionInfoW (文件名, #NULL, 变量_2FF80225, 变量_31F80225))
            变量_36F80225 ＝ { “\”, “CompanyName”, “FileDescription”, “InternalName”, “LegalCopyright”, “LegalTrademarks”, “OriginalFilename”, “ProductName”, “Comments”, “PrivateBuild”, “SpecialBuild”, “” }
            .如果 (类型 ≤ 0 或 类型 ＋ 1 ＞ 取数组成员数 (变量_36F80225))
                变量_46F80225 ＝ 编码_Ansi到Unicode (变量_36F80225 [1], )
                .如果真 (DLL_VerQueryValueW (变量_31F80225, 变量_46F80225, 变量_38F80225, 变量_3CF80225))
                    变量_51F80225 ＝ __get (变量_38F80225, 8)
                    变量_50F80225 ＝ __get (变量_38F80225, 12)
                    变量_42F80225 ＝ 编码_Ansi到Unicode (到文本 (HIWORD (变量_51F80225)) ＋ “.” ＋ 到文本 (LOWORD (变量_51F80225)) ＋ “.” ＋ 到文本 (HIWORD (变量_50F80225)) ＋ “.” ＋ 到文本 (LOWORD (变量_50F80225)), )
                .如果真结束
                
            .否则
                变量_46F80225 ＝ 编码_Ansi到Unicode (“\VarFileInfo\Translation”, )
                .如果真 (DLL_VerQueryValueW (变量_31F80225, 变量_46F80225, 变量_38F80225, 变量_3CF80225))
                    变量_67F80225 ＝ __get_short (变量_38F80225, 0)
                    .如果 (变量_36F80225 [类型 ＋ 1] ＝ “”)
                        变量_38F80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 128 × 2)
                        变量_3CF80225 ＝ DLL_VerLanguageNameW (变量_67F80225, 变量_38F80225, 127)
                        .如果真 (变量_3CF80225 ＞ 0)
                            变量_42F80225 ＝ 指针到字节集 (变量_38F80225, 变量_3CF80225 × 2)
                        .如果真结束
                        LocalFree (变量_38F80225)
                    .否则
                        变量_86F80225 ＝ __get_short (变量_38F80225, 2)
                        
                        
                        变量_61F80225 ＝ { 2052, 1033 }
                        .如果真 (变量_67F80225 ≠ 2052 且 变量_67F80225 ≠ 1033)
                            加入成员 (变量_61F80225, 变量_67F80225)
                        .如果真结束
                        变量_65F80225 ＝ 取数组成员数 (变量_61F80225)
                        .计次循环首 (变量_65F80225, 变量_66F80225)
                            变量_6FF80225 ＝ 进制_十到十六 (MAKELONG (变量_86F80225, 变量_61F80225 [变量_66F80225]), 真)
                            变量_46F80225 ＝ 编码_Ansi到Unicode (“\StringFileInfo\” ＋ 变量_6FF80225 ＋ “\” ＋ 变量_36F80225 [类型 ＋ 1], )
                            .如果真 (DLL_VerQueryValueW (变量_31F80225, 变量_46F80225, 变量_38F80225, 变量_3CF80225))
                                变量_42F80225 ＝ 指针到字节集 (变量_38F80225, 变量_3CF80225 × 2)
                                跳出循环 ()
                            .如果真结束
                            
                        .计次循环尾 ()
                    .如果结束
                    
                .如果真结束
                
            .如果结束
            
        .如果真结束
        LocalFree (变量_31F80225)
    .如果真结束
    返回 (变量_42F80225)

.子程序 文件_取文件版本号, 文本型, 公开, 返回指定文件的版本号
    .参数 FullFileName, 文本型
    .参数 错误信息, 文本型, 参考 可空
    .局部变量 变量_8F5A0225, 整数型
    .局部变量 变量_905A0225, 字节集
    .局部变量 变量_915A0225, 整数型
    .局部变量 变量_925A0225, 整数型
    .局部变量 变量_945A0225, 字节型, , "261"
    .局部变量 变量_955A0225, 整数型
    .局部变量 变量_965A0225, 文本型
    .局部变量 变量_975A0225, 文本型
    .局部变量 变量_985A0225, 整数型
    .局部变量 变量_995A0225, 文本型

    变量_8F5A0225 ＝ DLL_GetFileVersionInfoSizeA (FullFileName, 0)
    .如果真 (变量_8F5A0225 ≤ 0)
        错误信息 ＝ “GetFileVersionInfoSize（获取信息长度）失败”
        返回 (“”)
    .如果真结束
    变量_905A0225 ＝ 取空白字节集 (变量_8F5A0225)
    
    .如果真 (DLL_GetFileVersionInfoA (FullFileName, 0, 变量_8F5A0225, 变量_905A0225) ＝ 假)
        错误信息 ＝ “GetFileVersionInfo（获取信息）失败”
        返回 (“”)
    .如果真结束
    
    .如果真 (DLL_VerQueryValueA2 (变量_905A0225, “\VarFileInfo\Translation”, 变量_915A0225, 变量_925A0225) ＝ 假)
        错误信息 ＝ “VerQueryValue（查询Version）失败”
        返回 (“”)
    .如果真结束
    RtlMoveMemory (取数据_通用型_数组 (变量_945A0225), 变量_915A0225, 变量_925A0225)
    变量_955A0225 ＝ 变量_945A0225 [3] ＋ 变量_945A0225 [4] × 256 ＋ 变量_945A0225 [1] × 65536 ＋ 变量_945A0225 [2] × 16777216
    变量_985A0225 ＝ 到长整数 (变量_945A0225 [1] ＋ 变量_945A0225 [2] × 256)
    变量_965A0225 ＝ 取十六进制文本 (变量_955A0225)
    
    .判断循环首 (取文本长度 (变量_965A0225) ＜ 8)
        变量_965A0225 ＝ “0” ＋ 变量_965A0225
    .判断循环尾 ()
    
    变量_975A0225 ＝ 取空白文本 (261)
    变量_975A0225 ＝ “\StringFileInfo\” ＋ 变量_965A0225 ＋ “\FileVersion”
    .如果 (DLL_VerQueryValueA2 (变量_905A0225, 变量_975A0225, 变量_915A0225, 变量_925A0225))
        变量_995A0225 ＝ 取空白文本 (变量_925A0225)
        DLL_lstrcpyA5 (变量_995A0225, 变量_915A0225)
    .否则
        变量_995A0225 ＝ “”
    .如果结束
    
    返回 (变量_995A0225)
    

.子程序 目录_处理, 文本型, 公开, 检测最后一个字符是否为“\”如果不是则加上，某些支持库或组件要求必须结尾有\等符号才能识别为目录。源码由雪山凌狐提供
    .参数 要处理的目录, 文本型, , 传入要检测和处理的目录路径
    .局部变量 变量_4C5C0225, 文本型

    变量_4C5C0225 ＝ 要处理的目录
    .如果真 (取文本右边 (要处理的目录, 1) ≠ “\”)
        变量_4C5C0225 ＝ 变量_4C5C0225 ＋ “\”
    .如果真结束
    返回 (变量_4C5C0225)

.子程序 文件_枚举EX, , 公开, 遍历特定目录特定后缀名的所有文件，结果在回调函数中输出，源码由雪山凌狐提供
    .参数 查找的目录, 文本型, , 程序内部会自动给目录结尾加上“\”
    .参数 后缀名, 文本型, 可空, 默认为“*”，即查找所有后缀名文件，如果传入空文本参数，则同样视为遍历所有后缀名文件
    .参数 是否遍历子目录, 逻辑型, 可空, 默认为假，即仅遍历根目录的文件
    .参数 回调函数, 子程序指针, 可空, 指定一个外部的子程序可以在每次找出一个文件的时候运行，该函数的第一个参数为查找到的文件名，第二个参数为文件的完整路径
    .局部变量 变量_B95A0225, 文本型
    .局部变量 变量_BA5A0225, 文本型
    .局部变量 变量_BB5A0225, 文本型
    .局部变量 变量_BD800225, 文本型

    
    .如果真 (是否为空 (后缀名) 或 后缀名 ＝ “”)
        后缀名 ＝ “*”
    .如果真结束
    .如果真 (是否为空 (是否遍历子目录))
        是否遍历子目录 ＝ 假
    .如果真结束
    
    .如果 (寻找文本 (后缀名, “*.”, , 假) ≠ -1)
        变量_BD800225 ＝ “”
    .否则
        变量_BD800225 ＝ “*.”
    .如果结束
    
    
    
    
    .如果真 (取文本右边 (查找的目录, 1) ≠ “\”)
        查找的目录 ＝ 查找的目录 ＋ “\”
    .如果真结束
    
    
    变量_B95A0225 ＝ 寻找文件 (查找的目录 ＋ 变量_BD800225 ＋ 后缀名, )
    
    .判断循环首 (变量_B95A0225 ≠ “”)
        
        
        
        变量_BB5A0225 ＝ 查找的目录 ＋ 变量_B95A0225
        
        .如果真 (后缀名 ≠ “*”)
            ' .如果真 (文件_取扩展名 (变量_BB5A0225) ≠ “.” ＋ 后缀名)
                
            ' .如果真结束
            
        .如果真结束
        
        程序_Call (到整数 (回调函数), lstrcpyn_文本型 (变量_B95A0225, 变量_B95A0225, 0), lstrcpyn_文本型 (变量_BB5A0225, 变量_BB5A0225, 0))
        
        
        变量_B95A0225 ＝ 寻找文件 (, )
    .判断循环尾 ()
    
    
    .如果真 (是否遍历子目录)
        变量_BA5A0225 ＝ 寻找文件 (查找的目录 ＋ “*.*”, #子目录)
        
        .判断循环首 (变量_BA5A0225 ≠ “”)
            .如果真 (变量_BA5A0225 ≠ “.” 且 变量_BA5A0225 ≠ “..”)
                
                文件_枚举EX (查找的目录 ＋ 变量_BA5A0225, 后缀名, 真, 回调函数)
                处理事件 ()
            .如果真结束
            
            变量_BA5A0225 ＝ 寻找文件 (, #子目录)
            
        .判断循环尾 ()
        
    .如果真结束
    

.子程序 文件_打开, 整数型, 公开, 文件必须存在，成功返回文件句柄，失败返回-1
    .参数 文件路径, 文本型
    .参数 执行模式, 整数型, 可空, 可空。0=API方式，1=核心支持库方式。默认为0，用API方式。
    .局部变量 变量_DAA00125, 整数型

    .如果 (执行模式 ＝ 0)
        变量_DAA00125 ＝ CreateFileA (文件路径, 位或 (#GENERIC_READ, #GENERIC_WRITE), #FILE_SHARE_READ, 0, #OPEN_EXISTING, #FILE_FLAG_SEQUENTIAL_SCAN, 0)
    .否则
        变量_DAA00125 ＝ 打开文件 (文件路径, #读写, #无限制)
    .如果结束
    返回 (变量_DAA00125)

.子程序 文件_关闭, , 公开, 关闭后,将文件号设置为0
    .参数 文件号, 整数型, 参考
    .参数 执行模式, 整数型, 可空, 可空。0=API方式，1=核心支持库方式。默认为0，用API方式。

    .如果真 (文件号 ＞ 0)
        .如果 (执行模式 ＝ 0)
            CloseHandle (文件号)
        .否则
            关闭文件 (文件号)
        .如果结束
        
    .如果真结束
    

.子程序 文件_重启电脑后替换, , 公开, 感谢【微凉清风】提供此函数
    .参数 用于替换的文件路径, 文本型
    .参数 被替换目标文件路径, 文本型
    .参数 是否删除源文件, 逻辑型, 可空, 可空，默认为假。是否删除“用于替换的文件路径”

    .如果真 (是否删除源文件 ＝ 真)
        MoveFileExA (用于替换的文件路径, 字符 (0), 4)
    .如果真结束
    MoveFileExA (用于替换的文件路径, 被替换目标文件路径, 4)

.子程序 文件_写出字节集, 逻辑型, 公开, 成功返回真，失败返回假。
    .参数 文件号, 整数型, , 由  文件_打开 函数返回文件句柄，不支持 易自带 打开文件(）命令。
    .参数 要写入的数据, 字节集
    .参数 执行模式, 整数型, 可空, 可空。0=API方式，1=核心支持库方式。默认为0，用API方式。
    .局部变量 变量_78C30125, 字节集

    .如果真 (文件号 ＞ 0)
        变量_78C30125 ＝ 取空白字节集 (取字节集长度 (要写入的数据))
        RtlMoveMemory_字节集2 (变量_78C30125, 要写入的数据, 取字节集长度 (要写入的数据))
        .如果真 (执行模式 ＝ 0)
            返回 (WriteFile (文件号, 变量_78C30125, 取字节集长度 (要写入的数据), 0, 0))
        .如果真结束
        返回 (写出字节集 (文件号, 要写入的数据))
    .如果真结束
    返回 (假)

.子程序 文件_读入字节集, 整数型, 公开, 成功 = 非0    失败 = 0
    .参数 参_文件号, 整数型
    .参数 参_读入的字节集, 字节集
    .参数 参_读入长度, 整数型, 可空, 调用 文件_取实际大小 获取
    .参数 参_读入字符数, 整数型, 可空, 默认1024

    .如果真 (是否为空 (参_读入长度))
        DLL_GetFileSizeEx (参_文件号, 参_读入长度)
    .如果真结束
    
    .如果真 (是否为空 (参_读入字符数))
        参_读入字符数 ＝ 1024
    .如果真结束
    参_读入的字节集 ＝ 取空白字节集 (参_读入长度)
    返回 (DLL_ReadFile (参_文件号, 参_读入的字节集, 参_读入长度, 参_读入字符数, 0))

.子程序 文件_移动读写位置, 逻辑型, 公开, 成功返回真，失败返回假。
    .参数 文件号, 整数型
    .参数 移动距离, 整数型
    .参数 执行模式, 整数型, 可空, 可空。0=API方式，1=核心支持库方式。默认为0，用API方式。

    .如果真 (执行模式 ＝ 0)
        .如果 (SetFilePointer (文件号, 移动距离, 0, 0) ＝ -1)
            输出调试文本 (“设置文件指针失败-API：” ＋ 到文本 (移动距离))
            返回 (假)
        .否则
            返回 (真)
        .如果结束
        
    .如果真结束
    返回 (移动读写位置 (文件号, #文件首, 移动距离))

.子程序 文件_下载, , 公开, 用windows自带的下载方式来下载文件；
    .参数 网络文件地址, 文本型
    .局部变量 变量_92E70225, 字节集
    .局部变量 变量_E8050325, 整数型

    变量_92E70225 ＝ 编码_Ansi到Unicode (网络文件地址, )
    变量_E8050325 ＝ 文本_取长度W (变量_92E70225)
    .如果真 (变量_E8050325 ＞ 0)
        DoFileDownload (变量_92E70225)
    .如果真结束
    
    
    
    
    

.子程序 文件_下载1, 逻辑型, 公开, 支持HTTP,HTTPS协议.成功返回真,失败返回假.(Mr.Yang提供)
    .参数 下载地址, 文本型, , 需下载的URL地址.
    .参数 保存路径, 文本型, , 保存到本地的完整文件路径.
    .参数 任务类型, 整数型, 可空, 0=覆盖 1=改名 2=跳过.当文件覆盖失败时返回假.跳过时返回真.
    .局部变量 变量_F1F70225, 文本型
    .局部变量 变量_F2F70225, 文本型
    .局部变量 变量_F3F70225, 整数型
    .局部变量 变量_9F040325, 文本型, , "0"
    .局部变量 变量_A3040325, 整数型

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN7 且 IsDebuggerPresent ())
        变量_A3040325 ＝ 系统_遍历修复补丁ID (变量_9F040325, “KB2813430”)
        .如果真 (变量_A3040325 ＝ 0)
            输出调试文本 (“缺少修复补丁(KB2813430) 可能导致该功能无效”)
            输出调试文本 (“https://bbs.125.la/thread-14731053-1-1.html”)
        .如果真结束
        
    .如果真结束
    
    .如果 (寻找文本 (下载地址, “://”, , 假) ＝ -1)
        变量_F1F70225 ＝ “http://” ＋ 下载地址
    .否则
        变量_F1F70225 ＝ 下载地址
    .如果结束
    .如果 (文件是否存在 (保存路径))
        .判断开始 (任务类型 ＝ 0)
            .如果 (删除文件 (保存路径))
                变量_F2F70225 ＝ 保存路径
            .否则
                返回 (假)
            .如果结束
            
        .判断 (任务类型 ＝ 1)
            .计次循环首 (99, 变量_F3F70225)
                变量_F2F70225 ＝ 保存路径
                变量_F2F70225 ＝ 文本_删右边 (变量_F2F70225, 取文本长度 (文件_取扩展名 (变量_F2F70225))) ＋ “(” ＋ 到文本 (变量_F3F70225) ＋ “)” ＋ 文件_取扩展名 (变量_F2F70225)
                .如果真 (文件是否存在 (变量_F2F70225) ＝ 假)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
        .默认
            返回 (真)
        .判断结束
        
    .否则
        变量_F2F70225 ＝ 保存路径
    .如果结束
    
    DeleteUrlCacheEntry (变量_F1F70225)
    返回 (DLL_URLDownloadToFileA (0, 变量_F1F70225, 变量_F2F70225, 0, 0) ＝ 0)

.子程序 文件_执行, 逻辑型, 公开, 执行文件夹或文件或命令(成功返回真,失败返回假)
    .参数 文件名, 文本型, , 欲操作(文件)或(文件夹的名称)或(网址)
    .参数 命令行, 文本型, 可空, 执行文件的命令行，没有则设为空
    .参数 窗口方式, 整数型, 可空, 0、普通激活方式；1、隐藏窗口；2、最小化窗口、3、最大化窗口

    返回 (文件_执行W (编码_Ansi到Unicode (文件名, ), 编码_Ansi到Unicode (命令行, ), 窗口方式))

.子程序 文件_执行W, 逻辑型, 公开, 执行文件夹或文件或命令
    .参数 文件名, 字节集, , 欲操作(文件)或(文件夹的名称)或(网址)
    .参数 命令行, 字节集, 可空, 执行文件的命令行，没有则设为空
    .参数 窗口方式, 整数型, 可空, 0、普通激活方式；1、隐藏窗口；2、最小化窗口、3、最大化窗口
    .局部变量 变量_72E80225, 整数型

    .如果 (窗口方式 ＜ 0 或 窗口方式 ＞ 3)
        变量_72E80225 ＝ #SW_SHOWNORMAL
    .否则
        变量_72E80225 ＝ 多项选择 (窗口方式 ＋ 1, #SW_SHOWNORMAL, #SW_HIDE, #SW_SHOWMINNOACTIVE, #SW_SHOWMAXIMIZED)
    .如果结束
    返回 (DLL_ShellExecuteW (#NULL, 编码_Ansi到Unicode (“Open”, ), 文件名, 命令行 ＋ { 0, 0 }, { 0, 0 }, 变量_72E80225) ≠ #<?未知本地类型?>)

.子程序 文件_定位, 逻辑型, 公开, 成功则打开文件所在目录并选中文件
    .参数 欲定位的文件, 文本型, , 需提供文件的绝对路径
    .参数 编辑模式, 逻辑型, 可空, 重命名模式

    返回 (文件_定位W (编码_Ansi到Unicode (欲定位的文件, ), 编辑模式))

.子程序 文件_定位W, 逻辑型, 公开, 成功则打开文件所在目录并选中文件
    .参数 欲定位的文件, 字节集, , 需提供文件的绝对路径
    .参数 编辑模式, 逻辑型, 可空, 重命名模式
    .局部变量 变量_01E80225, 整数型
    .局部变量 变量_03E80225, 整数型

    .如果真 (DLL_PathFileExistsW (欲定位的文件) ＝ 假)
        返回 (假)
    .如果真结束
    变量_01E80225 ＝ DLL_ILCreateFromPathW (欲定位的文件)
    .如果真 (变量_01E80225 ＝ 0)
        返回 (假)
    .如果真结束
    CoInitialize (#NULL)
    变量_03E80225 ＝ SHOpenFolderAndSelectItems (变量_01E80225, 0, 0, 选择 (编辑模式, #<?未知本地类型?>, 0))
    CoUninitialize ()
    ILFree (变量_01E80225)
    返回 (变量_03E80225 ＝ #<?未知本地类型?>)

.子程序 文件_定位多个, 逻辑型, 公开, 成功则打开文件或文件夹所在目录并选中
    .参数 所在文件夹, 文本型
    .参数 欲定位的文件或文件夹, 文本型, 数组, 需提供文件或文件夹的绝对路径
    .局部变量 变量_4BE80225, 整数型
    .局部变量 变量_47E80225, 字节集, , "0"
    .局部变量 变量_4FE80225, 整数型

    变量_4BE80225 ＝ 取数组成员数 (欲定位的文件或文件夹)
    .计次循环首 (变量_4BE80225, 变量_4FE80225)
        加入成员 (变量_47E80225, 编码_Ansi到Unicode (欲定位的文件或文件夹 [变量_4FE80225], ))
    .计次循环尾 ()
    返回 (文件_定位多个W (编码_Ansi到Unicode (所在文件夹, ), 变量_47E80225))

.子程序 文件_定位多个W, 逻辑型, 公开, 成功则打开文件或文件夹所在目录并选中
    .参数 所在文件夹, 字节集
    .参数 欲定位的文件或文件夹, 字节集, 数组, 需提供文件或文件夹的绝对路径
    .局部变量 变量_1AE80225, 整数型
    .局部变量 变量_1BE80225, 整数型
    .局部变量 变量_2BE80225, 整数型
    .局部变量 变量_21E80225, 整数型, , "0"
    .局部变量 变量_26E80225, 整数型
    .局部变量 变量_1CE80225, 整数型

    .如果真 (DLL_PathIsDirectoryW (所在文件夹) ＝ 0)
        返回 (假)
    .如果真结束
    变量_1AE80225 ＝ DLL_ILCreateFromPathW (所在文件夹)
    .如果真 (变量_1AE80225 ＝ 0)
        返回 (假)
    .如果真结束
    变量_1BE80225 ＝ 取数组成员数 (欲定位的文件或文件夹)
    .计次循环首 (变量_1BE80225, 变量_1CE80225)
        变量_2BE80225 ＝ DLL_ILCreateFromPathW (欲定位的文件或文件夹 [变量_1CE80225])
        .如果真 (变量_2BE80225 ＝ 0)
            到循环尾 ()
        .如果真结束
        加入成员 (变量_21E80225, 变量_2BE80225)
    .计次循环尾 ()
    变量_1BE80225 ＝ 取数组成员数 (变量_21E80225)
    CoInitialize (#NULL)
    变量_26E80225 ＝ SHOpenFolderAndSelectItems (变量_1AE80225, 变量_1BE80225, 取数据_通用型_数组 (变量_21E80225), 0)
    CoUninitialize ()
    .计次循环首 (变量_1BE80225, 变量_1CE80225)
        ILFree (变量_21E80225 [变量_1CE80225])
    .计次循环尾 ()
    ILFree (变量_1AE80225)
    返回 (变量_26E80225 ＝ #<?未知本地类型?>)

.子程序 文件_取尺寸, 文本型, 公开, 直接大于2G以上超大文件
    .参数 参_文件名, 文本型, , 文件的完整路径
    .参数 参_格式化, 逻辑型, 可空, 格式化以B、KB、GB返回
    .局部变量 变量_8AF60125, 整数型
    .局部变量 变量_98F60125, 长整数型
    .局部变量 变量_9DF60125, 对象
    .局部变量 变量_A4F60125, 对象
    .局部变量 变量_A7F60125, 文本型
    .局部变量 变量_B1F60125, 文本型

    变量_8AF60125 ＝ DLL__lopen (参_文件名, 0)
    DLL_GetFileSizeEx (变量_8AF60125, 变量_98F60125)
    DLL__lclose (变量_8AF60125)
    .如果真 (变量_98F60125 ＝ 0)
        CoInitialize (0)
        变量_9DF60125.创建 (“scripting.FileSystemObject”, )
        变量_A4F60125 ＝ 变量_9DF60125.对象型方法 (“GetFile”, 参_文件名)
        变量_98F60125 ＝ 变量_A4F60125.读属性 (“Size”, ).取数值 ()
        变量_A4F60125.清除 ()
        变量_A4F60125.清除 ()
        CoUninitialize ()
    .如果真结束
    .如果真 (参_格式化)
        变量_B1F60125 ＝ 取空白文本 (20)
        DLL_StrFormatByteSize64A (变量_98F60125, 变量_B1F60125, 20)
        .如果真 (变量_B1F60125 ＝ “0 字节”)
            变量_B1F60125 ＝ “0”
        .如果真结束
        .如果真 (寻找文本 (变量_B1F60125, “字节”, , 假) ≠ 0)
            变量_B1F60125 ＝ 子文本替换 (变量_B1F60125, “字节”, “B”, , , 真)
        .如果真结束
        变量_A7F60125 ＝ 变量_B1F60125
    .如果真结束
    返回 (选择 (参_格式化, 变量_A7F60125, 到文本 (变量_98F60125)))

.子程序 文件_取实际大小, 长整数型, 公开, 获取一个文件在磁盘上实际占据的字节数，如文件右键属性中的大小，显示就是实际压缩过的尺寸
    .参数 文件路径, 文本型
    .局部变量 变量_3CE90225, 整数型
    .局部变量 变量_3DE90225, 整数型
    .局部变量 变量_59ED0125, 长整数型

    
    变量_3CE90225 ＝ GetCompressedFileSize (文件路径, 变量_3DE90225)
    .如果真 (变量_3CE90225 ＝ #<?未知本地类型?> 且 变量_3DE90225 ＝ 0)
        返回 (0)
    .如果真结束
    .如果 (变量_3CE90225 ＜ 0)
        变量_3CE90225 ＝ 位与 (变量_3CE90225, 2147483647)
        变量_59ED0125 ＝ 变量_3DE90225 × 4294967296 ＋ 2147483648 ＋ 变量_3CE90225
    .否则
        变量_59ED0125 ＝ 变量_3DE90225 × 4294967296 ＋ 变量_3CE90225
    .如果结束
    返回 (变量_59ED0125)

.子程序 文件_关联, , 公开, 关联指定后缀名到指定文件 (打开该后缀名文件,该后缀名文件路径将作为参数传递给指定文件)
    .参数 程序路径, 文本型, , 可空，关联到程序的路径，如果留空将取消关联。
    .参数 后缀, 文本型, , 欲关联的后缀名,多个后缀用|分开 (如: asp|htm|html)
    .参数 ICO图标路径, 文本型, 可空, 被关联文件的图标 可空为执行文件(程序)图标，也可以直接指向一个其它一个可执行的文件。
    .参数 文件类型, 文本型, 可空, 关联文件的说明 被关联文件属性中的文件类型
    .参数 关联名, 文本型, 可空, 可空为后缀
    .局部变量 变量_6F070125, 文本型, , "0"
    .局部变量 变量_70070125, 整数型
    .局部变量 变量_02B90125, 文本型

    变量_6F070125 ＝ 分割文本 (后缀, “|”, )
    .如果 (删首尾空 (程序路径) ＝ “”)
        .计次循环首 (取数组成员数 (变量_6F070125), 变量_70070125)
            变量_02B90125 ＝ 取文本注册项 (#根类, “.” ＋ 变量_6F070125 [变量_70070125] ＋ “\”, )
            删除注册项 (#根类, “\” ＋ 变量_02B90125 ＋ “\DefaultIcon”)
            删除注册项 (#根类, “\” ＋ 变量_02B90125 ＋ “\Shell\Open\Command”)
            删除注册项 (#根类, “\” ＋ 变量_02B90125 ＋ “\Shell\Open”)
            删除注册项 (#根类, “\” ＋ 变量_02B90125 ＋ “\Shell”)
            删除注册项 (#根类, “\” ＋ 变量_02B90125 ＋ “”)
            写注册项 (1, “.” ＋ 变量_6F070125 [变量_70070125] ＋ “\”, “”)
        .计次循环尾 ()
        
    .否则
        .如果真 (ICO图标路径 ＝ “”)
            ICO图标路径 ＝ 程序路径
        .如果真结束
        .如果真 (关联名 ＝ “”)
            关联名 ＝ 后缀
        .如果真结束
        写注册项 (1, 关联名 ＋ “\”, 文件类型)
        写注册项 (1, 关联名 ＋ “\EditFlags”, 2)
        写注册项 (1, 关联名 ＋ “\Shell\Open\Command\”, #引号 ＋ 程序路径 ＋ #引号 ＋ “ ” ＋ #引号 ＋ “%1” ＋ #引号)
        写注册项 (1, 关联名 ＋ “\DefaultIcon\”, ICO图标路径 ＋ “,0”)
        .计次循环首 (取数组成员数 (变量_6F070125), 变量_70070125)
            写注册项 (1, “.” ＋ 变量_6F070125 [变量_70070125] ＋ “\”, 关联名)
        .计次循环尾 ()
    .如果结束
    系统_刷新 ()

.子程序 文件_取关联, 文本型, 公开, 写入一个后缀，取得此后缀文档打开方式，失败则返回空文本
    .参数 后缀, 文本型, , 文件后缀，如"txt","*.txt",".txt"三者都可以
    .局部变量 变量_40280125, 文本型
    .局部变量 变量_41280125, 文本型

    后缀 ＝ 子文本替换 (后缀, “*”, , , , 真)
    后缀 ＝ 子文本替换 (后缀, “.”, , , , 真)
    变量_40280125 ＝ 取文本注册项 (#根类, “.” ＋ 后缀 ＋ “\”, )
    .如果真 (取文本长度 (变量_40280125) ＝ 0)
        返回 (“”)
    .如果真结束
    变量_41280125 ＝ 取文本注册项 (#根类, 变量_40280125 ＋ “\shell\”, “open”)
    变量_40280125 ＝ 取文本注册项 (#根类, 变量_40280125 ＋ “\shell\” ＋ 变量_41280125 ＋ “\command\”, )
    返回 (变量_40280125)

.子程序 文件_取关联W, 字节集, 公开, 获取文件关联
    .参数 文件扩展名, 字节集, , .txt
    .参数 hKey, 整数型, 参考 可空, RegCloseKey (hKey)
    .局部变量 变量_D9F70225, 整数型
    .局部变量 变量_DAF70225, 整数型
    .局部变量 变量_DBF70225, 整数型
    .局部变量 变量_DCF70225, 整数型
    .局部变量 变量_DDF70225, 字节集

    CoInitialize (#NULL)
    变量_D9F70225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_C7F70228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_C8F70228), 变量_DAF70225)
    .如果真 (变量_D9F70225 ＝ #<?未知本地类型?> 且 变量_DAF70225 ≠ #NULL)
        变量_D9F70225 ＝ CallObject (变量_DAF70225, #<?未知本地类型?>, #NULL, 取指针_字节集型 (文件扩展名), #NULL, #NULL, , , , , )
        .如果真 (变量_D9F70225 ＝ #<?未知本地类型?>)
            变量_D9F70225 ＝ CallObject (变量_DAF70225, #<?未知本地类型?>, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #<?未知本地类型?>, #NULL, #NULL, 取指针整数_ (变量_DBF70225), , , , )
            .如果真 (变量_D9F70225 ＝ #<?未知本地类型?> 且 变量_DBF70225 ＞ 0)
                变量_DCF70225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_DBF70225 × 2)
                变量_D9F70225 ＝ CallObject (变量_DAF70225, #<?未知本地类型?>, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #<?未知本地类型?>, #NULL, 变量_DCF70225, 取指针整数_ (变量_DBF70225), , , , )
                .如果真 (变量_D9F70225 ＝ #<?未知本地类型?> 且 指针_到字节集W (DLL_PathFindFileNameW (变量_DCF70225)) ≠ 编码_Ansi到Unicode (“OpenWith.exe”, ))
                    变量_DDF70225 ＝ 指针_到字节集W (变量_DCF70225)
                .如果真结束
                LocalFree (变量_DCF70225)
            .如果真结束
            .如果真 (是否为空 (hKey) ＝ 假)
                变量_D9F70225 ＝ CallObject (变量_DAF70225, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #NULL, 取指针整数_ (hKey), , , , , )
                
            .如果真结束
            
        .如果真结束
        SafeRelease (变量_DAF70225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_DDF70225)

.子程序 文件_取目录, 文本型, 公开, 取得文件所在目录的路径,如：局_项数组:\012\3600.exe 成功将返回 局_项数组:\012\
    .参数 路径文件名, 文本型, , 文件的完整地址

    .如果真 (文件_是否为目录 (路径文件名))
        返回 (路径文件名)
    .如果真结束
    返回 (取文本左边 (路径文件名, 倒找文本 (路径文件名, “\”, , 假)))

.子程序 文件_取目录W, 字节集, 公开, 取得文件所在目录的路径
    .参数 文件的绝对路径, 字节集
    .局部变量 变量_91E80225, 整数型

    .如果真 (文件_是否为目录W (文件的绝对路径))
        返回 (文件的绝对路径)
    .如果真结束
    变量_91E80225 ＝ 倒找字节集 (文件的绝对路径, { 92, 0 }, )
    .如果真 (变量_91E80225 ＝ -1)
        返回 ({ })
    .如果真结束
    返回 (取字节集左边 (文件的绝对路径, 变量_91E80225 ＋ 1) ＋ { 0, 0 })

.子程序 文件_取大小, 长整数型, 公开, 返回一个文件的长度，单位是字节
    .参数 文件的绝对路径, 文本型

    返回 (文件_取大小W (编码_Ansi到Unicode (文件的绝对路径, )))

.子程序 文件_取大小W, 长整数型, 公开, 返回一个文件的长度，单位是字节
    .参数 文件的绝对路径, 字节集
    .局部变量 变量_5BE80225, WIN32_FIND_DATAW
    .局部变量 变量_5CE80225, 整数型

    变量_5CE80225 ＝ DLL_FindFirstFileW (文件的绝对路径, 变量_5BE80225)
    .判断开始 (变量_5CE80225 ≠ #INVALID_HANDLE_VALUE)
        DLL_FindClose (变量_5CE80225)
        返回 (合并长整数 (变量_5BE80225.nFileSizeLow, 变量_5BE80225.nFileSizeHigh))
    .判断 (变量_5CE80225 ＝ #INVALID_HANDLE_VALUE)
        输出调试文本 (“错误：找不到文件”)
    .默认
        输出调试文本 (取错误信息文本_API (变量_5CE80225))
    .判断结束
    返回 (0)

.子程序 文件_相差数, 整数型
    .参数 变量_FF220125, 文本型
    .参数 变量_00230125, 文本型
    .局部变量 变量_01230125, 文本型
    .局部变量 变量_02230125, 文本型
    .局部变量 变量_03230125, 整数型

    变量_FF220125 ＝ 变量_FF220125 ＋ “\”
    变量_00230125 ＝ 变量_00230125 ＋ “\”
    创建目录 (变量_00230125)
    处理事件 ()
    变量_01230125 ＝ 寻找文件 (变量_FF220125 ＋ “*.*”, 39)
    .判断循环首 (变量_01230125 ≠ “”)
        .如果真 (文件是否存在 (变量_00230125 ＋ 变量_01230125) ＝ 假)
            变量_03230125 ＝ 变量_03230125 ＋ 1
        .如果真结束
        变量_01230125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    变量_02230125 ＝ 寻找文件 (变量_FF220125 ＋ “*.*”, 16)
    .判断循环首 (变量_02230125 ≠ “”)
        .如果真 (变量_02230125 ≠ “.” 且 变量_02230125 ≠ “..”)
            变量_03230125 ＝ 变量_03230125 ＋ 文件_相差数 (变量_FF220125 ＋ 变量_02230125, 变量_00230125 ＋ 变量_02230125)
        .如果真结束
        变量_02230125 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()
    返回 (变量_03230125)
    

.子程序 文件_循环删除, , 公开, 删除指定的文件
    .参数 文件名, 文本型
    .参数 超时, 整数型, 可空, 毫秒，默认3秒
    .局部变量 变量_6CC30125, 整数型

    .如果真 (超时 ＝ 0)
        超时 ＝ 3000
    .如果真结束
    变量_6CC30125 ＝ 取启动时间 ()
    .判断循环首 (文件是否存在 (文件名))
        置文件属性 (文件名, 0)
        删除文件 (文件名)
        .如果真 (取启动时间 () － 变量_6CC30125 ≥ 超时)
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()

.子程序 文件_创建, 整数型, 公开, 瞬间创建一个指定大小的文件，最大能创建 2,147,483,647 字节大小的文件。成功返回1，失败返回错误代码;
    .参数 文件路径, 文本型
    .参数 要创建的大小, 整数型, , 单位为字节,最大能创建 2,147,483,647 字节大小的文件
    .局部变量 变量_CCA00125, 整数型
    .局部变量 变量_A5DC0125, 整数型

    目录_创建 (文件_取目录 (文件路径))
    变量_CCA00125 ＝ CreateFileA (文件路径, #GENERIC_WRITE, 0, 0, #OPEN_ALWAYS, #FILE_ATTRIBUTE_ARCHIVE, 0)
    .如果真 (变量_CCA00125 ＝ #INVALID_HANDLE_VALUE)
        返回 (_GetLastError ())
    .如果真结束
    
    要创建的大小 ＝ SetFilePointer (变量_CCA00125, 要创建的大小, 0, 0)
    .如果 (要创建的大小 ＞ -1)
        .判断开始 (SetEndOfFile (变量_CCA00125) ＝ 0)
            变量_A5DC0125 ＝ _GetLastError ()
        .默认
            变量_A5DC0125 ＝ 1
        .判断结束
        
    .否则
        变量_A5DC0125 ＝ _GetLastError ()
    .如果结束
    
    CloseHandle (变量_CCA00125)
    
    .如果真 (变量_A5DC0125 ≠ 1)
        删除文件 (文件路径)
    .如果真结束
    返回 (变量_A5DC0125)

.子程序 文件_取格式, 整数型, 公开, 0=exe/dll；1=e/ec；3=rar；4=zip；5=7z；6=jpg；7=gif；8=swf；失败返回-1
    .参数 文件字节集, 字节集, , 可以用读入文件获取文件字节集
    .参数 返回文本格式, 文本型, 参考 可空, 可留空；装载文本格式的变量；如是exe格式的直接返回exe,失败返回空文本
    .局部变量 变量_A49B0225, 字节集

    变量_A49B0225 ＝ 取字节集左边 (文件字节集, 30)
    .判断开始 (取字节集左边 (变量_A49B0225, 2) ＝ 到字节集 (“MZ”))
        返回文本格式 ＝ “exe/dll”
        返回 (0)
    .判断 (取字节集左边 (变量_A49B0225, 8) ＝ 到字节集 (“CNWTEPRG”))
        返回文本格式 ＝ “e/ec”
        返回 (1)
    .判断 (取字节集左边 (变量_A49B0225, 3) ＝ 到字节集 (“Rar”))
        返回文本格式 ＝ “rar”
        返回 (3)
    .判断 (取字节集左边 (变量_A49B0225, 2) ＝ 到字节集 (“PK”))
        返回文本格式 ＝ “zip”
        返回 (4)
    .判断 (取字节集左边 (变量_A49B0225, 2) ＝ 到字节集 (“7z”))
        返回文本格式 ＝ “7z”
        返回 (5)
    .判断 (取字节集左边 (变量_A49B0225, 24) ＝ 到字节集 (“Content-Type: image/jpeg”) 或 取字节集左边 (变量_A49B0225, 3) ＝ { 255, 216, 255 })
        返回文本格式 ＝ “jpg”
        返回 (6)
    .判断 (取字节集左边 (变量_A49B0225, 6) ＝ 到字节集 (“GIF89a”))
        返回文本格式 ＝ “gif”
        返回 (7)
    .判断 (取字节集左边 (变量_A49B0225, 3) ＝ 到字节集 (“FWS”))
        返回文本格式 ＝ “swf”
        返回 (8)
    .默认
        
    .判断结束
    返回 (-1)

.子程序 文件_复制, 逻辑型, 公开, 成功返回真，失败返回假。本命令为初级命令
    .参数 被复制文件名, 文本型, , 被复制文件名
    .参数 复制到文件名, 文本型, , 复制到文件名
    .参数 是否覆盖, 整数型, 可空, 可空。默认为直接覆盖。0=覆盖，非0不覆盖

    返回 (CopyFileA (被复制文件名, 复制到文件名, 是否覆盖))

.子程序 文件_复制W, 逻辑型, 公开, 成功返回真
    .参数 被复制的文件名, 字节集
    .参数 复制到的文件名, 字节集
    .参数 是否覆盖, 逻辑型

    返回 (DLL_CopyFileW (被复制的文件名, 复制到的文件名, 取反 (是否覆盖)))

.子程序 文件_取时间, 逻辑型, 公开, 返回文件的创建时间、修改时间、访问时间
    .参数 文件名, 文本型
    .参数 创建时间, 文本型, 参考 可空, 存放创建时间的变量
    .参数 最后修改时间, 文本型, 参考 可空, 存放修改时间的变量
    .参数 最后访问时间, 文本型, 参考 可空, 存放访问时间的变量

    返回 (文件_取时间W (编码_Ansi到Unicode (文件名, ), 创建时间, 最后修改时间, 最后访问时间))

.子程序 文件_取时间W, 逻辑型, 公开, 返回文件的创建时间、修改时间、访问时间
    .参数 文件名, 字节集
    .参数 创建时间, 文本型, 参考 可空, 存放创建时间的变量
    .参数 最后修改时间, 文本型, 参考 可空, 存放修改时间的变量
    .参数 最后访问时间, 文本型, 参考 可空, 存放访问时间的变量
    .局部变量 变量_D7070325, 整数型
    .局部变量 变量_12ED0225, 整数型
    .局部变量 变量_13ED0225, FILETIME
    .局部变量 变量_17ED0225, FILETIME
    .局部变量 变量_18ED0225, FILETIME
    .局部变量 变量_30ED0225, 日期时间型
    .局部变量 变量_21ED0225, 逻辑型

    .如果真 (文件_是否为目录W (文件名))
        变量_D7070325 ＝ #<?未知本地类型?>
    .如果真结束
    变量_12ED0225 ＝ DLL_CreateFileW (文件名, 位或 (#GENERIC_READ, #GENERIC_WRITE), 位或 (#FILE_SHARE_READ, #FILE_SHARE_WRITE), 0, #OPEN_EXISTING, 变量_D7070325, 0)
    .如果真 (变量_12ED0225 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    变量_21ED0225 ＝ DLL_GetFileTime (变量_12ED0225, 变量_13ED0225, 变量_17ED0225, 变量_18ED0225)
    CloseHandle (变量_12ED0225)
    .如果真 (变量_21ED0225)
        变量_30ED0225 ＝ FileTimeToVariantTime (变量_13ED0225)
        创建时间 ＝ 时间_到文本 (变量_30ED0225, 1, , )
        变量_30ED0225 ＝ FileTimeToVariantTime (变量_17ED0225)
        最后访问时间 ＝ 时间_到文本 (变量_30ED0225, 1, , )
        变量_30ED0225 ＝ FileTimeToVariantTime (变量_18ED0225)
        最后修改时间 ＝ 时间_到文本 (变量_30ED0225, 1, , )
    .如果真结束
    返回 (变量_21ED0225)

.子程序 文件_置时间, 逻辑型, 公开, 修改文件的创建时间、修改时间、访问时间
    .参数 文件名, 文本型
    .参数 创建时间, 文本型, 可空, 时间格式为：2009-11-15 15:15:15
    .参数 最后修改时间, 文本型, 可空, 时间格式为：2009-11-15 15:15:15
    .参数 最后访问时间, 文本型, 可空, 时间格式为：2009-11-15 15:15:15

    返回 (文件_置时间W (编码_Ansi到Unicode (文件名, ), 创建时间, 最后修改时间, 最后访问时间))

.子程序 文件_置时间W, 逻辑型, 公开, 修改文件的创建时间、修改时间、访问时间
    .参数 文件名, 字节集
    .参数 创建时间, 文本型, 可空, 时间格式为：2009-11-15 15:15:15
    .参数 最后修改时间, 文本型, 可空, 时间格式为：2009-11-15 15:15:15
    .参数 最后访问时间, 文本型, 可空, 时间格式为：2009-11-15 15:15:15
    .局部变量 变量_5DED0225, FILETIME
    .局部变量 变量_5EED0225, FILETIME
    .局部变量 变量_5FED0225, FILETIME
    .局部变量 变量_60ED0225, 日期时间型
    .局部变量 变量_CF070325, 整数型
    .局部变量 变量_6BED0225, 整数型
    .局部变量 变量_6CED0225, 逻辑型

    变量_60ED0225 ＝ 到时间 (创建时间)
    .如果真 (变量_60ED0225 ≠ [1899年12月30日])
        变量_5DED0225 ＝ VariantTimeToFileTime (变量_60ED0225)
    .如果真结束
    变量_60ED0225 ＝ 到时间 (最后访问时间)
    .如果真 (变量_60ED0225 ≠ [1899年12月30日])
        变量_5EED0225 ＝ VariantTimeToFileTime (变量_60ED0225)
    .如果真结束
    变量_60ED0225 ＝ 到时间 (最后修改时间)
    .如果真 (变量_60ED0225 ≠ [1899年12月30日])
        变量_5FED0225 ＝ VariantTimeToFileTime (变量_60ED0225)
    .如果真结束
    .如果真 (文件_是否为目录W (文件名))
        变量_CF070325 ＝ #<?未知本地类型?>
    .如果真结束
    变量_6BED0225 ＝ DLL_CreateFileW (文件名, #GENERIC_WRITE, #FILE_SHARE_WRITE, 0, #OPEN_EXISTING, 变量_CF070325, 0)
    .如果真 (变量_6BED0225 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    变量_6CED0225 ＝ DLL_SetFileTime (变量_6BED0225, 变量_5DED0225, 变量_5EED0225, 变量_5FED0225)
    CloseHandle (变量_6BED0225)
    返回 (变量_6CED0225)

.子程序 文件_取扩展名, 文本型, 公开, 返回一个文件的后缀名,如：.jpg  如果没有后缀,返回空
    .参数 文件名, 文本型, , 需要处理的原始文件名

    返回 (PathFindExtensionA (文件名))

.子程序 文件_去扩展名, 逻辑型, 公开, 去掉指定文件路径的后缀
    .参数 原始文件名, 文本型, , 需要处理的原始文件名
    .局部变量 变量_82E40225, 文本型
    .局部变量 变量_83E40225, 逻辑型

    变量_82E40225 ＝ 文件_取扩展名 (原始文件名)
    .如果真 (变量_82E40225 ＝ “”)
        返回 (假)
    .如果真结束
    返回 (文件更名 (原始文件名, 取文本左边 (原始文件名, 取文本长度 (原始文件名) － 取文本长度 (变量_82E40225))))

.子程序 文件_改扩展名, 逻辑型, 公开, 改变一个文件的后缀名,成功返回真，失败返回假。
    .参数 原始文件名, 文本型, , 需要处理的原始文件名
    .参数 新扩展名, 文本型, , 后缀必须包含"."，如“.rar”,否则失败。
    .局部变量 变量_6FE20125, 文本型
    .局部变量 变量_73E20125, 文本型

    变量_6FE20125 ＝ 原始文件名
    变量_73E20125 ＝ PathFindExtensionA (新扩展名)
    .如果真 (取文本长度 (变量_73E20125) ＞ 1)
        PathRenameExtensionA (变量_6FE20125, 变量_73E20125)
        返回 (文件_改名 (原始文件名, 变量_6FE20125))
    .如果真结束
    返回 (假)

.子程序 文件_合并文件, 逻辑型, 公开, 将两个文件进行合并,生成一个新的文件
    .参数 合并文件名, 文本型, , 前一个文件名,最后生成的文件名也是它.
    .参数 被合并文件名, 文本型, , 要追加的文件名.
    .参数 生成文件名, 文本型, 可空, 如果空,以第一个文件名为准
    .局部变量 变量_86E40225, 整数型
    .局部变量 变量_87E40225, 逻辑型

    
    .如果 (是否为空 (生成文件名))
        变量_86E40225 ＝ 打开文件 (合并文件名, #读写, )
        .如果真 (变量_86E40225 ＝ 0)
            返回 (假)
        .如果真结束
        移到文件尾 (变量_86E40225)
        写出字节集 (变量_86E40225, 读入文件 (被合并文件名))
    .否则
        变量_86E40225 ＝ 打开文件 (生成文件名, #改写, )
        .如果真 (变量_86E40225 ＝ 0)
            返回 (假)
        .如果真结束
        移到文件尾 (变量_86E40225)
        写出字节集 (变量_86E40225, 读入文件 (合并文件名))
        写出字节集 (变量_86E40225, 读入文件 (被合并文件名))
    .如果结束
    关闭文件 (变量_86E40225)
    返回 (真)

.子程序 文件_是否存在, 逻辑型, 公开, 判断指定的文件是否存在
    .参数 文件名, 文本型, , 文件全路径

    返回 (文件_是否存在W (编码_Ansi到Unicode (文件名)))

.子程序 文件_是否存在W, 逻辑型, 公开, 判断指定的文件是否存在
    .参数 文件的绝对路径, 字节集
    .局部变量 变量_DFED0225, 整数型
    .局部变量 变量_E0ED0225, WIN32_FIND_DATAW

    变量_DFED0225 ＝ DLL_FindFirstFileW (文件的绝对路径, 变量_E0ED0225)
    .如果真 (变量_DFED0225 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    DLL_FindClose (变量_DFED0225)
    返回 (位与 (变量_E0ED0225.dwFileAttributes, #FILE_ATTRIBUTE_DIRECTORY) ＝ 0)

.子程序 文件_取文件名, 文本型, 公开, 如：局_项数组:\123.exe 成功返回123
    .参数 路径文件名, 文本型, , 文件完整地址
    .参数 是否带后缀, 逻辑型, 可空, 默认为假，不带后缀；真为带后缀
    .局部变量 变量_E6E90125, 文本型

    变量_E6E90125 ＝ DLL_PathFindFileNameA (路径文件名)
    .如果真 (取文本右边 (变量_E6E90125, 1) ＝ “\”)
        
        返回 (“”)
    .如果真结束
    
    返回 (选择 (是否带后缀, 变量_E6E90125, 取文本左边 (变量_E6E90125, 取文本长度 (变量_E6E90125) － 取文本长度 (文件_取扩展名 (变量_E6E90125)))))

.子程序 文件_移动, 逻辑型, 公开, 移动指定文件到指定的文件位置
    .参数 欲移动的文件名, 文本型, , 欲移动的文件名
    .参数 移动到的文件名, 文本型, , 移动到的文件名

    返回 (MoveFileA (欲移动的文件名, 移动到的文件名))

.子程序 文件_移动W, 逻辑型, 公开, 将文件从一个位置移动到另外一个位置
    .参数 被移动的文件, 字节集
    .参数 移动到的位置, 字节集

    返回 (DLL_MoveFileW (被移动的文件, 移动到的位置))

.子程序 文件_搜索, , 公开, 可以设置显示标签和自动加入到列表框,可以当成枚举文件命令
    .参数 欲寻找的目录, 文本型, , 如：C:,表示C盘,记得C字后面两点一定要写，目录不以\结尾会自动添加
    .参数 加入的列表框, 列表框
    .参数 文件类型, 文本型, 可空, 可空：默认为*.*,也就是全部类型。 如填 *.txt只找txt类型的文件
    .参数 文件名包含的关键字, 文本型, 可空, 搜索文件名中 包含的关键字。如： 精易论坛.exe 只需要 精易就可以了
    .参数 显示标签, 标签, 可空, 用来显示搜索路径的标签
    .参数 是否带路径, 逻辑型, 可空, 默认为假； 真=带目录路径，如C:\012.txt； 假=不带，如 012.txt；
    .局部变量 变量_2BD30125, 文本型
    .局部变量 变量_2CD30125, 文本型
    .局部变量 变量_2DD30125, 逻辑型
    .局部变量 变量_2ED30125, 逻辑型
    .局部变量 变量_2FD30125, 逻辑型

    欲寻找的目录 ＝ 选择 (取文本右边 (欲寻找的目录, 1) ≠ “\”, 欲寻找的目录 ＋ “\”, 欲寻找的目录)
    文件类型 ＝ 选择 (是否为空 (文件类型), “*.*”, 文件类型)
    变量_2ED30125 ＝ 选择 (是否为空 (文件名包含的关键字), 假, 真)
    变量_2DD30125 ＝ 选择 (是否为空 (显示标签), 假, 真)
    
    变量_2CD30125 ＝ 寻找文件 (欲寻找的目录 ＋ 文件类型, )
    
    .判断循环首 (变量_2CD30125 ≠ “”)
        .如果真 (变量_2DD30125)
            显示标签.标题 ＝ 欲寻找的目录 ＋ 变量_2CD30125
            显示标签.刷新显示 ()
        .如果真结束
        .判断开始 (变量_2ED30125 ＝ 假)
            .判断开始 (是否带路径)
                加入的列表框.加入项目 (欲寻找的目录 ＋ 变量_2CD30125, )
            .默认
                加入的列表框.加入项目 (变量_2CD30125, )
            .判断结束
            
        .判断 (寻找文本 (到小写 (变量_2CD30125), 到小写 (文件名包含的关键字), , 假) ≠ -1)
            .判断开始 (是否带路径)
                加入的列表框.加入项目 (欲寻找的目录 ＋ 变量_2CD30125, )
            .默认
                加入的列表框.加入项目 (变量_2CD30125, )
            .判断结束
            
        .默认
            
        .判断结束
        
        处理事件 ()
        变量_2CD30125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    
    变量_2BD30125 ＝ 寻找文件 (欲寻找的目录 ＋ “*.*”, #子目录)
    .判断循环首 (变量_2BD30125 ≠ “”)
        .如果真 (取文本左边 (变量_2BD30125, 1) ≠ “.”)
            .判断开始 (变量_2DD30125)
                文件_搜索 (欲寻找的目录 ＋ 变量_2BD30125 ＋ “\”, 加入的列表框, 文件类型, 文件名包含的关键字, 显示标签, 是否带路径)
            .默认
                文件_搜索 (欲寻找的目录 ＋ 变量_2BD30125 ＋ “\”, 加入的列表框, 文件类型, 文件名包含的关键字, , 是否带路径)
            .判断结束
            处理事件 ()
        .如果真结束
        变量_2BD30125 ＝ 寻找文件 (, #子目录)
        处理事件 ()
    .判断循环尾 ()

.子程序 文件_搜索1, , 公开, 搜索指定的文件路径中的指定后缀的文件并加入到列表框中  在一个子程序中多次调用此命令需清除文件数组后再调用
    .参数 欲寻找的目录, 文本型, , 如：C:,表示C盘,记得C字后面两点一定要写
    .参数 欲寻找的文件名, 文本型, , 如果寻找全部文件可以填入*.*或*.txt只找txt文件
    .参数 加入的列表框, 列表框, 可空, 把搜到的加到列表框中
    .参数 是否带路径, 逻辑型, 可空, 默认为假； 真=带目录路径，如C:\012.txt； 假=不带，如 012.txt；
    .参数 文件数组, 文本型, 可空 数组
    .局部变量 变量_607E0225, 文本型
    .局部变量 变量_617E0225, 文本型

    .如果真 (取文本右边 (欲寻找的目录, 1) ≠ “\”)
        欲寻找的目录 ＝ 欲寻找的目录 ＋ “\”
    .如果真结束
    变量_617E0225 ＝ 寻找文件 (欲寻找的目录 ＋ 欲寻找的文件名, )
    .判断循环首 (变量_617E0225 ≠ “”)
        .如果 (是否为空 (加入的列表框) ＝ 假)
            .判断开始 (是否带路径 ＝ 真)
                加入的列表框.加入项目 (欲寻找的目录 ＋ 变量_617E0225, )
                加入成员 (文件数组, 欲寻找的目录 ＋ 变量_617E0225)
            .默认
                加入的列表框.加入项目 (变量_617E0225, )
                加入成员 (文件数组, 变量_617E0225)
            .判断结束
            
        .否则
            .判断开始 (是否带路径 ＝ 真)
                加入成员 (文件数组, 欲寻找的目录 ＋ 变量_617E0225)
            .默认
                加入成员 (文件数组, 变量_617E0225)
            .判断结束
            
        .如果结束
        处理事件 ()
        变量_617E0225 ＝ 寻找文件 (, )
    .判断循环尾 ()
    变量_607E0225 ＝ 寻找文件 (欲寻找的目录 ＋ “*.*”, #子目录)
    .判断循环首 (变量_607E0225 ≠ “”)
        .如果真 (取文本左边 (变量_607E0225, 1) ≠ “.”)
            处理事件 ()
            .如果 (是否为空 (加入的列表框) ＝ 假)
                文件_搜索1 (欲寻找的目录 ＋ 变量_607E0225 ＋ “\”, 欲寻找的文件名, 加入的列表框, 是否带路径, 文件数组)
            .否则
                文件_搜索1 (欲寻找的目录 ＋ 变量_607E0225 ＋ “\”, 欲寻找的文件名, , 是否带路径, 文件数组)
            .如果结束
            
        .如果真结束
        变量_607E0225 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()
    

.子程序 文件_搜索_深度, , 公开, 无返回值，可以根据目录深度进行回调搜索，从而提高运行效率。
    .参数 欲寻找的目录, 文本型, , 如：C:,表示C盘,记得C字后面两点一定要写，目录不以\结尾会自动添加
    .参数 装载函数, 子程序指针, , 需要一个参数接收回调，名称为;文件路径[文本型].
    .参数 文件类型, 文本型, 可空, 可空：默认为*.*,也就是全部类型。 如填 *.txt只找txt类型的文件
    .参数 目录深度, 整数型, 可空, 可空：默认为-1，即不限制目录深度。
    .局部变量 变量_34D30125, 文本型
    .局部变量 变量_35D30125, 文本型, , "0"
    .局部变量 变量_36D30125, 文本型

    处理事件 ()
    欲寻找的目录 ＝ 选择 (取文本右边 (欲寻找的目录, 1) ≠ “\”, 欲寻找的目录 ＋ “\”, 欲寻找的目录)
    .如果真 (是否为空 (文件类型))
        文件类型 ＝ “*.*”
    .如果真结束
    .如果真 (是否为空 (目录深度))
        目录深度 ＝ -1
    .如果真结束
    变量_34D30125 ＝ 寻找文件 (欲寻找的目录 ＋ 文件类型, )
    .判断循环首 (变量_34D30125 ≠ “”)
        变量_36D30125 ＝ 欲寻找的目录 ＋ 变量_34D30125
        程序_Call (到整数 (装载函数), lstrcpyn_文本型 (变量_36D30125, 变量_36D30125, 0))
        变量_34D30125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    变量_34D30125 ＝ 寻找文件 (欲寻找的目录 ＋ “*.*”, 16)
    .判断循环首 (变量_34D30125 ≠ “”)
        .如果真 (变量_34D30125 ≠ “.” 且 变量_34D30125 ≠ “..”)
            变量_35D30125 ＝ 分割文本 (欲寻找的目录 ＋ 变量_34D30125, “\”, )
            .如果 (目录深度 ＝ -1)
                文件_搜索_深度 (欲寻找的目录 ＋ 变量_34D30125, 装载函数, 文件类型, 目录深度)
            .否则
                .如果真 (取数组成员数 (变量_35D30125) ＜ 目录深度 ＋ 1)
                    文件_搜索_深度 (欲寻找的目录 ＋ 变量_34D30125, 装载函数, 文件类型, 目录深度)
                .如果真结束
                
            .如果结束
            
        .如果真结束
        变量_34D30125 ＝ 寻找文件 (, 16)
    .判断循环尾 ()

.子程序 文件_枚举, 整数型, 公开, 枚举某个目录下的指定类型文件；成功返回文件数量；
    .参数 欲寻找的目录, 文本型, , 文件目录
    .参数 欲寻找的文件名, 文本型, , 如果寻找全部文件可以填入*.*，或*.txt只找txt文件, 多个后缀中间用“|”隔开
    .参数 文件数组, 文本型, 参考 可空 数组, 用于装载文件数组的变量；把寻找到的文件都放在这个数组里，并返回；
    .参数 是否带路径, 逻辑型, 可空, 默认为假； 真=带目录路径，如C:\012.txt； 假=不带，如 012.txt；
    .参数 是否按字母排序, 逻辑型, 可空, 默认为假；真=按字母a-z排序  假=不排序
    .参数 是否遍历子目录, 逻辑型, 可空, 留空默认为假；为真时文件数组不主动清空
    .局部变量 变量_474E0125, 文本型
    .局部变量 变量_85B90125, 文本型
    .局部变量 变量_C2E40225, 文本型, , "0"
    .局部变量 变量_C3E40225, 整数型
    .局部变量 变量_C4E40225, 整数型

    .如果真 (是否遍历子目录 ＝ 假)
        清除数组 (文件数组)
    .如果真结束
    变量_85B90125 ＝ 欲寻找的目录
    .如果真 (取文本右边 (变量_85B90125, 1) ≠ “\”)
        变量_85B90125 ＝ 变量_85B90125 ＋ “\”
    .如果真结束
    变量_C2E40225 ＝ 分割文本 (欲寻找的文件名, “|”, )
    变量_C3E40225 ＝ 取数组成员数 (变量_C2E40225)
    .计次循环首 (变量_C3E40225, 变量_C4E40225)
        变量_474E0125 ＝ 寻找文件 (变量_85B90125 ＋ 变量_C2E40225 [变量_C4E40225], )
        .判断循环首 (变量_474E0125 ≠ “”)
            .如果真 (是否带路径)
                变量_474E0125 ＝ 变量_85B90125 ＋ 变量_474E0125
            .如果真结束
            加入成员 (文件数组, 变量_474E0125)
            系统_处理事件1 ()
            变量_474E0125 ＝ 寻找文件 (, )
        .判断循环尾 ()
    .计次循环尾 ()
    .如果真 (是否按字母排序)
        数组_排序 (文件数组, 0, )
    .如果真结束
    .如果真 (是否遍历子目录)
        变量_474E0125 ＝ 寻找文件 (变量_85B90125 ＋ “*.*”, #子目录)
        .判断循环首 (变量_474E0125 ≠ “”)
            .如果真 (变量_474E0125 ≠ “.” 且 变量_474E0125 ≠ “..”)
                文件_枚举 (变量_85B90125 ＋ 变量_474E0125, 欲寻找的文件名, 文件数组, 是否带路径, 是否按字母排序, 是否遍历子目录)
                系统_处理事件1 ()
            .如果真结束
            变量_474E0125 ＝ 寻找文件 (, #子目录)
        .判断循环尾 ()
    .如果真结束
    返回 (取数组成员数 (文件数组))

.子程序 文件_枚举1, , 公开, 如提供搜索目录路径，将会搜索此目录所有在内的文件。
    .参数 目录, 文本型, , 目录，如“D:\”盘，目录不以\结尾会自动添加
    .参数 拓展名, 文本型, , “*.exe”
    .参数 装载函数, 子程序指针, , 二个参数，1=目录【文本型】；2=文件名【文本型】
    .局部变量 变量_2CC20125, 文本型
    .局部变量 变量_2DC20125, 文本型
    .局部变量 变量_41F80125, 文本型

    变量_41F80125 ＝ 目录
    .如果真 (取文本右边 (目录, 1) ≠ “\”)
        变量_41F80125 ＝ 目录 ＋ “\”
    .如果真结束
    变量_2CC20125 ＝ 寻找文件 (变量_41F80125 ＋ 拓展名, )
    .判断循环首 (变量_2CC20125 ≠ “”)
        程序_Call (到整数 (装载函数), lstrcpyn_文本型 (变量_41F80125, 变量_41F80125, 0), lstrcpyn_文本型 (变量_2CC20125, 变量_2CC20125, 0))
        变量_2CC20125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    变量_2CC20125 ＝ 寻找文件 (变量_41F80125 ＋ “*.*”, #子目录)
    .判断循环首 (变量_2CC20125 ≠ “”)
        .如果真 (取文本左边 (变量_2CC20125, 1) ≠ “.”)
            变量_2CC20125 ＝ 变量_41F80125 ＋ 变量_2CC20125
            文件_枚举1 (变量_2CC20125, 拓展名, 装载函数)
        .如果真结束
        变量_2CC20125 ＝ 寻找文件 (, #子目录)
        系统_处理事件1 ()
    .判断循环尾 ()

.子程序 文件_枚举W, 整数型, 公开, 枚举某个目录下的指定类型文件，成功返回文件数组。
    .参数 欲寻找的目录, 字节集
    .参数 欲寻找的文件名, 字节集, 可空, *为寻找全部文件
    .参数 文件数组, 字节集, 参考 可空 数组
    .参数 是否带路径, 逻辑型, 可空, 为真时返回文件为绝对路径
    .参数 是否遍历子目录, 逻辑型, 可空, 为真时文件数组不主动清空
    .参数 是否枚举文件夹, 逻辑型, 可空, 为真时只枚举文件夹
    .局部变量 变量_C0E90225, 字节集
    .局部变量 变量_C1E90225, WIN32_FIND_DATAW
    .局部变量 变量_C2E90225, 整数型
    .局部变量 变量_C3E90225, 整数型
    .局部变量 变量_C4E90225, 整数型
    .局部变量 变量_C5E90225, 字节集
    .局部变量 变量_8CEC0225, 整数型

    变量_C0E90225 ＝ 删除Unicode结尾空白字节 (欲寻找的目录, )
    .如果真 (取字节集右边 (变量_C0E90225, 2) ≠ { 92, 0 })
        变量_C0E90225 ＝ 变量_C0E90225 ＋ { 92, 0 }
    .如果真结束
    .如果真 (是否遍历子目录 ＝ 假)
        清除数组 (文件数组)
    .如果真结束
    .如果 (欲寻找的文件名 ＝ { } 或 欲寻找的文件名 ＝ { 0, 0 })
        变量_C2E90225 ＝ DLL_FindFirstFileW (变量_C0E90225 ＋ { 42, 0, 0, 0 }, 变量_C1E90225)
    .否则
        变量_C2E90225 ＝ DLL_FindFirstFileW (变量_C0E90225 ＋ 欲寻找的文件名, 变量_C1E90225)
    .如果结束
    .如果真 (变量_C2E90225 ≠ #INVALID_HANDLE_VALUE)
        .循环判断首 ()
            .如果真 (是否枚举文件夹 ＝ 假 且 位与 (变量_C1E90225.dwFileAttributes, #FILE_ATTRIBUTE_DIRECTORY) ≠ 0 或 (是否枚举文件夹 且 位与 (变量_C1E90225.dwFileAttributes, #FILE_ATTRIBUTE_DIRECTORY) ＝ 0))
                到循环尾 ()
            .如果真结束
            变量_C3E90225 ＝ 取数据_通用型_数组 (变量_C1E90225.cFileName)
            .如果真 (变量_C3E90225 ＝ 0)
                到循环尾 ()
            .如果真结束
            变量_C4E90225 ＝ DLL_lstrlenW (变量_C3E90225)
            .如果真 (变量_C4E90225 ＝ 0)
                到循环尾 ()
            .如果真结束
            变量_C5E90225 ＝ 指针到字节集 (变量_C3E90225, 变量_C4E90225 × 2 ＋ 2)
            .如果真 (变量_C5E90225 ＝ { 46, 0, 0, 0 } 或 变量_C5E90225 ＝ { 46, 0, 46, 0, 0, 0 })
                到循环尾 ()
            .如果真结束
            .如果 (是否带路径)
                加入成员 (文件数组, 变量_C0E90225 ＋ 变量_C5E90225)
            .否则
                加入成员 (文件数组, 变量_C5E90225)
            .如果结束
            
        .循环判断尾 (DLL_FindNextFileW (变量_C2E90225, 变量_C1E90225))
        DLL_FindClose (变量_C2E90225)
    .如果真结束
    .如果真 (是否遍历子目录)
        变量_C2E90225 ＝ DLL_FindFirstFileW (变量_C0E90225 ＋ { 42, 0, 0, 0 }, 变量_C1E90225)
        .如果真 (变量_C2E90225 ≠ #INVALID_HANDLE_VALUE)
            .循环判断首 ()
                变量_C3E90225 ＝ 取数据_通用型_数组 (变量_C1E90225.cFileName)
                .如果真 (变量_C3E90225 ＝ 0)
                    到循环尾 ()
                .如果真结束
                变量_C4E90225 ＝ DLL_lstrlenW (变量_C3E90225)
                .如果真 (变量_C4E90225 ＝ 0)
                    到循环尾 ()
                .如果真结束
                变量_C5E90225 ＝ 指针到字节集 (变量_C3E90225, 变量_C4E90225 × 2 ＋ 2)
                .如果真 (变量_C5E90225 ＝ { 46, 0, 0, 0 } 或 变量_C5E90225 ＝ { 46, 0, 46, 0, 0, 0 })
                    到循环尾 ()
                .如果真结束
                .如果真 (位与 (变量_C1E90225.dwFileAttributes, #FILE_ATTRIBUTE_DIRECTORY) ≠ 0)
                    文件_枚举W (变量_C0E90225 ＋ 变量_C5E90225, 欲寻找的文件名, 文件数组, 是否带路径, 是否遍历子目录, 是否枚举文件夹)
                .如果真结束
                
            .循环判断尾 (DLL_FindNextFileW (变量_C2E90225, 变量_C1E90225))
            DLL_FindClose (变量_C2E90225)
        .如果真结束
        
    .如果真结束
    变量_8CEC0225 ＝ 取数组成员数 (文件数组)
    返回 (变量_8CEC0225)

.子程序 删除Unicode结尾空白字节, 字节集, 公开
    .参数 欲被处理的字节集, 字节集
    .参数 标准Unicode编码, 逻辑型, 可空, 默认为假，非标准Unicode编码
    .局部变量 变量_8FEB0225, 整数型
    .局部变量 变量_93EB0225, 整数型
    .局部变量 变量_98EB0225, 短整数型
    .局部变量 变量_97EB0225, 整数型

    变量_8FEB0225 ＝ 取字节集长度 (欲被处理的字节集)
    .如果真 (变量_8FEB0225 ＜ 2)
        返回 ({ })
    .如果真结束
    变量_93EB0225 ＝ 取指针_字节集型 (欲被处理的字节集)
    .变量循环首 (0, 变量_8FEB0225 － 2, 2, 变量_97EB0225)
        变量_98EB0225 ＝ 指针_到短整数型_汇编 (变量_93EB0225 ＋ 变量_97EB0225)
        .如果真 (变量_98EB0225 ＝ 0)
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .判断开始 (变量_97EB0225 ＝ 0 或 变量_97EB0225 ＞ 变量_8FEB0225)
        返回 ({ })
    .判断 (标准Unicode编码)
        返回 (指针到字节集 (变量_93EB0225, 变量_97EB0225) ＋ { 0, 0 })
    .默认
        返回 (指针到字节集 (变量_93EB0225, 变量_97EB0225))
    .判断结束
    

.子程序 文件_枚举_队列, , 公开
    .参数 参_目录, 文本型
    .参数 参_文件名, 文本型
    .参数 参_是否遍历子目录, 逻辑型, 可空
    .参数 参_回调函数, 子程序指针, , 参数1:文本型:目录 参数2:文本型:文件名
    .局部变量 变量_9FF70225, 类_队列
    .局部变量 变量_A0F70225, 文本型
    .局部变量 变量_A1F70225, 文本型
    .局部变量 变量_A2F70225, 文本型

    变量_A0F70225 ＝ 参_目录
    .如果真 (取文本右边 (变量_A0F70225, 1) ≠ “\”)
        变量_A0F70225 ＝ 变量_A0F70225 ＋ “\”
    .如果真结束
    变量_9FF70225.压入文本 (变量_A0F70225)
    .判断循环首 (变量_9FF70225.弹出文本 (变量_A2F70225))
        变量_A1F70225 ＝ 寻找文件 (变量_A2F70225 ＋ 参_文件名, )
        .判断循环首 (变量_A1F70225 ≠ “”)
            程序_Call (到整数 (参_回调函数), 取指针_文本型 (变量_A2F70225), 取指针_文本型 (变量_A1F70225), , , )
            变量_A1F70225 ＝ 寻找文件 (, )
        .判断循环尾 ()
        .如果真 (取反 (参_是否遍历子目录))
            到循环尾 ()
        .如果真结束
        变量_A1F70225 ＝ 寻找文件 (变量_A2F70225 ＋ “*.*”, #子目录)
        .判断循环首 (变量_A1F70225 ≠ “”)
            .如果真 (变量_A1F70225 ≠ “.” 且 变量_A1F70225 ≠ “..”)
                变量_9FF70225.压入文本 (变量_A2F70225 ＋ 变量_A1F70225 ＋ “\”)
            .如果真结束
            变量_A1F70225 ＝ 寻找文件 (, #子目录)
        .判断循环尾 ()
    .判断循环尾 ()

.子程序 文件_删除, 逻辑型, 公开, 删除指定路径的文件
    .参数 欲删除的文件名, 文本型, , 欲删除的文件名

    返回 (DeleteFileA (欲删除的文件名))

.子程序 文件_删除W, 逻辑型, 公开, 删除指定路径的文件
    .参数 欲删除的文件名, 字节集

    返回 (DLL_DeleteFileW (欲删除的文件名))

.子程序 文件_删除到回收站, 逻辑型, 公开, 将指定文件删除到回收站,成功返回真,失败返回假[V雪落有声V]
    .参数 欲删除的文件名, 文本型, , 欲删除的全路径文件名
    .参数 删除方式选项, 整数型, 可空, 1: 不询问删除;  2: 不提示错误;  4: 不显示进度。如果被省略，默认值为 0 。

    返回 (文件_文件操作W (#<?未知本地类型?>, 编码_Ansi到Unicode (欲删除的文件名, ), , 删除方式选项))

.子程序 文件_删除配置节, , 公开, 删除指定配置文件中的节
    .参数 配置文件名, 文本型
    .参数 节名称, 文本型
    .局部变量 变量_B2040125, 文本型, , "2"
    .局部变量 变量_B3040125, 整数型, , "2"

    .如果真 (文件是否存在 (配置文件名))
        变量_B2040125 [1] ＝ 到文本 (读入文件 (配置文件名))
        变量_B3040125 [1] ＝ 寻找文本 (变量_B2040125 [1], “[” ＋ 节名称 ＋ “]”, , 假)
        .如果真 (变量_B3040125 [1] ＞ -1)
            变量_B3040125 [2] ＝ 寻找文本 (变量_B2040125 [1], “[”, 变量_B3040125 [1] ＋ 取文本长度 (节名称) ＋ 1, 假)
            .如果 (变量_B3040125 [2] ＝ -1)
                变量_B3040125 [2] ＝ 取文本长度 (变量_B2040125 [1])
            .否则
                变量_B3040125 [2] ＝ 变量_B3040125 [2] － 1
            .如果结束
            变量_B2040125 [2] ＝ 取文本左边 (变量_B2040125 [1], 变量_B3040125 [1] － 1) ＋ 取文本右边 (变量_B2040125 [1], 取文本长度 (变量_B2040125 [1]) － 变量_B3040125 [2])
            写到文件 (配置文件名, 到字节集 (变量_B2040125 [2]))
        .如果真结束
        
    .如果真结束
    

.子程序 文件_删除配置项, , 公开, 删除指定配置文件中的项
    .参数 配置文件名, 文本型
    .参数 节名称, 文本型
    .参数 配置项名称, 文本型
    .局部变量 变量_B7040125, 文本型, , "2"
    .局部变量 变量_B8040125, 整数型, , "3"

    .如果真 (文件是否存在 (配置文件名))
        写配置项 (配置文件名, 节名称, 配置项名称, “Mark2928198601074334”)
        变量_B7040125 [1] ＝ 到文本 (读入文件 (配置文件名))
        变量_B8040125 [2] ＝ 寻找文本 (变量_B7040125 [1], “Mark2928198601074334”, 1, 假)
        变量_B8040125 [1] ＝ 倒找文本 (变量_B7040125 [1], #换行符, 变量_B8040125 [2], 假)
        变量_B8040125 [3] ＝ 寻找文本 (变量_B7040125 [1], #换行符, 变量_B8040125 [2], 假)
        .如果真 (变量_B8040125 [3] ＝ -1)
            变量_B8040125 [3] ＝ 取文本长度 (变量_B7040125 [1])
        .如果真结束
        变量_B7040125 [2] ＝ 取文本左边 (变量_B7040125 [1], 变量_B8040125 [1]) ＋ 取文本右边 (变量_B7040125 [1], 取文本长度 (变量_B7040125 [1]) － 变量_B8040125 [3])
        写到文件 (配置文件名, 到字节集 (变量_B7040125 [2]))
    .如果真结束
    

.子程序 文件_取路径盘符, 文本型, 公开, 如 局_项数组:001\002\01\0104.txt返回 局_项数组:
    .参数 文件或目录名, 文本型
    .局部变量 变量_32280125, 对象

    CoInitialize (0)
    .如果真 (变量_32280125.创建 (“scripting.FileSystemObject”, ))
        返回 (变量_32280125.读文本属性 (“GetDriveName”, 文件或目录名))
    .如果真结束
    CoUninitialize ()
    返回 (“”)

.子程序 文件_到短文件名, 文本型, 公开, 返回短文件名
    .参数 文件名, 文本型
    .局部变量 变量_70ED0225, 字节集

    变量_70ED0225 ＝ 文件_到短文件名W (编码_Ansi到Unicode (文件名, ))
    返回 (编码_Unicode到Ansi (变量_70ED0225))

.子程序 文件_到短文件名W, 字节集, 公开, 返回短文件名
    .参数 完整路径, 字节集
    .局部变量 变量_12EA0225, 整数型
    .局部变量 变量_13EA0225, 字节集

    变量_12EA0225 ＝ DLL_GetShortPathNameW (完整路径, { 0, 0 }, 0)
    .如果真 (变量_12EA0225 ＞ 0)
        变量_13EA0225 ＝ 取空白字节集 (变量_12EA0225 × 2)
        DLL_GetShortPathNameW (完整路径, 变量_13EA0225, 变量_12EA0225)
    .如果真结束
    返回 (变量_13EA0225)

.子程序 文件_到长文件名, 文本型, 公开, 返回长文件名
    .参数 文件名, 文本型
    .局部变量 变量_4A750125, 文本型
    .局部变量 变量_4B750125, 整数型

    变量_4B750125 ＝ GetLongPathNameA (文件名, 变量_4A750125, 0)
    变量_4A750125 ＝ 取空白文本 (变量_4B750125)
    GetLongPathNameA (文件名, 变量_4A750125, 变量_4B750125)
    .如果真 (删首尾空 (变量_4A750125) ≠ “”)
        返回 (变量_4A750125)
    .如果真结束
    返回 (文件名)

.子程序 文件_改名, 逻辑型, 公开, 重新命名一个文件。成功返回真，失败返回假。本命令为初级命令。
    .参数 文件名, 文本型, , 文件名
    .参数 新文件名, 文本型, , 新文件名

    .如果真 (文件_路径是否规范 (新文件名) ＝ 假)
        输出调试文本 (“文件_改名 - 新文件名不规范，使用不规范的文件名会导致文件被删除。请更改参数[新文件名]”)
        返回 (假)
    .如果真结束
    返回 (文件更名 (文件名, 新文件名))

.子程序 文件_删除某类文件, 整数型, 公开, 支持通配符删除，写法如：删除文件("局_项数组:\","*.*")返回删除文件总数(有些文件由于某种原因可能未被删除)
    .参数 目录名, 文本型, , 最后不带"\",但可自动加上.
    .参数 扩展名, 文本型, , 如"*.BAT"或“ABC*.INI"，可以使用多字符 (*) 和单字符 (?) 通配符
    .参数 是否包含子目录, 逻辑型, 可空, 默认为假，不包含；真，包含。
    .参数 参_删除数量, 整数型, 可空, 此参数没用的,无需填写参数,否则返回的成功删除数量将不准确
    .局部变量 变量_49070125, 文本型
    .局部变量 变量_4A070125, 整数型

    变量_4A070125 ＝ 参_删除数量
    .如果真 (寻找文本 (扩展名, “.”, , 假) ＝ -1)
        提示框 (“扩展名有错,请返回检查,格式请看参数说明”)
        返回 (0)
    .如果真结束
    .如果真 (取文本右边 (目录名, 1) ≠ “\”)
        目录名 ＝ 目录名 ＋ “\”
    .如果真结束
    变量_49070125 ＝ 寻找文件 (目录名 ＋ 扩展名, )
    .判断循环首 (变量_49070125 ≠ “”)
        .如果真 (删除文件 (目录名 ＋ 变量_49070125))
            变量_4A070125 ＝ 变量_4A070125 ＋ 1
        .如果真结束
        变量_49070125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    .如果真 (是否包含子目录)
        变量_49070125 ＝ 寻找文件 (目录名 ＋ “*.*”, #子目录)
        .判断循环首 (变量_49070125 ≠ “”)
            .如果真 (取文本左边 (变量_49070125, 1) ≠ “.”)
                变量_4A070125 ＝ 文件_删除某类文件 (目录名 ＋ 变量_49070125, 扩展名, 是否包含子目录, 变量_4A070125)
            .如果真结束
            变量_49070125 ＝ 寻找文件 (, #子目录)
        .判断循环尾 ()
    .如果真结束
    返回 (变量_4A070125)

.子程序 文件_后缀是否关联, 整数型, 公开, 判断指定后缀名是否被关联(未关联返回-1 关联文件不存在返回0 已经关联返回1)
    .参数 后缀, 文本型, , 欲判断是否已经关联的后缀 ( 如 html )
    .局部变量 变量_4C070125, 文本型
    .局部变量 变量_4D070125, 整数型
    .局部变量 变量_4E070125, 整数型

    .如果真 (注册项是否存在 (1, “.” ＋ 后缀 ＋ “\”) ＝ 假)
        返回 (-1)
    .如果真结束
    变量_4C070125 ＝ 取文本注册项 (1, 取文本注册项 (1, “.” ＋ 后缀 ＋ “\”, ) ＋ “\Shell\Open\Command\”, )
    变量_4D070125 ＝ 寻找文本 (变量_4C070125, #引号, , 假)
    .如果 (变量_4D070125 ＝ -1)
        变量_4D070125 ＝ 寻找文本 (变量_4C070125, “ ”, , 假)
        .如果真 (变量_4D070125 ≠ -1)
            变量_4C070125 ＝ 取文本左边 (变量_4C070125, 变量_4D070125 － 1)
        .如果真结束
        
    .否则
        变量_4E070125 ＝ 寻找文本 (变量_4C070125, #引号, 变量_4D070125 ＋ 1, 假)
        变量_4C070125 ＝ 取文本中间 (变量_4C070125, 变量_4D070125 ＋ 1, 变量_4E070125 － 变量_4D070125 － 1)
    .如果结束
    .如果真 (文件是否存在 (变量_4C070125) ＝ 假)
        返回 (0)
    .如果真结束
    返回 (1)

.子程序 文件_创建文件目录, 逻辑型, 公开, 根据一个文件名创建出该文件名所包含的所有目录
    .参数 文件名, 文本型, , 完整路径的文件名
    .局部变量 变量_F5090125, 文本型
    .局部变量 变量_F6090125, 整数型

    .如果真 (取文本中间 (文件名, 2, 1) ≠ “:”)
        返回 (假)
    .如果真结束
    .判断循环首 (寻找文本 (文件名, “\”, 变量_F6090125 ＋ 1, 假) ≠ -1)
        变量_F6090125 ＝ 寻找文本 (文件名, “\”, 变量_F6090125 ＋ 1, 假)
        变量_F5090125 ＝ 取文本左边 (文件名, 变量_F6090125)
        创建目录 (变量_F5090125)
    .判断循环尾 ()
    返回 (真)

.子程序 文件_取配置节名数组, , 公开, 返回节名数组
    .参数 配置文件名, 文本型
    .参数 节名数组, 文本型, 参考 数组
    .局部变量 变量_BB040125, 文本型, , "2"
    .局部变量 变量_BC040125, 整数型

    .如果 (取反 (文件是否存在 (配置文件名)))
        
    .否则
        变量_BC040125 ＝ 打开文件 (配置文件名, #读入, #无限制)
        .判断循环首 (取反 (是否在文件尾 (变量_BC040125, 真)))
            变量_BB040125 [1] ＝ 读入一行 (变量_BC040125)
            .如果真 (取文本左边 (变量_BB040125 [1], 1) ＝ “[” 且 文本比较 (取文本左边 (变量_BB040125 [1], 寻找文本 (变量_BB040125 [1], “]”, 1, 真)), “[”, 假) ＞ 0)
                .如果 (变量_BB040125 [2] ≠ “”)
                    变量_BB040125 [2] ＝ 变量_BB040125 [2] ＋ “|” ＋ 取文本中间 (变量_BB040125 [1], 2, 寻找文本 (变量_BB040125 [1], “]”, 1, 真) － 2)
                .否则
                    变量_BB040125 [2] ＝ 取文本中间 (变量_BB040125 [1], 2, 寻找文本 (变量_BB040125 [1], “]”, 1, 真) － 2)
                .如果结束
                
            .如果真结束
            
        .判断循环尾 ()
        关闭文件 (变量_BC040125)
        节名数组 ＝ 分割文本 (变量_BB040125 [2], “|”, )
    .如果结束
    

.子程序 文件_取MP3播放时间, 文本型, 公开, Mp3文件的全曲时间,仅支持MP3文件,如果文件不存在，将返回空
    .参数 文件名, 文本型
    .参数 类型, 整数型, 可空, 0；总长度  1；分+秒  2；秒
    .局部变量 变量_81610225, 文本型
    .局部变量 变量_82610225, 文本型
    .局部变量 变量_83610225, 整数型
    .局部变量 变量_84610225, 整数型
    .局部变量 变量_85610225, 文本型

    变量_81610225 ＝ 取空白文本 (128)
    变量_82610225 ＝ 取空白文本 (256)
    GetShortPathNameA (文件名, 变量_82610225, 取文本长度 (变量_82610225))
    DLL_mciSendStringA2 (“open ” ＋ #引号 ＋ 变量_82610225 ＋ #引号 ＋ “ Alias movie notify”, 变量_81610225, 取文本长度 (变量_81610225), 0)
    变量_81610225 ＝ 取空白文本 (128)
    DLL_mciSendStringA2 (“status movie length”, 变量_81610225, 取文本长度 (变量_81610225), 0)
    变量_83610225 ＝ 到数值 (变量_81610225) ÷ 1000
    变量_84610225 ＝ 到整数 (变量_83610225 ÷ 60)
    变量_85610225 ＝ 文本_自动补零 (到文本 (变量_84610225), 2) ＋ “:” ＋ 文本_自动补零 (到文本 (变量_83610225 － 到数值 (变量_84610225 × 60)), 2)
    DLL_mciSendStringA2 (“close all”, 字符 (0), 0, #NULL)
    .判断开始 (类型 ＝ 1)
        返回 (变量_85610225)
    .判断 (类型 ＝ 2)
        返回 (到文本 (到整数 (变量_83610225)))
    .默认
        返回 (变量_81610225)
    .判断结束
    

.子程序 文件_取配置项名数组, 整数型, 公开, 返回指定配置文件中指定的节中所有的配置名称，以“|”为分界，如果配置文件不存在或配置文件中指定节为空将返回空文本
    .参数 配置文件名, 文本型
    .参数 节名名称, 文本型
    .参数 项名数组, 文本型, 参考 数组
    .局部变量 变量_32C30225, 文本型
    .局部变量 变量_36C30225, 整数型
    .局部变量 变量_3AC30225, 整数型
    .局部变量 变量_3FC30225, 文本型
    .局部变量 变量_47C30225, 文本型
    .局部变量 变量_C2040125, 文本型, , "0"
    .局部变量 变量_50C30225, 整数型
    .局部变量 变量_51C30225, 双精度小数型

    .如果 (取反 (文件是否存在 (配置文件名)))
        返回 (0)
    .否则
        变量_32C30225 ＝ 到文本 (读入文件 (配置文件名))
        变量_36C30225 ＝ 寻找文本 (变量_32C30225, “[” ＋ 节名名称 ＋ “]”, , 假)
        .如果真 (变量_36C30225 ＞ -1)
            变量_3AC30225 ＝ 寻找文本 (变量_32C30225, “[”, 变量_36C30225 ＋ 取文本长度 (节名名称) ＋ 1, 假)
            .如果真 (变量_3AC30225 ＝ -1)
                变量_3AC30225 ＝ 取文本长度 (变量_32C30225)
            .如果真结束
            变量_3FC30225 ＝ 取文本中间 (变量_32C30225, 变量_36C30225 ＋ 取文本长度 (节名名称) ＋ 4, 变量_3AC30225 － 变量_36C30225 － 取文本长度 (节名名称) － 4)
            .如果真 (寻找文本 (变量_3FC30225, “=”, , 假) ＞ -1)
                变量_C2040125 ＝ 分割文本 (变量_3FC30225, “=”, )
                .如果 (倒找文本 (变量_C2040125 [1], #换行符, , 真) ＞ -1)
                    变量_47C30225 ＝ 取文本右边 (变量_C2040125 [1], 取文本长度 (变量_C2040125 [1]) － 倒找文本 (变量_C2040125 [1], #换行符, , 真) － 1)
                .否则
                    变量_47C30225 ＝ 变量_C2040125 [1]
                .如果结束
                
                .如果 (取文本右边 (变量_32C30225, 2) ＝ #换行符)
                    变量_51C30225 ＝ 取数组成员数 (变量_C2040125) － 1
                .否则
                    变量_51C30225 ＝ 取数组成员数 (变量_C2040125)
                .如果结束
                
                
                .变量循环首 (2, 变量_51C30225, 1, 变量_50C30225)
                    变量_47C30225 ＝ 变量_47C30225 ＋ “|” ＋ 取文本右边 (变量_C2040125 [变量_50C30225], 取文本长度 (变量_C2040125 [变量_50C30225]) － 倒找文本 (变量_C2040125 [变量_50C30225], #换行符, , 真) － 1)
                .变量循环尾 ()
            .如果真结束
            
        .如果真结束
        项名数组 ＝ 分割文本 (变量_47C30225, “|”, )
    .如果结束
    返回 (取数组成员数 (项名数组))

.子程序 文件_取配置项名数组1, 整数型, 公开, 返回指定配置文件中所有已有节名的文本数组。本命令为初级命令。
    .参数 配置文件名, 文本型
    .参数 节名称, 文本型
    .参数 返回的配置项名数组, 文本型, 数组
    .局部变量 变量_4CD00125, 字节集
    .局部变量 变量_4DD00125, 字节集, , "0"
    .局部变量 变量_4ED00125, 整数型
    .局部变量 变量_4FD00125, 整数型
    .局部变量 变量_50D00125, 整数型
    .局部变量 变量_51D00125, 文本型
    .局部变量 变量_52D00125, 整数型

    清除数组 (返回的配置项名数组)
    变量_4CD00125 ＝ 字节集_取空白字节集 (32767)
    变量_4ED00125 ＝ DLL_GetPrivateProfileSectionA (节名称, 变量_4CD00125, 32767, 配置文件名)
    变量_4CD00125 ＝ 取字节集左边 (变量_4CD00125, 变量_4ED00125)
    变量_4DD00125 ＝ 分割字节集 (变量_4CD00125, { 0 }, )
    .计次循环首 (取数组成员数 (变量_4DD00125), 变量_50D00125)
        变量_51D00125 ＝ 到文本 (变量_4DD00125 [变量_50D00125])
        变量_52D00125 ＝ 寻找文本 (变量_51D00125, “=”, , 假)
        .如果真 (变量_52D00125 ≠ -1)
            变量_51D00125 ＝ 取文本左边 (变量_51D00125, 变量_52D00125 － 1)
        .如果真结束
        加入成员 (返回的配置项名数组, 变量_51D00125)
    .计次循环尾 ()
    返回 (取数组成员数 (变量_4DD00125))

.子程序 文件_取文本编码, 整数型, 公开, 获取指定路径的txt文档的编码格式。成功返回（1：UTF-8，2：Unicode；3：Unicode big endian；4：ANSI），默认返回 4。注：请确保文件能被正常读入。
    .参数 参_文件路径, 文本型
    .局部变量 变量_FDD50225, 字节集
    .局部变量 变量_FED50225, 整数型
    .局部变量 变量_FFD50225, 整数型

    
    变量_FDD50225 ＝ 读入文件 (参_文件路径)
    变量_FED50225 ＝ 取字节集长度 (变量_FDD50225)
    .判断开始 (变量_FED50225 ＞ 2 且 取字节集中间 (变量_FDD50225, 1, 2) ＝ { 239, 187 })
        .如果真 (取字节集中间 (变量_FDD50225, 3, 1) ＝ { 191 })
            返回 (1)
        .如果真结束
        
    .判断 (取字节集中间 (变量_FDD50225, 1, 2) ＝ { 255, 254 })
        返回 (2)
    .判断 (取字节集中间 (变量_FDD50225, 1, 2) ＝ { 254, 255 })
        返回 (3)
    .默认
        
    .判断结束
    变量_FFD50225 ＝ -1
    .判断开始 (DLL_IsTextUnicode (变量_FDD50225, 变量_FED50225, 变量_FFD50225))
        返回 (2)
    .判断 (文本_是否UTF8_汇编 (变量_FDD50225))
        返回 (1)
    .默认
        返回 (4)
    .判断结束
    

.子程序 文件_是否为目录, 逻辑型, 公开, 判断一个指定的文件路径是否为目录, 是目录返回真, 不是目录或文件路径不存在返回假
    .参数 文件路径, 文本型

    返回 (文件_是否为目录W (编码_Ansi到Unicode (文件路径, )))

.子程序 文件_是否为目录W, 逻辑型, 公开, 判断一个指定的文件路径是否为目录, 是目录返回真, 不是目录或文件路径不存在返回假
    .参数 文件路径, 字节集
    .局部变量 变量_AAF50225, 整数型

    变量_AAF50225 ＝ DLL_GetFileAttributesW (文件路径)
    .如果真 (变量_AAF50225 ＝ #<?未知本地类型?>)
        返回 (假)
    .如果真结束
    返回 (位与 (变量_AAF50225, #FILE_ATTRIBUTE_DIRECTORY) ≠ 0)

.子程序 文件_寻找文件W, 字节集, 公开, 返回一个文本，用以表示所找到的文件名或目录名，它必须与所要求的名称格式或文件属性相匹配。
    .参数 欲寻找的文件或目录名称, 字节集, 可空, 可以被省略。可以使用多字符(*)和单字符(?)通配符来指定多重文件。在非首次寻找文件时，参数值必须为空或被省略。
    .参数 欲寻找文件的属性, 整数型, 可空, 可以被省略。参数值可以为以下常量值或其和：1、#只读文件；2、#隐藏文件；4、#系统文件；16、#子目录；32、#存档文件。通过将这些常量值加起来可以一次设置多个文件属性。如果省略本参数，默认为搜寻除子目录外的所有文件。
    .局部变量 变量_4DF10225, 整数型
    .局部变量 变量_B6E70225, 整数型
    .局部变量 变量_B7E70225, WIN32_FIND_DATAW
    .局部变量 变量_B8E70225, 整数型
    .局部变量 变量_B9E70225, 字节集
    .局部变量 变量_BAE70225, 整数型

    .如果真 (欲寻找文件的属性 ≤ 0)
        欲寻找文件的属性 ＝ 位或 (#FILE_ATTRIBUTE_READONLY, #FILE_ATTRIBUTE_HIDDEN, #FILE_ATTRIBUTE_SYSTEM, #FILE_ATTRIBUTE_ARCHIVE)
    .如果真结束
    .如果真 (是否为空 (欲寻找的文件或目录名称))
        变量_4DF10225 ＝ 取数组成员数 (全局变量_49F10205)
        .如果真 (变量_4DF10225 ＞ 0)
            变量_B6E70225 ＝ 全局变量_49F10205 [变量_4DF10225]
        .如果真结束
        .如果真 (变量_B6E70225 ＝ 0)
            返回 ({ })
        .如果真结束
        .判断循环首 (DLL_FindNextFileW (变量_B6E70225, 变量_B7E70225))
            .如果真 (位与 (变量_B7E70225.dwFileAttributes, 欲寻找文件的属性) ≠ 0)
                变量_B8E70225 ＝ 取数据_通用型_数组 (变量_B7E70225.cFileName)
                变量_BAE70225 ＝ DLL_lstrlenW (变量_B8E70225)
                .如果真 (变量_BAE70225 ＞ 0)
                    变量_B9E70225 ＝ 指针到字节集 (变量_B8E70225, 变量_BAE70225 × 2 ＋ 2)
                    返回 (变量_B9E70225)
                .如果真结束
                
            .如果真结束
            
        .判断循环尾 ()
        DLL_FindClose (变量_B6E70225)
        .如果真 (变量_4DF10225 ＞ 0)
            删除成员 (全局变量_49F10205, 变量_4DF10225, )
        .如果真结束
        返回 ({ })
    .如果真结束
    变量_B6E70225 ＝ DLL_FindFirstFileW (欲寻找的文件或目录名称, 变量_B7E70225)
    .如果真 (变量_B6E70225 ＝ #INVALID_HANDLE_VALUE)
        返回 ({ })
    .如果真结束
    加入成员 (全局变量_49F10205, 变量_B6E70225)
    .如果真 (位与 (变量_B7E70225.dwFileAttributes, 欲寻找文件的属性) ≠ 0)
        变量_B8E70225 ＝ 取数据_通用型_数组 (变量_B7E70225.cFileName)
        变量_BAE70225 ＝ DLL_lstrlenW (变量_B8E70225)
        .如果真 (变量_BAE70225 ＞ 0)
            变量_B9E70225 ＝ 指针到字节集 (变量_B8E70225, 变量_BAE70225 × 2 ＋ 2)
            返回 (变量_B9E70225)
        .如果真结束
        
    .如果真结束
    返回 (文件_寻找文件W (, 欲寻找文件的属性))

.子程序 文件_是否为64位, 逻辑型, 公开, 判断一个可执行映像是否为64位。
    .参数 文件路径, 文本型

    返回 (文件_是否为64位W (编码_Ansi到Unicode (文件路径, )))

.子程序 文件_是否为64位W, 逻辑型, 公开, 判断一个可执行映像是否为64位。
    .参数 文件路径, 字节集
    .局部变量 变量_7FFE0225, 整数型
    .局部变量 变量_D9FF0225, 整数型
    .局部变量 变量_DDFF0225, 整数型
    .局部变量 变量_80FE0225, 短整数型
    .局部变量 变量_8FFE0225, 整数型
    .局部变量 变量_E1FF0225, 整数型
    .局部变量 变量_95FE0225, 整数型
    .局部变量 变量_E5FF0225, 逻辑型

    变量_7FFE0225 ＝ DLL_CreateFileW (文件路径, #GENERIC_READ, #FILE_SHARE_READ, #NULL, #OPEN_EXISTING, #FILE_ATTRIBUTE_NORMAL, #NULL)
    .如果真 (变量_7FFE0225 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    变量_D9FF0225 ＝ DLL_CreateFileMappingW (变量_7FFE0225, #NULL, #<?未知本地类型?>, 0, 0, #NULL)
    .如果真 (变量_D9FF0225 ≠ #NULL)
        变量_DDFF0225 ＝ MapViewOfFile (变量_D9FF0225, #<?未知本地类型?>, 0, 0, 0)
        .如果真 (变量_DDFF0225 ≠ #NULL)
            变量_80FE0225 ＝ 指针_到短整数型_汇编 (变量_DDFF0225)
            .如果真 (变量_80FE0225 ＝ #<?未知本地类型?>)
                变量_8FFE0225 ＝ __get (变量_DDFF0225, 60)
                变量_E1FF0225 ＝ 变量_DDFF0225 ＋ 变量_8FFE0225
                变量_95FE0225 ＝ __get (变量_E1FF0225, 0)
                .如果真 (变量_95FE0225 ＝ #<?未知本地类型?>)
                    变量_80FE0225 ＝ 指针_到短整数型_汇编 (变量_E1FF0225 ＋ 24)
                    .判断开始 (变量_80FE0225 ＝ #<?未知本地类型?>)
                        变量_E5FF0225 ＝ 假
                    .判断 (变量_80FE0225 ＝ #<?未知本地类型?>)
                        变量_E5FF0225 ＝ 真
                    .默认
                        输出调试文本 (“该文件不是一个可执行映像。”)
                    .判断结束
                    
                .如果真结束
                
            .如果真结束
            UnmapViewOfFile (变量_DDFF0225)
        .如果真结束
        CloseHandle (变量_D9FF0225)
    .如果真结束
    CloseHandle (变量_7FFE0225)
    返回 (变量_E5FF0225)

.子程序 文件_修改访问权限, 逻辑型, 公开, 利用DACL访问控制列表修改文件或文件夹访问权限
    .参数 文件路径, 文本型, , 文件或目录
    .参数 用户名, 文本型, , Administrators
    .参数 权限, 整数型
    .参数 类型, 整数型, , #SET_ 或 #DENY_

    返回 (文件_修改访问权限W (编码_Ansi到Unicode (文件路径, ), 编码_Ansi到Unicode (用户名, ), 权限, 类型))

.子程序 文件_修改访问权限W, 逻辑型, 公开, 利用DACL访问控制列表修改文件或文件夹访问权限
    .参数 文件路径, 字节集, , 文件或目录
    .参数 用户名, 字节集, , Administrators
    .参数 权限, 整数型
    .参数 类型, 整数型, , #SET_ 或 #DENY_
    .局部变量 变量_23FF0225, 整数型
    .局部变量 变量_24FF0225, 整数型
    .局部变量 变量_26FF0225, 整数型
    .局部变量 变量_27FF0225, 逻辑型

    .如果真 (DLL_GetNamedSecurityInfoW (取指针_字节集型 (文件路径), #<?未知本地类型?>, #<?未知本地类型?>, #NULL, #NULL, 取指针整数_ (变量_23FF0225), #NULL, #NULL) ＝ #ERROR_SUCCESS)
        变量_24FF0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 32)
        DLL_BuildExplicitAccessWithNameW (变量_24FF0225, 取指针_字节集型 (用户名), 权限, 类型, #<?未知本地类型?>)
        .如果真 (DLL_SetEntriesInAclW (1, 变量_24FF0225, #NULL, 取指针整数_ (变量_26FF0225)) ＝ #ERROR_SUCCESS)
            变量_27FF0225 ＝ DLL_SetNamedSecurityInfoW (取指针_字节集型 (文件路径), #<?未知本地类型?>, #<?未知本地类型?>, #NULL, #NULL, 变量_26FF0225, #NULL) ＝ #ERROR_SUCCESS
            LocalFree (变量_26FF0225)
        .如果真结束
        LocalFree (变量_24FF0225)
    .如果真结束
    返回 (变量_27FF0225)

.子程序 文件_遍历PE导入表, 整数型, 公开, 遍历可执行映像的PE导入表获取导入DLL文件的名称
    .参数 文件路径, 文本型
    .参数 导入DLL文件的名称, 文本型, 参考 数组, 接收
    .局部变量 变量_AFFF0225, 整数型
    .局部变量 变量_B0FF0225, 整数型
    .局部变量 变量_B1FF0225, 整数型
    .局部变量 变量_B2FF0225, 短整数型
    .局部变量 变量_C1FF0225, 整数型
    .局部变量 变量_BDFF0225, 整数型
    .局部变量 变量_C5FF0225, 整数型
    .局部变量 变量_C9FF0225, 整数型
    .局部变量 变量_CFFF0225, 整数型
    .局部变量 变量_D5FF0225, 文本型

    清除数组 (导入DLL文件的名称)
    
    变量_AFFF0225 ＝ DLL_CreateFileW (编码_Ansi到Unicode (文件路径, ), #GENERIC_READ, #FILE_SHARE_READ, #NULL, #OPEN_EXISTING, #FILE_ATTRIBUTE_NORMAL, #NULL)
    .如果真 (变量_AFFF0225 ≠ #INVALID_HANDLE_VALUE)
        变量_B0FF0225 ＝ DLL_CreateFileMappingW (变量_AFFF0225, #NULL, #<?未知本地类型?>, 0, 0, #NULL)
        .如果真 (变量_B0FF0225 ≠ #NULL)
            变量_B1FF0225 ＝ MapViewOfFile (变量_B0FF0225, #<?未知本地类型?>, 0, 0, 0)
            .如果真 (变量_B1FF0225 ≠ #NULL)
                变量_B2FF0225 ＝ 指针_到短整数型_汇编 (变量_B1FF0225)
                .如果真 (变量_B2FF0225 ＝ #<?未知本地类型?>)
                    变量_C1FF0225 ＝ __get (变量_B1FF0225, 60)
                    变量_C5FF0225 ＝ 变量_B1FF0225 ＋ 变量_C1FF0225
                    变量_BDFF0225 ＝ __get (变量_C5FF0225, 0)
                    .如果真 (变量_BDFF0225 ＝ #<?未知本地类型?>)
                        变量_B2FF0225 ＝ 指针_到短整数型_汇编 (变量_C5FF0225 ＋ 24)
                        .判断开始 (变量_B2FF0225 ＝ #<?未知本地类型?>)
                            变量_C9FF0225 ＝ 128
                        .判断 (变量_B2FF0225 ＝ #<?未知本地类型?>)
                            变量_C9FF0225 ＝ 144
                        .默认
                            输出调试文本 (“该文件不是一个可执行映像。”)
                        .判断结束
                        
                        .如果真 (变量_C9FF0225 ≠ 0)
                            变量_CFFF0225 ＝ DLL_ImageRvaToVa (变量_C5FF0225, 变量_B1FF0225, __get (变量_C5FF0225, 变量_C9FF0225), #NULL)
                            .判断循环首 (变量_CFFF0225 ≠ #NULL 且 __get (变量_CFFF0225, 0) ≠ #NULL)
                                变量_D5FF0225 ＝ 指针到文本 (DLL_ImageRvaToVa (变量_C5FF0225, 变量_B1FF0225, __get (变量_CFFF0225, 12), #NULL))
                                加入成员 (导入DLL文件的名称, 变量_D5FF0225)
                                变量_CFFF0225 ＝ 变量_CFFF0225 ＋ 20
                            .判断循环尾 ()
                        .如果真结束
                        
                    .如果真结束
                    
                .如果真结束
                UnmapViewOfFile (变量_B1FF0225)
            .如果真结束
            CloseHandle (变量_B0FF0225)
        .如果真结束
        CloseHandle (变量_AFFF0225)
    .如果真结束
    返回 (取数组成员数 (导入DLL文件的名称))

.子程序 文件_遍历PE导出表, 整数型, 公开, 遍历可执行映像的PE导出表获取函数名称
    .参数 文件路径, 文本型
    .参数 导出函数名称, 文本型, 参考 数组, 接收
    .局部变量 变量_ECFF0225, 整数型
    .局部变量 变量_EDFF0225, 整数型
    .局部变量 变量_EEFF0225, 整数型
    .局部变量 变量_EFFF0225, 短整数型
    .局部变量 变量_F0FF0225, 整数型
    .局部变量 变量_F1FF0225, 整数型
    .局部变量 变量_F2FF0225, 整数型
    .局部变量 变量_F3FF0225, 整数型
    .局部变量 变量_F4FF0225, 整数型
    .局部变量 变量_F7FF0225, 整数型
    .局部变量 变量_FDFF0225, 整数型
    .局部变量 变量_F5FF0225, 文本型
    .局部变量 变量_F6FF0225, 整数型

    清除数组 (导出函数名称)
    
    变量_ECFF0225 ＝ DLL_CreateFileW (编码_Ansi到Unicode (文件路径, ), #GENERIC_READ, #FILE_SHARE_READ, #NULL, #OPEN_EXISTING, #FILE_ATTRIBUTE_NORMAL, #NULL)
    .如果真 (变量_ECFF0225 ≠ #INVALID_HANDLE_VALUE)
        变量_EDFF0225 ＝ DLL_CreateFileMappingW (变量_ECFF0225, #NULL, #<?未知本地类型?>, 0, 0, #NULL)
        .如果真 (变量_EDFF0225 ≠ #NULL)
            变量_EEFF0225 ＝ MapViewOfFile (变量_EDFF0225, #<?未知本地类型?>, 0, 0, 0)
            .如果真 (变量_EEFF0225 ≠ #NULL)
                变量_EFFF0225 ＝ 指针_到短整数型_汇编 (变量_EEFF0225)
                .如果真 (变量_EFFF0225 ＝ #<?未知本地类型?>)
                    变量_F0FF0225 ＝ __get (变量_EEFF0225, 60)
                    变量_F2FF0225 ＝ 变量_EEFF0225 ＋ 变量_F0FF0225
                    变量_F1FF0225 ＝ __get (变量_F2FF0225, 0)
                    .如果真 (变量_F1FF0225 ＝ #<?未知本地类型?>)
                        变量_EFFF0225 ＝ 指针_到短整数型_汇编 (变量_F2FF0225 ＋ 24)
                        .判断开始 (变量_EFFF0225 ＝ #<?未知本地类型?>)
                            变量_F3FF0225 ＝ 120
                        .判断 (变量_EFFF0225 ＝ #<?未知本地类型?>)
                            变量_F3FF0225 ＝ 136
                        .默认
                            输出调试文本 (“该文件不是一个可执行映像。”)
                        .判断结束
                        
                        .如果真 (变量_F3FF0225 ≠ 0)
                            变量_F4FF0225 ＝ DLL_ImageRvaToVa (变量_F2FF0225, 变量_EEFF0225, __get (变量_F2FF0225, 变量_F3FF0225), #NULL)
                            .如果真 (变量_F4FF0225 ≠ #NULL)
                                变量_F7FF0225 ＝ __get (变量_F4FF0225, 24)
                            .如果真结束
                            .如果真 (变量_F7FF0225 ＞ 0)
                                变量_FDFF0225 ＝ DLL_ImageRvaToVa (变量_F2FF0225, 变量_EEFF0225, __get (变量_F4FF0225, 32), #NULL)
                                .变量循环首 (0, 变量_F7FF0225 － 1, 1, 变量_F6FF0225)
                                    变量_F5FF0225 ＝ 指针到文本 (DLL_ImageRvaToVa (变量_F2FF0225, 变量_EEFF0225, __get (变量_FDFF0225, 变量_F6FF0225 × 4), #NULL))
                                    加入成员 (导出函数名称, 变量_F5FF0225)
                                .变量循环尾 ()
                            .如果真结束
                            
                        .如果真结束
                        
                    .如果真结束
                    
                .如果真结束
                UnmapViewOfFile (变量_EEFF0225)
            .如果真结束
            CloseHandle (变量_EDFF0225)
        .如果真结束
        CloseHandle (变量_ECFF0225)
    .如果真结束
    返回 (取数组成员数 (导出函数名称))

.子程序 分割符
    

.子程序 目录_取文件数, 整数型, 公开, 使用FileSystemObject取目录文件数, 适合有大量文件的目录
    .参数 参_目录名, 文本型
    .局部变量 变量_57A60225, 对象
    .局部变量 变量_58A60225, 对象
    .局部变量 变量_59A60225, 对象
    .局部变量 变量_5AA60225, 对象
    .局部变量 变量_7FD70225, 整数型

    CoInitialize (0)
    变量_57A60225.创建 (“Scripting.FileSystemObject”, )
    变量_58A60225 ＝ 变量_57A60225.对象型方法 (“GetFolder”, 参_目录名)
    变量_59A60225 ＝ 变量_58A60225.读对象型属性 (“Files”, )
    变量_7FD70225 ＝ 变量_59A60225.读数值属性 (“count”, )
    CoUninitialize ()
    返回 (变量_7FD70225)

.子程序 目录_删除自身_cmd, , 公开, 利用CMD命令删除自身
    置文件属性 (取运行目录 () ＋ “\” ＋ 取执行文件名 (), 0)
    运行 (“cmd.exe /c del ” ＋ #引号 ＋ 取运行目录 () ＋ “\” ＋ 取执行文件名 () ＋ #引号, 假, #隐藏窗口)
    结束 ()

.子程序 目录_复制文件_cmd, , 公开, 利用CMD命令复制文件
    .参数 要复制的文件名, 文本型
    .参数 复制到的目录名, 文本型

    要复制的文件名 ＝ #引号 ＋ 要复制的文件名 ＋ #引号
    复制到的目录名 ＝ #引号 ＋ 复制到的目录名 ＋ #引号
    运行 (“cmd.exe /c copy /y ” ＋ 要复制的文件名 ＋ “ ” ＋ 复制到的目录名, 假, #隐藏窗口)

.子程序 目录_移动文件_cmd, , 公开, 利用CMD命令移动文件
    .参数 要移动的文件名, 文本型
    .参数 移动到的目录名, 文本型

    运行 (“cmd.exe /c move /y ” ＋ #引号 ＋ 要移动的文件名 ＋ #引号 ＋ “ ” ＋ #引号 ＋ 移动到的目录名 ＋ #引号, 假, #隐藏窗口)

.子程序 目录_移动并运行_cmd, , 公开
    .参数 要移动的文件名, 文本型
    .参数 移动到的目录名, 文本型
    .局部变量 变量_46220125, 文本型
    .局部变量 变量_47220125, 文本型

    变量_47220125 ＝ 文件_取文件名 (要移动的文件名)
    变量_46220125 ＝ #<?未知本地类型?>
    变量_46220125 ＝ 子文本替换 (变量_46220125, “被移动文件”, 要移动的文件名, , , 真)
    变量_46220125 ＝ 子文本替换 (变量_46220125, “目录”, 移动到的目录名, , , 真)
    变量_46220125 ＝ 子文本替换 (变量_46220125, “要运行的文件”, 变量_47220125, , , 真)
    写到文件 (取运行目录 () ＋ “\123.bat”, 到字节集 (到文本 (变量_46220125)))
    运行 (取运行目录 () ＋ “\123.bat”, 假, 1)

.子程序 目录_定位, 逻辑型, 公开, 成功则打开文件所在目录并选中文件，失败返回假,本命令为初级命令！
    .参数 文件路径, 文本型, , 需提供文件绝对路径
    .参数 编辑模式, 逻辑型, 可空, 重命名模式。

    返回 (文件_定位 (文件路径, 编辑模式))

.子程序 目录_改名, 逻辑型, 公开, 重新命名一个目录名称。成功返回真，失败返回假。本命令为初级命令。
    .参数 目录名, 文本型, , 目录名
    .参数 新目录名, 文本型, , 新目录名

    返回 (文件更名 (目录名, 新目录名))

.子程序 目录_复制, , 公开, 复制目录到指定的路径
    .参数 源目录, 文本型, , 如：C:\001\002
    .参数 目标目录, 文本型, , 复制至：d:\2543\545
    .局部变量 变量_D5270125, 对象

    CoInitialize (0)
    .如果真 (变量_D5270125.创建 (“scripting.FileSystemObject”, ))
        变量_D5270125.方法 (“CopyFolder”, 源目录, 目标目录)
    .如果真结束
    CoUninitialize ()

.子程序 目录_浏览, 文本型, 公开, 浏览文件夹内支持创建文件夹 支持显示文件 编辑框 (返回被选择文件或文件夹路径)
    .参数 标题, 文本型, 可空, 设置标题
    .参数 显示文件, 逻辑型, 可空, 默认为假。
    .参数 初始目录, 文本型, 可空, 设置一个初始目录,默认为我的电脑
    .参数 地址栏, 逻辑型, 可空, 是否包含编辑框,可编辑,默认为假
    .参数 新样式, 逻辑型, 可空, 有新建按钮及右键菜单,默认为真
    .参数 父窗口句柄, 整数型, 可空
    .局部变量 变量_E6EE0225, 字节集

    变量_E6EE0225 ＝ 目录_浏览W (编码_Ansi到Unicode (标题, ), 显示文件, 编码_Ansi到Unicode (初始目录, ), 地址栏, 新样式, 父窗口句柄)
    返回 (编码_Unicode到Ansi (变量_E6EE0225))

.子程序 目录_浏览W, 字节集, 公开, 浏览文件夹
    .参数 标题, 字节集, 可空
    .参数 显示文件, 逻辑型, 可空
    .参数 初始目录, 字节集, 可空, 设置一个初始目录
    .参数 地址栏, 逻辑型, 可空, 是否包含编辑框
    .参数 新样式, 逻辑型, 可空, 有新建按钮及右键菜单
    .参数 父窗口句柄, 整数型, 可空
    .局部变量 变量_7BEE0225, 自定义_7CEE0241
    .局部变量 变量_A1EE0225, 字节集
    .局部变量 变量_A6EE0225, 字节集
    .局部变量 变量_B0EE0225, 整数型
    .局部变量 变量_E2EE0225, 字节集
    .局部变量 变量_C4EE0225, 整数型
    .局部变量 变量_DEEE0225, 整数型
    .局部变量 变量_D3EE0225, 字节集
    .局部变量 变量_D7EE0225, 逻辑型
    .局部变量 变量_DAEE0225, 整数型

    变量_7BEE0225.成员_7DEE0235 ＝ 父窗口句柄
    变量_A1EE0225 ＝ 取空白字节集 (#MAX_PATH × 2)
    变量_7BEE0225.成员_7FEE0235 ＝ 取指针_字节集型 (变量_A1EE0225)
    .如果 (标题 ＝ { })
        变量_A6EE0225 ＝ 编码_Ansi到Unicode (“请选择一个文件夹”, )
        变量_7BEE0225.成员_80EE0235 ＝ 取指针_字节集型 (变量_A6EE0225)
    .否则
        变量_7BEE0225.成员_80EE0235 ＝ 取指针_字节集型 (标题)
    .如果结束
    .如果真 (显示文件)
        变量_B0EE0225 ＝ 位或 (变量_B0EE0225, #<?未知本地类型?>)
    .如果真结束
    .如果真 (地址栏)
        变量_B0EE0225 ＝ 位或 (变量_B0EE0225, #<?未知本地类型?>)
    .如果真结束
    .如果真 (新样式)
        变量_B0EE0225 ＝ 位或 (变量_B0EE0225, #<?未知本地类型?>)
    .如果真结束
    变量_7BEE0225.成员_81EE0235 ＝ 变量_B0EE0225
    变量_7BEE0225.成员_91EE0235 ＝ 到整数 (&BrowseCallbackProc)
    .如果 (初始目录 ＝ { })
        变量_E2EE0225 ＝ 取空白字节集 (#MAX_PATH × 2)
        变量_7BEE0225.成员_92EE0235 ＝ 取指针_字节集型 (变量_E2EE0225)
    .否则
        变量_7BEE0225.成员_92EE0235 ＝ 取指针_字节集型 (初始目录)
    .如果结束
    变量_C4EE0225 ＝ DLL_SHBrowseForFolderW (变量_7BEE0225)
    .如果真 (变量_C4EE0225 ≠ #NULL)
        变量_DEEE0225 ＝ LocalAlloc (#LMEM_ZEROINIT, #MAX_PATH × 2)
        变量_D7EE0225 ＝ DLL_SHGetPathFromIDListW (变量_C4EE0225, 变量_DEEE0225)
        变量_DAEE0225 ＝ DLL_lstrlenW (变量_DEEE0225)
        .如果真 (变量_DAEE0225 ＞ 0)
            变量_D3EE0225 ＝ 指针到字节集 (变量_DEEE0225, 变量_DAEE0225 × 2 ＋ 2)
        .如果真结束
        LocalFree (变量_DEEE0225)
        DLL_CoTaskMemFree (变量_C4EE0225)
        返回 (变量_D3EE0225)
    .如果真结束
    返回 ({ })

.子程序 BrowseCallbackProc, 整数型
    .参数 变量_DE270125, 整数型
    .参数 变量_DF270125, 整数型
    .参数 变量_E0270125, 整数型
    .参数 变量_E1270125, 整数型

    .如果真 (变量_DF270125 ＝ #<?未知本地类型?>)
        SendMessageW (变量_DE270125, #<?未知本地类型?>, 1, 变量_E1270125)
    .如果真结束
    返回 (1)

.子程序 目录_取父路径, 文本型, 公开, 返回指定文件或目录的上一级目录路径；路径后面包含\
    .参数 文件或目录名, 文本型, , 如：C:\001\002\0.txt则返回C:\001\002\；
    .局部变量 变量_66730125, 整数型
    .局部变量 变量_D1880125, 文本型

    变量_D1880125 ＝ 文件或目录名
    .如果真 (取文本右边 (变量_D1880125, 1) ＝ “\”)
        变量_D1880125 ＝ 取文本左边 (变量_D1880125, 取文本长度 (变量_D1880125) － 1)
    .如果真结束
    变量_66730125 ＝ 倒找文本 (变量_D1880125, “\”, , 假)
    返回 (取文本左边 (变量_D1880125, 变量_66730125))

.子程序 目录_取大小, 长整数型, 公开, 取一个文件夹的大小；单位为字节型, 失败返回-1。
    .参数 目录名路径, 文本型, , 如：D:\Program Files
    .局部变量 变量_64270125, 对象
    .局部变量 变量_65270125, 变体型
    .局部变量 变量_66270125, 对象
    .局部变量 变量_2DDB0125, 长整数型

    CoInitialize (0)
    .如果真 (变量_64270125.创建 (“scripting.FileSystemObject”, ))
        变量_66270125 ＝ 变量_64270125.对象型方法 (“GetFolder”, 目录名路径)
        变量_65270125 ＝ 变量_66270125.读属性 (“Size”, )
        变量_2DDB0125 ＝ 到长整数 (变量_65270125.取数值 ())
        CoUninitialize ()
        返回 (变量_2DDB0125)
    .如果真结束
    返回 (-1)

.子程序 目录_更新, , 公开, 把某个目录下的所有文件复制到另一个目录里
    .参数 源目录, 文本型, , 源目录，目录不以\结尾会自动添加
    .参数 目标目录, 文本型, 可空, 目标目录，目录不以\结尾会自动添加
    .参数 是否覆盖文件, 整数型, 可空, 可空。默认为直接覆盖。0=覆盖，非0不覆盖
    .局部变量 变量_02650125, 文本型
    .局部变量 变量_03650125, 文本型
    .局部变量 变量_49F80125, 文本型
    .局部变量 变量_4DF80125, 文本型

    变量_49F80125 ＝ 源目录
    变量_4DF80125 ＝ 目标目录
    .如果真 (取文本右边 (变量_49F80125, 1) ≠ “\”)
        变量_49F80125 ＝ 变量_49F80125 ＋ “\”
    .如果真结束
    .如果真 (取文本右边 (变量_4DF80125, 1) ≠ “\”)
        变量_4DF80125 ＝ 变量_4DF80125 ＋ “\”
    .如果真结束
    .如果真 (目录_是否存在 (变量_4DF80125) ＝ 假)
        目录_创建 (变量_4DF80125)
    .如果真结束
    
    变量_03650125 ＝ 寻找文件 (变量_49F80125 ＋ “*.*”, )
    .判断循环首 (变量_03650125 ≠ “”)
        文件_复制 (变量_49F80125 ＋ 变量_03650125, 变量_4DF80125 ＋ 变量_03650125, 是否覆盖文件)
        处理事件 ()
        变量_03650125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    变量_02650125 ＝ 寻找文件 (变量_49F80125 ＋ “*.*”, #子目录)
    .判断循环首 (变量_02650125 ≠ “”)
        .如果真 (取文本左边 (变量_02650125, 1) ≠ “.”)
            处理事件 ()
            目录_更新 (变量_49F80125 ＋ 变量_02650125, 变量_4DF80125 ＋ 变量_02650125)
        .如果真结束
        变量_02650125 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()

.子程序 目录_同步更新, , 公开, 将目标目录的文件和源目录中的文件进行对比，将不同的文件同步到目标目录里。
    .参数 源目录, 文本型, , 源目录，目录不以\结尾会自动添加
    .参数 目标目录, 文本型, , 欲更新目标的目录，目录不以\结尾会自动添加
    .局部变量 变量_59950125, 文本型
    .局部变量 变量_5A950125, 文本型
    .局部变量 变量_51F80125, 文本型
    .局部变量 变量_52F80125, 文本型

    变量_51F80125 ＝ 源目录
    变量_52F80125 ＝ 目标目录
    .如果真 (取文本右边 (变量_51F80125, 1) ≠ “\”)
        变量_51F80125 ＝ 变量_51F80125 ＋ “\”
    .如果真结束
    .如果真 (取文本右边 (变量_52F80125, 1) ≠ “\”)
        变量_52F80125 ＝ 变量_52F80125 ＋ “\”
    .如果真结束
    创建目录 (变量_52F80125)
    处理事件 ()
    变量_59950125 ＝ 寻找文件 (变量_51F80125 ＋ “*.*”, 39)
    .判断循环首 (变量_59950125 ≠ “”)
        .判断开始 (文件_是否存在 (变量_52F80125 ＋ 变量_59950125) ＝ 假)
            文件_复制 (变量_51F80125 ＋ 变量_59950125, 变量_52F80125 ＋ 变量_59950125)
        .判断 (校验_取md5 (读入文件 (变量_52F80125 ＋ 变量_59950125)) ≠ 校验_取md5 (读入文件 (变量_51F80125 ＋ 变量_59950125)))
            文件_复制 (变量_51F80125 ＋ 变量_59950125, 变量_52F80125 ＋ 变量_59950125, 0)
        .默认
            
        .判断结束
        变量_59950125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    变量_5A950125 ＝ 寻找文件 (变量_51F80125 ＋ “*.*”, 16)
    .判断循环首 (变量_5A950125 ≠ “”)
        .如果真 (变量_5A950125 ≠ “.” 且 变量_5A950125 ≠ “..”)
            .如果 (目录_是否存在 (变量_52F80125 ＋ 变量_5A950125))
                目录_同步更新 (变量_51F80125 ＋ 变量_5A950125, 变量_52F80125 ＋ 变量_5A950125)
            .否则
                目录_删除目录 (变量_52F80125 ＋ 变量_5A950125)
            .如果结束
            
        .如果真结束
        变量_5A950125 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()
    

.子程序 目录_创建, 逻辑型, 公开, 创建多级目录，成功返回真，失败返回假。如果指定目录存在也会返回真，不覆盖目录内容。
    .参数 目录路径, 文本型
    .局部变量 变量_CCEC0225, 字节集

    变量_CCEC0225 ＝ 编码_Ansi到Unicode (目录路径, )
    目录_创建W (变量_CCEC0225)
    返回 (目录_是否存在W (变量_CCEC0225))

.子程序 目录_创建W, , 公开, 创建多级目录
    .参数 目录名, 字节集, , 待创建的目录的全路径
    .局部变量 变量_C4EC0225, 整数型
    .局部变量 变量_C5EC0225, 整数型
    .局部变量 变量_C6EC0225, 整数型
    .局部变量 变量_C7EC0225, 短整数型
    .局部变量 变量_C8EC0225, 整数型
    .局部变量 变量_C9EC0225, 整数型

    变量_C5EC0225 ＝ 取字节集长度 (目录名)
    .如果真 (变量_C5EC0225 ＜ 8)
        返回 ()
    .如果真结束
    变量_C4EC0225 ＝ 取指针_字节集型 (目录名)
    变量_C6EC0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_C5EC0225 ＋ 2)
    .变量循环首 (0, 变量_C5EC0225 － 2, 2, 变量_C9EC0225)
        变量_C7EC0225 ＝ 指针_到短整数型_汇编 (变量_C4EC0225 ＋ 变量_C9EC0225)
        .判断开始 (变量_C7EC0225 ＝ 0)
            DLL_CreateDirectoryW (变量_C6EC0225, #NULL)
            跳出循环 ()
        .判断 (变量_C7EC0225 ＝ 92)
            .如果真 (变量_C8EC0225 ＞ 0)
                DLL_CreateDirectoryW (变量_C6EC0225, #NULL)
            .如果真结束
            变量_C8EC0225 ＝ 变量_C8EC0225 ＋ 1
        .默认
            
        .判断结束
        __set_short (变量_C6EC0225, 变量_C9EC0225, 变量_C7EC0225)
    .变量循环尾 ()
    LocalFree (变量_C6EC0225)

.子程序 目录_清空, , 公开, 删除指定目录下所有文件，子目录或子目录下的文件不会被删除；
    .参数 要删除文件的目录, 文本型, , 如：删除D:\Program Files(也就是Program Files)目录下的全部文件，目录不以\结尾会自动添加
    .参数 文件类型, 文本型, 可空, 默认为清空所有文件；或者清空指定格式(*.txt或*.exe)等等；
    .局部变量 变量_53F80125, 文本型
    .局部变量 变量_54580225, 文本型
    .局部变量 变量_57580225, 文本型, , "0"
    .局部变量 变量_5A580225, 整数型

    变量_53F80125 ＝ 要删除文件的目录
    变量_54580225 ＝ 文件类型
    .如果真 (取文本右边 (变量_53F80125, 1) ≠ “\”)
        变量_53F80125 ＝ 变量_53F80125 ＋ “\”
    .如果真结束
    .如果真 (变量_54580225 ＝ “”)
        变量_54580225 ＝ “*.*”
    .如果真结束
    
    .如果真 (目录_是否符合规范 (变量_53F80125, 真) ＝ 假)
        输出调试文本 (“目录_清空 - 传入的目录不合规范，这样会导致不可预料的情况甚至格盘！请重新提供符合规范的目录路径！注意：不可以直接使用磁盘根目录！”)
        返回 ()
    .如果真结束
    .如果真 (目录_是否存在 (变量_53F80125) ＝ 假)
        输出调试文本 (“该目录不存在，请检查路径后重试”)
        返回 ()
    .如果真结束
    
    .计次循环首 (文件_枚举 (变量_53F80125, 变量_54580225, 变量_57580225, 真), 变量_5A580225)
        
        文件_删除到回收站 (变量_57580225 [变量_5A580225], 1)
    .计次循环尾 ()

.子程序 目录_强力清空, , 公开, 删除指定目录下所有文件，包括文件夹
    .参数 要删除文件的目录, 文本型, , 如：删除D:\Program Files(也就是Program Files)目录下的全部文件；，目录不以\结尾会自动添加
    .局部变量 变量_57F80125, 文本型

    变量_57F80125 ＝ 要删除文件的目录
    .如果真 (取文本右边 (变量_57F80125, 1) ≠ “\”)
        变量_57F80125 ＝ 变量_57F80125 ＋ “\”
    .如果真结束
    
    .如果真 (目录_是否符合规范 (变量_57F80125, 真) ＝ 假)
        输出调试文本 (“目录_强力清空 - 传入的目录不合规范，这样会导致不可预料的情况甚至格盘！请重新提供符合规范的目录路径！注意：不可以直接使用磁盘根目录！”)
        返回 ()
    .如果真结束
    .如果真 (目录_是否存在 (变量_57F80125) ＝ 假)
        输出调试文本 (“该目录不存在，请检查路径后重试”)
        返回 ()
    .如果真结束
    目录_删除目录 (变量_57F80125)
    目录_创建 (变量_57F80125)

.子程序 目录_是否存在, 逻辑型, 公开, 输入一个目录名,判断此目录是否存在
    .参数 欲判断的目录名称, 文本型, , 传入的目录名不会被改变

    返回 (目录_是否存在W (编码_Ansi到Unicode (欲判断的目录名称, )))

.子程序 目录_是否存在W, 逻辑型, 公开, 判断路径是否存在
    .参数 欲判断的目录名称, 字节集, , 要判断的路径

    返回 (DLL_PathIsDirectoryW (欲判断的目录名称) ＝ #FILE_ATTRIBUTE_DIRECTORY)

.子程序 目录_取特定目录, 文本型, 公开, 本命令返回指定的Windows系统特定目录，所返回目录名以“\”符号结束，如失败返回空文本。
    .参数 欲获取目录类型, 整数型, 可空, 留空为桌面！1、我的文档；2、我的收藏夹；3、系统桌面；4、系统字体；5、开始菜单组；6、程序菜单组；7、启动菜单组；8、程序数据目录；9、Windows安装目录；10、Windows系统目录；11、临时文件目录；12、系统缓存目录；13、文件系统目录
    .参数 csidl, 整数型, 可空, #CSIDL_*！不为空时 欲获取目录类型 视为无效
    .局部变量 变量_9CEA0225, 字节集

    .如果 (是否为空 (csidl) ＝ 假)
        变量_9CEA0225 ＝ 目录_取特定目录W (, csidl)
    .否则
        变量_9CEA0225 ＝ 目录_取特定目录W (欲获取目录类型, )
    .如果结束
    返回 (编码_Unicode到Ansi (变量_9CEA0225))

.子程序 目录_取特定目录W, 字节集, 公开, 本命令返回指定的Windows系统特定目录，所返回目录名以“\”符号结束，如失败返回空文本。
    .参数 欲获取目录类型, 整数型, 可空, 留空为桌面！1、我的文档；2、我的收藏夹；3、系统桌面；4、系统字体；5、开始菜单组；6、程序菜单组；7、启动菜单组；8、程序数据目录；9、Windows安装目录；10、Windows系统目录；11、临时文件目录；12、系统缓存目录；13、文件系统目录
    .参数 csidl, 整数型, 可空, #CSIDL_*！不为空时 欲获取目录类型 视为无效
    .局部变量 变量_65EA0225, 字节集
    .局部变量 变量_74EA0225, 整数型
    .局部变量 变量_70EA0225, 整数型
    .局部变量 变量_79EA0225, 字节集
    .局部变量 变量_7DEA0225, 整数型

    变量_65EA0225 ＝ 取空白字节集 (#MAX_PATH × 2)
    变量_74EA0225 ＝ 取指针_字节集型 (变量_65EA0225)
    .如果真 (是否为空 (csidl) ＝ 假)
        .如果真 (DLL_SHGetSpecialFolderPathW (#NULL, 变量_74EA0225, csidl, 假) ＝ 假)
            返回 ({ })
        .如果真结束
        变量_70EA0225 ＝ DLL_lstrlenW (变量_74EA0225)
        .如果真 (变量_70EA0225 ＝ 0)
            返回 ({ })
        .如果真结束
        变量_79EA0225 ＝ 指针到字节集 (变量_74EA0225 ＋ 变量_70EA0225 × 2 － 2, 2)
        .如果真 (变量_79EA0225 ≠ { 92, 0 })
            __set_byte (变量_74EA0225, 变量_70EA0225 × 2, 92)
            变量_70EA0225 ＝ 变量_70EA0225 ＋ 1
        .如果真结束
        变量_65EA0225 ＝ 指针到字节集 (变量_74EA0225, 变量_70EA0225 × 2 ＋ 2)
        返回 (变量_65EA0225)
    .如果真结束
    .如果真 (欲获取目录类型 ≤ 0 或 欲获取目录类型 ＞ 13)
        欲获取目录类型 ＝ 3
    .如果真结束
    .判断开始 (欲获取目录类型 ≥ 1 且 欲获取目录类型 ≤ 10)
        变量_7DEA0225 ＝ 多项选择 (欲获取目录类型, #CSIDL_PERSONAL, #CSIDL_FAVORITES, #CSIDL_DESKTOPDIRECTORY, #CSIDL_FONTS, #CSIDL_STARTMENU, #CSIDL_PROGRAMS, #CSIDL_STARTUP, #CSIDL_APPDATA, #CSIDL_WINDOWS, #CSIDL_SYSTEM)
        返回 (目录_取特定目录W (, 变量_7DEA0225))
    .判断 (欲获取目录类型 ＝ 11)
        变量_70EA0225 ＝ DLL_GetTempPathW (#MAX_PATH, 变量_74EA0225)
        .如果真 (变量_70EA0225 ＝ 0)
            返回 ({ })
        .如果真结束
        变量_65EA0225 ＝ 指针到字节集 (变量_74EA0225, 变量_70EA0225 × 2 ＋ 2)
        返回 (变量_65EA0225)
    .判断 (欲获取目录类型 ＝ 12)
        返回 (目录_取特定目录W (, #CSIDL_INTERNET_CACHE))
    .判断 (欲获取目录类型 ＝ 13)
        返回 (目录_取特定目录W (, #CSIDL_COMMON_APPDATA))
    .默认
        
    .判断结束
    返回 ({ })

.子程序 目录_检索文件的显示名称, 文本型, 公开, 通过csidl值标识检索文件的显示名称
    .参数 csidl, 整数型, , #CSIDL_*
    .局部变量 变量_91F40225, 字节集

    变量_91F40225 ＝ 目录_检索文件的显示名称W (csidl)
    返回 (编码_Unicode到Ansi (变量_91F40225))

.子程序 目录_检索文件的显示名称W, 字节集, 公开, 通过csidl值标识检索文件的显示名称
    .参数 csidl, 整数型, , #CSIDL_*
    .局部变量 变量_8AF40225, 整数型
    .局部变量 变量_8BF40225, 整数型
    .局部变量 变量_8CF40225, 整数型
    .局部变量 变量_8DF40225, 整数型
    .局部变量 变量_8EF40225, 字节集

    变量_8AF40225 ＝ DLL_SHGetFolderLocation (#NULL, csidl, #NULL, 0, 变量_8BF40225)
    .如果真 (变量_8AF40225 ＝ #<?未知本地类型?> 且 变量_8BF40225 ≠ #NULL)
        变量_8CF40225 ＝ 692
        变量_8DF40225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_8CF40225)
        CoInitialize (#NULL)
        变量_8AF40225 ＝ DLL_SHGetFileInfoW (变量_8BF40225, 0, 变量_8DF40225, 变量_8CF40225, 位或 (#<?未知本地类型?>, #<?未知本地类型?>))
        CoUninitialize ()
        .如果真 (变量_8AF40225 ≠ 0)
            
            变量_8EF40225 ＝ 指针_到字节集W (变量_8DF40225 ＋ 12)
        .如果真结束
        LocalFree (变量_8DF40225)
        ILFree (变量_8BF40225)
    .如果真结束
    返回 (变量_8EF40225)

.子程序 目录_取特定目录EX, 文本型, 公开, 1 AppDat局_项名数据 2 IE临时目录  3 局_项数组DBurning  4 局_项数组ookies  5 桌面  6 收藏夹  7 字体  8 历史记录  9 Lo局_项数组alAppDat局_项名数据 10 Lo局_项数组alSettings  11 我的音乐  12 我的图片  13 我的视频  14 NetHood  15 我的文档  16 PrintHood  17 开始_程序  18 我最近的文档  19 发送到  20 开始菜单  21 启动文件夹  22 Templates  23 所有用户_管理工具  24 所有用户_AppDat局_项名数据 25 所有用户_桌面  26 所有用户_文档  27 所有用户_收藏夹  28 所有用户_开始_程序  29 所有用户_开始菜单  30 所有用户_启动文件夹  31 所有用户_Templates  32 所有用户_音乐  33 所有用户_图片  34 所有用户_视频  35 临时目录  36 安装目录  37 系统目录  38 用户目录  39 所有用户  40 程序文件  41 所有用户_程序文件  42 系统盘  43 软件安装目录
    .参数 选择类型, 整数型, 可空, [beineimao]
    .局部变量 变量_6E610225, 文本型
    .局部变量 变量_6F610225, 文本型, , "0"
    .局部变量 变量_70610225, 整数型

    加入成员 (变量_6F610225, “AppData”)
    加入成员 (变量_6F610225, “Cache”)
    加入成员 (变量_6F610225, “CD Burning”)
    加入成员 (变量_6F610225, “Cookies”)
    加入成员 (变量_6F610225, “Desktop”)
    加入成员 (变量_6F610225, “Favorites”)
    加入成员 (变量_6F610225, “Fonts”)
    加入成员 (变量_6F610225, “History”)
    加入成员 (变量_6F610225, “Local AppData”)
    加入成员 (变量_6F610225, “Local Settings”)
    加入成员 (变量_6F610225, “My Music”)
    加入成员 (变量_6F610225, “My Pictures”)
    加入成员 (变量_6F610225, “My Video”)
    加入成员 (变量_6F610225, “NetHood”)
    加入成员 (变量_6F610225, “Personal”)
    加入成员 (变量_6F610225, “PrintHood”)
    加入成员 (变量_6F610225, “Programs”)
    加入成员 (变量_6F610225, “Recent”)
    加入成员 (变量_6F610225, “SendTo”)
    加入成员 (变量_6F610225, “Start Menu”)
    加入成员 (变量_6F610225, “Startup”)
    加入成员 (变量_6F610225, “Templates”)
    加入成员 (变量_6F610225, “Common Administrative Tools”)
    加入成员 (变量_6F610225, “Common AppData”)
    加入成员 (变量_6F610225, “Common Desktop”)
    加入成员 (变量_6F610225, “Common Documents”)
    加入成员 (变量_6F610225, “Common Favorites”)
    加入成员 (变量_6F610225, “Common Programs”)
    加入成员 (变量_6F610225, “Common Start Menu”)
    加入成员 (变量_6F610225, “Common Startup”)
    加入成员 (变量_6F610225, “Common Templates”)
    加入成员 (变量_6F610225, “CommonMusic”)
    加入成员 (变量_6F610225, “CommonPictures”)
    加入成员 (变量_6F610225, “CommonVideo”)
    加入成员 (变量_6F610225, “Temp”)
    加入成员 (变量_6F610225, “WinDir”)
    加入成员 (变量_6F610225, “System32”)
    加入成员 (变量_6F610225, “USERPROFILE”)
    加入成员 (变量_6F610225, “ALLUSERSPROFILE”)
    加入成员 (变量_6F610225, “ProgramFiles”)
    加入成员 (变量_6F610225, “CommonProgramFiles”)
    加入成员 (变量_6F610225, “SystemDrive”)
    加入成员 (变量_6F610225, “软件安装目录”)
    .如果真 (选择类型 ＜ 1 或 选择类型 ＞ 取数组成员数 (变量_6F610225))
        选择类型 ＝ 1
    .如果真结束
    .如果真 (到小写 (变量_6F610225 [选择类型]) ＝ “软件安装目录”)
        返回 (取运行目录 ())
    .如果真结束
    .如果真 (读环境变量 (到小写 (变量_6F610225 [选择类型])) ≠ “”)
        返回 (读环境变量 (到小写 (变量_6F610225 [选择类型])))
    .如果真结束
    .如果真 (到小写 (变量_6F610225 [选择类型]) ＝ 到小写 (“System32”))
        返回 (取文本左边 (读环境变量 (“ComSpec”), 倒找文本 (读环境变量 (“ComSpec”), “\”, , 假) － 1))
    .如果真结束
    返回 (取文本注册项 (选择 (到小写 (取文本左边 (到小写 (变量_6F610225 [选择类型]), 6)) ＝ “common”, #本地机器, #现行用户), “Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\” ＋ 到小写 (变量_6F610225 [选择类型]), ))

.子程序 目录_取子目录数, 整数型, 公开, 取一个文件夹下面的子目录数量；失败返回-1
    .参数 父文件夹路径, 文本型
    .局部变量 变量_68270125, 对象
    .局部变量 变量_69270125, 对象
    .局部变量 变量_6A270125, 对象
    .局部变量 变量_5BF80125, 整数型

    CoInitialize (0)
    .如果真 (变量_68270125.创建 (“scripting.FileSystemObject”, ))
        变量_69270125 ＝ 变量_68270125.对象型方法 (“GetFolder”, 父文件夹路径)
        变量_6A270125 ＝ 变量_69270125.读对象型属性 (“SubFolders”, )
        变量_5BF80125 ＝ 变量_6A270125.读数值属性 (“Count”, )
        变量_68270125.清除 ()
        CoUninitialize ()
        返回 (变量_5BF80125)
    .如果真结束
    返回 (-1)

.子程序 目录_枚举子目录, 整数型, 公开, 取一个文件夹下级子目录；成功返回子目录数量，失败返回0；
    .参数 父文件夹路径, 文本型, , 如：D:\Program Files；目录分割符请用\，路径不以\结尾会自动添加
    .参数 子目录数组, 文本型, 参考 可空 数组, 用来装载返回的子目录路径；
    .参数 是否带路径, 逻辑型, 可空, 假=不带，真=带;
    .参数 是否按字母排序, 逻辑型, 可空, 默认为假；真=按字母a-z排序  假=不排序
    .局部变量 变量_71320125, 文本型
    .局部变量 变量_5CF80125, 文本型

    变量_5CF80125 ＝ 父文件夹路径
    .如果真 (取文本右边 (变量_5CF80125, 1) ≠ “\”)
        变量_5CF80125 ＝ 变量_5CF80125 ＋ “\”
    .如果真结束
    变量_71320125 ＝ 寻找文件 (变量_5CF80125 ＋ “*.*”, #子目录)
    .判断循环首 (变量_71320125 ≠ “”)
        .如果真 (变量_71320125 ≠ “.” 且 变量_71320125 ≠ “..”)
            .如果 (是否带路径 ＝ 假)
                加入成员 (子目录数组, 变量_71320125)
            .否则
                加入成员 (子目录数组, 变量_5CF80125 ＋ 变量_71320125)
            .如果结束
            
        .如果真结束
        
        变量_71320125 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()
    .如果真 (是否按字母排序)
        数组_排序 (子目录数组, 0, )
    .如果真结束
    
    返回 (取数组成员数 (子目录数组))

.子程序 目录_枚举子目录1, 整数型, 公开, 取一个文件夹下级子目录；成功返回子目录数量，失败返回0；通过是否枚举子目录参数，可以枚举所有的子目录
    .参数 父文件夹路径, 文本型, , 如：D:\Program Files；目录分割符请用\，路径不以\结尾会自动添加
    .参数 子目录数组, 文本型, 参考 可空 数组, 用来装载返回的子目录路径；
    .参数 是否带路径, 逻辑型, 可空, 可为空默认为真,假=不带，真=带;
    .参数 是否继续向下枚举, 逻辑型, 可空, 为空，默认不枚举。
    .局部变量 变量_2BD40125, 文本型
    .局部变量 变量_2CD40125, 文本型, , "0"
    .局部变量 变量_2DD40125, 整数型
    .局部变量 变量_2ED40125, 整数型
    .局部变量 变量_3DF80125, 文本型

    变量_3DF80125 ＝ 父文件夹路径
    .如果真 (取文本右边 (变量_3DF80125, 1) ≠ “\”)
        变量_3DF80125 ＝ 变量_3DF80125 ＋ “\”
    .如果真结束
    变量_2BD40125 ＝ 寻找文件 (变量_3DF80125 ＋ “*.*”, #子目录)
    是否带路径 ＝ 选择 (是否为空 (是否带路径), 真, 是否带路径)
    .判断循环首 (变量_2BD40125 ≠ “”)
        .如果真 (变量_2BD40125 ≠ “.” 且 变量_2BD40125 ≠ “..”)
            加入成员 (变量_2CD40125, 变量_2BD40125)
            .如果 (是否带路径)
                加入成员 (子目录数组, 变量_3DF80125 ＋ 变量_2BD40125)
            .否则
                加入成员 (子目录数组, 变量_2BD40125)
            .如果结束
            
        .如果真结束
        处理事件 ()
        变量_2BD40125 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()
    变量_2ED40125 ＝ 取数组成员数 (变量_2CD40125)
    .如果真 (是否继续向下枚举)
        .计次循环首 (取数组成员数 (变量_2CD40125), 变量_2DD40125)
            .如果真 (目录_是否有子目录 (变量_3DF80125 ＋ 变量_2CD40125 [变量_2DD40125]))
                变量_2ED40125 ＝ 变量_2ED40125 ＋ 目录_枚举子目录1 (变量_3DF80125 ＋ 变量_2CD40125 [变量_2DD40125], 子目录数组, 是否带路径, 是否继续向下枚举)
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    返回 (变量_2ED40125)

.子程序 目录_取创建时间, 日期时间型, 公开, 返回创建的时间
    .参数 目录名, 文本型, 可空
    .局部变量 变量_73270125, 对象
    .局部变量 变量_74270125, 对象
    .局部变量 变量_75270125, 日期时间型

    CoInitialize (0)
    .如果真 (变量_73270125.创建 (“scripting.FileSystemObject”, ))
        变量_74270125 ＝ 变量_73270125.对象型方法 (“GetFolder”, 目录名)
        变量_75270125 ＝ 变量_74270125.读日期属性 (“DateCreated”, )
    .如果真结束
    CoUninitialize ()
    返回 (变量_75270125)

.子程序 目录_是否为空, 逻辑型, 公开, 如果为空返回真，否则返回假
    .参数 欲判断的目录路径, 文本型

    返回 (PathIsDirectoryEmptyA (欲判断的目录路径))

.子程序 目录_是否为空W, 逻辑型, 公开, 如果为空返回真，否则返回假
    .参数 欲判断的目录路径, 字节集

    返回 (DLL_PathIsDirectoryEmptyW (欲判断的目录路径))

.子程序 目录_是否有子目录, 逻辑型, 公开, 判断一个目录下有无下级子目录
    .参数 当前目录, 文本型, , 目录不以\结尾会自动添加
    .局部变量 变量_1FBC0125, 文本型
    .局部变量 变量_60F80125, 文本型

    变量_60F80125 ＝ 当前目录
    .如果真 (取文本右边 (变量_60F80125, 1) ≠ “\”)
        变量_60F80125 ＝ 变量_60F80125 ＋ “\”
    .如果真结束
    变量_1FBC0125 ＝ 寻找文件 (变量_60F80125 ＋ “*.*”, #子目录)
    .判断循环首 (变量_1FBC0125 ≠ “”)
        .如果真 (变量_1FBC0125 ≠ “” 且 变量_1FBC0125 ≠ “.” 且 变量_1FBC0125 ≠ “..”)
            返回 (真)
        .如果真结束
        变量_1FBC0125 ＝ 寻找文件 (, #子目录)
    .判断循环尾 ()
    返回 (假)

.子程序 目录_是否有子目录W, 逻辑型, 公开, 判断一个目录下有无下级子目录
    .参数 当前目录, 字节集, , 目录不以\结尾会自动添加
    .局部变量 变量_8B0C0325, 字节集
    .局部变量 变量_8D0C0325, 整数型
    .局部变量 变量_8F0C0325, WIN32_FIND_DATAW
    .局部变量 变量_900C0325, 整数型

    变量_8B0C0325 ＝ 删除Unicode结尾空白字节 (当前目录, )
    .如果真 (取字节集右边 (变量_8B0C0325, 2) ≠ { 92, 0 })
        变量_8B0C0325 ＝ 变量_8B0C0325 ＋ { 92, 0 }
    .如果真结束
    变量_8D0C0325 ＝ DLL_FindFirstFileW (变量_8B0C0325 ＋ { 42, 0, 0, 0 }, 变量_8F0C0325)
    .如果真 (变量_8D0C0325 ≠ #INVALID_HANDLE_VALUE)
        .循环判断首 ()
            变量_900C0325 ＝ 取数据_通用型_数组 (变量_8F0C0325.cFileName)
            .如果真 (DLL_lstrcmpiW (变量_900C0325, { 46, 0, 0, 0 }) ＝ 0 或 DLL_lstrcmpiW (变量_900C0325, { 46, 0, 46, 0, 0, 0 }) ＝ 0)
                到循环尾 ()
            .如果真结束
            .如果真 (位与 (变量_8F0C0325.dwFileAttributes, #FILE_ATTRIBUTE_DIRECTORY) ≠ 0)
                DLL_FindClose (变量_8D0C0325)
                返回 (真)
            .如果真结束
            
        .循环判断尾 (DLL_FindNextFileW (变量_8D0C0325, 变量_8F0C0325))
        DLL_FindClose (变量_8D0C0325)
    .如果真结束
    返回 (假)

.子程序 目录_设置系统属性, 逻辑型, 公开, 成功返回真，失败返回假； 给一个文件夹正确的属性，成为一个系统文件夹
    .参数 目录名, 文本型

    .判断开始 (目录名 ≠ “”)
        .判断开始 (PathMakeSystemFolderA (目录名) ≠ 0)
            返回 (真)
        .默认
            返回 (假)
        .判断结束
        
    .默认
        返回 (假)
    .判断结束
    

.子程序 目录_取消系统属性, 逻辑型, 公开, 成功返回真，失败返回假；
    .参数 目录名, 文本型

    .判断开始 (目录名 ≠ “”)
        .判断开始 (PathUnmakeSystemFolderA (目录名) ≠ 0)
            返回 (真)
        .默认
            返回 (假)
        .判断结束
        
    .默认
        返回 (假)
    .判断结束
    

.子程序 目录_检查系统属性, 逻辑型, 公开, 有系统属性返回真，没有返回假；
    .参数 目录名, 文本型

    .判断开始 (目录名 ≠ “”)
        .判断开始 (PathIsSystemFolderA (目录名, 0) ≠ 0)
            返回 (真)
        .默认
            返回 (假)
        .判断结束
        
    .默认
        返回 (假)
    .判断结束
    

.子程序 目录_取Windows目录, 文本型, 公开, 如：局_项数组:\WINDOWS\
    返回 (目录_取特定目录 (, #CSIDL_WINDOWS))

.子程序 目录_取system32目录, 文本型, 公开, 如：局_项数组:\WINDOWS\system32\
    返回 (目录_取特定目录 (, #CSIDL_SYSTEM))

.子程序 目录_取临时目录, 文本型, 公开, 取出Temp目录,如:局_项数组:\DO局_项数组UME~1\ADMINI~1\LO局_项数组ALS~1\Temp\
    返回 (目录_取特定目录 (11, ))

.子程序 目录_取尾部目录名或文件名, 文本型, 公开, 如果是目录:局_项数组:\001\002则返回 002；  如果是文件:局_项数组:\001\002\0.txt则返回 0.txt
    .参数 文件或目录名, 文本型, , 如果参数尾部包含\,将会被去掉

    返回 (编码_Unicode到Ansi (目录_取尾部目录名或文件名W (编码_Ansi到Unicode (文件或目录名, ))))

.子程序 目录_取尾部目录名或文件名W, 字节集, 公开, 检索指定文件的名称
    .参数 文件路径, 字节集
    .局部变量 变量_2F100325, 字节集
    .局部变量 变量_30100325, 字节集
    .局部变量 变量_31100325, 整数型

    变量_2F100325 ＝ 取空白字节集 (#<?未知本地类型?> ＋ 1)
    变量_31100325 ＝ DLL_GetFileTitleW (文件路径, 变量_2F100325, #<?未知本地类型?>)
    .如果真 (变量_31100325 ＝ #<?未知本地类型?>)
        .如果真 (位与 (DLL_GetFileAttributesW (文件路径), #FILE_ATTRIBUTE_DIRECTORY) ＝ 0)
            .如果真 (系统_取数值注册项 (#HKEY_CURRENT_USER, “SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced”, “HideFileExt”, 系统_是否64位操作系统 ()) ＝ 1)
                变量_30100325 ＝ 指针_到字节集W (DLL_PathFindExtensionW (文件路径))
                .如果真 (变量_30100325 ≠ { })
                    DLL__wcscat (变量_2F100325, 变量_30100325)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        返回 (删除Unicode结尾空白字节 (变量_2F100325, 真))
    .如果真结束
    返回 ({ })

.子程序 目录_取运行目录, 文本型, 公开, 取当前被执行的易程序文件所处的目录
    返回 (编码_Unicode到Ansi (目录_取运行目录W ()))

.子程序 目录_取运行目录W, 字节集, 公开, 取当前被执行的易程序文件所处的目录
    .局部变量 变量_22EA0225, 整数型
    .局部变量 变量_26EA0225, 字节集
    .局部变量 变量_3EEA0225, 整数型

    变量_22EA0225 ＝ GetCurrentProcess ()
    变量_26EA0225 ＝ 取空白字节集 (#MAX_PATH × 2)
    变量_3EEA0225 ＝ DLL_GetModuleFileNameExW (变量_22EA0225, #NULL, 取指针_字节集型 (变量_26EA0225), #MAX_PATH)
    CloseHandle (变量_22EA0225)
    .如果真 (变量_3EEA0225 ＝ 0)
        返回 ({ })
    .如果真结束
    变量_26EA0225 ＝ 字节集_寻找取左 (变量_26EA0225, { 92, 0 }, -1) ＋ { 0, 0 }
    返回 (变量_26EA0225)

.子程序 目录_取当前目录, 文本型, 公开, 返回一个文本，用来代表当前的目录。如果失败，返回空文本。
    返回 (编码_Unicode到Ansi (目录_取当前目录W ()))

.子程序 目录_取当前目录W, 字节集, 公开, 成功返回当前目录
    .局部变量 变量_9EEC0225, 整数型
    .局部变量 变量_9FEC0225, 字节集

    变量_9EEC0225 ＝ DLL_GetCurrentDirectoryW (0, #NULL)
    .如果真 (变量_9EEC0225 ＞ 0)
        变量_9FEC0225 ＝ 取空白字节集 (变量_9EEC0225 × 2)
        DLL_GetCurrentDirectoryW (变量_9EEC0225, 取指针_字节集型 (变量_9FEC0225))
    .如果真结束
    返回 (变量_9FEC0225)

.子程序 目录_取桌面目录, 文本型, 公开, 获取系统桌面的路径
    返回 (目录_取特定目录 (, #CSIDL_DESKTOPDIRECTORY))

.子程序 目录_是否符合规范, 逻辑型, 公开, 【严格】检查目录是否合规范，不和规范的目录返回假。判断标准:盘符:\目录
    .参数 要检查的目录, 文本型, , 需要检查的完整的目录路径，不接受相对路径
    .参数 是否禁止为根目录, 逻辑型, 可空, 如果设置为真，如果是盘符根目录返回假。默认为真。
    .局部变量 变量_095A0225, 文本型
    .局部变量 变量_015A0225, 文本型
    .局部变量 变量_025A0225, 整数型
    .局部变量 变量_035A0225, 逻辑型
    .局部变量 变量_055A0225, 文本型

    变量_095A0225 ＝ 要检查的目录
    .判断循环首 (寻找文本 (变量_095A0225, “\\”, , 假) ＞ 0)
        变量_095A0225 ＝ 子文本替换 (变量_095A0225, “\\”, “\”, , , 真)
    .判断循环尾 ()
    
    .判断循环首 (寻找文本 (变量_095A0225, “//”, , 假) ＞ 0)
        变量_095A0225 ＝ 子文本替换 (要检查的目录, “//”, “/”, , , 真)
    .判断循环尾 ()
    
    变量_015A0225 ＝ 到大写 (取文本左边 (变量_095A0225, 1))
    变量_025A0225 ＝ 取代码 (变量_015A0225, 1)
    .如果真 (变量_025A0225 ＜ 65 或 变量_025A0225 ＞ 90)
        
        返回 (假)
    .如果真结束
    
    变量_035A0225 ＝ 寻找文本 (变量_095A0225, “:\”, , 假) ≠ -1
    
    .如果真 (变量_035A0225 ＝ 假)
        变量_035A0225 ＝ 寻找文本 (变量_095A0225, “:/”, , 假) ≠ -1
        
        .如果真 (变量_035A0225 ＝ 假)
            返回 (假)
        .如果真结束
        
    .如果真结束
    
    .如果真 (是否禁止为根目录)
        变量_095A0225 ＝ 子文本替换 (变量_095A0225, “\\”, “\”, , , 真)
        变量_095A0225 ＝ 子文本替换 (变量_095A0225, “//”, “/”, , , 真)
        .如果真 (取文本长度 (变量_095A0225) ＝ 3)
            
            返回 (假)
        .如果真结束
        
    .如果真结束
    
    返回 (真)

.子程序 目录_取x86系统目录, 文本型, 公开, 取x86的system文件夹
    返回 (目录_取特定目录 (, #CSIDL_SYSTEMX86))

.子程序 目录_打开虚拟文件夹, 逻辑型, 公开, 打开我的电脑、控制面板之类的虚拟文件夹
    .参数 csidl, 整数型, , #CSIDL_*
    .局部变量 变量_7AE60225, 整数型
    .局部变量 变量_7BE60225, 自定义_2CE20241
    .局部变量 变量_C0EC0225, 逻辑型

    .如果真 (SHGetSpecialFolderLocation (#NULL, csidl, 变量_7AE60225) ≠ #<?未知本地类型?>)
        返回 (假)
    .如果真结束
    变量_7BE60225.成员_2DE20235 ＝ 60
    变量_7BE60225.成员_2EE20235 ＝ #<?未知本地类型?>
    变量_7BE60225.成员_36E20235 ＝ 变量_7AE60225
    变量_7BE60225.成员_30E20235 ＝ 编码_Ansi到Unicode (“open”, )
    变量_7BE60225.成员_34E20235 ＝ #SW_SHOWNORMAL
    变量_C0EC0225 ＝ DLL_ShellExecuteExW (变量_7BE60225)
    DLL_CoTaskMemFree (变量_7AE60225)
    返回 (变量_C0EC0225)

.子程序 目录_删除目录, 逻辑型, 公开, 删除一个存在的目录及其中的所有子目录和下属文件
    .参数 欲删除的目录, 文本型

    返回 (目录_删除目录W (编码_Ansi到Unicode (欲删除的目录, )))

.子程序 目录_删除目录W, 逻辑型, 公开, 删除一个存在的目录及其中的所有子目录和下属文件
    .参数 欲删除的目录, 字节集
    .局部变量 变量_FBE80225, 字节集
    .局部变量 变量_FCE80225, WIN32_FIND_DATAW
    .局部变量 变量_FDE80225, 整数型
    .局部变量 变量_FEE80225, 整数型
    .局部变量 变量_FFE80225, 整数型
    .局部变量 变量_00E90225, 字节集
    .局部变量 变量_01E90225, 整数型
    .局部变量 变量_02E90225, 逻辑型

    变量_FBE80225 ＝ 删除Unicode结尾空白字节 (欲删除的目录, )
    .如果真 (取字节集右边 (变量_FBE80225, 2) ≠ { 92, 0 })
        变量_FBE80225 ＝ 变量_FBE80225 ＋ { 92, 0 }
    .如果真结束
    .如果真 (寻找字节集 (变量_FBE80225, { 92, 0 }, ) ＝ 1)
        返回 (假)
    .如果真结束
    变量_FDE80225 ＝ DLL_FindFirstFileW (变量_FBE80225 ＋ { 42, 0, 0, 0 }, 变量_FCE80225)
    .如果真 (变量_FDE80225 ≠ #INVALID_HANDLE_VALUE)
        .循环判断首 ()
            变量_FEE80225 ＝ 取数据_通用型_数组 (变量_FCE80225.cFileName)
            .如果真 (变量_FEE80225 ＝ 0)
                到循环尾 ()
            .如果真结束
            变量_FFE80225 ＝ DLL_lstrlenW (变量_FEE80225)
            .如果真 (变量_FFE80225 ＝ 0)
                到循环尾 ()
            .如果真结束
            变量_00E90225 ＝ 指针到字节集 (变量_FEE80225, 变量_FFE80225 × 2 ＋ 2)
            .如果真 (变量_00E90225 ＝ { 46, 0, 0, 0 } 或 变量_00E90225 ＝ { 46, 0, 46, 0, 0, 0 })
                到循环尾 ()
            .如果真结束
            .如果真 (位与 (变量_FCE80225.dwFileAttributes, #FILE_ATTRIBUTE_DIRECTORY) ≠ 0)
                目录_删除目录W (变量_FBE80225 ＋ 变量_00E90225)
                到循环尾 ()
            .如果真结束
            .如果真 (位与 (变量_FCE80225.dwFileAttributes, #FILE_ATTRIBUTE_READONLY) ≠ 0)
                变量_01E90225 ＝ 位与 (变量_FCE80225.dwFileAttributes, 位取反 (#FILE_ATTRIBUTE_READONLY))
                DLL_SetFileAttributesW (变量_FBE80225 ＋ 变量_00E90225, 变量_01E90225)
            .如果真结束
            DLL_DeleteFileW (变量_FBE80225 ＋ 变量_00E90225)
        .循环判断尾 (DLL_FindNextFileW (变量_FDE80225, 变量_FCE80225))
        DLL_FindClose (变量_FDE80225)
        变量_02E90225 ＝ DLL_RemoveDirectoryW (变量_FBE80225 ＋ { 0, 0 })
    .如果真结束
    返回 (变量_02E90225)

.子程序 目录_监控文件修改, , 公开, 阻塞并等待被监视的目录发生改变
    .参数 要监视的目录完整路径, 文本型
    .参数 监视在指定的目录中的目录树, 逻辑型, 可空, 为假只监视指定的目录

    目录_监控文件修改W (编码_Ansi到Unicode (要监视的目录完整路径, ), 监视在指定的目录中的目录树)

.子程序 目录_监控文件修改W, , 公开, 阻塞并等待被监视的目录发生改变
    .参数 要监视的目录完整路径, 字节集
    .参数 监视在指定的目录中的目录树, 逻辑型, 可空, 为假只监视指定的目录
    .局部变量 变量_78F70225, 整数型
    .局部变量 变量_79F70225, 整数型

    变量_78F70225 ＝ DLL_FindFirstChangeNotificationW (要监视的目录完整路径, 监视在指定的目录中的目录树, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>))
    .如果真 (变量_78F70225 ＝ #INVALID_HANDLE_VALUE)
        返回 ()
    .如果真结束
    变量_79F70225 ＝ DLL_WaitForMultipleObjects (1, 取指针整数_ (变量_78F70225), 假, #INFINITE)
    DLL_FindCloseChangeNotification (变量_78F70225)

.子程序 目录_监控文件修改W1, 逻辑型, 公开, 监控目标目录下某一文件发生改变，并且可以知道发生变化的是哪一个文件。
    .参数 欲监控的目标目录, 字节集
    .参数 发生更改时回调, 整数型, , void ActionProc(DWORD Action, WCHAR* FileName, DWORD FileNameLength);
    .参数 lParam, 整数型, 参考, 调用目录_停止监控目录以释放lParam。
    .局部变量 变量_AA0B0325, 整数型
    .局部变量 变量_B10B0325, 整数型
    .局部变量 变量_B90B0325, 整数型
    .局部变量 变量_B50B0325, 整数型
    .局部变量 变量_D90B0325, 逻辑型

    .如果真 (lParam ≠ #NULL)
        目录_停止监控目录 (lParam)
    .如果真结束
    变量_AA0B0325 ＝ DLL_CreateFileW (欲监控的目标目录, 位或 (#GENERIC_READ, #GENERIC_WRITE, #<?未知本地类型?>), 位或 (#FILE_SHARE_READ, #FILE_SHARE_WRITE, #<?未知本地类型?>), #NULL, #OPEN_EXISTING, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL)
    .如果真 (变量_AA0B0325 ≠ #INVALID_HANDLE_VALUE)
        变量_B10B0325 ＝ CreateIoCompletionPort (变量_AA0B0325, #NULL, 0, 0)
        .如果真 (变量_B10B0325 ≠ #NULL)
            变量_B90B0325 ＝ 2084
            
            lParam ＝ GlobalAlloc (#GMEM_ZEROINIT, 变量_B90B0325)
            .如果真 (lParam ≠ #NULL)
                __set (lParam, 0, 变量_AA0B0325)
                __set (lParam, 4, 变量_B10B0325)
                __set (lParam, 8, 发生更改时回调)
                变量_B50B0325 ＝ CreateThread (#NULL, 0, 到整数 (&CompletionThreadProc), lParam, 0, #NULL)
                .如果真 (变量_B50B0325 ≠ #NULL)
                    __set (lParam, 12, 变量_B50B0325)
                    变量_D90B0325 ＝ DLL_ReadDirectoryChangesW (变量_AA0B0325, lParam ＋ 36, 1024, 真, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>), #NULL, lParam ＋ 16, #NULL)
                    .如果真 (变量_D90B0325)
                        返回 (真)
                    .如果真结束
                    CloseHandle (变量_B50B0325)
                .如果真结束
                GlobalFree (lParam)
                lParam ＝ #NULL
            .如果真结束
            PostQueuedCompletionStatus (变量_B10B0325, 0, 1, 0)
            CloseHandle (变量_B10B0325)
        .如果真结束
        CloseHandle (变量_AA0B0325)
    .如果真结束
    返回 (假)

.子程序 CompletionThreadProc
    .参数 变量_BE0B0325, 整数型
    .局部变量 变量_EC0B0325, 整数型
    .局部变量 变量_E90B0325, 整数型
    .局部变量 变量_EA0B0325, 整数型
    .局部变量 变量_EB0B0325, 整数型
    .局部变量 变量_F10B0325, 整数型
    .局部变量 变量_000C0325, 整数型
    .局部变量 变量_040C0325, 整数型
    .局部变量 变量_080C0325, 整数型
    .局部变量 变量_100C0325, 字节集
    .局部变量 变量_FC0B0325, 整数型
    .局部变量 变量_F50B0325, 整数型
    .局部变量 变量_F60B0325, 逻辑型

    .如果真 (变量_BE0B0325 ＝ #NULL)
        返回 ()
    .如果真结束
    变量_F50B0325 ＝ __get (变量_BE0B0325, 0)
    变量_EC0B0325 ＝ __get (变量_BE0B0325, 4)
    变量_FC0B0325 ＝ __get (变量_BE0B0325, 8)
    变量_F60B0325 ＝ 真
    .判断循环首 (GetQueuedCompletionStatus (变量_EC0B0325, 变量_E90B0325, 变量_EA0B0325, 变量_EB0B0325, #INFINITE) ≠ 0 且 变量_F60B0325)
        .如果真 (变量_EA0B0325 ＝ 1)
            跳出循环 ()
        .如果真结束
        .如果真 (变量_E90B0325 ＞ 0)
            变量_F10B0325 ＝ 0
            .判断循环首 (真)
                变量_000C0325 ＝ __get (变量_BE0B0325 ＋ 变量_F10B0325, 36)
                变量_040C0325 ＝ __get (变量_BE0B0325 ＋ 变量_F10B0325, 40)
                变量_080C0325 ＝ __get (变量_BE0B0325 ＋ 变量_F10B0325, 44)
                
                .如果真 (变量_FC0B0325 ≠ #NULL 且 变量_040C0325 ≥ #FILE_ACTION_ADDED 且 变量_040C0325 ≤ #FILE_ACTION_RENAMED_NEW_NAME)
                    调用子程序_ (变量_FC0B0325, 变量_040C0325, 变量_BE0B0325 ＋ 变量_F10B0325 ＋ 48, 变量_080C0325, , , , , , , , , , , , )
                .如果真结束
                .如果真 (变量_000C0325 ＝ 0)
                    跳出循环 ()
                .如果真结束
                变量_F10B0325 ＝ 变量_F10B0325 ＋ 变量_000C0325
            .判断循环尾 ()
        .如果真结束
        memset (变量_BE0B0325 ＋ 36, 0, 1024)
        变量_F60B0325 ＝ DLL_ReadDirectoryChangesW (变量_F50B0325, 变量_BE0B0325 ＋ 36, 1024, 真, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>), #NULL, 变量_BE0B0325 ＋ 16, #NULL)
    .判断循环尾 ()

.子程序 目录_停止监控目录, 逻辑型, 公开, 调用以释放目录_监控文件修改W1的lParam。
    .参数 lParam, 整数型, 参考
    .局部变量 变量_1C0C0325, 整数型
    .局部变量 变量_1D0C0325, 整数型
    .局部变量 变量_1F0C0325, 整数型

    .如果真 (lParam ≠ #NULL)
        变量_1D0C0325 ＝ __get (lParam, 4)
        .如果真 (变量_1D0C0325 ≠ #NULL)
            PostQueuedCompletionStatus (变量_1D0C0325, 0, 1, 0)
            CloseHandle (变量_1D0C0325)
        .如果真结束
        变量_1F0C0325 ＝ __get (lParam, 12)
        .如果真 (变量_1F0C0325 ≠ #NULL)
            CloseHandle (变量_1F0C0325)
        .如果真结束
        变量_1C0C0325 ＝ __get (lParam, 0)
        .如果真 (变量_1C0C0325 ≠ #NULL)
            CloseHandle (变量_1C0C0325)
        .如果真结束
        .如果真 (变量_1C0C0325 ≠ #NULL 且 变量_1D0C0325 ≠ #NULL 且 变量_1F0C0325 ≠ #NULL)
            GlobalFree (lParam)
            lParam ＝ #NULL
            返回 (真)
        .如果真结束
        
    .如果真结束
    返回 (假)

.子程序 目录_获取完整路径名称, 文本型, 公开, 检索指定文件的完整路径和文件名。
    .参数 文件名, 文本型

    返回 (编码_Unicode到Ansi (目录_获取完整路径名称W (编码_Ansi到Unicode (文件名, ))))

.子程序 目录_获取完整路径名称W, 字节集, 公开, 检索指定文件的完整路径和文件名。
    .参数 文件名, 字节集
    .局部变量 变量_5D020325, 整数型
    .局部变量 变量_DE100325, 字节集

    变量_5D020325 ＝ DLL_GetFullPathNameW (文件名, 0, #NULL, #NULL)
    .如果真 (变量_5D020325 ＞ 0)
        变量_DE100325 ＝ 取空白字节集 (incShl (变量_5D020325, 真))
        变量_5D020325 ＝ DLL_GetFullPathNameW (文件名, 变量_5D020325, 取指针字节集_ (变量_DE100325), #NULL)
        assignZero (变量_DE100325, incShl (变量_5D020325, ), 真)
    .如果真结束
    返回 (变量_DE100325)

.子程序 目录_附加, 文本型, 公开, 将一条路径附加到另一条路径的末尾。
    .参数 欲附加的路径, 文本型
    .参数 要附加的路径, 文本型, , ..\pszMore

    返回 (编码_Unicode到Ansi (目录_附加W (编码_Ansi到Unicode (欲附加的路径, ), 编码_Ansi到Unicode (要附加的路径, ))))

.子程序 目录_附加W, 字节集, 公开, 将一条路径附加到另一条路径的末尾。
    .参数 欲附加的路径, 字节集
    .参数 要附加的路径, 字节集, , ..\pszMore
    .局部变量 变量_A4090325, 整数型
    .局部变量 变量_A3090325, 字节集

    变量_A4090325 ＝ 取字节集长度 (欲附加的路径)
    .如果真 (变量_A4090325 ＞ 2 且 变量_A4090325 ≤ incShl (#MAX_PATH, 真))
        变量_A3090325 ＝ 取空白字节集 (incShl (#MAX_PATH, 真))
        memcpy (取指针字节集_ (变量_A3090325), 取指针字节集_ (欲附加的路径), 变量_A4090325)
        .如果真 (DLL_PathAppendW (变量_A3090325, 要附加的路径))
            返回 (删除Unicode结尾空白字节 (变量_A3090325, 真))
        .如果真结束
        
    .如果真结束
    返回 ({ })

.子程序 文件_创建映射对象, 整数型, 公开, 成功返回映射对象句柄,失败返回0
    .参数 映射对象名, 文本型, , 映射对象名,可随意填写
    .参数 映射对象的值, 整数型, , 映射对象的值,为整数型
    .局部变量 变量_61740125, 整数型
    .局部变量 变量_62740125, 整数型

    变量_61740125 ＝ CreateFileMappingA (-1, 0, 4, 0, 4, 映射对象名)
    变量_62740125 ＝ MapViewOfFile (变量_61740125, 6, 0, 0, 0)
    RtlMoveMemory_Eint_int (变量_62740125, 映射对象的值, 4)
    
    返回 (变量_62740125)

.子程序 文件_读取映射对象, 整数型, 公开, 读取映射对象的值
    .参数 映射对象名, 文本型, , 用【文件_创建映射对象】命令分创建时的映射对象名
    .局部变量 变量_64740125, 整数型
    .局部变量 变量_65740125, 整数型
    .局部变量 变量_66740125, 整数型

    .如果真 (变量_65740125 ＝ 0)
        变量_64740125 ＝ OpenFileMappingA (6, 0, 映射对象名)
        变量_65740125 ＝ MapViewOfFile (变量_64740125, 6, 0, 0, 0)
    .如果真结束
    .如果真 (变量_65740125 ≠ 0)
        RtlMoveMemory_整数传址1 (变量_66740125, 变量_65740125, 4)
    .如果真结束
    返回 (变量_66740125)

.子程序 文件_句柄取路径, 文本型, 公开, 根据文件句柄获取文件所在路径，失败返回空文本。
    .参数 文件句柄, 整数型
    .局部变量 变量_6EDB0125, 整数型
    .局部变量 变量_6FDB0125, 自定义_87DB0141
    .局部变量 变量_70DB0125, 自定义_88DB0141
    .局部变量 变量_71DB0125, 自定义_89DB0141
    .局部变量 变量_72DB0125, 整数型
    .局部变量 变量_73DB0125, 整数型
    .局部变量 变量_74DB0125, 文本型
    .局部变量 变量_75DB0125, 整数型
    .局部变量 变量_76DB0125, 字节集
    .局部变量 变量_77DB0125, 整数型
    .局部变量 变量_78DB0125, 文本型
    .局部变量 变量_79DB0125, 字节集
    .局部变量 变量_7ADB0125, 字节集
    .局部变量 变量_7BDB0125, 整数型

    .如果 (GetFileInformationByHandle (文件句柄, 变量_71DB0125))
        变量_7ADB0125 ＝ 取空白字节集 (256)
        变量_75DB0125 ＝ GetLogicalDriveStringsA (256, 变量_7ADB0125)
        .变量循环首 (0, 变量_75DB0125 ÷ 4 － 1, 1, 变量_77DB0125)
            变量_78DB0125 ＝ 到文本 (取字节集中间 (变量_7ADB0125, 4 × 变量_77DB0125 ＋ 1, 4))
            .如果真 (GetVolumeInformation (变量_78DB0125, 字符 (0), 0, 变量_7BDB0125, 0, 0, 字符 (0), 0))
                .如果真 (变量_7BDB0125 ＝ 变量_71DB0125.成员_92DB0135)
                    跳出循环 ()
                .如果真结束
                
            .如果真结束
            处理事件 ()
        .变量循环尾 ()
        变量_78DB0125 ＝ 取文本左边 (变量_78DB0125, 2)
    .否则
        返回 (“”)
    .如果结束
    变量_72DB0125 ＝ GlobalAlloc (64, 528)
    变量_6EDB0125 ＝ ZwQueryInformationFile (文件句柄, 变量_6FDB0125, 变量_72DB0125, 528, 9)
    .如果真 (变量_6EDB0125 ＝ 0)
        变量_73DB0125 ＝ 取字节集数据 (指针到字节集 (变量_72DB0125, 4), #整数型, )
        变量_74DB0125 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_72DB0125 ＋ 4, 变量_73DB0125))
    .如果真结束
    GlobalFree (变量_72DB0125)
    返回 (变量_78DB0125 ＋ 变量_74DB0125)

.子程序 文件_句柄取路径W, 字节集, 公开, 通过文件句柄获取文件所在路径
    .参数 文件句柄, 整数型
    .局部变量 变量_7A100325, 字节集

    变量_7A100325 ＝ 取空白字节集 (#<?未知本地类型?> ＋ 1)
    DLL_GetFinalPathNameByHandleW (文件句柄, 变量_7A100325, #<?未知本地类型?>, #<?未知本地类型?>)
    返回 (删除Unicode结尾空白字节 (DosToLogicalDrive (变量_7A100325), 真))

.子程序 文件_取属性, 整数型, 公开, 返回一个文件或目录的属性。此属性值由以下常量或其和构成： 1、#只读文件； 2、#隐藏文件；  4、#系统文件； 16、#子目录；32、#存档文件 。要判断是否设置了某个属性，在返回值与想要得知的属性值之间使用“位与”命令进行比较。如果所得的结果不为零，则表示设置了这个属性值。如果取文件属性失败，将返回 -1。
    .参数 文件名, 文本型

    返回 (GetFileAttributes (文件名))

.子程序 文件_移除属性, 逻辑型, 公开, 移除指定文件的属性信息
    .参数 文件的绝对路径, 文本型
    .参数 欲设置的属性值, 整数型, , 参数值可以为以下常量值或其和： 1、#只读文件； 2、#隐藏文件； 4、#系统文件； 32、#存档文件 。通过将这些常量值加起来可以一次设置多个文件属性

    返回 (文件_移除属性W (编码_Ansi到Unicode (文件的绝对路径, ), 欲设置的属性值))

.子程序 文件_移除属性W, 逻辑型, 公开, 移除指定文件的属性信息
    .参数 文件的绝对路径, 字节集
    .参数 欲设置的属性值, 整数型, , 参数值可以为以下常量值或其和： 1、#只读文件； 2、#隐藏文件； 4、#系统文件； 32、#存档文件 。通过将这些常量值加起来可以一次设置多个文件属性
    .局部变量 变量_1AE90225, 整数型

    变量_1AE90225 ＝ DLL_GetFileAttributesW (文件的绝对路径)
    变量_1AE90225 ＝ 位与 (变量_1AE90225, 位取反 (欲设置的属性值))
    返回 (DLL_SetFileAttributesW (文件的绝对路径, 变量_1AE90225))

.子程序 文件_取类型, 文本型, 公开, 获取文件类型，如.exe文件，则返回“应用程序”，失败则返回空。
    .参数 文件路径, 文本型
    .局部变量 变量_37DC0125, 自定义_AEBD0141

    线程_初始化COM库 ()
    DLL_SHGetFileInfoA (文件路径, 0, 变量_37DC0125, 348, 1024)
    线程_取消COM库 ()
    返回 (到文本 (变量_37DC0125.成员_B3BD0135))

.子程序 文件_取图标句柄, 整数型, 公开, 获取文件的图标句柄
    .参数 路径, 文本型
    .局部变量 变量_7FE90125, 自定义_AEBD0141

    线程_初始化COM库 ()
    DLL_SHGetFileInfoA (路径, 128, 变量_7FE90125, 348, 256)
    线程_取消COM库 ()
    返回 (变量_7FE90125.成员_AFBD0135)

.子程序 文件_路径是否规范, 逻辑型, 公开, 用于【严格】检查完整路径是否规范。检查规则：盘符:\目录名\二级目录名\文件名.文件后缀
    .参数 要检查的完整路径, 文本型
    .参数 是否不检查后缀, 逻辑型, 可空, 用于指定是否检查文件的后缀，如果为假，则忽略文件后缀。默认为真
    .局部变量 变量_E5590225, 文本型
    .局部变量 变量_E9590225, 整数型
    .局部变量 变量_E2590225, 逻辑型
    .局部变量 变量_ED590225, 文本型

    .如果真 (是否为空 (是否不检查后缀))
        是否不检查后缀 ＝ 真
    .如果真结束
    变量_E5590225 ＝ 到大写 (取文本左边 (要检查的完整路径, 1))
    变量_E9590225 ＝ 取代码 (变量_E5590225, 1)
    .如果真 (变量_E9590225 ＜ 65 或 变量_E9590225 ＞ 90)
        
        返回 (假)
    .如果真结束
    
    变量_E2590225 ＝ 寻找文本 (要检查的完整路径, “:\”, , 假) ≠ -1
    
    .如果真 (变量_E2590225 ＝ 假)
        变量_E2590225 ＝ 寻找文本 (要检查的完整路径, “:/”, , 假) ≠ -1
        
        .如果真 (变量_E2590225 ＝ 假)
            返回 (假)
        .如果真结束
        
    .如果真结束
    
    变量_ED590225 ＝ 文件_取文件名 (要检查的完整路径, 真)
    .如果真 (变量_ED590225 ＝ “”)
        返回 (假)
    .如果真结束
    
    .如果真 (内部_命名规则过滤 (变量_ED590225))
        返回 (假)
    .如果真结束
    
    .如果真 (是否不检查后缀 ＝ 假)
        变量_E9590225 ＝ 倒找文本 (变量_ED590225, “.”, , 假)
        返回 (变量_E9590225 ＞ 1 且 变量_E9590225 ＜ 取文本长度 (变量_ED590225))
        
    .如果真结束
    
    返回 (变量_ED590225 ≠ “”)
    

.子程序 内部_命名规则过滤, 逻辑型
    .参数 变量_BD810225, 文本型
    .局部变量 变量_B3810225, 文本型, , "0"
    .局部变量 变量_BA810225, 整数型

    变量_B3810225 ＝ { “?”, “/”, “\”, “<”, “>”, “*”, “|”, “:” }
    加入成员 (变量_B3810225, #引号)
    .计次循环首 (9, 变量_BA810225)
        .如果真 (寻找文本 (变量_BD810225, 变量_B3810225 [变量_BA810225], , 假) ≠ -1)
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
    返回 (假)

.子程序 文件_文件操作W, 逻辑型, 公开, 复制、移动、重命名或删除文件系统对象。
    .参数 命令类型, 整数型, , 1、移动；2、复制；3、删除；4、重命名
    .参数 一个或多个源文件名, 字节集, , 多个文件名之间用字符0隔开！
    .参数 目标文件或目录名称, 字节集, 可空, 多个文件名之间用字符0隔开
    .参数 文件操作选项, 整数型, 可空, 1、不询问；2、不提示；4、不显示进度
    .局部变量 变量_6DF20225, 自定义_E1870141
    .局部变量 变量_6EF20225, 整数型

    .如果真 (命令类型 ＜ 1 或 命令类型 ＞ 4)
        输出调试文本 (“请严格传递命令类型！”)
        返回 (假)
    .如果真结束
    变量_6DF20225.成员_E3870135 ＝ 多项选择 (命令类型, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
    变量_6DF20225.成员_E4870135 ＝ 一个或多个源文件名 ＋ { 0, 0 }
    .如果真 (变量_6DF20225.成员_E3870135 ≠ #<?未知本地类型?>)
        .如果真 (目标文件或目录名称 ＝ { })
            输出调试文本 (“目标文件或目录名称不能传递空值！”)
            返回 (假)
        .如果真结束
        变量_6DF20225.成员_E5870135 ＝ 目标文件或目录名称 ＋ { 0, 0 }
    .如果真结束
    变量_6DF20225.成员_E6870135 ＝ #<?未知本地类型?>
    .如果真 (位与 (文件操作选项, 1) ≠ 0)
        变量_6DF20225.成员_E6870135 ＝ 位或 (变量_6DF20225.成员_E6870135, #<?未知本地类型?>)
    .如果真结束
    .如果真 (位与 (文件操作选项, 2) ≠ 0)
        变量_6DF20225.成员_E6870135 ＝ 位或 (变量_6DF20225.成员_E6870135, #<?未知本地类型?>)
    .如果真结束
    .如果真 (位与 (文件操作选项, 4) ≠ 0)
        变量_6DF20225.成员_E6870135 ＝ 位或 (变量_6DF20225.成员_E6870135, #<?未知本地类型?>)
    .如果真结束
    变量_6EF20225 ＝ DLL_SHFileOperationW (变量_6DF20225)
    .如果真 (变量_6EF20225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_6EF20225, “Shell32.dll”))
    .如果真结束
    .如果真 (变量_6DF20225.成员_E8870135 ≠ 0)
        DLL_SHFreeNameMappings (变量_6DF20225.成员_E8870135)
    .如果真结束
    返回 (变量_6EF20225 ＝ 0 且 变量_6DF20225.成员_E7870135 ＝ 0)

.子程序 GetIPropertyStore, 字节集, 公开, VARIANT
    .参数 szPath, 字节集
    .参数 key, 字节集
    .局部变量 变量_55FB0225, 整数型
    .局部变量 变量_56FB0225, 整数型
    .局部变量 变量_57FB0225, 整数型
    .局部变量 变量_60FB0225, 整数型
    .局部变量 变量_66FB0225, 整数型
    .局部变量 变量_7CFB0225, 短整数型
    .局部变量 变量_7FFB0225, 长整数型
    .局部变量 变量_6AFB0225, 字节集
    .局部变量 变量_61FB0225, 整数型

    
    
    CoInitialize (#NULL)
    变量_55FB0225 ＝ DLL_SHGetPropertyStoreFromParsingName (取指针_字节集型 (szPath), #NULL, #<?未知本地类型?>, 取指针_字节集型 (#图片资源_54FB0228), 变量_56FB0225)
    .如果真 (变量_55FB0225 ＝ #<?未知本地类型?> 且 变量_56FB0225 ≠ #NULL)
        变量_57FB0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
        
        
        
        ' .如果真 (变量_55FB0225 ＝ #<?未知本地类型?> 且 变量_60FB0225 ＞ 0)
            
            ' .变量循环首 (0, 变量_60FB0225 － 1, 1, 变量_61FB0225)
                
                
                ' .如果真 (变量_55FB0225 ＝ #<?未知本地类型?>)
                    
                    
                    ' .如果真 (变量_55FB0225 ＝ #<?未知本地类型?>)
                        
                        
                    ' .如果真结束
                    
                ' .如果真结束
                
            ' .变量循环尾 ()
            
        ' .如果真结束
        
        变量_55FB0225 ＝ CallObject (变量_56FB0225, #<?未知本地类型?>, 取指针_字节集型 (key), 变量_57FB0225, , , , , , , )
        变量_6AFB0225 ＝ 指针到字节集 (变量_57FB0225, 16)
        
        LocalFree (变量_57FB0225)
        SafeRelease (变量_56FB0225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_6AFB0225)

.子程序 SetIPropertyStore, 逻辑型, 公开
    .参数 szPath, 字节集
    .参数 key, 字节集
    .参数 pv, 字节集, , VARIANT
    .局部变量 变量_76FB0225, 整数型
    .局部变量 变量_77FB0225, 整数型
    .局部变量 变量_78FB0225, 逻辑型

    CoInitialize (#NULL)
    变量_76FB0225 ＝ DLL_SHGetPropertyStoreFromParsingName (取指针_字节集型 (szPath), #NULL, #<?未知本地类型?>, 取指针_字节集型 (#图片资源_54FB0228), 变量_77FB0225)
    .如果真 (变量_76FB0225 ＝ #<?未知本地类型?> 且 变量_77FB0225 ≠ #NULL)
        变量_76FB0225 ＝ CallObject (变量_77FB0225, #<?未知本地类型?>, 取指针_字节集型 (key), 取指针_字节集型 (pv), , , , , , , )
        .如果真 (变量_76FB0225 ＝ #<?未知本地类型?>)
            变量_76FB0225 ＝ CallObject (变量_77FB0225, #<?未知本地类型?>, , , , , , , , , )
            变量_78FB0225 ＝ 变量_76FB0225 ＝ #<?未知本地类型?>
        .如果真结束
        SafeRelease (变量_77FB0225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_78FB0225)

.子程序 文件_取MIME类型, 文本型, 公开, 成功返回MIME类型
    .参数 文件路径, 文本型

    返回 (编码_Unicode到Ansi (文件_取MIME类型W (编码_Ansi到Unicode (文件路径, ))))

.子程序 文件_取MIME类型W, 字节集, 公开, 成功返回MIME类型
    .参数 文件路径, 字节集
    .局部变量 变量_1F000325, 整数型
    .局部变量 变量_21000325, 字节集
    .局部变量 变量_20000325, 整数型

    变量_20000325 ＝ DLL_FindMimeFromData (#NULL, 取指针_字节集型 (文件路径), #NULL, 0, #NULL, #<?未知本地类型?>, 变量_1F000325, 0)
    .如果真 (变量_20000325 ＝ #<?未知本地类型?> 且 变量_1F000325 ≠ #NULL)
        变量_21000325 ＝ 指针_到字节集W (变量_1F000325)
        DLL_CoTaskMemFree (变量_1F000325)
    .如果真结束
    返回 (变量_21000325)

