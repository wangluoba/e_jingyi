.版本 2

.程序集 集_文本
.程序集变量 类变量_E5040115, 整数型

.子程序 数组_去重复_整数型, 整数型, 公开, 返回剩余不重复数组的成员数量
    .参数 整数数组, 整数型, 数组, 要去重复的 整数数组
    .局部变量 变量_60D20225, 整数型
    .局部变量 变量_61D20225, 长整数型
    .局部变量 变量_62D20225, 整数型

    
    数组排序 (整数数组, 真)
    变量_60D20225 ＝ 取数组成员数 (整数数组)
    变量_61D20225 ＝ 0
    变量_62D20225 ＝ 1
    .判断循环首 (变量_62D20225 ≤ 变量_60D20225)
        变量_61D20225 ＝ 变量_61D20225 ＋ 1
        整数数组 [变量_61D20225] ＝ 整数数组 [变量_62D20225]
        .循环判断首 ()
            变量_62D20225 ＝ 变量_62D20225 ＋ 1
            .如果真 (变量_62D20225 ＞ 变量_60D20225)
                跳出循环 ()
            .如果真结束
            
        .循环判断尾 (整数数组 [变量_61D20225] ＝ 整数数组 [变量_62D20225])
    .判断循环尾 ()
    重定义数组 (整数数组, 真, 变量_61D20225)
    返回 (变量_61D20225)

.子程序 数组_去重复_整数型1, 整数型, 公开, 去重复并返回剩余不重复数组的成员数量
    .参数 整数数组, 整数型, 数组, 要去重复的 整数数组
    .局部变量 变量_770D0325, 整数型
    .局部变量 变量_780D0325, 整数型, , "0"
    .局部变量 变量_790D0325, 整数型
    .局部变量 变量_7A0D0325, 整数型
    .局部变量 变量_7B0D0325, 整数型
    .局部变量 变量_7C0D0325, 整数型
    .局部变量 变量_7D0D0325, 双精度小数型

    
    
    .如果真 (取数组成员数 (整数数组) ＝ 0)
        返回 (0)
    .如果真结束
    
    连续赋值 (整数数组 [1], 变量_790D0325, 变量_7A0D0325)
    .变量循环首 (2, 取数组成员数 (整数数组), 1, 变量_770D0325)
        .如果 (整数数组 [变量_770D0325] ＞ 变量_790D0325)
            变量_790D0325 ＝ 整数数组 [变量_770D0325]
        .否则
            .如果真 (整数数组 [变量_770D0325] ＜ 变量_7A0D0325)
                变量_7A0D0325 ＝ 整数数组 [变量_770D0325]
            .如果真结束
            
        .如果结束
        
    .变量循环尾 ()
    变量_7B0D0325 ＝ 变量_790D0325 － 变量_7A0D0325 ＋ 1
    变量_7D0D0325 ＝ 变量_7A0D0325 － 1
    
    重定义数组 (变量_780D0325, 假, 变量_7B0D0325)
    .计次循环首 (取数组成员数 (整数数组), 变量_770D0325)
        .如果真 (变量_780D0325 [整数数组 [变量_770D0325] － 变量_7D0D0325] ＝ 0)
            变量_780D0325 [整数数组 [变量_770D0325] － 变量_7D0D0325] ＝ 1
        .如果真结束
        
    .计次循环尾 ()
    
    .计次循环首 (取数组成员数 (变量_780D0325), 变量_770D0325)
        .如果真 (变量_780D0325 [变量_770D0325] ＝ 1)
            变量_7C0D0325 ＝ 变量_7C0D0325 ＋ 1
            整数数组 [变量_7C0D0325] ＝ 变量_770D0325 ＋ 变量_7D0D0325
        .如果真结束
        
    .计次循环尾 ()
    重定义数组 (整数数组, 真, 变量_7C0D0325)
    返回 (取数组成员数 (整数数组))

.子程序 文本_取长度ex, 整数型, 公开, 全角汉字字符算一个长度
    .参数 参数_被计算文本, 文本型
    .局部变量 变量_8EE70225, 字节集

    变量_8EE70225 ＝ 编码_Ansi到Unicode (参数_被计算文本, )
    返回 (文本_取长度W (变量_8EE70225))

.子程序 文本_分割文本, 整数型, 公开, 能够将连续的分隔符视为一个分隔符 返回成员数
    .参数 待分割文本, 文本型
    .参数 分隔符, 文本型, 可空
    .参数 返回子文本数目, 整数型, 可空
    .参数 返回数组, 文本型, 参考 数组
    .局部变量 变量_3CAF0225, 整数型
    .局部变量 变量_3DAF0225, 文本型, , "0"

    重定义数组 (返回数组, 假, 0)
    .如果真 (分隔符 ＝ “”)
        分隔符 ＝ “,”
    .如果真结束
    .如果 (返回子文本数目 ＝ 0)
        变量_3DAF0225 ＝ 分割文本 (待分割文本, 分隔符, )
    .否则
        变量_3DAF0225 ＝ 分割文本 (待分割文本, 分隔符, 返回子文本数目)
    .如果结束
    
    .计次循环首 (取数组成员数 (变量_3DAF0225), 变量_3CAF0225)
        .如果真 (变量_3DAF0225 [变量_3CAF0225] ≠ “”)
            加入成员 (返回数组, 变量_3DAF0225 [变量_3CAF0225])
        .如果真结束
        
    .计次循环尾 ()
    返回 (取数组成员数 (返回数组))
    

.子程序 文本_寻找文本, 整数型, 公开, 成功找到返回位置索引，未找到返回-1。调用Ntdll命令，比核心库快三倍以上，注意！此命令不是严格按易语言文本型来查找。
    .参数 参_原始文本, 文本型
    .参数 参_查找文本, 文本型
    .参数 参_搜寻位置, 整数型, 可空, 可以被省略。位置值从 1 开始。如果本参数被省略，默认为 1
    .参数 参_不分大写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。
    .局部变量 变量_E7B10225, 文本型
    .局部变量 变量_E8B10225, 文本型

    .如果真 (参_搜寻位置 ＝ 0)
        参_搜寻位置 ＝ 1
    .如果真结束
    
    .如果真 (取文本长度 (参_原始文本) ＝ 0 或 取文本长度 (参_查找文本) ＝ 0)
        返回 (-1)
    .如果真结束
    
    
    .判断开始 (参_不分大写)
        变量_E7B10225 ＝ 参_原始文本
        变量_E8B10225 ＝ 参_查找文本
        返回 (_寻找文本 (DLL___strlwr (变量_E7B10225), DLL___strlwr (变量_E8B10225), 参_搜寻位置))
    .默认
        返回 (_寻找文本 (参_原始文本, 参_查找文本, 参_搜寻位置))
    .判断结束
    

.子程序 _寻找文本, 整数型
    .参数 变量_68AE0225, 文本型
    .参数 变量_69AE0225, 文本型
    .参数 变量_6AAE0225, 整数型
    .局部变量 变量_6BAE0225, 整数型
    .局部变量 变量_6CAE0225, 整数型

    .如果真 (变量_68AE0225 ＝ “”)
        返回 (-1)
    .如果真结束
    变量_6CAE0225 ＝ 取指针文本_ (变量_68AE0225)
    变量_6AAE0225 ＝ 变量_6AAE0225 － 1
    变量_6BAE0225 ＝ DLL__strstr (变量_6CAE0225 ＋ 变量_6AAE0225, 变量_69AE0225)
    .如果真 (变量_6BAE0225 ＝ 0)
        返回 (-1)
    .如果真结束
    返回 (变量_6BAE0225 － 变量_6CAE0225 ＋ 1)

.子程序 文本_是否UTF8_汇编, 逻辑型, 公开, utf8编码返回真, 其他编码返回假, 支持多线程; 感谢【@jr21066 】
    .参数 参_内容, 字节集

    .如果真 (参_内容 ＝ { })
        返回 (假)
    .如果真结束
    置入代码 ({ 86, 87, 83, 139, 69, 8, 139, 24, 139, 75, 4, 139, 48, 131, 198, 8, 139, 67, 8, 37, 255, 255, 255, 0, 61, 191, 187, 239, 0, 116, 101, 172, 138, 224, 60, 127, 118, 88, 192, 232, 6, 60, 6, 117, 19, 172, 80, 192, 232, 6, 60, 2, 117, 74, 88, 192, 232, 7, 60, 0, 116, 70, 235, 62, 138, 196, 192, 232, 4, 60, 14, 117, 18, 172, 192, 232, 6, 60, 2, 117, 47, 172, 192, 232, 6, 60, 2, 117, 39, 235, 41, 138, 196, 192, 232, 3, 60, 30, 117, 28, 172, 192, 232, 6, 60, 2, 117, 20, 172, 192, 232, 6, 60, 2, 117, 12, 172, 192, 232, 6, 60, 2, 117, 4, 235, 6, 226, 159, 51, 192, 235, 3, 51, 192, 64, 91, 95, 94, 201, 194, 4, 0 })
    返回 (假)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

.子程序 文本_均分文本, , 公开, 根据换行符将大文件内容均分为几段来处理
    .参数 参_内容, 字节集, , 要处理的文本内容
    .参数 参_文本数组, 文本型, 数组, 用于存放返回文本的数组
    .参数 参_分割数, 整数型, , 分割的段数
    .局部变量 变量_A9AD0225, 整数型
    .局部变量 变量_AAAD0225, 整数型
    .局部变量 变量_ABAD0225, 字节集
    .局部变量 变量_ACAD0225, 整数型

    
    变量_ABAD0225 ＝ 参_内容
    
    变量_A9AD0225 ＝ 四舍五入 (取字节集长度 (变量_ABAD0225) ÷ 参_分割数, )
    清除数组 (参_文本数组)
    .计次循环首 (参_分割数 － 1, 变量_ACAD0225)
        
        变量_AAAD0225 ＝ 倒找字节集 (变量_ABAD0225, { 13, 10 }, 变量_A9AD0225)
        加入成员 (参_文本数组, 到文本 (取字节集中间 (变量_ABAD0225, 1, 变量_AAAD0225)))
        变量_ABAD0225 ＝ 取字节集右边 (变量_ABAD0225, 取字节集长度 (变量_ABAD0225) － 变量_AAAD0225)
    .计次循环尾 ()
    
    加入成员 (参_文本数组, 到文本 (变量_ABAD0225))

.子程序 文本_均分文本1, 文本型, 公开, 按长度给文本加入换行符
    .参数 欲均分的文本, 文本型
    .参数 每行文本长度, 整数型
    .局部变量 变量_3DE30225, 逻辑型
    .局部变量 变量_3EE30225, 文本型, , "0"
    .局部变量 变量_3FE30225, 文本型
    .局部变量 变量_40E30225, 文本型
    .局部变量 变量_41E30225, 整数型

    
    变量_3FE30225 ＝ 编码_Ansi到Unicode_文本型 (欲均分的文本)
    变量_3EE30225 ＝ 分割文本 (变量_3FE30225, “&#”, )
    变量_3DE30225 ＝ 真
    .计次循环首 (取数组成员数 (变量_3EE30225), 变量_41E30225)
        变量_40E30225 ＝ 变量_40E30225 ＋ 编码_Unicode到Ansi_文本型 (“&#” ＋ 变量_3EE30225 [变量_41E30225])
        .如果真 (取文本长度 (变量_40E30225) ≥ 每行文本长度 且 变量_3DE30225 ＝ 真)
            变量_40E30225 ＝ 变量_40E30225 ＋ #换行符
            变量_3DE30225 ＝ 假
        .如果真结束
        .如果真 (变量_3DE30225 ＝ 假)
            .如果真 (取文本长度 (文本_取右边 (变量_40E30225, #换行符, , )) ≥ 每行文本长度)
                变量_40E30225 ＝ 变量_40E30225 ＋ #换行符
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    返回 (变量_40E30225)

.子程序 文本_删除空行_汇编, 文本型, 公开, 一次完成搜索替换
    .参数 参_内容, 文本型
    .局部变量 变量_360C0325, 文本型

    .如果真 (参_内容 ＝ “”)
        返回 (“”)
    .如果真结束
    变量_360C0325 ＝ 取空白文本 (取文本长度 (参_内容))
    取指针文本_ (参_内容)
    
    置入代码 ({ 96, 139, 240, 139, 125, 252, 51, 192, 51, 219, 51, 201, 172, 60, 0, 116, 82, 60, 13, 116, 68, 60, 10, 116, 68, 138, 224, 131, 249, 1, 117, 45, 102, 131, 251, 1, 117, 3, 176, 13, 170, 102, 129, 251, 0, 1, 117, 3, 176, 10, 170, 102, 129, 251, 1, 1, 117, 6, 176, 10, 170, 176, 13, 170, 102, 129, 251, 1, 2, 117, 6, 176, 13, 170, 176, 10, 170, 138, 196, 170, 185, 1, 0, 0, 0, 51, 219, 235, 179, 179, 1, 235, 175, 138, 251, 254, 199, 235, 169, 170, 97 })
    返回 (变量_360C0325)

.子程序 文本_取全部汉字拼音, 文本型, 公开, 支持取出文本中所有国标汉字的拼音，默认不保留非国标汉字字符。
    .参数 文本, 文本型, , 欲取拼音的文本
    .参数 保留非汉字, 逻辑型, 可空, 默认假，不保留原文本里的符号和数字等非国标汉字字符；真则保留。
    .局部变量 变量_11A50225, 字节集
    .局部变量 变量_12A50225, 整数型
    .局部变量 变量_13A50225, 整数型
    .局部变量 变量_14A50225, 整数型
    .局部变量 变量_15A50225, 文本型
    .局部变量 变量_16A50225, 文本型
    .局部变量 变量_17A50225, 文本型

    .如果真 (是否为空 (保留非汉字))
        保留非汉字 ＝ 假
    .如果真结束
    变量_11A50225 ＝ 到字节集 (文本)
    变量_12A50225 ＝ 取字节集长度 (变量_11A50225)
    变量_13A50225 ＝ 1
    .判断循环首 (变量_13A50225 ≤ 变量_12A50225)
        .如果 (变量_13A50225 ＞ 变量_12A50225)
            变量_14A50225 ＝ 1
        .否则
            .如果 (变量_11A50225 [变量_13A50225] ＞ 128)
                变量_14A50225 ＝ 2
                变量_16A50225 ＝ 到文本 (取字节集中间 (变量_11A50225, 变量_13A50225, 2))
                变量_17A50225 ＝ 取拼音 (变量_16A50225, 1)
                .判断开始 (取文本长度 (删全部空 (变量_17A50225)) ≠ 0)
                    变量_15A50225 ＝ 变量_15A50225 ＋ 变量_17A50225 ＋ “空”
                .默认
                    .如果真 (保留非汉字)
                        变量_15A50225 ＝ 变量_15A50225 ＋ 变量_16A50225
                    .如果真结束
                    
                .判断结束
                
            .否则
                .如果 (变量_11A50225 [变量_13A50225] ≠ 13)
                    变量_14A50225 ＝ 1
                .否则
                    .如果 (变量_11A50225 [变量_13A50225 ＋ 1] ＝ 10)
                        变量_14A50225 ＝ 2
                    .否则
                        变量_14A50225 ＝ 1
                        
                    .如果结束
                    
                .如果结束
                
                .如果真 (保留非汉字)
                    .如果 (取文本长度 (删全部空 (取拼音 (到文本 (取字节集中间 (变量_11A50225, 变量_13A50225 ＋ 1, 2)), 1))) ≠ 0)
                        变量_15A50225 ＝ 变量_15A50225 ＋ 到文本 (取字节集中间 (变量_11A50225, 变量_13A50225, 变量_14A50225)) ＋ “空”
                    .否则
                        变量_15A50225 ＝ 变量_15A50225 ＋ 到文本 (取字节集中间 (变量_11A50225, 变量_13A50225, 变量_14A50225))
                    .如果结束
                    
                .如果真结束
                
            .如果结束
            
        .如果结束
        变量_13A50225 ＝ 变量_13A50225 ＋ 变量_14A50225
    .判断循环尾 ()
    变量_15A50225 ＝ 子文本替换 (变量_15A50225, “ ”, “”, , , 真)
    变量_15A50225 ＝ 子文本替换 (变量_15A50225, “空”, “ ”, , , 真)
    
    .如果真 (取文本右边 (变量_15A50225, 1) ＝ “ ”)
        变量_15A50225 ＝ 取文本左边 (变量_15A50225, 取文本长度 (变量_15A50225) － 1)
    .如果真结束
    返回 (变量_15A50225)

.子程序 文本_插入文本到关键字所在行后, 文本型, 公开, 插入文本到关键字所在行后，返回处理后的文本  [Harry· 提供]
    .参数 原文本, 文本型
    .参数 关键字, 文本型
    .参数 插入内容, 文本型
    .参数 是否换行, 逻辑型, 可空, 是否换行插入文本，默认为真
    .局部变量 变量_0EA20225, 整数型
    .局部变量 变量_0FA20225, 文本型, , "0"
    .局部变量 变量_10A20225, 文本型

    变量_0FA20225 ＝ 分割文本 (原文本, #换行符, )
    .如果真 (是否为空 (是否换行) ＝ 真)
        是否换行 ＝ 真
    .如果真结束
    .计次循环首 (取数组成员数 (变量_0FA20225), 变量_0EA20225)
        .如果 (寻找文本 (变量_0FA20225 [变量_0EA20225], 关键字, , 假) ≠ -1)
            .如果 (是否换行 ＝ 真)
                变量_0FA20225 [变量_0EA20225] ＝ 变量_0FA20225 [变量_0EA20225] ＋ #换行符 ＋ 插入内容 ＋ #换行符
            .否则
                变量_0FA20225 [变量_0EA20225] ＝ 变量_0FA20225 [变量_0EA20225] ＋ 插入内容 ＋ #换行符
            .如果结束
            
        .否则
            变量_0FA20225 [变量_0EA20225] ＝ 变量_0FA20225 [变量_0EA20225] ＋ #换行符
        .如果结束
        变量_10A20225 ＝ 变量_10A20225 ＋ 变量_0FA20225 [变量_0EA20225]
    .计次循环尾 ()
    返回 (变量_10A20225)

.子程序 文本_删左边, 文本型, 公开
    .参数 欲处理文本, 文本型
    .参数 删除长度, 整数型, , 以字符为单位
    .局部变量 变量_33F50225, 字节集

    变量_33F50225 ＝ 编码_Ansi到Unicode (欲处理文本, 真)
    变量_33F50225 ＝ 取字节集右边 (变量_33F50225, 取字节集长度 (变量_33F50225) － 删除长度 × 2)
    返回 (编码_Unicode到Ansi (变量_33F50225))

.子程序 文本_删右边, 文本型, 公开
    .参数 欲处理文本, 文本型
    .参数 删除长度, 整数型, , 以字符为单位
    .局部变量 变量_34F50225, 字节集

    变量_34F50225 ＝ 编码_Ansi到Unicode (欲处理文本, 真)
    变量_34F50225 ＝ 取字节集左边 (变量_34F50225, 取字节集长度 (变量_34F50225) － 删除长度 × 2)
    返回 (编码_Unicode到Ansi (变量_34F50225))

.子程序 文本_删中间, 文本型, 公开
    .参数 欲处理文本, 文本型
    .参数 起始位置, 整数型
    .参数 删除长度, 整数型

    返回 (文本替换 (欲处理文本, 起始位置, 删除长度, “”))

.子程序 文本_删中间2, 文本型, 公开, 本命令会删除前面文本和后面文本之间的所有内容（包括后面文本），如文本中含有多个前面文本或后面文本则删除首个前面文本与最后一个后面文本之间的所有内容。
    .参数 原文本, 文本型, , 待处理的文本
    .参数 前面文本, 文本型
    .参数 后面文本, 文本型
    .参数 是否不区分大小写, 逻辑型, 可空, 默认为假，即区分大小写。
    .参数 保留前面文本, 逻辑型, 可空, 默认为假
    .参数 保留后面文本, 逻辑型, 可空, 默认为假
    .局部变量 变量_66A60225, 整数型
    .局部变量 变量_67A60225, 整数型
    .局部变量 变量_68A60225, 文本型
    .局部变量 变量_69A60225, 文本型
    .局部变量 变量_6AA60225, 文本型
    .局部变量 变量_6BA60225, 文本型

    变量_66A60225 ＝ 寻找文本 (原文本, 前面文本, , 是否不区分大小写)
    .如果真 (变量_66A60225 ＝ -1)
        返回 (原文本)
    .如果真结束
    变量_6BA60225 ＝ 取文本左边 (原文本, 变量_66A60225 － 1)
    .如果真 (保留前面文本)
        变量_6BA60225 ＝ 变量_6BA60225 ＋ 前面文本
    .如果真结束
    
    变量_69A60225 ＝ 取文本右边 (原文本, 取文本长度 (原文本) － 取文本长度 (变量_6BA60225))
    变量_67A60225 ＝ 倒找文本 (变量_69A60225, 后面文本, , 是否不区分大小写)
    .如果真 (变量_67A60225 ＝ -1)
        返回 (原文本)
    .如果真结束
    变量_6AA60225 ＝ 取文本右边 (变量_69A60225, 取文本长度 (变量_69A60225) － 变量_67A60225 － 取文本长度 (后面文本) ＋ 1)
    
    变量_68A60225 ＝ 变量_6BA60225 ＋ 变量_6AA60225
    .如果真 (保留后面文本)
        变量_68A60225 ＝ 变量_6BA60225 ＋ 后面文本 ＋ 变量_6AA60225
    .如果真结束
    
    返回 (变量_68A60225)

.子程序 文本_取出文本中汉字, 文本型, 公开, 取出指定文本中的汉字
    .参数 字符串, 文本型

    返回 (_只取汉字 (字符串))

.子程序 文本_取随机Ip, 文本型, 公开, 返回一个随机的IP地址
    .参数 只取国内, 逻辑型, 可空, 可空，默认为真
    .局部变量 变量_8A7D0225, 文本型, , "0"
    .局部变量 变量_8B7D0225, 文本型, , "0"
    .局部变量 变量_8C7D0225, 文本型
    .局部变量 变量_8D7D0225, 文本型
    .局部变量 变量_8E7D0225, 文本型
    .局部变量 变量_8F7D0225, 文本型
    .局部变量 变量_907D0225, 文本型, , "0"
    .局部变量 变量_917D0225, 文本型, , "0"

    置随机数种子 ()
    .如果真 (是否为空 (只取国内))
        只取国内 ＝ 真
    .如果真结束
    .如果真 (只取国内)
        .如果真 (取数组成员数 (变量_8A7D0225) ＝ 0)
            变量_8A7D0225 ＝ 分割文本 (#<?未知本地类型?>, #换行符, )
        .如果真结束
        变量_8C7D0225 ＝ 变量_8A7D0225 [取随机数 (1, 取数组成员数 (变量_8A7D0225))]
        变量_8D7D0225 ＝ 文本_取左边 (变量_8C7D0225, “-”)
        变量_8E7D0225 ＝ 文本_取右边 (变量_8C7D0225, “-”)
        
        
        变量_907D0225 ＝ 分割文本 (变量_8D7D0225, “.”, )
        变量_917D0225 ＝ 分割文本 (变量_8E7D0225, “.”, )
        .如果真 (取数组成员数 (变量_907D0225) ≠ 4 或 取数组成员数 (变量_917D0225) ≠ 4)
            返回 (文本_取随机Ip (只取国内))
        .如果真结束
        
        变量_8C7D0225 ＝ 变量_907D0225 [1] ＋ “.” ＋ 到文本 (取随机数 (到整数 (变量_907D0225 [2]), 到整数 (变量_917D0225 [2])))
        变量_8C7D0225 ＝ 变量_8C7D0225 ＋ “.” ＋ 到文本 (取随机数 (到整数 (变量_907D0225 [3]), 到整数 (变量_917D0225 [3])))
        变量_8C7D0225 ＝ 变量_8C7D0225 ＋ “.” ＋ 到文本 (取随机数 (到整数 (变量_907D0225 [4]), 到整数 (变量_917D0225 [4])))
        返回 (变量_8C7D0225)
    .如果真结束
    
    .如果真 (取数组成员数 (变量_8A7D0225) ＝ 0)
        变量_8C7D0225 ＝ 到文本 (取随机数 (50, 254)) ＋ “.” ＋ 到文本 (取随机数 (50, 254)) ＋ “.” ＋ 到文本 (取随机数 (50, 254)) ＋ “.” ＋ 到文本 (取随机数 (50, 254))
    .如果真结束
    返回 (变量_8C7D0225)

.子程序 文本_逐字分割, 整数型, 公开, 将指定文本,逐字分割成数组,保存为指定的变量数组中,返回成员个数,可识别换行符及全半角字符和汉字
    .参数 文本, 文本型, , 需要分割的文本
    .参数 返回的数组, 文本型, 参考 可空 数组, 保存分割结果的数组变量
    .局部变量 变量_5EF70125, 整数型
    .局部变量 变量_5FF70125, 整数型
    .局部变量 变量_60F70125, 整数型
    .局部变量 变量_61F70125, 文本型
    .局部变量 变量_62F70125, 字节集

    清除数组 (返回的数组)
    变量_62F70125 ＝ 到字节集 (文本)
    变量_5EF70125 ＝ 取字节集长度 (变量_62F70125)
    变量_5FF70125 ＝ 1
    .判断循环首 (变量_5FF70125 ≤ 变量_5EF70125)
        .如果 (变量_5FF70125 ＋ 1 ＞ 变量_5EF70125)
            变量_60F70125 ＝ 1
        .否则
            .如果 (变量_62F70125 [变量_5FF70125] ＞ 128)
                变量_60F70125 ＝ 2
            .否则
                .如果 (变量_62F70125 [变量_5FF70125] ≠ 13)
                    变量_60F70125 ＝ 1
                .否则
                    .如果 (变量_62F70125 [变量_5FF70125 ＋ 1] ＝ 10)
                        变量_60F70125 ＝ 2
                    .否则
                        变量_60F70125 ＝ 1
                    .如果结束
                    
                .如果结束
                
            .如果结束
            
        .如果结束
        加入成员 (返回的数组, 到文本 (取字节集中间 (变量_62F70125, 变量_5FF70125, 变量_60F70125)))
        变量_5FF70125 ＝ 变量_5FF70125 ＋ 变量_60F70125
    .判断循环尾 ()
    返回 (取数组成员数 (返回的数组))

.子程序 文本_逐字分割_汇编, 整数型, 公开, 超长文本计算时有优势 调用该命令前请确定内容不为空
    .参数 参_内容, 文本型
    .参数 参_文本数组, 文本型, 数组
    .局部变量 变量_88A60225, 文本型

    
    .如果真 (参_内容 ＝ “”)
        返回 (0)
    .如果真结束
    变量_88A60225 ＝ 取空白文本 (取文本长度 (参_内容) × 2)
    置入代码 ({ 139, 69, 8, 139, 48, 139, 125, 252, 172, 168, 128, 117, 26, 60, 32, 116, 247, 60, 9, 116, 243, 60, 13, 116, 239, 60, 10, 116, 235, 132, 192, 116, 28, 170, 176, 9, 170, 235, 225, 60, 161, 117, 10, 134, 224, 172, 60, 161, 116, 214, 134, 224, 78, 170, 172, 170, 176, 9, 170, 235, 203, 49, 192, 170 })
    参_文本数组 ＝ 分割文本 (变量_88A60225, 到文本 ({ 9 }), )
    返回 (取数组成员数 (参_文本数组))

.子程序 文本_逐字分割_快速, 整数型, 公开, @福仔 【注意】 必须和 文本_逐字分割_快速_释放() 配套使用, 如果不释放可能会导致崩溃, 快速把一个文本按每个字符进行分割, 返回分割后的成员数
    .参数 待分割文本, 文本型
    .参数 接收结果数组, 文本型, 参考 数组, 调用完之后必须调用 文本_逐字分割_快速_释放() 把这个数组传递进去进行释放, 不允许修改这个数组
    .参数 换行符是否为单个字符, 逻辑型, 可空, 为真则 \r\n(13, 10) 算一个成员, 否则会分割成两个成员, 默认为真
    .局部变量 变量_4DE50225, 整数型
    .局部变量 变量_4EE50225, 整数型
    .局部变量 变量_4FE50225, 整数型
    .局部变量 变量_50E50225, 整数型
    .局部变量 变量_51E50225, 整数型
    .局部变量 变量_52E50225, 整数型
    .局部变量 变量_53E50225, 整数型
    .局部变量 变量_54E50225, 整数型

    .如果真 (是否为空 (换行符是否为单个字符))
        换行符是否为单个字符 ＝ 真
    .如果真结束
    
    变量_50E50225 ＝ 取指针_文本型 (待分割文本)
    变量_4DE50225 ＝ lstrlenA (变量_50E50225)
    变量_4FE50225 ＝ DLL__malloc (变量_4DE50225 × 3)
    memset (变量_4FE50225, 0, 变量_4DE50225 × 3)
    
    重定义数组 (接收结果数组, 假, 变量_4DE50225)
    变量_54E50225 ＝ 取数据_通用型_数组 (接收结果数组)
    
    .判断循环首 (变量_4EE50225 ＜ 变量_4DE50225)
        __set (变量_54E50225, 变量_53E50225 × 4, 变量_4FE50225 ＋ 变量_52E50225)
        变量_51E50225 ＝ __get_byte (变量_50E50225, 变量_4EE50225)
        __set_byte (变量_4FE50225, 变量_52E50225, 变量_51E50225)
        变量_52E50225 ＝ 变量_52E50225 ＋ 1
        .如果真 (变量_51E50225 ＞ 128 或 (换行符是否为单个字符 且 变量_51E50225 ＝ 13))
            变量_4EE50225 ＝ 变量_4EE50225 ＋ 1
            __set_byte (变量_4FE50225, 变量_52E50225, __get_byte (变量_50E50225, 变量_4EE50225))
            变量_52E50225 ＝ 变量_52E50225 ＋ 1
        .如果真结束
        
        变量_52E50225 ＝ 变量_52E50225 ＋ 1
        变量_53E50225 ＝ 变量_53E50225 ＋ 1
        变量_4EE50225 ＝ 变量_4EE50225 ＋ 1
    .判断循环尾 ()
    __set (变量_54E50225 － 4, 0, 变量_53E50225)
    
    返回 (变量_53E50225)

.子程序 文本_逐字分割_快速_释放, , 公开, @福仔 释放 文本_逐字分割_快速() 参考返回的数组
    .参数 接收结果数组, 文本型, 参考 数组, 文本_逐字分割_快速() 第二个参数
    .局部变量 变量_56E50225, 整数型
    .局部变量 变量_57E50225, 整数型
    .局部变量 变量_58E50225, 整数型

    变量_56E50225 ＝ 取数据_通用型_数组 (接收结果数组)
    变量_57E50225 ＝ __get (变量_56E50225, 0)
    .如果真 (变量_57E50225 ＝ 0)
        返回 ()
    .如果真结束
    DLL__free (变量_57E50225)
    .计次循环首 (取数组成员数 (接收结果数组), 变量_58E50225)
        __set (变量_56E50225, (变量_58E50225 － 1) × 4, 0)
    .计次循环尾 ()

.子程序 文本_递减, 文本型, 公开, 把文本递减1  编辑框1.内容 ＝ 文本_递减 (编辑框1.内容)
    .参数 要递减的文本, 文本型, 参考

    返回 (到文本 (原子递减变量 (到数值 (要递减的文本))))

.子程序 文本_递增, 文本型, 公开, 把文本递增1  编辑框1.内容 ＝ 文本_递增 (编辑框1.内容)
    .参数 要递增的文本, 文本型, 参考

    返回 (到文本 (原子递增变量 (到数值 (要递增的文本))))

.子程序 文本_替换, 文本型, 公开, 批量替换文本；
    .参数 原文本, 文本型
    .参数 替换进行的次数, 整数型, 可空, 可空；参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换。
    .参数 替换的起始位置, 整数型, 可空, 可空；参数值指定被替换子文本的起始搜索位置。如果省略，默认从 1 开始
    .参数 是否区分大小写, 逻辑型, 可空, 可空； 初始值为“假”不区分大小写；为真区分大小写。
    .参数 欲被替换的子文本1, 文本型
    .参数 用作替换的子文本1, 文本型
    .参数 欲被替换的子文本2, 文本型, 可空
    .参数 用作替换的子文本2, 文本型, 可空
    .参数 欲被替换的子文本3, 文本型, 可空
    .参数 用作替换的子文本3, 文本型, 可空
    .参数 欲被替换的子文本4, 文本型, 可空
    .参数 用作替换的子文本4, 文本型, 可空
    .参数 欲被替换的子文本5, 文本型, 可空
    .参数 用作替换的子文本5, 文本型, 可空
    .局部变量 变量_6B580125, 文本型

    .如果真 (替换的起始位置 ＝ 0)
        替换的起始位置 ＝ 1
    .如果真结束
    .如果 (是否为空 (替换进行的次数))
        变量_6B580125 ＝ 子文本替换 (原文本, 欲被替换的子文本1, 用作替换的子文本1, 替换的起始位置, , 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本2, 用作替换的子文本2, 替换的起始位置, , 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本3, 用作替换的子文本3, 替换的起始位置, , 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本4, 用作替换的子文本4, 替换的起始位置, , 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本5, 用作替换的子文本5, 替换的起始位置, , 是否区分大小写)
    .否则
        变量_6B580125 ＝ 子文本替换 (原文本, 欲被替换的子文本1, 用作替换的子文本1, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本2, 用作替换的子文本2, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本3, 用作替换的子文本3, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本4, 用作替换的子文本4, 替换的起始位置, 替换进行的次数, 是否区分大小写)
        变量_6B580125 ＝ 子文本替换 (变量_6B580125, 欲被替换的子文本5, 用作替换的子文本5, 替换的起始位置, 替换进行的次数, 是否区分大小写)
    .如果结束
    返回 (变量_6B580125)

.子程序 文本_投递, , 公开, 向指定窗口句柄的窗口中后台发送文本内容,对游戏有效(无返回值)
    .参数 窗口句柄, 整数型, , 接收消息的窗口句柄
    .参数 文本内容, 文本型, , 发送的文本内容

    文本_投递W (窗口句柄, 编码_Ansi到Unicode (文本内容, ))

.子程序 文本_投递W, , 公开, 支持Unicode字符。
    .参数 窗口句柄, 整数型
    .参数 文本内容, 字节集, , unicode编码
    .局部变量 变量_04B60225, 整数型

    .变量循环首 (1, 取字节集长度 (文本内容) － 2, 2, 变量_04B60225)
        键盘_消息 (窗口句柄, 取字节集数据 (文本内容, #短整数型, 变量_04B60225), 1, 假)
    .变量循环尾 ()

.子程序 文本_颠倒, 文本型, 公开, 将指定文本倒序 (比如:"123456"倒序后成:"654321")
    .参数 欲转换文本, 文本型, , 欲倒序的文本
    .参数 带有中文, 逻辑型, 可空, 如果要颠倒的文本中带有汉字，请把此参数设置为真。
    .局部变量 变量_72050125, 整数型
    .局部变量 变量_73050125, 文本型
    .局部变量 变量_74050125, 整数型
    .局部变量 变量_C0A80125, 字节集
    .局部变量 变量_C5A80125, 字节集
    .局部变量 变量_C4A80125, 整数型

    .如果真 (带有中文)
        变量_C0A80125 ＝ 编码_Ansi到Unicode (欲转换文本, 真)
        .变量循环首 (取字节集长度 (变量_C0A80125) － 1, 1, -2, 变量_C4A80125)
            变量_C5A80125 ＝ 变量_C5A80125 ＋ 取字节集中间 (变量_C0A80125, 变量_C4A80125, 2)
        .变量循环尾 ()
        返回 (编码_Unicode到Ansi (变量_C5A80125))
    .如果真结束
    变量_72050125 ＝ 取文本长度 (到文本 (欲转换文本))
    .变量循环首 (1, 变量_72050125, 1, 变量_74050125)
        变量_73050125 ＝ 变量_73050125 ＋ 取文本中间 (欲转换文本, 变量_72050125 ＋ 1 － 变量_74050125, 1)
    .变量循环尾 ()
    返回 (变量_73050125)

.子程序 文本_发送, , 公开, 向指定文本框后台发送文本(无返回值)
    .参数 文本框句柄, 整数型, , 文本框的句柄
    .参数 发送的内容, 文本型, , 要发送的文本

    SendMessageA (文本框句柄, 194, 1, 取指针文本_ (发送的内容))

.子程序 文本_粘贴, , 公开, 往指定的窗口粘贴文本
    .参数 窗口句柄, 整数型, 可空, 欲粘贴文本的窗口句柄
    .参数 文本内容, 文本型, 可空, 欲粘贴的文本内容
    .局部变量 变量_50A70125, 文本型

    变量_50A70125 ＝ 取剪辑板文本 ()
    .如果真 (是否为空 (文本内容) ＝ 假)
        置剪辑板文本 (文本内容)
    .如果真结束
    SendMessageA (窗口句柄, 770, 0, 0)
    置剪辑板文本 (变量_50A70125)

.子程序 文本_全选, , 公开, 让指定的文本框内容全部选中
    .参数 文本框句柄, 整数型, , 文本框的句柄
    .参数 类型, 整数型, 可空, 默认为0全选，1=取消全选

    .如果 (类型 ＝ 0)
        SendMessageA (文本框句柄, 177, 0, -1)
    .否则
        SendMessageA (文本框句柄, 177, 0, 0)
    .如果结束
    

.子程序 文本_去重复文本, 文本型, 公开, 去除原文本中重复的文本
    .参数 原文本, 文本型
    .参数 分割符, 文本型, 可空, 原文本单个内容间的分隔符，例如：---  留空为：逐字分割
    .局部变量 变量_59C10125, 文本型, , "0"
    .局部变量 变量_5AC10125, 文本型, , "0"
    .局部变量 变量_5BC10125, 整数型
    .局部变量 变量_5CC10125, 文本型

    .如果 (是否为空 (分割符))
        文本_逐字分割 (原文本, 变量_59C10125)
    .否则
        变量_59C10125 ＝ 分割文本 (原文本, 分割符, )
    .如果结束
    
    
    .计次循环首 (取数组成员数 (变量_59C10125), 变量_5BC10125)
        .如果真 (内部_数组成员是否存在_文本 (变量_5AC10125, 变量_59C10125 [变量_5BC10125]) ＝ -1)
            加入成员 (变量_5AC10125, 变量_59C10125 [变量_5BC10125])
            变量_5CC10125 ＝ 变量_5CC10125 ＋ 变量_59C10125 [变量_5BC10125] ＋ 分割符
        .如果真结束
        
    .计次循环尾 ()
    变量_5CC10125 ＝ 取文本左边 (变量_5CC10125, 取文本长度 (变量_5CC10125) － 取文本长度 (分割符))
    返回 (变量_5CC10125)

.子程序 内部_数组成员是否存在_文本, 整数型
    .参数 变量_5FC10125, 文本型, 数组
    .参数 变量_60C10125, 文本型
    .局部变量 变量_61C10125, 整数型

    .计次循环首 (取数组成员数 (变量_5FC10125), 变量_61C10125)
        .如果真 (变量_5FC10125 [变量_61C10125] ＝ 变量_60C10125)
            返回 (变量_61C10125)
        .如果真结束
        
    .计次循环尾 ()
    返回 (-1)

.子程序 内部_数组成员是否存在_整数, 整数型
    .参数 变量_8FC20125, 整数型, 数组
    .参数 变量_90C20125, 整数型
    .局部变量 变量_91C20125, 整数型

    .计次循环首 (取数组成员数 (变量_8FC20125), 变量_91C20125)
        .如果真 (变量_8FC20125 [变量_91C20125] ＝ 变量_90C20125)
            返回 (变量_91C20125)
        .如果真结束
        
    .计次循环尾 ()
    返回 (-1)
    

.子程序 数组_排序, , 公开, 二分法排序.只能对文本数组进行排序,整数数组请用核心支持库的.
    .参数 要排序的数组, 文本型, 参考 数组
    .参数 排序方式, 字节型, 可空, 可空,默认为0  0=升序排序 1=降序排序
    .参数 区分大小写, 逻辑型, 可空, 可空,默认“真”。真=区分大小写，假=不区分
    .局部变量 变量_63C70125, 整数型
    .局部变量 变量_64C70125, 文本型, , "0"
    .局部变量 变量_65C70125, 整数型
    .局部变量 变量_66C70125, 整数型
    .局部变量 变量_67C70125, 整数型
    .局部变量 变量_68C70125, 整数型
    .局部变量 变量_69C70125, 整数型

    复制数组 (变量_64C70125, 要排序的数组)
    清除数组 (要排序的数组)
    .如果真 (是否为空 (区分大小写) ＝ 真)
        区分大小写 ＝ 真
    .如果真结束
    
    .计次循环首 (取数组成员数 (变量_64C70125), 变量_63C70125)
        .判断开始 (变量_65C70125 ＝ 0)
            插入成员 (要排序的数组, 1, 变量_64C70125 [变量_63C70125])
        .默认
            
            变量_66C70125 ＝ 变量_65C70125
            变量_67C70125 ＝ 1
            变量_68C70125 ＝ (变量_66C70125 ＋ 变量_67C70125) ＼ 2
            
            .判断开始 (区分大小写 ＝ 假)
                变量_69C70125 ＝ 文本比较 (到大写 (变量_64C70125 [变量_63C70125]), 到大写 (要排序的数组 [变量_65C70125]), 真)
            .默认
                变量_69C70125 ＝ 文本比较 (变量_64C70125 [变量_63C70125], 要排序的数组 [变量_65C70125], 真)
            .判断结束
            
            .判断开始 (变量_69C70125 ≥ 0)
                插入成员 (要排序的数组, 变量_65C70125 ＋ 1, 变量_64C70125 [变量_63C70125])
            .判断 (文本比较 (变量_64C70125 [变量_63C70125], 要排序的数组 [1], 真) ≤ 0)
                插入成员 (要排序的数组, 1, 变量_64C70125 [变量_63C70125])
            .默认
                .判断循环首 (变量_66C70125 － 变量_67C70125 ＞ 1)
                    .如果真 (变量_64C70125 [变量_63C70125] ＝ 要排序的数组 [变量_68C70125])
                        跳出循环 ()
                    .如果真结束
                    .如果 (文本比较 (变量_64C70125 [变量_63C70125], 要排序的数组 [变量_68C70125], 真) ＜ 0)
                        变量_66C70125 ＝ 变量_68C70125
                    .否则
                        变量_67C70125 ＝ 变量_68C70125
                    .如果结束
                    变量_68C70125 ＝ (变量_66C70125 ＋ 变量_67C70125) ＼ 2
                .判断循环尾 ()
                .判断开始 (文本比较 (变量_64C70125 [变量_63C70125], 要排序的数组 [变量_68C70125], 真) ≤ 0)
                    插入成员 (要排序的数组, 变量_68C70125, 变量_64C70125 [变量_63C70125])
                .默认
                    插入成员 (要排序的数组, 变量_68C70125 ＋ 1, 变量_64C70125 [变量_63C70125])
                .判断结束
                
            .判断结束
            
        .判断结束
        变量_65C70125 ＝ 取数组成员数 (要排序的数组)
    .计次循环尾 ()
    .如果真 (排序方式 ＝ 1)
        数组_反转 (要排序的数组)
    .如果真结束
    

.子程序 数组_排序1, , 公开, 通过对字符串逻辑比较后的排序
    .参数 排序数组, 文本型, 数组
    .参数 从大到小, 逻辑型, 可空
    .局部变量 变量_79020325, 整数型
    .局部变量 变量_7A020325, 字节集
    .局部变量 变量_7B020325, 字节集
    .局部变量 变量_7C020325, 整数型
    .局部变量 变量_7D020325, 整数型
    .局部变量 变量_7E020325, 整数型
    .局部变量 变量_7F020325, 整数型
    .局部变量 变量_80020325, 整数型
    .局部变量 变量_81020325, 整数型

    变量_79020325 ＝ 取数组成员数 (排序数组)
    变量_7C020325 ＝ 取数据_通用型_数组 (排序数组)
    .计次循环首 (变量_79020325, 变量_7F020325)
        变量_80020325 ＝ 变量_7F020325
        .计次循环首 (变量_79020325 － 变量_7F020325, 变量_81020325)
            变量_7A020325 ＝ 编码_Ansi到Unicode (排序数组 [变量_80020325], )
            变量_7B020325 ＝ 编码_Ansi到Unicode (排序数组 [变量_7F020325 ＋ 变量_81020325], )
            .如果 (从大到小)
                .如果真 (DLL_StrCmpLogicalW (变量_7A020325, 变量_7B020325) ＜ 0)
                    变量_80020325 ＝ 变量_7F020325 ＋ 变量_81020325
                .如果真结束
                
            .否则
                .如果真 (DLL_StrCmpLogicalW (变量_7A020325, 变量_7B020325) ＞ 0)
                    变量_80020325 ＝ 变量_7F020325 ＋ 变量_81020325
                .如果真结束
                
            .如果结束
            
        .计次循环尾 ()
        .如果真 (变量_80020325 ≠ 变量_7F020325)
            变量_7D020325 ＝ __get (变量_7C020325, (变量_80020325 － 1) × 4)
            变量_7E020325 ＝ __get (变量_7C020325, (变量_7F020325 － 1) × 4)
            __set (变量_7C020325, (变量_80020325 － 1) × 4, 变量_7E020325)
            __set (变量_7C020325, (变量_7F020325 － 1) × 4, 变量_7D020325)
        .如果真结束
        
    .计次循环尾 ()

.子程序 数组_寻找数组, 整数型, 公开, 寻找指定成员在数组中出现的次数，
    .参数 待查找的数组, 文本型, 数组
    .参数 待查找的成员, 文本型
    .参数 寻找到的数组, 整数型, 参考 数组, 返回出现的位置数组信息
    .局部变量 变量_40A20225, 整数型

    清除数组 (寻找到的数组)
    .计次循环首 (取数组成员数 (待查找的数组), 变量_40A20225)
        
        .如果真 (待查找的成员 ＝ 待查找的数组 [变量_40A20225])
            加入成员 (寻找到的数组, 变量_40A20225)
        .如果真结束
        
    .计次循环尾 ()
    返回 (取数组成员数 (寻找到的数组))

.子程序 数组_反转, , 公开, 数组倒序。数组的第一个成员与最后一个成员互换，第二个和倒数第二个互换，以此类推
    .参数 反转的数组, 文本型, 参考 数组
    .局部变量 变量_3DE50225, 整数型
    .局部变量 变量_3EE50225, 整数型
    .局部变量 变量_3FE50225, 整数型

    变量_3DE50225 ＝ 取数组成员数 (反转的数组)
    变量_3EE50225 ＝ 变量_3DE50225 ÷ 2
    .计次循环首 (变量_3EE50225, 变量_3FE50225)
        文本_交换变量 (反转的数组 [变量_3FE50225], 反转的数组 [变量_3DE50225])
        变量_3DE50225 ＝ 变量_3DE50225 － 1
    .计次循环尾 ()

.子程序 文本_交换变量
    .参数 变量_41E50225, 文本型
    .参数 变量_42E50225, 文本型

    置入代码 ({ 139, 69, 8, 139, 77, 12, 139, 16, 135, 17, 137, 16 })
    
    
    
    
    

.子程序 数组_输出, , 公开, 输出数组,方便查看
    .参数 文本数组, 文本型, 可空 数组
    .参数 整数数组, 整数型, 可空 数组
    .局部变量 变量_20B10125, 整数型
    .局部变量 变量_23B10125, 文本型

    .如果真 (是否为空 (文本数组) ＝ 假)
        变量_23B10125 ＝ “文本数组 - ”
        .计次循环首 (取数组成员数 (文本数组), 变量_20B10125)
            变量_23B10125 ＝ 变量_23B10125 ＋ “成员” ＋ 到文本 (变量_20B10125) ＋ “(” ＋ 文本数组 [变量_20B10125] ＋ “)  ”
        .计次循环尾 ()
        输出调试文本 (删首尾空 (变量_23B10125))
    .如果真结束
    
    .如果真 (是否为空 (整数数组) ＝ 假)
        变量_23B10125 ＝ “整数数组 - ”
        .计次循环首 (取数组成员数 (整数数组), 变量_20B10125)
            变量_23B10125 ＝ 变量_23B10125 ＋ “成员” ＋ 到文本 (变量_20B10125) ＋ “(” ＋ 到文本 (整数数组 [变量_20B10125]) ＋ “)  ”
        .计次循环尾 ()
        输出调试文本 (删首尾空 (变量_23B10125))
    .如果真结束
    

.子程序 数组_合并, 文本型, 公开, 连接数组，类似VB中的join方法,合并一个文本数组到字符串。
    .参数 文本数组, 文本型, 数组
    .参数 合并字符, 文本型, 可空, 可空，默认为,
    .局部变量 变量_F3F10125, 整数型
    .局部变量 变量_F4F10125, 文本型

    合并字符 ＝ 选择 (是否为空 (合并字符), “,”, 合并字符)
    .计次循环首 (取数组成员数 (文本数组), 变量_F3F10125)
        .如果 (变量_F3F10125 ＝ 1)
            变量_F4F10125 ＝ 文本数组 [变量_F3F10125]
        .否则
            变量_F4F10125 ＝ 变量_F4F10125 ＋ 合并字符 ＋ 文本数组 [变量_F3F10125]
        .如果结束
        
    .计次循环尾 ()
    返回 (变量_F4F10125)

.子程序 数组_合并_快速, 文本型, 公开, @福仔 把数组里所有的成员组合成一个文本
    .参数 欲处理的数组, 文本型, 数组
    .参数 间隔符, 文本型, 可空
    .局部变量 变量_68E50225, 整数型
    .局部变量 变量_69E50225, 整数型
    .局部变量 变量_6AE50225, 整数型
    .局部变量 变量_6BE50225, 整数型
    .局部变量 变量_6CE50225, 整数型
    .局部变量 变量_6DE50225, 整数型
    .局部变量 变量_6EE50225, 整数型
    .局部变量 变量_6FE50225, 整数型
    .局部变量 变量_70E50225, 整数型
    .局部变量 变量_71E50225, 整数型
    .局部变量 变量_72E50225, 整数型
    .局部变量 变量_73E50225, 整数型
    .局部变量 变量_74E50225, 整数型
    .局部变量 变量_75E50225, 文本型

    变量_69E50225 ＝ 取数组成员数 (欲处理的数组)
    .如果真 (变量_69E50225 ＝ 0)
        返回 (“”)
    .如果真结束
    变量_68E50225 ＝ 取数据_通用型_数组 (欲处理的数组)
    变量_6BE50225 ＝ 变量_69E50225 × 260
    变量_6CE50225 ＝ DLL__malloc (变量_6BE50225 ＋ 1)
    .如果真 (取反 (是否为空 (间隔符)))
        变量_6DE50225 ＝ 取指针_文本型 (间隔符)
        .如果真 (变量_6DE50225 ≠ 0)
            变量_6EE50225 ＝ DLL__strlen (变量_6DE50225)
        .如果真结束
        
    .如果真结束
    
    .计次循环首 (变量_69E50225, 变量_6AE50225)
        变量_71E50225 ＝ __get (变量_68E50225, (变量_6AE50225 － 1) × 4)
        .如果真 (变量_71E50225 ≠ 0)
            变量_72E50225 ＝ DLL__strlen (变量_71E50225)
            .如果真 (变量_6FE50225 ＋ 变量_72E50225 ＞ 变量_6BE50225)
                变量_74E50225 ＝ 变量_6BE50225
                变量_6BE50225 ＝ 变量_6BE50225 × 2 ＋ 变量_72E50225
                
                变量_73E50225 ＝ DLL__malloc (变量_6BE50225)
                memcpy (变量_73E50225, 变量_6CE50225, 变量_74E50225)
                DLL__free (变量_6CE50225)
                变量_6CE50225 ＝ 变量_73E50225
            .如果真结束
            
            memcpy (变量_6CE50225 ＋ 变量_6FE50225, 变量_71E50225, 变量_72E50225)
            变量_6FE50225 ＝ 变量_6FE50225 ＋ 变量_72E50225
        .如果真结束
        
        .如果真 (变量_6DE50225 ≠ 0 且 变量_6AE50225 ＜ 变量_69E50225)
            memcpy (变量_6CE50225 ＋ 变量_6FE50225, 变量_6DE50225, 变量_6EE50225)
            变量_6FE50225 ＝ 变量_6FE50225 ＋ 变量_6EE50225
        .如果真结束
        
    .计次循环尾 ()
    __set_byte (变量_6CE50225, 变量_6FE50225, 0)
    
    变量_75E50225 ＝ 指针到文本 (变量_6CE50225)
    DLL__free (变量_6CE50225)
    返回 (变量_75E50225)

.子程序 数组_去重复, 整数型, 公开, 返回剩余不重复数组的成员数量，可处理特殊字符效率较慢
    .参数 文本数组, 文本型, 可空 数组, 要去重复的 文本数组
    .参数 整数数组, 整数型, 可空 数组, 要去重复的 整数数组
    .局部变量 变量_9FC20125, 文本型, , "0"
    .局部变量 变量_A0C20125, 整数型, , "0"
    .局部变量 变量_A1C20125, 整数型

    .如果真 (是否为空 (文本数组) ＝ 假)
        .计次循环首 (取数组成员数 (文本数组), 变量_A1C20125)
            .如果真 (内部_数组成员是否存在_文本 (变量_9FC20125, 文本数组 [变量_A1C20125]) ＝ -1)
                加入成员 (变量_9FC20125, 文本数组 [变量_A1C20125])
            .如果真结束
            
        .计次循环尾 ()
        文本数组 ＝ 变量_9FC20125
        返回 (取数组成员数 (文本数组))
    .如果真结束
    
    .如果真 (是否为空 (整数数组) ＝ 假)
        .计次循环首 (取数组成员数 (整数数组), 变量_A1C20125)
            .如果真 (内部_数组成员是否存在_整数 (变量_A0C20125, 整数数组 [变量_A1C20125]) ＝ -1)
                加入成员 (变量_A0C20125, 整数数组 [变量_A1C20125])
            .如果真结束
            
        .计次循环尾 ()
        整数数组 ＝ 变量_A0C20125
        返回 (取数组成员数 (整数数组))
    .如果真结束
    返回 (0)

.子程序 数组_取次数, 整数型, 公开, 取指定数组成员出现相同数量，源码由易友【C盘是头猪】提供。
    .参数 参数_数组, 文本型, 数组
    .参数 参数_成员, 文本型
    .局部变量 变量_E0E30125, 整数型
    .局部变量 变量_E1E30125, 整数型

    .计次循环首 (取数组成员数 (参数_数组), 变量_E1E30125)
        .如果真 (参数_数组 [变量_E1E30125] ＝ 参数_成员)
            变量_E0E30125 ＝ 变量_E0E30125 ＋ 1
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
    返回 (变量_E0E30125)

.子程序 文本_取长度, 整数型, 公开, 取一段文本的长度，中文算两个长度，字母算一个长度
    .参数 源文本, 文本型

    返回 (lstrlenA (取指针文本_ (源文本)))

.子程序 文本_取长度W, 整数型, 公开, 取一段文本的长度，中文和字母都算一个长度
    .参数 源文本, 字节集, , Unicode字节集

    返回 (DLL_lstrlenW (取指针_字节集型 (源文本)))

.子程序 文本_取声母, 文本型, 公开, 取一组文本中每个字的拼音首字,如果不是中文就直接取
    .参数 文本, 文本型, , 转换前文本
    .局部变量 变量_49E60225, 文本型
    .局部变量 变量_14110125, 整数型
    .局部变量 变量_15110125, 文本型

    变量_49E60225 ＝ 到全角 (文本)
    .计次循环首 (取文本长度 (变量_49E60225), 变量_14110125)
        .判断开始 (取代码 (到半角 (取文本中间 (变量_49E60225, 变量_14110125 × 2 － 1, 2)), ) ＞ 0)
            变量_15110125 ＝ 变量_15110125 ＋ 到半角 (取文本中间 (变量_49E60225, 变量_14110125 × 2 － 1, 2))
        .默认
            变量_15110125 ＝ 变量_15110125 ＋ 取文本左边 (取声母 (取文本中间 (变量_49E60225, 变量_14110125 × 2 － 1, 2), 1), 1)
        .判断结束
        
    .计次循环尾 ()
    返回 (变量_15110125)

.子程序 文本_到小写, 文本型, 公开, 把字母转换到小写
    .参数 要转换的文本, 文本型, , 要转换的文本
    .局部变量 变量_88D40225, 文本型

    变量_88D40225 ＝ 要转换的文本
    返回 (CharLowerA (变量_88D40225))

.子程序 文本_到小写EX, 文本型, 公开, 把字母转换到小写
    .参数 要转换的文本, 文本型, , 要转换的文本
    .局部变量 变量_6DCB0225, 文本型

    变量_6DCB0225 ＝ 要转换的文本
    返回 (DLL___strlwr (变量_6DCB0225))

.子程序 文本_到小写m, 文本型, 公开, 将文本中的大写英文字母变换为小写，返回变换后的结果文本。本命令为初级命令。
    .参数 欲变换的文本, 文本型

    置入代码 ({ 81 })
    置入代码 ({ 82 })
    置入代码 ({ 83 })
    置入代码 ({ 86 })
    置入代码 ({ 87 })
    
    
    DLL_RtlAllocateHeap (GetProcessHeap (), 0, 32)
    
    置入代码 ({ 80 })
    
    
    置入代码 ({ 139, 125, 8 })
    置入代码 ({ 139, 63 })
    置入代码 ({ 139, 247 })
    置入代码 ({ 131, 201, 255 })
    置入代码 ({ 51, 192 })
    置入代码 ({ 242, 174 })
    置入代码 ({ 247, 209 })
    置入代码 ({ 73 })
    置入代码 ({ 95 })
    置入代码 ({ 87 })
    
    置入代码 ({ 139, 217 })
    置入代码 ({ 193, 233, 2 })
    置入代码 ({ 38, 243, 165 })
    置入代码 ({ 139, 203 })
    置入代码 ({ 131, 225, 3 })
    置入代码 ({ 243, 164 })
    置入代码 ({ 198, 7, 0 })
    
    置入代码 ({ 51, 210 })
    置入代码 ({ 88 })
    置入代码 ({ 139, 248 })
    
    置入代码 ({ 128, 60, 58, 65 })
    置入代码 ({ 124, 10 })
    置入代码 ({ 128, 60, 58, 90 })
    置入代码 ({ 127, 4 })
    置入代码 ({ 128, 12, 58, 32 })
    
    置入代码 ({ 128, 60, 58, 0 })
    置入代码 ({ 116, 3 })
    置入代码 ({ 66 })
    置入代码 ({ 235, 231 })
    
    置入代码 ({ 95 })
    置入代码 ({ 94 })
    置入代码 ({ 91 })
    置入代码 ({ 90 })
    置入代码 ({ 89 })
    置入代码 ({ 201 })
    置入代码 ({ 194, 4, 0 })
    返回 (“”)

.子程序 文本_到大写, 文本型, 公开, 把字母转换到大写
    .参数 要转换的文本, 文本型, , 要转换的文本
    .局部变量 变量_84D40225, 文本型

    变量_84D40225 ＝ 要转换的文本
    返回 (CharUpperA (变量_84D40225))

.子程序 文本_折行, 文本型, 公开, 把一段长文本按你指定的字数分行
    .参数 要处理的文本, 文本型
    .参数 每行字数, 整数型, 可空, 半角字数，如果为空，将不进行分行操作，直接返回文本内容，如果包含文本或全角字符，则需要把每行字数至少设置为2
    .参数 是否强行分行, 逻辑型, 可空, 为真则强行按设定长度分行。为假则保留连续半角数字或字母为一行。默认为假。
    .参数 是否全角, 逻辑型, 可空, 是否将半角转换为全角,如果为空即不转换
    .参数 首空字节数, 整数型, 可空, 在每行前面加入空格,如果为空,为0,即不加空格
    .局部变量 变量_C80C0125, 文本型
    .局部变量 变量_C90C0125, 整数型
    .局部变量 变量_CA0C0125, 整数型
    .局部变量 变量_CB0C0125, 逻辑型
    .局部变量 变量_CC0C0125, 整数型
    .局部变量 变量_CD0C0125, 文本型

    .如果真 (是否为空 (每行字数))
        返回 (要处理的文本)
    .如果真结束
    .如果真 (是否为空 (是否强行分行))
        是否强行分行 ＝ 假
    .如果真结束
    .如果真 (是否全角 ＝ 真)
        要处理的文本 ＝ 子文本替换 (要处理的文本, “...”, “…”, 1, , 真)
        要处理的文本 ＝ 子文本替换 (要处理的文本, “->”, “→”, 1, , 真)
        要处理的文本 ＝ 子文本替换 (要处理的文本, “<-”, “←”, 1, , 真)
        要处理的文本 ＝ 子文本替换 (要处理的文本, “--”, “—”, 1, , 真)
        要处理的文本 ＝ 到全角 (要处理的文本)
    .如果真结束
    .如果真 (首空字节数 ≥ 1)
        要处理的文本 ＝ 取空白文本 (首空字节数) ＋ 要处理的文本
        要处理的文本 ＝ 子文本替换 (要处理的文本, #换行符, #换行符 ＋ 取空白文本 (首空字节数), 1, , 真)
    .如果真结束
    变量_C80C0125 ＝ 要处理的文本
    .判断循环首 (取文本长度 (变量_C80C0125) ＞ 每行字数)
        .判断循环首 (变量_CA0C0125 ＜ 每行字数)
            
            .如果 (取代码 (变量_C80C0125, 变量_CA0C0125 ＋ 1) ≥ 127 或 取代码 (变量_C80C0125, 变量_CA0C0125 ＋ 1) ＜ 0)
                
                变量_CC0C0125 ＝ 0
                变量_CB0C0125 ＝ 假
                .如果真 (变量_CA0C0125 ＝ 每行字数 － 1)
                    输出调试文本 (“文本_折行 - 注意：检测到文本中包含中文或全角字符，需要把每行字数至少设置为2.”)
                    
                    跳出循环 ()
                .如果真结束
                变量_CA0C0125 ＝ 变量_CA0C0125 ＋ 2
            .否则
                .判断开始 (取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 1) ＝ “ ”)
                    变量_CA0C0125 ＝ 变量_CA0C0125 ＋ 1
                    变量_CC0C0125 ＝ 0
                    变量_CB0C0125 ＝ 假
                .判断 (取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ #换行符)
                    变量_CA0C0125 ＝ 变量_CA0C0125 ＋ 2
                    跳出循环 ()
                .默认
                    .如果真 (变量_CB0C0125 ＝ 假)
                        变量_CC0C0125 ＝ 变量_CA0C0125
                        变量_CB0C0125 ＝ 真
                    .如果真结束
                    变量_CA0C0125 ＝ 变量_CA0C0125 ＋ 1
                .判断结束
                
            .如果结束
            
        .判断循环尾 ()
        .如果真 (变量_CA0C0125 ≥ 每行字数)
            .如果 (是否强行分行 ＝ 假)
                变量_CA0C0125 ＝ 选择 (变量_CC0C0125 ＝ 0, 每行字数, 选择 (取代码 (变量_C80C0125, 每行字数 ＋ 1) ≥ 127 或 取代码 (变量_C80C0125, 每行字数 ＋ 1) ＜ 0, 每行字数, 变量_CC0C0125))
                变量_CB0C0125 ＝ 假
                变量_CC0C0125 ＝ 0
            .否则
                变量_CA0C0125 ＝ 每行字数
            .如果结束
            
        .如果真结束
        .如果真 (是否强行分行 ＝ 假)
            .如果 (取文本中间 (变量_C80C0125, 变量_CA0C0125 － 1, 2) ＝ “《” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 － 1, 2) ＝ “（” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 － 1, 2) ＝ #左引号 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 － 1, 2) ＝ “〈” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 － 11, 2) ＝ “‘”)
                变量_CA0C0125 ＝ 变量_CA0C0125 － 2
            .否则
                .如果真 (取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “》” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “）” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ #右引号 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “〉” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “，” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “。” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “？” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “：” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “’” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “；” 或 取文本中间 (变量_C80C0125, 变量_CA0C0125 ＋ 1, 2) ＝ “、”)
                    .如果 (取代码 (变量_C80C0125, 变量_CA0C0125) ≥ 127 或 取代码 (变量_C80C0125, 变量_CA0C0125) ＜ 0)
                        变量_CA0C0125 ＝ 变量_CA0C0125 － 2
                    .否则
                        变量_CA0C0125 ＝ 变量_CA0C0125 － 1
                    .如果结束
                    
                .如果真结束
                
            .如果结束
            
        .如果真结束
        .如果 (取文本中间 (变量_C80C0125, 变量_CA0C0125 － 1, 2) ＝ #换行符)
            变量_CD0C0125 ＝ 变量_CD0C0125 ＋ 取文本左边 (变量_C80C0125, 变量_CA0C0125)
        .否则
            变量_CD0C0125 ＝ 变量_CD0C0125 ＋ 取文本左边 (变量_C80C0125, 变量_CA0C0125) ＋ #换行符
        .如果结束
        变量_C80C0125 ＝ 取文本右边 (变量_C80C0125, 取文本长度 (变量_C80C0125) － 变量_CA0C0125)
        变量_CA0C0125 ＝ 0
    .判断循环尾 ()
    变量_CD0C0125 ＝ 变量_CD0C0125 ＋ 变量_C80C0125
    返回 (变量_CD0C0125)

.子程序 文本_删首尾空, 文本型, 公开, 删除一段文本前后的空格
    .参数 源文本, 文本型
    .局部变量 变量_4ED70225, 字节集

    变量_4ED70225 ＝ 到字节集 (源文本) ＋ { 0 }
    DLL_PathRemoveBlanksA (取指针_字节集型 (变量_4ED70225))
    返回 (取字节集数据 (变量_4ED70225, #文本型, ))

.子程序 文本_删除空行, 文本型, 公开, 删除文本当中的空白行
    .参数 要操作的文本, 文本型
    .局部变量 变量_35880125, 正则表达式类
    .局部变量 变量_CA070325, 文本型

    变量_35880125.创建 (“\n\s*\r”, 要操作的文本, , 真, 真, )
    变量_CA070325 ＝ 变量_35880125.替换 ()
    .如果真 (变量_CA070325 ≈ #换行符)
        变量_CA070325 ＝ 取文本右边 (变量_CA070325, 取文本长度 (变量_CA070325) － 2)
    .如果真结束
    .如果真 (取文本右边 (变量_CA070325, 2) ＝ #换行符)
        变量_CA070325 ＝ 取文本左边 (变量_CA070325, 取文本长度 (变量_CA070325) － 2)
    .如果真结束
    返回 (变量_CA070325)

.子程序 文本_是否重复, 逻辑型, 公开, 判断文本中的指定文本是否有重复，有重复返回真，没得复返回假
    .参数 源文本, 文本型
    .参数 查询的文本, 文本型
    .参数 严格模式, 逻辑型, 可空, 可空。默认为正常模式。
    .局部变量 变量_92BB0125, 整数型
    .局部变量 变量_93BB0125, 整数型

    变量_92BB0125 ＝ 寻找文本 (源文本, 查询的文本, , 真)
    .如果 (严格模式)
        返回 (寻找文本 (源文本, 查询的文本, 变量_92BB0125 ＋ 1, 真) ＞ 0)
        
    .否则
        .如果真 (变量_92BB0125 ＜ 1)
            返回 (假)
        .如果真结束
        返回 (寻找文本 (源文本, 查询的文本, 变量_92BB0125 ＋ 取文本长度 (查询的文本), 真) ＞ 0)
    .如果结束
    返回 (假)

.子程序 文本_取左边, 文本型, 公开, 从文本的左边按 欲寻找的文本 开始寻找
    .参数 被查找的文本, 文本型, , 被查找的文本
    .参数 欲寻找的文本, 文本型, , 欲寻找的文本
    .参数 起始寻找位置, 整数型, 可空, 可为空，默认为1，从左往右寻找，如果为负数，则从右往左寻找。
    .参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。
    .局部变量 变量_24D60225, 整数型
    .局部变量 变量_25D60225, 整数型
    .局部变量 变量_26D60225, 整数型
    .局部变量 变量_27D60225, 整数型
    .局部变量 变量_28D60225, 文本型

    变量_24D60225 ＝ 取文本长度 (被查找的文本)
    
    变量_25D60225 ＝ 起始寻找位置
    .如果真 (变量_25D60225 ＜ 0)
        变量_25D60225 ＝ 变量_25D60225 × -1
        .如果真 (变量_25D60225 ＝ 1)
            变量_25D60225 ＝ 0
        .如果真结束
        变量_26D60225 ＝ 1
    .如果真结束
    
    .如果 (变量_26D60225 ＝ 1)
        变量_27D60225 ＝ 倒找文本 (被查找的文本, 欲寻找的文本, 变量_24D60225 － 变量_25D60225 ＋ 1, 是否不区分大小写)
    .否则
        .如果真 (变量_25D60225 ＝ 0)
            变量_25D60225 ＝ 1
        .如果真结束
        变量_27D60225 ＝ 寻找文本 (被查找的文本, 欲寻找的文本, 变量_25D60225, 是否不区分大小写)
    .如果结束
    
    .如果真 (变量_27D60225 ＝ -1)
        返回 (“”)
    .如果真结束
    
    变量_28D60225 ＝ 取文本左边 (被查找的文本, 变量_27D60225 － 1)
    返回 (变量_28D60225)

.子程序 文本_取右边, 文本型, 公开, 从文本的右边按 欲寻找的文本 开始寻找, 取行右边 (“1234567890”, “5”, 1, 真)
    .参数 被查找的文本, 文本型, , 被查找的文本
    .参数 欲寻找的文本, 文本型, , 欲寻找的文本
    .参数 起始寻找位置, 整数型, 可空, 可为空，默认为1，从右往左寻找，如果为负数，则从左往右寻找。
    .参数 是否不区分大小写, 逻辑型, 可空, 默认为假,区分大小写
    .局部变量 变量_36D60225, 整数型
    .局部变量 变量_37D60225, 整数型
    .局部变量 变量_38D60225, 整数型
    .局部变量 变量_39D60225, 整数型
    .局部变量 变量_3AD60225, 文本型

    变量_36D60225 ＝ 取文本长度 (被查找的文本)
    
    变量_37D60225 ＝ 起始寻找位置
    .如果真 (变量_37D60225 ＜ 0)
        变量_37D60225 ＝ 变量_37D60225 × -1
        .如果真 (变量_37D60225 ＝ 1)
            变量_37D60225 ＝ 0
        .如果真结束
        变量_38D60225 ＝ 1
    .如果真结束
    
    .如果 (变量_38D60225 ＝ 1)
        .如果真 (变量_37D60225 ＝ 0)
            变量_37D60225 ＝ 1
        .如果真结束
        变量_39D60225 ＝ 寻找文本 (被查找的文本, 欲寻找的文本, 变量_37D60225, 是否不区分大小写)
    .否则
        变量_39D60225 ＝ 倒找文本 (被查找的文本, 欲寻找的文本, 变量_36D60225 － 变量_37D60225 ＋ 1, 是否不区分大小写)
    .如果结束
    
    .如果真 (变量_39D60225 ＝ -1)
        返回 (“”)
    .如果真结束
    
    变量_3AD60225 ＝ 取文本右边 (被查找的文本, 变量_36D60225 － 取文本长度 (欲寻找的文本) － 变量_39D60225 ＋ 1)
    返回 (变量_3AD60225)

.子程序 文本_取首拼, 文本型, 公开, 取出给出文本的首拼;注:英文,数字,符号则直接返回.首拼一律为小写[V雪落有声V]
    .参数 文本, 文本型, , 需要取出首拼的文本.可以包含数字,字母.请使用半角格式.
    .局部变量 变量_6AF10225, 文本型
    .局部变量 变量_E2790125, 整数型
    .局部变量 变量_E4790125, 文本型
    .局部变量 变量_E7790125, 文本型

    变量_E2790125 ＝ 1
    变量_6AF10225 ＝ 到半角 (文本)
    .判断循环首 (变量_E2790125 ≤ 取文本长度 (变量_6AF10225))
        变量_E4790125 ＝ 取文本中间 (变量_6AF10225, 变量_E2790125, 1)
        .如果 (取代码 (变量_E4790125, ) ＜ 0)
            变量_E4790125 ＝ 取文本中间 (变量_6AF10225, 变量_E2790125, 2)
            .如果真 (文本_是否为汉字 (变量_E4790125))
                变量_E4790125 ＝ 取文本左边 (取拼音 (变量_E4790125, 1), 1)
                变量_E7790125 ＝ 变量_E7790125 ＋ 变量_E4790125
            .如果真结束
            变量_E2790125 ＝ 变量_E2790125 ＋ 1
        .否则
            变量_E7790125 ＝ 变量_E7790125 ＋ 变量_E4790125
        .如果结束
        变量_E2790125 ＝ 变量_E2790125 ＋ 1
    .判断循环尾 ()
    返回 (变量_E7790125)

.子程序 文本_取空白文本, 文本型, 公开, 汇编方式申请空白文本, 返回具有指定数目半角空格的文本; 注意, 命令本身不会处理内存释放, 请不要连续反复调用
    .参数 文本长度, 整数型
    .局部变量 变量_D5CF0125, 整数型

    变量_D5CF0125 ＝ HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 文本长度 ＋ 8)
    DLL_RtlFillMemory (变量_D5CF0125, 文本长度, 32)
    置入代码 ({ 139, 69, 8, 3, 69, 252, 139, 69, 252, 137, 236, 93, 194, 4, 0 })
    
    
    
    
    
    
    返回 (“”)

.子程序 文本_取行数, 整数型, 公开, 取一个文本共有有多少行。
    .参数 文本, 文本型

    置入代码 ({ 87, 51, 192, 139, 125, 8, 139, 63, 133, 255, 116, 24, 51, 201, 138, 15, 71, 128, 249, 10, 117, 1, 64, 132, 201, 117, 243, 138, 79, 255, 128, 249, 10, 116, 1, 64, 95, 139, 229, 93, 194, 4, 0 })
    返回 (0)

.子程序 文本_转拼音, 文本型, 公开, 把一段文本转换到拼音
    .参数 欲转拼音的文本, 文本型
    .参数 是否加空格, 逻辑型, 可空, 可空,默认为假,不加;
    .参数 是否全角, 逻辑型, 可空, 可空，默认为假，半角
    .参数 是否正则, 逻辑型, 可空, 是否正则方式判断，可以判断生僻的汉字，可空，默认为假 
    .局部变量 变量_C1CF0125, 文本型
    .局部变量 变量_C2CF0125, 整数型
    .局部变量 变量_C3CF0125, 整数型
    .局部变量 变量_C4CF0125, 文本型

    欲转拼音的文本 ＝ 到全角 (欲转拼音的文本)
    变量_C2CF0125 ＝ 取文本长度 (欲转拼音的文本) ÷ 2
    .计次循环首 (变量_C2CF0125, 变量_C3CF0125)
        变量_C1CF0125 ＝ 取文本中间 (欲转拼音的文本, 变量_C3CF0125 × 2 － 1, 2)
        .如果 (文本_是否为汉字 (变量_C1CF0125, 是否正则))
            .判断开始 (是否加空格)
                变量_C4CF0125 ＝ 变量_C4CF0125 ＋ 取拼音 (变量_C1CF0125, 1) ＋ “ ”
            .默认
                变量_C4CF0125 ＝ 变量_C4CF0125 ＋ 取拼音 (变量_C1CF0125, 1)
            .判断结束
            
        .否则
            .判断开始 (是否全角)
                变量_C4CF0125 ＝ 变量_C4CF0125 ＋ 到全角 (变量_C1CF0125)
            .默认
                变量_C4CF0125 ＝ 变量_C4CF0125 ＋ 到半角 (变量_C1CF0125)
            .判断结束
            
        .如果结束
        
    .计次循环尾 ()
    欲转拼音的文本 ＝ 到半角 (欲转拼音的文本)
    返回 (变量_C4CF0125)

.子程序 文本_替换行内容, 文本型, 公开, 替换指定行整行内容，返回替换后的文本。
    .参数 文本, 文本型
    .参数 行数, 整数型
    .参数 替换内容, 文本型
    .局部变量 变量_E7030125, 文本型
    .局部变量 变量_E8030125, 整数型
    .局部变量 变量_E9030125, 文本型, , "0"
    .局部变量 变量_30C90225, 整数型

    变量_E9030125 ＝ 分割文本 (文本, #换行符, )
    变量_30C90225 ＝ 取数组成员数 (变量_E9030125)
    .如果真 (行数 ＞ 变量_30C90225)
        输出调试文本 (“传入行数大于实际文本行”)
        返回 (“”)
    .如果真结束
    变量_E9030125 [行数] ＝ 替换内容
    .计次循环首 (变量_30C90225, 变量_E8030125)
        .如果真 (取数组成员数 (变量_E9030125) ≠ 变量_E8030125)
            变量_E7030125 ＝ 变量_E7030125 ＋ 变量_E9030125 [变量_E8030125] ＋ #换行符
            到循环尾 ()
        .如果真结束
        变量_E7030125 ＝ 变量_E7030125 ＋ 变量_E9030125 [变量_E8030125]
    .计次循环尾 ()
    清除数组 (变量_E9030125)
    返回 (变量_E7030125)

.子程序 文本_取随机汉字, 文本型, 公开, 取常用的随机汉字
    .参数 个数, 整数型, , 要取出多少个汉字！
    .参数 汉字或全拼, 整数型, 可空, 0为汉字，否则为全拼音！
    .局部变量 变量_BF530125, 整数型
    .局部变量 变量_C0530125, 文本型

    .判断开始 (汉字或全拼 ＝ 0)
        .计次循环首 (个数, 变量_BF530125)
            变量_C0530125 ＝ 变量_C0530125 ＋ 到文本 (字符 (－汇编_取随机数 (38, 80)) ＋ 字符 (－汇编_取随机数 (38, 80)))
        .计次循环尾 ()
    .默认
        .计次循环首 (个数, 变量_BF530125)
            变量_C0530125 ＝ 变量_C0530125 ＋ 取拼音 (到文本 (字符 (－汇编_取随机数 (38, 80)) ＋ 字符 (－汇编_取随机数 (38, 80))), 1)
        .计次循环尾 ()
    .判断结束
    返回 (变量_C0530125)

.子程序 文本_取随机汉字_快速, 文本型, 公开, 返回指定个数的汉字
    .参数 个数, 整数型
    .局部变量 变量_3AE50225, 整数型
    .局部变量 变量_3BE50225, 字节集
    .局部变量 变量_3CE50225, 整数型

    
    
    置随机数种子 ()
    变量_3BE50225 ＝ 取空白字节集 (左移 (个数, 1))
    .变量循环首 (1, 左移 (个数, 1), 2, 变量_3AE50225)
        变量_3BE50225 [变量_3AE50225] ＝ 取随机数 (176, 247)
        变量_3BE50225 [变量_3AE50225 ＋ 1] ＝ 取随机数 (161, 254)
    .变量循环尾 ()
    返回 (到文本 (变量_3BE50225))

.子程序 文本_取随机字母, 文本型, 公开, 取随机26个字母！
    .参数 要取的字符数, 整数型, , 要取字符个数；
    .参数 字母类型, 整数型, 可空, 可空：默认为小写字母；0=小写字母；1=大写字母；2=大小写字母混合；
    .局部变量 变量_AC570125, 文本型
    .局部变量 变量_B5570125, 整数型

    .判断开始 (字母类型 ＝ 0)
        .计次循环首 (要取的字符数, )
            变量_AC570125 ＝ 变量_AC570125 ＋ 字符 (到字节 (汇编_取随机数 (97, 122)))
        .计次循环尾 ()
    .判断 (字母类型 ＝ 1)
        .计次循环首 (要取的字符数, )
            变量_AC570125 ＝ 变量_AC570125 ＋ 字符 (到字节 (汇编_取随机数 (65, 90)))
        .计次循环尾 ()
    .默认
        .计次循环首 (要取的字符数, )
            变量_B5570125 ＝ 汇编_取随机数 (0, 1)
            .如果 (变量_B5570125 ＝ 1)
                变量_AC570125 ＝ 变量_AC570125 ＋ 字符 (到字节 (汇编_取随机数 (97, 122)))
            .否则
                变量_AC570125 ＝ 变量_AC570125 ＋ 字符 (到字节 (汇编_取随机数 (65, 90)))
            .如果结束
            
        .计次循环尾 ()
    .判断结束
    返回 (变量_AC570125)

.子程序 文本_取随机姓氏, 文本型, 公开, 取出一个随机的百家姓！
    .参数 汉字或全拼, 整数型, 可空, 0为汉字，否则为全拼音！

    .判断开始 (汉字或全拼 ＝ 0)
        返回 (取文本中间 (#<?未知本地类型?>, 到数值 (文本_取随机范围数字 (1, 814, 1)), 2))
    .默认
        返回 (取拼音 (取文本中间 (#<?未知本地类型?>, 到数值 (文本_取随机范围数字 (1, 814, 1)), 2), 1))
    .判断结束
    

.子程序 文本_取随机数字, 文本型, 公开, 汇编_取随机数字，可选单或双！
    .参数 字符数, 整数型, , 要取字符个数
    .参数 单双选择, 整数型, 可空, 0为单双，1为单，其他数值为双；默认单双一起
    .局部变量 变量_31E80125, 文本型

    .判断开始 (单双选择 ＝ 0)
        .计次循环首 (字符数, )
            变量_31E80125 ＝ 变量_31E80125 ＋ 到文本 (汇编_取随机数 (0, 9))
        .计次循环尾 ()
    .判断 (单双选择 ＝ 1)
        .计次循环首 (字符数, )
            变量_31E80125 ＝ 变量_31E80125 ＋ 到文本 (多项选择 (汇编_取随机数 (1, 5), 1, 3, 5, 7, 9))
        .计次循环尾 ()
    .默认
        .计次循环首 (字符数, )
            变量_31E80125 ＝ 变量_31E80125 ＋ 到文本 (多项选择 (汇编_取随机数 (1, 5), 0, 2, 4, 6, 8))
        .计次循环尾 ()
    .判断结束
    返回 (变量_31E80125)

.子程序 汇编_取随机数, 整数型, 公开, 返回一个指定范围内的随机数值。在使用本命令取一系列的随机数之前，应该先使用“置随机数种子”命令为随机数生成器初始化一个种子值。本命令为初级命令。
    .参数 欲取随机数的最小值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为 0。
    .参数 欲取随机数的最大值, 整数型, 可空, 参数必须大于最小值。本参数如果被省略或小于等于最小值，默认为无限。

    
    置入代码 ({ 81, 82, 15, 49, 105, 192, 253, 67, 3, 0, 5, 195, 158, 38, 0, 193, 232, 16, 37, 255, 127, 0, 0, 139, 77, 16, 133, 201, 117, 5, 185, 255, 255, 255, 127, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 139, 229, 93, 194, 16, 0 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 汇编_取随机数_硬件版, 整数型, 公开, 部分CPU不支持 失败返回 0
    .参数 欲取随机数的最小值, 整数型, 可空
    .参数 欲取随机数的最大值, 整数型, 可空

    
    .判断开始 (IsRdRandSupported ())
        .如果真 (欲取随机数的最小值 ＝ 0)
            欲取随机数的最小值 ＝ 1
        .如果真结束
        .如果真 (欲取随机数的最大值 ＝ 0)
            欲取随机数的最大值 ＝ 9999
        .如果真结束
        
        返回 (RdRand (欲取随机数的最小值, 欲取随机数的最大值))
    .默认
        返回 (0)
    .判断结束
    

.子程序 汇编_取随机数种子_硬件版, 整数型, 公开, 部分CPU不支持 失败返回 0
    
    .判断开始 (IsRdSeedSupported ())
        返回 (RdSeed ())
    .默认
        返回 (0)
    .判断结束
    

.子程序 IsRdRandSupported, 逻辑型
    置入代码 ({ 184, 1, 0, 0, 0, 15, 162, 49, 192, 15, 186, 225, 30, 17, 192, 201, 195 })
    返回 (假)

.子程序 IsRdSeedSupported, 逻辑型
    置入代码 ({ 184, 7, 0, 0, 0, 49, 201, 15, 162, 49, 192, 15, 186, 227, 18, 17, 192, 201, 195 })
    返回 (假)

.子程序 RdRand, 整数型
    .参数 变量_52BA0225, 整数型
    .参数 变量_53BA0225, 整数型

    置入代码 ({ 81, 82, 15, 199, 240, 139, 77, 12, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 201, 194, 8, 0 })
    返回 (0)

.子程序 RdSeed, 长整数型
    置入代码 ({ 15, 199, 248, 201, 195 })
    返回 (0)

.子程序 文本_取随机字符, 文本型, 公开, 取随机可见字符,只取能显示的字符
    .参数 要取的字符数, 整数型, , 要取字符个数
    .参数 获取模式, 整数型, 可空, 获取模式, 1=数字, 2=小写字母, 4=大写字母, 8=特殊字符, 需要多个组合用位或或起来, 默认为1, 只返回数字
    .局部变量 变量_55D80225, 字节集
    .局部变量 变量_56D80225, 整数型
    .局部变量 变量_57D80225, 整数型
    .局部变量 变量_58D80225, 文本型
    .局部变量 变量_59D80225, 整数型
    .局部变量 变量_5AD80225, 整数型
    .局部变量 变量_5BD80225, 整数型
    .局部变量 变量_5CD80225, 整数型

    置随机数种子 ()
    变量_55D80225 ＝ 取空白字节集 (129)
    变量_56D80225 ＝ 取指针_字节集型 (变量_55D80225)
    变量_58D80225 ＝ 取空白文本 (要取的字符数)
    变量_59D80225 ＝ 取指针_文本型 (变量_58D80225)
    .如果真 (位与 (获取模式, 1) ≠ 0)
        变量_5AD80225 ＝ 位或 (变量_5AD80225, 1)
    .如果真结束
    .如果真 (位与 (获取模式, 2) ≠ 0)
        变量_5AD80225 ＝ 位或 (变量_5AD80225, 2)
    .如果真结束
    .如果真 (位与 (获取模式, 4) ≠ 0)
        变量_5AD80225 ＝ 位或 (变量_5AD80225, 4)
    .如果真结束
    .如果真 (位与 (获取模式, 8) ≠ 0)
        变量_5AD80225 ＝ 位或 (变量_5AD80225, 8)
    .如果真结束
    .如果真 (变量_5AD80225 ＝ 0)
        变量_5AD80225 ＝ 1
    .如果真结束
    获取模式 ＝ 变量_5AD80225
    .如果真 (位与 (获取模式, 1) ≠ 0)
        RtlMoveMemory (变量_56D80225 ＋ 变量_57D80225, 取指针_文本型 (“0123456789”), 10)
        变量_57D80225 ＝ 变量_57D80225 ＋ 10
    .如果真结束
    .如果真 (位与 (获取模式, 2) ≠ 0)
        RtlMoveMemory (变量_56D80225 ＋ 变量_57D80225, 取指针_文本型 (“abcdefghijklmnopqrstuvwxyz”), 26)
        变量_57D80225 ＝ 变量_57D80225 ＋ 26
    .如果真结束
    .如果真 (位与 (获取模式, 4) ≠ 0)
        RtlMoveMemory (变量_56D80225 ＋ 变量_57D80225, 取指针_文本型 (“ABCDEFGHIJKLMNOPQRSTUVWXYZ”), 26)
        变量_57D80225 ＝ 变量_57D80225 ＋ 26
    .如果真结束
    .如果真 (位与 (获取模式, 8) ≠ 0)
        
        RtlMoveMemory (变量_56D80225 ＋ 变量_57D80225, 取指针_文本型 (“ !” ＋ #引号 ＋ “#$%&'()*+,-./:;<=>?@[\]^_`{|}~”), 33)
        变量_57D80225 ＝ 变量_57D80225 ＋ 33
    .如果真结束
    变量_57D80225 ＝ 变量_57D80225 － 1
    .计次循环首 (要取的字符数, 变量_5BD80225)
        RtlMoveMemory (变量_59D80225 ＋ 变量_5BD80225 － 1, 变量_56D80225 ＋ 取随机数 (0, 变量_57D80225), 1)
    .计次循环尾 ()
    返回 (变量_58D80225)

.子程序 文本_插入新一行, 文本型, 公开, 在指定行插入文本，原文本后移，返回插入后的文本。
    .参数 原文本, 文本型
    .参数 行数, 整数型
    .参数 新一文本行内容, 文本型
    .局部变量 变量_60050125, 文本型, , "0"
    .局部变量 变量_61050125, 文本型
    .局部变量 变量_62050125, 整数型

    变量_60050125 ＝ 分割文本 (原文本, #换行符, )
    插入成员 (变量_60050125, 行数, 新一文本行内容)
    .计次循环首 (取数组成员数 (变量_60050125), 变量_62050125)
        .如果真 (取数组成员数 (变量_60050125) ＝ 变量_62050125)
            变量_61050125 ＝ 变量_61050125 ＋ 变量_60050125 [变量_62050125]
            跳出循环 ()
        .如果真结束
        变量_61050125 ＝ 变量_61050125 ＋ 变量_60050125 [变量_62050125] ＋ #换行符
    .计次循环尾 ()
    清除数组 (变量_60050125)
    返回 (变量_61050125)

.子程序 文本_是否为汉字, 逻辑型, 公开, 中间不能有空格,判断一个文本是否全为汉字,是汉字返回真,否则返回假
    .参数 欲判断文本, 文本型
    .参数 正则方式, 逻辑型, 可空, 是否正则方式判断，可以判断生僻的汉字
    .局部变量 变量_10060125, 字节型
    .局部变量 变量_11060125, 字节型
    .局部变量 变量_D4C50125, 对象
    .局部变量 变量_D7C50125, 文本型
    .局部变量 变量_69DB0125, 逻辑型
    .局部变量 变量_69F80125, 整数型
    .局部变量 变量_6AF80125, 整数型
    .局部变量 变量_6BF80125, 整数型

    变量_69F80125 ＝ 取文本长度 (删全部空 (欲判断文本))
    .如果真 (变量_69F80125 ≤ 1)
        返回 (假)
    .如果真结束
    .如果真 (正则方式)
        CoInitialize (0)
        变量_D4C50125.创建 (“VBScript.RegExp”, )
        变量_D4C50125.写属性 (“Pattern”, “^[\u4e00-\u9fa5]{1,}$”)
        变量_69DB0125 ＝ 变量_D4C50125.逻辑方法 (“Test”, 欲判断文本)
        变量_D4C50125.清除 ()
        CoUninitialize ()
        返回 (变量_69DB0125)
    .如果真结束
    
    .计次循环首 (变量_69F80125, 变量_6AF80125)
        变量_6BF80125 ＝ 取代码 (欲判断文本, 变量_6AF80125)
        .如果真 (变量_6BF80125 ≥ 0)
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
    返回 (真)

.子程序 文本_是否为汉字2, 逻辑型, 公开, 中间不能有空格,判断一个文本第一个字是否是汉字,是汉字返回真,否则返回假
    .参数 欲判断文本, 文本型
    .局部变量 变量_51D40225, 文本型
    .局部变量 变量_52D40225, 整数型
    .局部变量 变量_53D40225, 文本型

    变量_51D40225 ＝ 欲判断文本
    变量_51D40225 ＝ 删全部空 (变量_51D40225)
    变量_52D40225 ＝ 取文本长度 (变量_51D40225)
    .如果真 (变量_52D40225 ＜ 2)
        返回 (假)
    .如果真结束
    变量_53D40225 ＝ 取拼音 (取文本左边 (变量_51D40225, 2), 1)
    返回 (变量_53D40225 ≠ “”)

.子程序 文本_是否为双字节字符, 逻辑型, 公开, By 火威网络 如果为双字节返回真，否则返回假。如果指定位置超出文本长度，返回0
    .参数 欲检查文本, 字节集
    .参数 欲检查的字符位置, 整数型, , 0为首位置，1为第2个位置，如此类推，必须是大于0。

    返回 (DLL_IsDBCSLeadByte (取字节集数据 (欲检查文本, #字节型, 欲检查的字符位置)))

.子程序 文本_是否为双字节字符Ex, 逻辑型, 公开, By 火威网络 如果为双字节返回真，否则返回假。如果指定位置超出文本长度，返回0
    .参数 欲检查文本, 字节集
    .参数 欲检查的字符位置, 整数型, , 0为首位置，1为第2个位置，如此类推，必须是大于0。

    返回 (DLL_IsDBCSLeadByteEx (0, 取字节集数据 (欲检查文本, #字节型, 欲检查的字符位置)))

.子程序 文本_是否为字母, 逻辑型, 公开, 中间不能有空格
    .参数 文本字符, 文本型
    .局部变量 变量_6CF80125, 整数型
    .局部变量 变量_6DF80125, 整数型
    .局部变量 变量_6EF80125, 整数型

    变量_6CF80125 ＝ 取文本长度 (文本字符)
    .如果真 (变量_6CF80125 ＝ 0)
        返回 (假)
    .如果真结束
    .计次循环首 (变量_6CF80125, 变量_6DF80125)
        变量_6EF80125 ＝ 取代码 (文本字符, 变量_6DF80125)
        .判断开始 (变量_6EF80125 ≥ 65 且 变量_6EF80125 ≤ 90)
            
        .判断 (变量_6EF80125 ≥ 97 且 变量_6EF80125 ≤ 122)
            
        .默认
            返回 (假)
        .判断结束
        
    .计次循环尾 ()
    返回 (真)

.子程序 文本_取出现次数, 整数型, 公开, 返回指定文本中指定内容出现的次数
    .参数 被搜索文本, 文本型
    .参数 欲搜索文本, 文本型
    .参数 是否区分大小写, 逻辑型, 可空
    .局部变量 变量_C2F70225, 整数型
    .局部变量 变量_97C40125, 整数型
    .局部变量 变量_98C40125, 整数型

    变量_C2F70225 ＝ 取文本长度 (欲搜索文本)
    .如果真 (取文本长度 (被搜索文本) ＞ 0 且 变量_C2F70225 ＞ 0)
        变量_97C40125 ＝ 寻找文本 (被搜索文本, 欲搜索文本, , 取反 (是否区分大小写))
        .判断循环首 (变量_97C40125 ≠ -1)
            变量_98C40125 ＝ 变量_98C40125 ＋ 1
            变量_97C40125 ＝ 寻找文本 (被搜索文本, 欲搜索文本, 变量_97C40125 ＋ 变量_C2F70225, 取反 (是否区分大小写))
        .判断循环尾 ()
    .如果真结束
    返回 (变量_98C40125)

.子程序 文本_首字母改大写, 文本型, 公开, foxpro返回 Foxpro，注意本命令对首字为汉字的文本无效
    .参数 英文文本, 文本型

    返回 (到大写 (取文本左边 (英文文本, 1)) ＋ 取文本中间 (英文文本, 2, 取文本长度 (英文文本)))

.子程序 文本_取汉字区位码, 文本型, 公开, 返回一个汉字的区位码,如果汉字过长,只取第一个字,如果不是汉字,返回空
    .参数 汉字, 文本型, , 传送一个汉字进行处理
    .参数 区码还是位码, 整数型, 可空, 需返回的内容,1表示区码,2表示位码,3表示区码与位码都返回,默认为3
    .局部变量 变量_15060125, 字节型
    .局部变量 变量_16060125, 字节型

    变量_15060125 ＝ 取代码 (取文本左边 (汉字, 1), )
    变量_16060125 ＝ 取代码 (取文本中间 (汉字, 2, 1), )
    .如果真 (变量_15060125 ＜ 176 或 变量_15060125 ＞ 247 或 变量_16060125 ＜ 161 或 变量_16060125 ＞ 254)
        返回 (“”)
    .如果真结束
    .判断开始 (区码还是位码 ＝ 1)
        返回 (到文本 (变量_15060125))
    .判断 (区码还是位码 ＝ 2)
        返回 (到文本 (变量_16060125))
    .判断 (区码还是位码 ＝ 3)
        返回 (到文本 (变量_15060125) ＋ 到文本 (变量_16060125))
    .默认
        返回 (“”)
    .判断结束
    
    

.子程序 文本_取汉字机内码, 文本型, 公开
    .参数 汉字, 文本型
    .局部变量 变量_18060125, 整数型

    .如果真 (取代码 (汉字, 1) ＞ 0)
        返回 (“”)
    .如果真结束
    变量_18060125 ＝ (取代码 (汉字, 1) ＋ 256) × 256 ＋ 取代码 (汉字, 2) ＋ 256
    返回 (取十六进制文本 (变量_18060125))
    

.子程序 文本_取出中间文本, 文本型, 公开, 比如：欲取全文本为“12345”,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”，
    .参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345
    .参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如："<font color="#引号red#引号">"
    .参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如："<font color="#引号red#引号">"
    .参数 起始搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 前面文本 的开始位置
    .参数 是否不区分大小写, 逻辑型, 可空, 为真不区分大小写，为假区分。
    .局部变量 变量_0DA30225, 整数型
    .局部变量 变量_0EA30225, 整数型
    .局部变量 变量_0FA30225, 文本型
    .局部变量 变量_10A30225, 文本型

    变量_0FA30225 ＝ 子文本替换 (前面文本, “#引号”, #引号, , , 真)
    变量_10A30225 ＝ 子文本替换 (后面文本, “#引号”, #引号, , , 真)
    变量_0DA30225 ＝ 寻找文本 (欲取全文本, 变量_0FA30225, 起始搜寻位置, 是否不区分大小写)
    .如果真 (变量_0DA30225 ≠ -1)
        变量_0DA30225 ＝ 变量_0DA30225 ＋ 取文本长度 (变量_0FA30225)
        变量_0EA30225 ＝ 寻找文本 (欲取全文本, 变量_10A30225, 变量_0DA30225, 是否不区分大小写)
        .如果真 (变量_0EA30225 ≠ -1)
            返回 (取文本中间 (欲取全文本, 变量_0DA30225, 变量_0EA30225 － 变量_0DA30225))
        .如果真结束
        
    .如果真结束
    返回 (“”)

.子程序 文本_倒取出中间文本, 文本型, 公开, 比如：欲取全文本为“0012345”,现在要取出“123”，<123>的右边为“4”，<123>的左边为“0”，注意这里是倒取
    .参数 欲取全文本, 文本型, , 比如：欲取全文本为“0012345”
    .参数 右边文本, 文本型, , 123的右边为“4”，引号直接用 #引号，如："<font color=#引号red#引号>" 注意左右
    .参数 左边文本, 文本型, , 123的左边为“0”，引号直接用 #引号，如："<font color=#引号red#引号>" 注意左右
    .参数 倒数搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 右边文本的开始位置
    .参数 是否不区分大小写, 逻辑型, 可空, 默认为假：区分大小写 真：不区分大小写
    .局部变量 变量_A8E10225, 文本型
    .局部变量 变量_A9E10225, 文本型
    .局部变量 变量_98F40125, 整数型
    .局部变量 变量_99F40125, 整数型

    变量_A9E10225 ＝ 子文本替换 (右边文本, “#引号”, #引号, , , 真)
    变量_A8E10225 ＝ 子文本替换 (左边文本, “#引号”, #引号, , , 真)
    倒数搜寻位置 ＝ 选择 (倒数搜寻位置 ≤ 0, -1, 倒数搜寻位置)
    倒数搜寻位置 ＝ 取文本长度 (欲取全文本) － 倒数搜寻位置
    变量_98F40125 ＝ 倒找文本 (欲取全文本, 变量_A9E10225, 倒数搜寻位置, 是否不区分大小写)
    .如果真 (变量_98F40125 ≠ -1)
        变量_99F40125 ＝ 倒找文本 (欲取全文本, 变量_A8E10225, 变量_98F40125, 是否不区分大小写)
        .如果真 (变量_99F40125 ≠ -1)
            变量_99F40125 ＝ 变量_99F40125 ＋ 取文本长度 (变量_A8E10225)
        .如果真结束
        返回 (取文本中间 (欲取全文本, 变量_99F40125, 变量_98F40125 － 变量_99F40125))
    .如果真结束
    返回 (“”)

.子程序 文本_取文本所在行, 整数型, 公开, 查找某段字或关键中在文本中的哪一行出现，成功返回行数，失败返回0
    .参数 源文本, 文本型
    .参数 欲查找的文本, 文本型
    .参数 是否区分大小写, 逻辑型, 可空
    .局部变量 变量_23150125, 文本型, , "0"
    .局部变量 变量_24150125, 整数型

    变量_23150125 ＝ 分割文本 (源文本, #换行符, )
    .计次循环首 (取数组成员数 (变量_23150125), 变量_24150125)
        .如果真 (寻找文本 (变量_23150125 [变量_24150125], 欲查找的文本, , 取反 (是否区分大小写)) ≠ -1)
            返回 (变量_24150125)
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 文本_取文本所在行_优化版, 整数型, 公开, 查找某段字或关键中在文本中的哪一行出现，成功返回行数，失败返回0
    .参数 源文本, 文本型
    .参数 欲查找的文本, 文本型
    .参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为 1 【单位：行】
    .参数 是否区分大小写, 逻辑型, 可空
    .局部变量 变量_AEA20225, 文本型, , "0"
    .局部变量 变量_AFA20225, 整数型

    变量_AEA20225 ＝ 分割文本 (源文本, #换行符, )
    .计次循环首 (取数组成员数 (变量_AEA20225), 变量_AFA20225)
        .如果真 (是否为空 (起始搜寻位置))
            起始搜寻位置 ＝ 1
        .如果真结束
        .如果真 (寻找文本 (变量_AEA20225 [变量_AFA20225], 欲查找的文本, , 取反 (是否区分大小写)) ≠ -1)
            .如果真 (变量_AFA20225 ≥ 起始搜寻位置)
                返回 (变量_AFA20225)
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 文本_取汉字区位码2, 整数型, 公开
    .参数 汉字, 文本型
    .局部变量 变量_27150125, 整数型

    .如果真 (取代码 (汉字, 1) ＞ 0)
        返回 (0)
    .如果真结束
    变量_27150125 ＝ (取代码 (汉字, 1) ＋ 256) × 256 ＋ 取代码 (汉字, 2) ＋ 256
    
    返回 (变量_27150125 － 41120)

.子程序 文本_删除指定文本行, 文本型, 公开, 删除指定文本的一行文本，返回删行后的文本
    .参数 源文本, 文本型
    .参数 行数, 整数型, , 输入你想删除的行数，如：想删除第3行的整行文本就直接输3
    .局部变量 变量_1D150125, 文本型, , "0"
    .局部变量 变量_1E150125, 整数型
    .局部变量 变量_1F150125, 文本型

    变量_1F150125 ＝ 源文本
    .如果真 (寻找文本 (变量_1F150125, #换行符, , 假) ＝ -1)
        变量_1F150125 ＝ 变量_1F150125 ＋ #换行符
    .如果真结束
    变量_1D150125 ＝ 分割文本 (变量_1F150125, #换行符, )
    变量_1F150125 ＝ “”
    删除成员 (变量_1D150125, 行数, )
    .计次循环首 (取数组成员数 (变量_1D150125), 变量_1E150125)
        .如果 (取数组成员数 (变量_1D150125) ≠ 变量_1E150125)
            变量_1F150125 ＝ 变量_1F150125 ＋ 变量_1D150125 [变量_1E150125] ＋ #换行符
        .否则
            变量_1F150125 ＝ 变量_1F150125 ＋ 变量_1D150125 [变量_1E150125]
        .如果结束
        
    .计次循环尾 ()
    清除数组 (变量_1D150125)
    返回 (变量_1F150125)

.子程序 文本_删除指定文件行, 逻辑型, 公开, 删除指定文件内的一行文本。
    .参数 文件路径, 文本型
    .参数 要删除的文本行文本, 文本型
    .局部变量 变量_83C20125, 字节集
    .局部变量 变量_84C20125, 整数型
    .局部变量 变量_85C20125, 字节集

    变量_83C20125 ＝ 读入文件 (文件路径)
    变量_84C20125 ＝ 寻找字节集 (变量_83C20125, 到字节集 (要删除的文本行文本), )
    .如果真 (变量_84C20125 ＝ -1)
        返回 (假)
    .如果真结束
    变量_85C20125 ＝ 字节集替换 (变量_83C20125, 变量_84C20125, 取字节集长度 (到字节集 (要删除的文本行文本) ＋ { 13, 10 }), { })
    返回 (写到文件 (文件路径, 变量_85C20125))

.子程序 文本_取随机范围数字, 文本型, 公开, 如1-100之间的双数或单数或单双一起！
    .参数 起始数, 整数型, , 如：1
    .参数 结束数, 整数型, , 如：1000
    .参数 单双选择, 整数型, 可空, 1为单，2为双,否则为取单双
    .局部变量 变量_96C30125, 整数型

    .判断开始 (起始数 ＝ 结束数)
        返回 (到文本 (起始数))
    .判断 (起始数 ＞ 结束数)
        变量_96C30125 ＝ 汇编_取随机数 (结束数, 起始数)
    .默认
        变量_96C30125 ＝ 汇编_取随机数 (起始数, 结束数)
    .判断结束
    
    
    .判断开始 (单双选择 ＝ 1)
        .如果真 (变量_96C30125 ％ 2 ＝ 0)
            .判断开始 (变量_96C30125 ＝ 结束数)
                变量_96C30125 ＝ 变量_96C30125 － 1
            .默认
                变量_96C30125 ＝ 变量_96C30125 ＋ 1
            .判断结束
            
        .如果真结束
        返回 (到文本 (变量_96C30125))
    .判断 (单双选择 ＝ 2)
        .如果真 (变量_96C30125 ％ 2 ＝ 1)
            .判断开始 (变量_96C30125 ＝ 结束数)
                变量_96C30125 ＝ 变量_96C30125 － 1
            .默认
                变量_96C30125 ＝ 变量_96C30125 ＋ 1
            .判断结束
            
        .如果真结束
        返回 (到文本 (变量_96C30125))
    .默认
        返回 (到文本 (变量_96C30125))
    .判断结束
    

.子程序 文本_删除指定文件文本行1, 逻辑型, 公开, 感谢 @jr21066 分享开源
    .参数 参_文件路径, 文本型
    .参数 参_行号, 整数型
    .局部变量 变量_80B00225, 字节集
    .局部变量 变量_81B00225, 整数型
    .局部变量 变量_82B00225, 整数型

    
    .如果真 (参_行号 ＝ 0)
        返回 (假)
    .如果真结束
    变量_80B00225 ＝ 读入文件 (参_文件路径)
    
    .计次循环首 (参_行号 － 1, )
        
        变量_81B00225 ＝ 寻找字节集 (变量_80B00225, { 13, 10 }, 变量_81B00225 ＋ 1)
        .如果 (变量_81B00225 ＝ -1)
            返回 (假)
        .否则
            变量_81B00225 ＝ 变量_81B00225 ＋ 1
        .如果结束
        
    .计次循环尾 ()
    变量_82B00225 ＝ 寻找字节集 (变量_80B00225, { 13, 10 }, 变量_81B00225 ＋ 1)
    .如果 (变量_82B00225 ＝ -1)
        
        .如果 (取字节集长度 (变量_80B00225) ＞ 变量_81B00225)
            变量_82B00225 ＝ 取字节集长度 (变量_80B00225)
        .否则
            返回 (假)
        .如果结束
        
    .否则
        变量_82B00225 ＝ 变量_82B00225 ＋ 1
    .如果结束
    
    .如果真 (写到文件 (参_文件路径, 取字节集左边 (变量_80B00225, 变量_81B00225) ＋ 取字节集右边 (变量_80B00225, 取字节集长度 (变量_80B00225) － 变量_82B00225)))
        返回 (真)
    .如果真结束
    
    返回 (假)

.子程序 文本_删除指定变量文本行1, 文本型, 公开, 感谢【@jr21066 】分享开源
    .参数 参_文本, 文本型
    .参数 参_行号, 整数型
    .局部变量 变量_85B00225, 整数型
    .局部变量 变量_86B00225, 整数型

    .如果真 (参_行号 ＝ 0)
        返回 (参_文本)
    .如果真结束
    .计次循环首 (参_行号 － 1, )
        变量_85B00225 ＝ 寻找文本 (参_文本, #换行符, 变量_85B00225 ＋ 1, 假)
        .如果 (变量_85B00225 ＝ -1)
            返回 (“”)
        .否则
            变量_85B00225 ＝ 变量_85B00225 ＋ 1
        .如果结束
        
    .计次循环尾 ()
    变量_86B00225 ＝ 寻找文本 (参_文本, #换行符, 变量_85B00225 ＋ 1, 假)
    .如果 (变量_86B00225 ＝ -1)
        .如果 (取文本长度 (参_文本) ＞ 变量_85B00225)
            变量_86B00225 ＝ 取文本长度 (参_文本)
        .否则
            返回 (“”)
        .如果结束
        
    .否则
        变量_86B00225 ＝ 变量_86B00225 ＋ 1
    .如果结束
    返回 (取文本左边 (参_文本, 变量_85B00225) ＋ 取文本右边 (参_文本, 取文本长度 (参_文本) － 变量_86B00225))

.子程序 文本_取文本起始位置, , 公开, 返回某个字符的在整个文本中出现的位置数组，数组第一个成员是第一次出现的位置。
    .参数 文本, 文本型
    .参数 欲搜寻的文本, 文本型
    .参数 起始位置, 整数型, 参考 数组
    .局部变量 变量_6BE60225, 整数型
    .局部变量 变量_6CE60225, 整数型

    清除数组 (起始位置)
    变量_6BE60225 ＝ 取文本长度 (欲搜寻的文本)
    变量_6CE60225 ＝ 寻找文本 (文本, 欲搜寻的文本, , 真)
    .判断循环首 (变量_6CE60225 ≠ -1)
        加入成员 (起始位置, 变量_6CE60225)
        变量_6CE60225 ＝ 寻找文本 (文本, 欲搜寻的文本, 变量_6CE60225 ＋ 变量_6BE60225, 真)
    .判断循环尾 ()

.子程序 字节集_取空白字节集, 字节集, 公开, 汇编方式申请空白字节集, 返回具有特定数目 0 字节的字节集; 注意, 命令本身不会处理内存释放, 请不要连续反复调用
    .参数 字节集长度, 整数型

    HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 字节集长度 ＋ 8)
    置入代码 ({ 199, 0, 1, 0, 0, 0, 255, 117, 8, 143, 64, 4, 139, 229, 93, 194, 4, 0 })
    
    
    
    
    
    
    
    返回 ({ })

.子程序 文本_文本数组排序, , 公开, 排序从z到a排序或从a-z排序
    .参数 要排序的数组, 文本型, 数组, 要排序的数组。
    .参数 排序后的数组, 文本型, 参考 数组, 排序后结果返回的数组。
    .参数 排序方向是否从大到小, 逻辑型, 可空, 如果参数值为真，排序将从小到大；如果为假，则从大到小。如果本参数被省略，将默认为假
    .局部变量 变量_A3F80125, 整数型
    .局部变量 变量_A4F80125, 整数型
    .局部变量 变量_A5F80125, 整数型
    .局部变量 变量_A6F80125, 文本型

    .如果真 (是否为空 (排序方向是否从大到小))
        排序方向是否从大到小 ＝ 假
    .如果真结束
    
    复制数组 (排序后的数组, 要排序的数组)
    变量_A3F80125 ＝ 取数组成员数 (排序后的数组)
    .如果 (排序方向是否从大到小 ＝ 真)
        .判断循环首 (变量_A3F80125 ＞ 0)
            变量_A5F80125 ＝ 0
            .变量循环首 (1, 变量_A3F80125 － 1, 1, 变量_A4F80125)
                .如果真 (排序后的数组 [变量_A4F80125] ＜ 排序后的数组 [变量_A4F80125 ＋ 1])
                    变量_A6F80125 ＝ 排序后的数组 [变量_A4F80125]
                    排序后的数组 [变量_A4F80125] ＝ 排序后的数组 [变量_A4F80125 ＋ 1]
                    排序后的数组 [变量_A4F80125 ＋ 1] ＝ 变量_A6F80125
                    变量_A5F80125 ＝ 变量_A4F80125
                .如果真结束
                
            .变量循环尾 ()
            变量_A3F80125 ＝ 变量_A5F80125
        .判断循环尾 ()
        
    .否则
        .判断循环首 (变量_A3F80125 ＞ 0)
            变量_A5F80125 ＝ 0
            .变量循环首 (1, 变量_A3F80125 － 1, 1, 变量_A4F80125)
                .如果真 (排序后的数组 [变量_A4F80125] ＞ 排序后的数组 [变量_A4F80125 ＋ 1])
                    变量_A6F80125 ＝ 排序后的数组 [变量_A4F80125]
                    排序后的数组 [变量_A4F80125] ＝ 排序后的数组 [变量_A4F80125 ＋ 1]
                    排序后的数组 [变量_A4F80125 ＋ 1] ＝ 变量_A6F80125
                    变量_A5F80125 ＝ 变量_A4F80125
                .如果真结束
                
            .变量循环尾 ()
            变量_A3F80125 ＝ 变量_A5F80125
        .判断循环尾 ()
        
    .如果结束
    

.子程序 文本_插入文本到某行前, 文本型, 公开, 将文本加入到某行之前，返回加入后的文本。
    .参数 原文本, 文本型
    .参数 行数, 整数型
    .参数 欲插入内容, 文本型
    .局部变量 变量_32040125, 文本型, , "0"
    .局部变量 变量_33040125, 文本型
    .局部变量 变量_34040125, 整数型

    变量_32040125 ＝ 分割文本 (原文本, #换行符, )
    .如果真 (行数 ≤ 取数组成员数 (变量_32040125))
        变量_32040125 [行数] ＝ 欲插入内容 ＋ 变量_32040125 [行数]
        .计次循环首 (取数组成员数 (变量_32040125), 变量_34040125)
            .如果真 (取数组成员数 (变量_32040125) ＝ 变量_34040125)
                变量_33040125 ＝ 变量_33040125 ＋ 变量_32040125 [变量_34040125]
                跳出循环 ()
            .如果真结束
            变量_33040125 ＝ 变量_33040125 ＋ 变量_32040125 [变量_34040125] ＋ #换行符
        .计次循环尾 ()
        清除数组 (变量_32040125)
        返回 (变量_33040125)
    .如果真结束
    清除数组 (变量_32040125)
    返回 (“”)

.子程序 文本_插入文本到某行后, 文本型, 公开, 将文本加入到某行之后，返回加入后的文本。
    .参数 原文本, 文本型
    .参数 行数, 整数型, , 行数不能小于或等于0
    .参数 欲插入内容, 文本型
    .局部变量 变量_38040125, 文本型, , "0"
    .局部变量 变量_39040125, 文本型
    .局部变量 变量_3A040125, 整数型

    变量_38040125 ＝ 分割文本 (原文本, #换行符, )
    .如果真 (行数 ＞ 0 且 行数 ≤ 取数组成员数 (变量_38040125))
        变量_38040125 [行数] ＝ 变量_38040125 [行数] ＋ 欲插入内容
        .计次循环首 (取数组成员数 (变量_38040125), 变量_3A040125)
            .如果真 (取数组成员数 (变量_38040125) ＝ 变量_3A040125)
                变量_39040125 ＝ 变量_39040125 ＋ 变量_38040125 [变量_3A040125]
                跳出循环 ()
            .如果真结束
            变量_39040125 ＝ 变量_39040125 ＋ 变量_38040125 [变量_3A040125] ＋ #换行符
        .计次循环尾 ()
        清除数组 (变量_38040125)
        返回 (变量_39040125)
    .如果真结束
    清除数组 (变量_38040125)
    返回 (“”)

.子程序 文本_插入文本到某位置, 文本型, 公开, 插入某文本到左起某一位置，原文本后移，返回插入后的文本。
    .参数 原文本, 文本型
    .参数 欲插入的文本, 文本型
    .参数 插入位置, 整数型, , 位置必须为偶数值（字母、数字、标点、符号都和汉字均占2长度)

    返回 (到半角 (文本替换 (到全角 (原文本), 插入位置 － 1, 0, 到全角 (欲插入的文本))))

.子程序 文本_取字符串宽度, 整数型, 公开
    .参数 启动窗口句柄, 整数型
    .参数 欲要取出的字符串, 文本型
    .局部变量 变量_5DA00125, 精易_坐标

    GetTextExtentPointA (GetDC (启动窗口句柄), 欲要取出的字符串, 取文本长度 (欲要取出的字符串), 变量_5DA00125)
    返回 (变量_5DA00125.横)

.子程序 文本_取指定文件文本行, 文本型, 公开, 成功返回指定的文本行文本，失败返回空文本。
    .参数 文件路径, 文本型
    .参数 行号, 整数型
    .局部变量 变量_42040125, 文本型, , "0"
    .局部变量 变量_43040125, 文本型

    变量_43040125 ＝ 到文本 (读入文件 (文件路径))
    变量_42040125 ＝ 分割文本 (变量_43040125, #换行符, )
    .如果真 (行号 ≤ 0)
        返回 (“”)
    .如果真结束
    .如果真 (行号 ＞ 取数组成员数 (变量_42040125))
        返回 (“”)
    .如果真结束
    返回 (变量_42040125 [行号])

.子程序 文本_取指定变量文本行, 文本型, 公开, 成功返回指定的文本行文本，失败返回空文本。
    .参数 文本, 文本型
    .参数 行号, 整数型
    .局部变量 变量_46040125, 文本型, , "0"

    变量_46040125 ＝ 分割文本 (文本, #换行符, )
    .如果真 (行号 ≤ 0)
        返回 (“”)
    .如果真结束
    .如果真 (行号 ＞ 取数组成员数 (变量_46040125))
        返回 (“”)
    .如果真结束
    返回 (变量_46040125 [行号])

.子程序 文本_取指定文件文本行1, 文本型, 公开, 感谢【@jr21066】分享开源
    .参数 参_文件路径, 文本型
    .参数 参_行号, 整数型
    .局部变量 变量_A1B00225, 字节集
    .局部变量 变量_A2B00225, 整数型
    .局部变量 变量_A3B00225, 整数型

    .如果真 (参_行号 ＝ 0)
        返回 (“”)
    .如果真结束
    变量_A1B00225 ＝ 读入文件 (参_文件路径)
    .计次循环首 (参_行号 － 1, )
        变量_A2B00225 ＝ 寻找字节集 (变量_A1B00225, { 13, 10 }, 变量_A2B00225 ＋ 1)
        .如果 (变量_A2B00225 ＝ -1)
            返回 (“”)
        .否则
            变量_A2B00225 ＝ 变量_A2B00225 ＋ 2
        .如果结束
        
    .计次循环尾 ()
    .如果真 (变量_A2B00225 ＝ 0)
        变量_A2B00225 ＝ 1
    .如果真结束
    变量_A3B00225 ＝ 寻找字节集 (变量_A1B00225, { 13, 10 }, 变量_A2B00225 ＋ 1)
    .如果 (变量_A3B00225 ＝ -1)
        .如果 (取字节集长度 (变量_A1B00225) ≥ 变量_A2B00225)
            变量_A3B00225 ＝ 取字节集长度 (变量_A1B00225) ＋ 1
        .否则
            返回 (“”)
        .如果结束
        
    .否则
        变量_A3B00225 ＝ 变量_A3B00225 ＋ 2
    .如果结束
    返回 (到文本 (取字节集中间 (变量_A1B00225, 变量_A2B00225, 变量_A3B00225 － 变量_A2B00225)))

.子程序 文本_取指定变量文本行1, 文本型, 公开
    .参数 欲取其部分的文本, 文本型
    .参数 行号, 整数型
    .局部变量 变量_3EDB0225, 整数型
    .局部变量 变量_3FDB0225, 整数型
    .局部变量 变量_40DB0225, 整数型
    .局部变量 变量_41DB0225, 整数型
    .局部变量 变量_42DB0225, 整数型

    
    .如果真 (行号 ＝ 0)
        返回 (“”)
    .如果真结束
    变量_3FDB0225 ＝ 行号 － 1
    变量_41DB0225 ＝ 1
    .计次循环首 (变量_3FDB0225, 变量_40DB0225)
        变量_41DB0225 ＝ 寻找文本 (欲取其部分的文本, #换行符, 变量_41DB0225, 假)
        .如果真 (变量_41DB0225 ＝ -1)
            返回 (“”)
        .如果真结束
        变量_41DB0225 ＝ 变量_41DB0225 ＋ 2
    .计次循环尾 ()
    变量_42DB0225 ＝ 寻找文本 (欲取其部分的文本, #换行符, 变量_41DB0225, 假)
    .如果 (变量_42DB0225 ＝ -1)
        变量_3EDB0225 ＝ 取文本长度 (欲取其部分的文本)
        返回 (取文本右边 (欲取其部分的文本, 变量_3EDB0225 － 变量_41DB0225 ＋ 1))
    .否则
        返回 (取文本中间 (欲取其部分的文本, 变量_41DB0225, 变量_42DB0225 － 变量_41DB0225))
    .如果结束
    

.子程序 文本_取文本行出现次数, 整数型, 公开, 取某行文本共出现了多少次，不存在返回-1。
    .参数 被搜寻的文本, 文本型
    .参数 行数, 整数型
    .局部变量 变量_49040125, 文本型, , "0"
    .局部变量 变量_4A040125, 整数型

    变量_49040125 ＝ 分割文本 (被搜寻的文本, 文本_取指定变量文本行 (被搜寻的文本, 行数), )
    变量_4A040125 ＝ 取数组成员数 (变量_49040125) － 1
    .如果 (变量_4A040125 ＜ 0)
        清除数组 (变量_49040125)
        返回 (-1)
    .否则
        清除数组 (变量_49040125)
        返回 (变量_4A040125)
    .如果结束
    

.子程序 文本_取文本行起始位置, , 公开, 返回某行在整个文本中出现的位置数组，数组第一个成员是第一次出现的位置。
    .参数 文本, 文本型
    .参数 行数, 整数型
    .参数 起始位置, 整数型, 参考 数组
    .局部变量 变量_4E040125, 整数型
    .局部变量 变量_4F040125, 整数型
    .局部变量 变量_50040125, 文本型
    .局部变量 变量_51040125, 整数型
    .局部变量 变量_52040125, 整数型

    变量_50040125 ＝ 文本_取指定变量文本行 (文本, 行数)
    变量_51040125 ＝ 取文本长度 (变量_50040125)
    .计次循环首 (文本_取文本行出现次数 (文本, 行数), 变量_52040125)
        .如果 (变量_52040125 ＝ 1)
            变量_4E040125 ＝ 寻找文本 (文本, 变量_50040125, , 真)
            变量_4F040125 ＝ 变量_4E040125 ＋ 变量_51040125 ＋ 1
            加入成员 (起始位置, 变量_4E040125)
        .否则
            变量_4F040125 ＝ 寻找文本 (文本, 变量_50040125, 变量_4F040125, 真)
            加入成员 (起始位置, 变量_4F040125)
            变量_4F040125 ＝ 变量_4F040125 ＋ 变量_51040125
        .如果结束
        
    .计次循环尾 ()

.子程序 文本_寻找出文本并删除, 文本型, 公开, 比如：欲寻找的全文本为<12345789>,现在要删除2到5之间的全部字符，包括2跟5,成功返回删除后的结果文本，失败返回原文本！
    .参数 欲寻找的全文本, 文本型, , 比如：欲寻找的全文本为 12345789
    .参数 前面文本, 文本型, , 前面为“2”
    .参数 后面文本, 文本型, , 后面为“5”
    .参数 是否保留前后文本, 逻辑型, 可空, 默认不保留
    .局部变量 变量_18F10225, 文本型
    .局部变量 变量_19F10225, 整数型
    .局部变量 变量_1AF10225, 整数型
    .局部变量 变量_1BF10225, 整数型, , "0"
    .局部变量 变量_1CF10225, 整数型
    .局部变量 变量_1DF10225, 整数型
    .局部变量 变量_1EF10225, 整数型
    .局部变量 变量_1FF10225, 整数型

    变量_18F10225 ＝ 欲寻找的全文本
    文本_取文本起始位置 (变量_18F10225, 前面文本, 变量_1BF10225)
    变量_1CF10225 ＝ 取数组成员数 (变量_1BF10225)
    .如果真 (变量_1CF10225 ＞ 0)
        变量_19F10225 ＝ 取文本长度 (前面文本)
        变量_1AF10225 ＝ 取文本长度 (后面文本)
        .如果真 (变量_19F10225 ＝ 0 或 变量_1AF10225 ＝ 0)
            输出调试文本 (“前后文本必须传递正确的内容！”)
            返回 (变量_18F10225)
        .如果真结束
        .变量循环首 (变量_1CF10225, 1, -1, 变量_1FF10225)
            变量_1DF10225 ＝ 变量_1BF10225 [变量_1FF10225]
            变量_1EF10225 ＝ 寻找文本 (变量_18F10225, 后面文本, 变量_1DF10225 ＋ 变量_19F10225, 假)
            .如果真 (变量_1EF10225 ≠ -1)
                .如果 (是否保留前后文本)
                    变量_1DF10225 ＝ 变量_1DF10225 ＋ 变量_19F10225
                .否则
                    变量_1EF10225 ＝ 变量_1EF10225 ＋ 变量_1AF10225
                .如果结束
                变量_18F10225 ＝ 文本替换 (变量_18F10225, 变量_1DF10225, 变量_1EF10225 － 变量_1DF10225, )
            .如果真结束
            
        .变量循环尾 ()
    .如果真结束
    返回 (变量_18F10225)

.子程序 文本_插入文本到某字前, 文本型, 公开, 插入文本到某字前，返回插入后的文本。
    .参数 原文本, 文本型
    .参数 某字, 文本型
    .参数 被插在某字前的文本, 文本型
    .参数 插入次数, 整数型, 可空, 如果省略，默认进行所有可能的插入

    .如果真 (是否为空 (插入次数))
        返回 (子文本替换 (原文本, 某字, 被插在某字前的文本 ＋ 某字, , , 假))
    .如果真结束
    返回 (子文本替换 (原文本, 某字, 被插在某字前的文本 ＋ 某字, , 插入次数, 假))

.子程序 文本_插入文本到某字后, 文本型, 公开, 插入文本到某字后，返回插入后的文本。
    .参数 原文本, 文本型
    .参数 某字, 文本型
    .参数 被插在某字后的文本, 文本型
    .参数 插入次数, 整数型, 可空, 如果省略，默认进行所有可能的插入

    .如果真 (是否为空 (插入次数))
        返回 (子文本替换 (原文本, 某字, 某字 ＋ 被插在某字后的文本, , , 假))
    .如果真结束
    返回 (子文本替换 (原文本, 某字, 某字 ＋ 被插在某字后的文本, , 插入次数, 假))

.子程序 文本_取出N组不重复数字, , 公开, 取出N组不重复数字,如：在1-100之间取出80个数字，要求不重复。
    .参数 返回取出的数组, 整数型, 数组, 存放取出来的数组
    .参数 欲取多少组, 整数型, , 要取多少组
    .参数 最小值, 整数型, , 要取的最小数值
    .参数 最大值, 整数型, , 要取的最大数值
    .局部变量 变量_A4FC0225, 整数型
    .局部变量 变量_A8FC0225, 整数型, , "0"
    .局部变量 变量_B1FC0225, 整数型
    .局部变量 变量_ACFC0225, 整数型
    .局部变量 变量_ADFC0225, 整数型

    变量_A4FC0225 ＝ 最大值 － 最小值 ＋ 1
    .如果真 (变量_A4FC0225 ≤ 0 或 欲取多少组 ≤ 0)
        返回 ()
    .如果真结束
    
    重定义数组 (变量_A8FC0225, 假, 变量_A4FC0225)
    .计次循环首 (变量_A4FC0225, 变量_ACFC0225)
        变量_A8FC0225 [变量_ACFC0225] ＝ 最小值
        最小值 ＝ 最小值 ＋ 1
    .计次循环尾 ()
    
    置随机数种子 ()
    重定义数组 (返回取出的数组, 假, 欲取多少组)
    变量_B1FC0225 ＝ 取数据_通用型_数组 (变量_A8FC0225)
    .计次循环首 (欲取多少组, 变量_ACFC0225)
        变量_ADFC0225 ＝ 取随机数 (变量_ACFC0225, 变量_A4FC0225)
        返回取出的数组 [变量_ACFC0225] ＝ 变量_A8FC0225 [变量_ADFC0225]
        __set (变量_B1FC0225, (变量_ADFC0225 － 1) × 4, 变量_A8FC0225 [变量_ACFC0225])
        __set (变量_B1FC0225, (变量_ACFC0225 － 1) × 4, 变量_A8FC0225 [变量_ADFC0225])
    .计次循环尾 ()

.子程序 文本_取GB2312简体汉字笔画数, 整数型, 公开
    .参数 汉字, 文本型
    .局部变量 变量_E0050125, 字节型
    .局部变量 变量_E1050125, 字节型
    .局部变量 变量_E2050125, 整数型

    全局变量_DF050105 ＝ { 10, 7, 10, 10, 8, 10, 9, 11, 17, 14, 13, 5, 13, 10, 12, 15, 10, 6, 10, 9, 13, 8, 10, 10, 8, 8, 10, 5, 10, 14, 16, 9, 12, 12, 15, 15, 7, 10, 5, 5, 7, 10, 2, 9, 4, 8, 12, 13, 7, 10, 7, 21, 10, 8, 5, 9, 6, 13, 8, 8, 9, 13, 12, 10, 13, 7, 10, 10, 8, 8, 7, 8, 7, 19, 5, 4, 8, 5, 9, 10, 14, 14, 9, 12, 15, 10, 15, 12, 12, 8, 9, 5, 15, 10, 16, 13, 9, 12, 8, 8, 8, 7, 15, 10, 13, 19, 8, 13, 12, 8, 5, 12, 9, 4, 9, 10, 7, 8, 12, 12, 10, 8, 8, 5, 11, 11, 11, 9, 9, 18, 9, 12, 14, 4, 13, 10, 8, 14, 13, 14, 6, 10, 9, 4, 7, 13, 6, 11, 14, 5, 13, 16, 17, 16, 9, 18, 5, 12, 8, 9, 9, 8, 4, 16, 16, 17, 12, 9, 11, 15, 8, 19, 16, 7, 15, 11, 12, 16, 13, 10, 13, 7, 6, 9, 5, 8, 9, 9, 10, 6, 8, 11, 15, 8, 10, 8, 12, 9, 13, 10, 14, 7, 8, 11, 11, 14, 12, 8, 7, 10, 2, 10, 7, 11, 4, 5, 7, 19, 10, 8, 17, 11, 12, 7, 3, 7, 12, 15, 8, 11, 11, 14, 16, 8, 10, 9, 11, 11, 7, 7, 10, 4, 7, 17, 16, 16, 15, 11, 9, 8, 12, 8, 5, 9, 7, 19, 12, 3, 9, 9, 9, 14, 12, 14, 7, 9, 8, 8, 10, 10, 12, 11, 14, 12, 11, 13, 11, 6, 11, 19, 8, 11, 6, 9, 11, 4, 11, 7, 2, 12, 8, 11, 10, 12, 7, 9, 12, 15, 15, 11, 7, 8, 4, 7, 15, 12, 7, 15, 10, 6, 7, 6, 11, 7, 7, 7, 12, 8, 15, 10, 9, 16, 6, 7, 10, 12, 12, 15, 8, 8, 10, 10, 10, 6, 13, 9, 11, 6, 7, 6, 6, 10, 8, 8, 4, 7, 10, 5, 9, 6, 6, 6, 11, 8, 8, 13, 12, 14, 13, 13, 13, 4, 11, 14, 4, 10, 7, 5, 16, 12, 18, 12, 13, 12, 9, 13, 10, 12, 24, 13, 13, 5, 12, 3, 9, 13, 7, 11, 12, 7, 9, 12, 15, 7, 6, 6, 7, 8, 11, 13, 8, 9, 13, 15, 10, 11, 7, 21, 18, 11, 11, 9, 14, 14, 13, 13, 10, 7, 6, 8, 12, 6, 15, 12, 7, 5, 4, 5, 11, 11, 15, 17, 9, 19, 16, 12, 14, 11, 13, 10, 13, 14, 11, 14, 7, 6, 3, 14, 15, 12, 11, 10, 13, 12, 6, 12, 14, 5, 3, 7, 4, 12, 17, 9, 9, 5, 9, 11, 9, 11, 9, 10, 8, 4, 8, 10, 11, 9, 5, 12, 7, 11, 11, 8, 11, 11, 6, 9, 10, 9, 10, 2, 10, 17, 10, 7, 11, 6, 8, 15, 11, 12, 11, 15, 11, 8, 19, 6, 12, 12, 17, 14, 4, 12, 7, 14, 8, 10, 11, 7, 10, 14, 14, 8, 8, 6, 12, 11, 9, 7, 10, 12, 16, 11, 13, 13, 9, 8, 16, 9, 5, 7, 7, 8, 11, 12, 11, 13, 13, 5, 16, 10, 2, 11, 6, 8, 10, 12, 10, 14, 15, 8, 11, 13, 2, 7, 5, 7, 8, 12, 13, 8, 4, 6, 5, 5, 12, 15, 6, 9, 8, 9, 7, 9, 11, 7, 4, 9, 7, 10, 12, 10, 13, 9, 12, 9, 10, 11, 13, 12, 7, 14, 7, 9, 12, 7, 14, 12, 14, 9, 11, 12, 11, 7, 4, 5, 15, 7, 19, 12, 10, 7, 9, 9, 12, 11, 9, 6, 6, 9, 13, 6, 13, 11, 8, 12, 11, 13, 10, 12, 9, 15, 6, 10, 10, 4, 7, 12, 11, 10, 10, 6, 2, 6, 5, 9, 9, 2, 9, 5, 9, 12, 6, 4, 9, 8, 9, 18, 6, 12, 18, 15, 8, 8, 17, 3, 10, 4, 7, 8, 8, 5, 7, 7, 7, 7, 4, 8, 8, 6, 7, 6, 6, 7, 8, 11, 8, 11, 3, 8, 10, 10, 7, 8, 8, 8, 9, 7, 11, 7, 8, 4, 7, 7, 12, 7, 10, 8, 6, 8, 12, 12, 4, 9, 8, 13, 10, 12, 4, 9, 11, 10, 5, 13, 6, 8, 4, 7, 7, 4, 15, 8, 14, 7, 8, 13, 12, 9, 11, 6, 9, 8, 10, 11, 13, 11, 5, 7, 7, 11, 10, 10, 8, 11, 12, 8, 14, 9, 11, 18, 12, 9, 12, 5, 8, 4, 13, 6, 12, 4, 7, 6, 13, 8, 15, 14, 8, 7, 13, 9, 11, 12, 3, 5, 7, 9, 9, 7, 10, 13, 8, 11, 21, 4, 6, 9, 9, 7, 7, 7, 12, 7, 16, 10, 10, 14, 10, 16, 13, 15, 15, 7, 10, 14, 12, 4, 11, 10, 8, 12, 9, 12, 10, 12, 9, 12, 11, 3, 6, 9, 10, 13, 10, 7, 8, 19, 10, 10, 11, 3, 7, 5, 10, 11, 8, 10, 4, 9, 3, 6, 7, 9, 7, 6, 9, 4, 7, 8, 8, 9, 8, 8, 11, 12, 11, 8, 14, 7, 8, 8, 8, 13, 5, 11, 9, 7, 8, 9, 10, 8, 12, 8, 5, 9, 14, 9, 13, 8, 8, 8, 12, 6, 8, 9, 6, 14, 11, 23, 12, 20, 8, 6, 3, 10, 13, 8, 6, 11, 5, 7, 9, 6, 9, 8, 9, 10, 8, 13, 9, 8, 12, 13, 12, 12, 10, 8, 8, 14, 6, 9, 15, 9, 10, 10, 6, 10, 9, 12, 14, 7, 12, 7, 11, 12, 8, 12, 7, 16, 16, 10, 7, 16, 10, 11, 6, 5, 5, 8, 10, 17, 17, 14, 11, 9, 6, 10, 5, 10, 8, 12, 10, 11, 10, 5, 8, 7, 6, 11, 13, 9, 8, 11, 14, 14, 15, 9, 15, 12, 11, 9, 9, 9, 10, 7, 15, 16, 9, 8, 9, 10, 9, 11, 9, 7, 5, 6, 12, 9, 12, 7, 9, 10, 6, 8, 5, 8, 13, 10, 12, 9, 15, 8, 15, 12, 8, 8, 11, 7, 4, 7, 4, 7, 9, 6, 12, 12, 8, 6, 4, 8, 13, 9, 7, 11, 7, 6, 8, 10, 7, 12, 10, 11, 10, 12, 13, 11, 10, 9, 4, 9, 12, 11, 16, 15, 17, 9, 11, 12, 13, 10, 13, 9, 11, 6, 9, 12, 17, 9, 12, 6, 13, 10, 15, 5, 12, 11, 10, 11, 6, 10, 5, 6, 9, 9, 9, 8, 11, 13, 9, 11, 17, 9, 6, 4, 10, 8, 12, 16, 8, 11, 5, 6, 11, 6, 13, 15, 10, 14, 6, 5, 9, 16, 4, 7, 10, 11, 12, 6, 7, 12, 13, 20, 12, 3, 9, 10, 6, 7, 13, 6, 9, 2, 10, 3, 13, 7, 16, 8, 6, 11, 8, 11, 9, 11, 11, 4, 5, 9, 7, 7, 7, 10, 6, 14, 9, 6, 8, 10, 5, 9, 12, 10, 5, 10, 11, 15, 6, 9, 8, 13, 7, 10, 7, 6, 11, 7, 13, 10, 8, 8, 6, 12, 9, 11, 9, 14, 12, 8, 10, 13, 9, 11, 11, 9, 14, 13, 12, 9, 4, 13, 15, 6, 10, 10, 9, 8, 11, 12, 10, 8, 15, 9, 9, 10, 6, 19, 12, 10, 9, 6, 6, 13, 8, 15, 12, 17, 12, 10, 6, 8, 9, 9, 9, 20, 12, 11, 11, 8, 11, 9, 7, 9, 16, 9, 13, 11, 14, 10, 10, 5, 12, 12, 11, 9, 11, 12, 6, 14, 7, 5, 10, 8, 11, 13, 14, 9, 9, 13, 8, 7, 17, 7, 9, 10, 4, 9, 9, 8, 3, 12, 4, 8, 4, 9, 18, 10, 13, 4, 13, 7, 13, 10, 13, 7, 10, 10, 6, 7, 9, 14, 8, 13, 12, 16, 8, 11, 14, 13, 8, 4, 19, 12, 11, 14, 14, 12, 16, 8, 10, 13, 11, 10, 8, 9, 12, 12, 7, 5, 7, 9, 3, 7, 2, 10, 11, 11, 5, 6, 13, 8, 12, 8, 17, 8, 8, 10, 8, 8, 11, 7, 8, 9, 9, 8, 14, 7, 11, 4, 8, 11, 15, 13, 10, 5, 11, 8, 10, 10, 12, 10, 10, 11, 8, 10, 15, 23, 7, 11, 10, 17, 9, 6, 6, 9, 7, 11, 9, 6, 7, 10, 9, 12, 10, 9, 10, 12, 8, 5, 9, 4, 12, 13, 8, 12, 5, 12, 11, 7, 9, 9, 11, 14, 17, 6, 7, 4, 8, 6, 9, 10, 15, 8, 8, 9, 12, 15, 14, 9, 7, 9, 5, 12, 7, 8, 9, 10, 8, 11, 9, 10, 7, 7, 8, 10, 4, 11, 7, 3, 6, 11, 9, 10, 13, 8, 14, 7, 12, 6, 9, 9, 13, 10, 7, 13, 8, 7, 10, 12, 6, 12, 7, 10, 8, 11, 7, 7, 3, 11, 8, 13, 12, 9, 13, 11, 12, 12, 12, 8, 8, 10, 7, 9, 6, 13, 12, 8, 8, 12, 14, 12, 14, 11, 10, 7, 13, 13, 11, 9, 8, 16, 12, 5, 15, 14, 12, 9, 16, 12, 9, 13, 11, 12, 10, 11, 8, 10, 10, 10, 7, 7, 6, 8, 9, 13, 10, 10, 11, 5, 13, 18, 16, 15, 11, 17, 9, 16, 6, 9, 8, 12, 13, 7, 9, 11, 11, 15, 16, 10, 10, 13, 11, 7, 7, 15, 5, 10, 9, 6, 10, 7, 5, 7, 10, 4, 7, 12, 8, 9, 12, 5, 11, 7, 8, 2, 14, 10, 9, 12, 10, 7, 18, 13, 8, 10, 8, 11, 11, 12, 10, 9, 8, 13, 10, 11, 13, 7, 7, 11, 12, 12, 9, 10, 15, 11, 14, 7, 16, 14, 5, 15, 2, 14, 17, 14, 10, 6, 12, 10, 6, 11, 12, 8, 17, 16, 9, 7, 20, 11, 15, 10, 7, 8, 9, 11, 13, 13, 10, 7, 11, 10, 7, 10, 8, 11, 5, 5, 13, 11, 14, 12, 13, 10, 6, 15, 10, 9, 4, 5, 11, 8, 11, 16, 11, 8, 8, 7, 13, 9, 12, 15, 14, 8, 7, 5, 11, 7, 8, 11, 7, 8, 12, 19, 13, 21, 13, 10, 11, 16, 12, 8, 7, 15, 7, 6, 11, 8, 10, 15, 12, 12, 10, 12, 9, 11, 13, 11, 9, 10, 9, 13, 7, 7, 11, 11, 7, 8, 6, 4, 7, 7, 6, 11, 17, 8, 11, 13, 14, 14, 13, 12, 9, 9, 9, 6, 11, 7, 8, 9, 3, 9, 14, 6, 10, 6, 7, 8, 6, 9, 15, 14, 12, 13, 14, 11, 14, 14, 13, 6, 9, 8, 8, 6, 10, 11, 8, 13, 4, 5, 10, 5, 8, 9, 12, 14, 9, 3, 8, 8, 11, 14, 15, 13, 7, 9, 12, 14, 7, 9, 9, 12, 8, 12, 3, 7, 5, 11, 13, 17, 13, 13, 11, 11, 8, 11, 15, 19, 17, 9, 11, 8, 6, 10, 8, 8, 14, 11, 12, 12, 10, 11, 11, 7, 9, 10, 12, 9, 8, 11, 13, 17, 9, 12, 8, 7, 14, 5, 5, 8, 5, 11, 10, 9, 8, 16, 8, 11, 6, 8, 13, 13, 14, 19, 14, 14, 16, 15, 20, 8, 5, 10, 15, 16, 8, 13, 13, 8, 11, 6, 9, 8, 7, 7, 8, 5, 13, 14, 13, 12, 14, 4, 5, 13, 8, 16, 10, 9, 7, 9, 6, 9, 7, 6, 2, 5, 9, 8, 9, 7, 10, 22, 9, 10, 9, 8, 11, 8, 10, 4, 14, 10, 8, 16, 10, 8, 5, 7, 7, 10, 13, 9, 13, 14, 8, 6, 15, 15, 11, 8, 10, 14, 5, 7, 10, 10, 19, 11, 15, 15, 10, 11, 9, 8, 16, 5, 8, 8, 4, 7, 9, 7, 10, 9, 6, 7, 5, 7, 9, 3, 13, 9, 8, 9, 17, 20, 10, 10, 8, 9, 8, 18, 7, 11, 7, 11, 9, 8, 8, 8, 12, 8, 11, 12, 11, 12, 9, 19, 15, 11, 15, 9, 10, 7, 9, 6, 8, 10, 16, 9, 7, 8, 7, 9, 10, 12, 8, 8, 9, 11, 14, 12, 10, 10, 8, 7, 12, 9, 10, 8, 11, 15, 12, 13, 12, 13, 16, 16, 8, 13, 11, 13, 8, 9, 21, 7, 8, 15, 12, 9, 11, 12, 10, 5, 4, 12, 15, 7, 20, 15, 11, 4, 12, 15, 14, 16, 11, 14, 16, 9, 13, 8, 9, 13, 6, 8, 8, 11, 5, 8, 10, 7, 9, 8, 8, 11, 11, 10, 14, 8, 11, 10, 5, 12, 4, 10, 12, 11, 13, 10, 6, 10, 12, 10, 14, 19, 18, 12, 12, 10, 11, 8, 2, 10, 14, 9, 7, 8, 12, 8, 8, 11, 11, 10, 6, 14, 8, 6, 11, 10, 6, 3, 6, 7, 9, 9, 16, 4, 6, 7, 7, 8, 5, 11, 9, 9, 9, 6, 8, 10, 3, 6, 13, 5, 12, 11, 16, 10, 10, 9, 15, 13, 8, 15, 11, 12, 4, 14, 8, 7, 12, 7, 14, 14, 12, 7, 16, 14, 14, 10, 10, 17, 6, 8, 5, 16, 15, 12, 10, 9, 10, 4, 8, 5, 8, 9, 9, 9, 9, 10, 12, 13, 7, 15, 12, 13, 7, 8, 9, 9, 10, 10, 11, 16, 12, 12, 11, 8, 10, 6, 12, 7, 9, 5, 7, 11, 7, 5, 9, 8, 12, 4, 11, 6, 11, 8, 7, 11, 8, 11, 17, 15, 5, 11, 23, 6, 16, 10, 6, 11, 10, 4, 8, 4, 10, 8, 16, 7, 13, 14, 12, 11, 12, 13, 12, 16, 5, 9, 22, 20, 20, 20, 5, 9, 7, 9, 12, 10, 4, 4, 2, 7, 7, 6, 4, 3, 7, 6, 5, 4, 4, 6, 9, 13, 9, 16, 14, 13, 10, 9, 4, 12, 9, 6, 9, 20, 16, 17, 6, 10, 8, 6, 2, 15, 8, 6, 15, 13, 12, 7, 10, 8, 10, 15, 9, 11, 13, 17, 13, 14, 3, 8, 6, 12, 10, 13, 8, 12, 12, 6, 12, 13, 6, 10, 12, 14, 10, 9, 6, 8, 7, 7, 13, 11, 13, 12, 10, 9, 8, 7, 3, 7, 14, 8, 5, 8, 16, 17, 16, 12, 6, 10, 15, 14, 6, 11, 12, 10, 3, 8, 14, 11, 10, 12, 10, 6, 3, 14, 4, 10, 7, 8, 11, 11, 11, 6, 8, 11, 13, 10, 13, 10, 7, 6, 10, 5, 8, 7, 7, 11, 10, 8, 9, 7, 8, 11, 9, 8, 13, 11, 7, 5, 12, 9, 4, 11, 9, 11, 12, 9, 5, 6, 5, 9, 9, 12, 8, 3, 8, 2, 5, 9, 7, 4, 9, 9, 8, 7, 5, 5, 8, 9, 8, 8, 6, 5, 3, 5, 9, 8, 9, 14, 10, 8, 9, 13, 16, 9, 5, 8, 12, 8, 4, 5, 9, 9, 8, 8, 6, 4, 9, 6, 7, 11, 11, 8, 14, 11, 15, 8, 11, 10, 7, 13, 8, 12, 11, 12, 4, 12, 11, 15, 16, 12, 17, 13, 13, 12, 13, 12, 5, 8, 9, 7, 6, 9, 14, 11, 13, 14, 10, 8, 9, 14, 10, 5, 5, 10, 9, 17, 4, 11, 10, 4, 13, 12, 7, 17, 9, 12, 9, 11, 10, 9, 12, 15, 15, 9, 7, 5, 5, 6, 13, 6, 13, 5, 7, 6, 8, 3, 8, 10, 8, 10, 9, 7, 6, 9, 12, 15, 16, 14, 7, 12, 9, 10, 10, 12, 14, 13, 13, 11, 7, 8, 14, 13, 14, 9, 11, 11, 10, 21, 13, 6, 17, 12, 14, 10, 6, 10, 10, 13, 11, 10, 14, 11, 10, 12, 8, 13, 5, 5, 6, 12, 16, 9, 17, 15, 9, 8, 8, 5, 10, 11, 4, 8, 7, 7, 13, 8, 15, 13, 7, 17, 13, 15, 14, 10, 8, 12, 10, 14, 11, 5, 9, 6, 13, 13, 11, 12, 15, 10, 16, 10, 15, 11, 15, 10, 11, 10, 13, 10, 11, 10, 9, 11, 10, 5, 10, 10, 18, 13, 10, 13, 11, 10, 15, 12, 12, 15, 16, 12, 7, 12, 17, 11, 10, 9, 8, 4, 11, 13, 5, 11, 9, 14, 12, 9, 7, 8, 11, 13, 9, 10, 8, 4, 7, 9, 5, 6, 11, 9, 9, 9, 12, 10, 10, 13, 17, 6, 11, 7, 12, 11, 10, 12, 9, 12, 11, 7, 5, 10, 5, 7, 9, 8, 10, 10, 10, 11, 3, 6, 8, 12, 6, 11, 13, 13, 13, 14, 9, 7, 4, 17, 8, 6, 11, 10, 7, 6, 8, 12, 7, 8, 12, 9, 9, 12, 9, 9, 4, 10, 9, 5, 15, 9, 12, 8, 10, 3, 11, 7, 13, 10, 11, 12, 11, 8, 11, 3, 12, 7, 4, 3, 8, 6, 8, 8, 11, 7, 6, 9, 20, 13, 6, 4, 7, 10, 7, 11, 11, 4, 14, 11, 7, 11, 8, 6, 6, 7, 7, 5, 14, 8, 9, 9, 12, 17, 7, 12, 11, 11, 15, 3, 14, 12, 10, 4, 9, 7, 7, 14, 10, 6, 13, 10, 8, 9, 13, 10, 12, 7, 14, 8, 12, 7, 7, 7, 9, 4, 6, 9, 9, 4, 7, 11, 7, 7, 4, 8, 4, 10, 4, 14, 6, 9, 7, 5, 13, 11, 8, 4, 5, 10, 9, 8, 14, 8, 6, 11, 8, 12, 15, 6, 13, 10, 12, 10, 7, 11, 15, 3, 11, 14, 11, 13, 6, 12, 17, 11, 10, 3, 13, 12, 11, 9, 7, 12, 6, 8, 15, 9, 7, 17, 14, 13, 9, 8, 9, 3, 12, 10, 6, 11, 13, 6, 5, 14, 6, 9, 8, 11, 11, 7, 9, 8, 13, 9, 9, 8, 13, 7, 13, 11, 12, 9, 10, 8, 8, 9, 11, 22, 9, 15, 17, 12, 3, 12, 10, 8, 13, 9, 8, 9, 9, 15, 13, 6, 11, 11, 12, 15, 9, 10, 18, 12, 10, 10, 11, 10, 3, 7, 10, 7, 11, 10, 10, 13, 8, 13, 15, 15, 6, 9, 13, 6, 11, 8, 11, 5, 11, 9, 19, 16, 8, 8, 12, 10, 16, 7, 12, 8, 7, 13, 7, 4, 9, 11, 9, 13, 12, 12, 6, 6, 9, 7, 6, 6, 16, 8, 7, 8, 8, 5, 4, 10, 6, 7, 12, 14, 6, 9, 10, 6, 13, 12, 7, 10, 10, 14, 6, 14, 11, 14, 9, 10, 6, 13, 11, 9, 6, 7, 10, 9, 12, 12, 11, 11, 7, 12, 9, 11, 11, 5, 9, 19, 10, 9, 13, 16, 8, 5, 11, 6, 9, 14, 12, 6, 8, 6, 6, 6, 10, 6, 5, 5, 9, 6, 6, 8, 9, 10, 7, 3, 7, 4, 10, 11, 13, 11, 12, 9, 6, 6, 11, 9, 11, 10, 11, 10, 7, 9, 12, 8, 7, 7, 15, 11, 8, 8, 8, 11, 11, 9, 14, 10, 12, 16, 6, 9, 12, 10, 9, 12, 10, 11, 10, 9, 5, 10, 10, 7, 6, 8, 8, 6, 9, 6, 10, 6, 11, 9, 10, 14, 16, 13, 7, 14, 13, 6, 13, 11, 12, 9, 9, 10, 9, 9, 20, 12, 15, 8, 6, 11, 7, 3, 6, 11, 5, 5, 6, 12, 8, 11, 1, 12, 7, 12, 11, 8, 6, 6, 13, 6, 12, 11, 5, 10, 14, 7, 8, 9, 18, 12, 9, 10, 3, 1, 7, 4, 4, 7, 8, 7, 6, 3, 7, 17, 11, 13, 9, 6, 13, 13, 15, 4, 3, 10, 13, 8, 5, 10, 7, 6, 17, 11, 8, 9, 9, 6, 10, 9, 6, 8, 7, 11, 11, 11, 7, 4, 4, 11, 5, 8, 15, 11, 18, 7, 14, 10, 11, 11, 9, 14, 7, 17, 9, 15, 13, 12, 9, 9, 8, 7, 17, 10, 11, 13, 14, 13, 8, 8, 10, 5, 11, 9, 5, 9, 6, 11, 7, 4, 5, 7, 10, 7, 8, 12, 7, 6, 4, 5, 7, 12, 9, 2, 5, 6, 11, 3, 8, 13, 13, 13, 14, 7, 9, 12, 8, 12, 12, 11, 11, 4, 10, 8, 3, 6, 9, 6, 9, 6, 5, 11, 6, 8, 6, 12, 12, 10, 12, 13, 11, 9, 8, 13, 10, 12, 12, 10, 15, 5, 10, 11, 10, 4, 9, 10, 10, 12, 14, 7, 7, 10, 13, 13, 12, 7, 8, 14, 9, 9, 4, 6, 12, 11, 9, 8, 12, 4, 10, 10, 10, 4, 9, 4, 9, 4, 7, 15, 11, 10, 13, 5, 5, 10, 6, 10, 9, 7, 10, 10, 6, 6, 9, 19, 12, 16, 10, 10, 12, 14, 17, 12, 19, 8, 6, 16, 9, 20, 16, 10, 7, 7, 17, 8, 8, 6, 8, 10, 9, 15, 15, 12, 16, 4, 12, 12, 5, 5, 11, 8, 9, 9, 14, 8, 5, 9, 7, 14, 10, 6, 10, 10, 14, 18, 9, 13, 11, 8, 10, 8, 14, 11, 10, 22, 9, 5, 9, 10, 12, 11, 15, 11, 14, 14, 7, 12, 10, 7, 3, 7, 8, 5, 8, 16, 13, 8, 9, 7, 8, 9, 13, 13, 6, 14, 5, 14, 7, 10, 12, 16, 8, 13, 14, 7, 10, 9, 13, 10, 13, 10, 16, 6, 7, 8, 8, 10, 7, 15, 10, 15, 6, 13, 9, 11, 8, 9, 6, 8, 16, 9, 5, 9, 9, 10, 8, 7, 6, 8, 4, 7, 14, 8, 8, 10, 5, 3, 8, 11, 8, 12, 12, 6, 10, 8, 7, 9, 4, 11, 5, 6, 7, 7, 10, 11, 6, 10, 13, 8, 9, 8, 12, 10, 13, 8, 8, 11, 12, 8, 11, 4, 9, 8, 9, 10, 8, 9, 8, 9, 6, 6, 6, 8, 6, 9, 7, 12, 9, 7, 8, 8, 10, 8, 9, 17, 10, 10, 12, 6, 11, 10, 8, 10, 6, 10, 12, 8, 17, 15, 5, 11, 9, 7, 11, 8, 12, 12, 7, 8, 9, 8, 7, 4, 9, 4, 9, 8, 15, 14, 15, 10, 6, 12, 6, 15, 6, 7, 12, 13, 9, 14, 7, 11, 10, 10, 10, 8, 8, 10, 12, 8, 10, 11, 11, 7, 9, 9, 9, 10, 9, 12, 11, 7, 12, 5, 9, 13, 3, 6, 11, 6, 18, 12, 15, 8, 11, 9, 7, 7, 7, 9, 12, 10, 7, 8, 11, 9, 7, 7, 8, 10, 20, 16, 15, 12, 13, 12, 15, 9, 5, 7, 9, 11, 7, 7, 10, 0, 0, 0, 0, 0, 3, 3, 3, 4, 4, 4, 5, 6, 6, 10, 10, 16, 1, 8, 1, 2, 3, 4, 4, 5, 5, 6, 9, 11, 14, 14, 19, 1, 8, 14, 2, 6, 4, 7, 7, 11, 14, 4, 6, 10, 11, 12, 14, 15, 16, 2, 5, 8, 11, 11, 15, 8, 7, 2, 4, 6, 7, 8, 8, 8, 9, 10, 10, 10, 13, 13, 14, 14, 15, 16, 2, 8, 2, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 14, 14, 14, 14, 14, 14, 15, 15, 5, 6, 7, 7, 9, 17, 6, 8, 4, 12, 16, 17, 18, 21, 2, 9, 9, 11, 6, 6, 7, 2, 8, 10, 10, 11, 12, 12, 12, 13, 16, 19, 19, 2, 6, 8, 8, 10, 2, 10, 10, 2, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 19, 2, 8, 2, 5, 5, 6, 6, 7, 7, 7, 7, 8, 9, 9, 10, 10, 10, 11, 11, 11, 16, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 16, 19, 17, 5, 7, 5, 7, 7, 8, 10, 10, 11, 15, 9, 17, 20, 2, 2, 6, 10, 2, 5, 10, 12, 7, 9, 9, 14, 16, 16, 17, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 20, 21, 22, 3, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 19, 19, 19, 20, 20, 22, 3, 9, 6, 7, 9, 9, 10, 10, 11, 3, 5, 5, 12, 3, 6, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 17, 17, 19, 23, 25, 3, 7, 8, 12, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 19, 25, 3, 6, 6, 7, 7, 8, 9, 10, 11, 11, 16, 7, 8, 8, 8, 10, 11, 11, 11, 12, 14, 14, 15, 15, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 15, 15, 17, 17, 19, 3, 7, 8, 9, 9, 9, 10, 11, 11, 12, 13, 15, 16, 24, 3, 3, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 14, 14, 15, 15, 16, 17, 20, 6, 14, 12, 14, 3, 3, 6, 7, 7, 7, 7, 7, 8, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 25, 5, 7, 7, 8, 9, 9, 11, 11, 11, 11, 12, 13, 14, 15, 16, 16, 17, 3, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 14, 15, 15, 15, 16, 16, 18, 8, 17, 4, 6, 7, 7, 7, 7, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 3, 4, 8, 3, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 19, 19, 19, 20, 20, 21, 24, 3, 5, 8, 8, 9, 10, 12, 13, 14, 14, 15, 16, 16, 17, 17, 3, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 15, 15, 16, 16, 17, 17, 18, 3, 11, 9, 12, 5, 9, 10, 10, 12, 14, 15, 21, 8, 8, 9, 11, 12, 22, 3, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 16, 16, 17, 17, 20, 5, 9, 7, 8, 12, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 19, 20, 3, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 19, 3, 15, 3, 8, 10, 6, 6, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 17, 17, 17, 18, 20, 20, 13, 13, 14, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 13, 14, 8, 9, 9, 9, 11, 11, 11, 12, 12, 14, 16, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 11, 12, 12, 12, 12, 13, 15, 16, 10, 5, 8, 11, 12, 12, 13, 13, 13, 14, 14, 8, 9, 12, 16, 16, 17, 4, 6, 6, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 12, 13, 13, 14, 14, 16, 18, 18, 20, 21, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 14, 9, 10, 11, 12, 13, 14, 15, 15, 9, 13, 6, 8, 9, 11, 11, 12, 12, 12, 13, 14, 10, 11, 12, 14, 17, 10, 10, 12, 12, 12, 13, 15, 16, 16, 22, 5, 6, 7, 7, 9, 10, 10, 11, 13, 4, 11, 13, 12, 13, 15, 9, 15, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 16, 17, 17, 17, 17, 17, 16, 7, 11, 12, 13, 13, 16, 9, 9, 12, 13, 16, 16, 4, 13, 13, 17, 12, 15, 16, 8, 10, 10, 10, 11, 11, 13, 14, 7, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 15, 15, 15, 15, 16, 16, 16, 18, 21, 30, 4, 11, 13, 16, 8, 8, 9, 11, 12, 4, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 12, 12, 13, 14, 16, 21, 7, 7, 9, 10, 10, 10, 10, 10, 10, 11, 13, 13, 14, 16, 16, 17, 17, 24, 4, 6, 8, 9, 12, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 18, 19, 18, 21, 11, 12, 17, 19, 8, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 7, 8, 9, 9, 9, 10, 12, 13, 17, 9, 10, 10, 12, 13, 14, 14, 16, 17, 17, 10, 16, 23, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 20, 14, 9, 12, 13, 9, 9, 10, 10, 11, 12, 12, 12, 13, 13, 15, 15, 16, 17, 18, 22, 9, 11, 12, 13, 17, 10, 11, 7, 7, 8, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 22, 5, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 18, 21, 23, 11, 12, 8, 8, 9, 9, 10, 11, 13, 13, 14, 14, 14, 15, 5, 8, 9, 9, 9, 9, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 17, 19, 24, 5, 9, 11, 12, 9, 6, 9, 10, 12, 12, 13, 14, 15, 15, 16, 16, 22, 12, 8, 11, 11, 11, 12, 15, 16, 12, 9, 10, 10, 12, 12, 12, 12, 13, 15, 15, 16, 16, 16, 18, 20, 21, 6, 10, 7, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 21, 24, 26, 6, 14, 17, 17, 10, 8, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 8, 9, 11, 12, 10, 10, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 13, 13, 14, 15, 17, 18, 19, 10, 10, 11, 13, 13, 19, 11, 11, 13, 15, 15, 16, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 18, 6, 15, 9, 11, 12, 14, 14, 15, 15, 16, 17, 6, 12, 14, 14, 17, 25, 11, 19, 9, 12, 13, 13, 23, 11, 15, 10, 11, 9, 10, 10, 10, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 19, 20, 20, 21, 7, 16, 10, 13, 14, 18, 18, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 19, 19, 19, 19, 19, 20, 21, 22, 22, 23, 24, 7, 12, 13, 13, 17, 17, 11, 11, 12, 12, 13, 13, 14, 15, 13, 18, 12, 11, 12, 12, 14, 14, 16, 16, 16, 19, 19, 20, 22, 10, 13, 13, 13, 14, 14, 15, 15, 17, 8, 12, 20, 8, 10, 10, 13, 14, 18, 18, 14, 14, 15, 16, 17, 18, 18, 21, 24, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 14, 14, 15, 15, 16, 18, 18, 18, 19, 19, 13, 13, 14, 14, 14, 15, 15, 17, 17, 18, 18, 19, 19, 22, 14, 14, 15, 16, 16, 17, 19, 12, 15, 18, 22, 22, 10, 13, 14, 15, 15, 16, 16, 16, 18, 19, 20, 23, 25, 14, 15, 17, 13, 16, 16, 17, 19, 19, 21, 23, 17, 17, 17, 18, 18, 19, 20, 20, 20, 20, 21, 17, 18, 20, 23, 23, 16, 17, 23 }
    
    变量_E0050125 ＝ 取代码 (取文本左边 (汉字, 1), )
    变量_E1050125 ＝ 取代码 (取文本中间 (汉字, 2, 1), )
    .如果真 (变量_E0050125 ＜ 176 或 变量_E0050125 ＞ 247 或 变量_E1050125 ＜ 161 或 变量_E1050125 ＞ 254)
        返回 (-1)
    .如果真结束
    变量_E2050125 ＝ (变量_E0050125 － 176) × (254 － 160) ＋ (变量_E1050125 － 161)
    返回 (全局变量_DF050105 [变量_E2050125 ＋ 1])

.子程序 文本_取中间_批量, 整数型, 公开, 比如：欲取全文本为<12345>,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”
    .参数 源文本, 文本型, , 比如：欲取全文本为 12345
    .参数 前面标识文本, 文本型, , 3的前面为“2”
    .参数 后面标识文本, 文本型, , 3的后面为“4”
    .参数 存放取出文本的数组, 文本型, 可空 数组, 存放取出文本的数组
    .参数 是否不区分大小写, 逻辑型, 可空, 是否区分大小写
    .参数 文本长度大于此数的不要, 整数型, 可空, 文本长度大于此数的不要;如取出的文本大于50的不要;留空为不限制(下面参数中的加入的后缀不算在其中，标志文本为真那么标志算在其中)
    .参数 为取出的文本加上前缀, 文本型, 可空, 在取出的文本前面加上一段字符或汉字！可空！
    .参数 为取出的文本加上后缀, 文本型, 可空, 在取出的文本后面加上一段字符或汉字！可空！
    .参数 连前面标识文本一起取出, 逻辑型, 可空, 是否连<前面标识文本>一起取出? 默认为假，不取出！
    .参数 连后面标识文本一起取出, 逻辑型, 可空, 是否连<后面标识文本>一起取出? 默认为假，不取出！
    .参数 起始位置, 整数型, 可空
    .局部变量 变量_24A50225, 整数型
    .局部变量 变量_25A50225, 整数型
    .局部变量 变量_26A50225, 整数型
    .局部变量 变量_27A50225, 整数型
    .局部变量 变量_28A50225, 文本型
    .局部变量 变量_29A50225, 整数型

    清除数组 (存放取出文本的数组)
    变量_26A50225 ＝ 起始位置
    .循环判断首 ()
        变量_26A50225 ＝ 寻找文本 (源文本, 前面标识文本, 变量_26A50225, 是否不区分大小写)
        .如果 (变量_26A50225 ≠ -1)
            变量_26A50225 ＝ 变量_26A50225 ＋ 取文本长度 (前面标识文本)
            变量_27A50225 ＝ 寻找文本 (源文本, 后面标识文本, 变量_26A50225, 是否不区分大小写)
            .如果 (变量_27A50225 ≠ -1)
                变量_29A50225 ＝ 变量_27A50225 － 变量_26A50225
                变量_28A50225 ＝ 取文本中间 (源文本, 变量_26A50225, 变量_29A50225)
                变量_28A50225 ＝ 为取出的文本加上前缀 ＋ 变量_28A50225 ＋ 为取出的文本加上后缀
                
                .如果真 (连前面标识文本一起取出 ＝ 真)
                    变量_28A50225 ＝ 前面标识文本 ＋ 变量_28A50225
                .如果真结束
                .如果真 (连后面标识文本一起取出 ＝ 真)
                    变量_28A50225 ＝ 变量_28A50225 ＋ 后面标识文本
                .如果真结束
                
                .如果 (文本长度大于此数的不要 ＝ 0)
                    加入成员 (存放取出文本的数组, 变量_28A50225)
                .否则
                    .如果真 (取文本长度 (变量_28A50225) ＜ 文本长度大于此数的不要)
                        加入成员 (存放取出文本的数组, 变量_28A50225)
                    .如果真结束
                    
                .如果结束
                处理事件 ()
            .否则
                跳出循环 ()
            .如果结束
            处理事件 ()
        .否则
            跳出循环 ()
        .如果结束
        处理事件 ()
    .循环判断尾 (变量_26A50225 ≠ -1)
    
    返回 (取数组成员数 (存放取出文本的数组))

.子程序 文本_取中间_批量_正则方式, 整数型, 公开, 比如：欲取全文本为<12345>,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”
    .参数 源文本, 文本型, , 比如：欲取全文本为 12345
    .参数 前面标识文本, 文本型, , 3的前面为“2”
    .参数 后面标识文本, 文本型, , 3的后面为“4”
    .参数 存放取出文本的数组, 文本型, 可空 数组, 存放取出文本的数组
    .参数 是否区分大小写, 逻辑型, 可空, 是否区分大小写
    .参数 文本长度大于此数的不要, 整数型, 可空, 文本长度大于此数的不要，如取出的文本大于50的不要。留空为不限制
    .参数 为取出的文本加上前缀, 文本型, 可空, 在取出的文本前面加上一段字符或汉字！可空！
    .参数 为取出的文本加上后缀, 文本型, 可空, 在取出的文本后面加上一段字符或汉字！可空！
    .参数 连前面标识文本一起取出, 逻辑型, 可空, 是否连<前面标识文本>一起取出?  默认为假，不取出！
    .参数 连后面标识文本一起取出, 逻辑型, 可空, 是否连<后面标识文本>一起取出?  默认为假，不取出！
    .局部变量 变量_93AA0125, 整数型
    .局部变量 变量_94AA0125, 文本型
    .局部变量 变量_95AA0125, 正则表达式类

    清除数组 (存放取出文本的数组)
    变量_95AA0125.创建 (正则元字符转义 (前面标识文本) ＋ “([\s\S]*?)” ＋ 正则元字符转义 (后面标识文本), 源文本)
    .判断开始 (文本长度大于此数的不要 ≠ 0)
        .计次循环首 (变量_95AA0125.取匹配数量 (), 变量_93AA0125)
            变量_94AA0125 ＝ 变量_95AA0125.取子匹配文本 (变量_93AA0125, 1)
            .如果真 (取文本长度 (变量_94AA0125) ≤ 文本长度大于此数的不要)
                变量_94AA0125 ＝ 为取出的文本加上前缀 ＋ 变量_94AA0125 ＋ 为取出的文本加上后缀
                .如果真 (连前面标识文本一起取出)
                    变量_94AA0125 ＝ 前面标识文本 ＋ 变量_94AA0125
                .如果真结束
                .如果真 (连后面标识文本一起取出)
                    变量_94AA0125 ＝ 变量_94AA0125 ＋ 后面标识文本
                .如果真结束
                加入成员 (存放取出文本的数组, 变量_94AA0125)
            .如果真结束
            
        .计次循环尾 ()
    .默认
        
        .计次循环首 (变量_95AA0125.取匹配数量 (), 变量_93AA0125)
            变量_94AA0125 ＝ 变量_95AA0125.取子匹配文本 (变量_93AA0125, 1)
            变量_94AA0125 ＝ 为取出的文本加上前缀 ＋ 变量_94AA0125 ＋ 为取出的文本加上后缀
            .如果真 (连前面标识文本一起取出)
                变量_94AA0125 ＝ 前面标识文本 ＋ 变量_94AA0125
            .如果真结束
            .如果真 (连后面标识文本一起取出)
                变量_94AA0125 ＝ 变量_94AA0125 ＋ 后面标识文本
            .如果真结束
            加入成员 (存放取出文本的数组, 变量_94AA0125)
        .计次循环尾 ()
    .判断结束
    返回 (取数组成员数 (存放取出文本的数组))

.子程序 文本_倒取中间_批量, 整数型, 公开, 比如：欲取全文本为<12345>,现在要取出“3”，<3>的后面为“4”，<3>的前面为“2”
    .参数 源文本, 文本型, , 比如：欲取全文本为 12345
    .参数 后面标识文本, 文本型, , 3的后面为“4”
    .参数 前面标识文本, 文本型, , 3的前面为“2”
    .参数 存放取出文本的数组, 文本型, 可空 数组, 存放取出文本的数组
    .参数 是否不区分大小写, 逻辑型, 可空, 是否区分大小写
    .参数 文本长度大于此数的不要, 整数型, 可空, 文本长度大于此数的不要;如取出的文本大于50的不要;留空为不限制(下面参数中的加入的后缀不算在其中，标志文本为真那么标志算在其中)
    .参数 为取出的文本加上后缀, 文本型, 可空, 在取出的文本后面加上一段字符或汉字！可空！
    .参数 为取出的文本加上前缀, 文本型, 可空, 在取出的文本前面加上一段字符或汉字！可空！
    .参数 连后面标识文本一起取出, 逻辑型, 可空, 是否连<后面标识文本>一起取出? 默认为假，不取出！
    .参数 连前面标识文本一起取出, 逻辑型, 可空, 是否连<前面标识文本>一起取出? 默认为假，不取出！
    .参数 起始位置, 整数型, 可空
    .局部变量 变量_F1E10225, 整数型
    .局部变量 变量_F2E10225, 整数型
    .局部变量 变量_F3E10225, 文本型
    .局部变量 变量_F4E10225, 整数型
    .局部变量 变量_F5E10225, 整数型

    清除数组 (存放取出文本的数组)
    变量_F2E10225 ＝ 选择 (起始位置 ≤ 0, 取文本长度 (源文本) ＋ 取文本长度 (后面标识文本), 起始位置)
    .循环判断首 ()
        变量_F2E10225 ＝ 倒找文本 (源文本, 后面标识文本, 变量_F2E10225, 是否不区分大小写)
        .如果 (变量_F2E10225 ≠ -1)
            变量_F1E10225 ＝ 倒找文本 (源文本, 前面标识文本, 变量_F2E10225, 是否不区分大小写)
            .如果 (变量_F1E10225 ≠ -1)
                变量_F5E10225 ＝ 变量_F1E10225 ＋ 取文本长度 (前面标识文本)
                变量_F4E10225 ＝ 变量_F2E10225 － 变量_F5E10225
                变量_F2E10225 ＝ 变量_F1E10225
                变量_F3E10225 ＝ 取文本中间 (源文本, 变量_F5E10225, 变量_F4E10225)
                变量_F3E10225 ＝ 为取出的文本加上前缀 ＋ 变量_F3E10225 ＋ 为取出的文本加上后缀
                
                .如果真 (连后面标识文本一起取出 ＝ 真)
                    变量_F3E10225 ＝ 变量_F3E10225 ＋ 后面标识文本
                .如果真结束
                .如果真 (连前面标识文本一起取出 ＝ 真)
                    变量_F3E10225 ＝ 前面标识文本 ＋ 变量_F3E10225
                .如果真结束
                
                .如果 (文本长度大于此数的不要 ＝ 0)
                    加入成员 (存放取出文本的数组, 变量_F3E10225)
                .否则
                    .如果真 (取文本长度 (变量_F3E10225) ＜ 文本长度大于此数的不要)
                        加入成员 (存放取出文本的数组, 变量_F3E10225)
                    .如果真结束
                    
                .如果结束
                处理事件 ()
            .否则
                跳出循环 ()
            .如果结束
            处理事件 ()
        .否则
            跳出循环 ()
        .如果结束
        处理事件 ()
    .循环判断尾 (变量_F2E10225 ≠ -1)
    返回 (取数组成员数 (存放取出文本的数组))

.子程序 正则元字符转义, 文本型
    .参数 变量_4DB60125, 文本型
    .局部变量 变量_50B60125, 文本型

    变量_50B60125 ＝ 文本_替换 (变量_4DB60125, , , , “?”, “\?”, “*”, “\*”, “+”, “\+”, “[”, “\[”, “]”, “\]”)
    变量_50B60125 ＝ 文本_替换 (变量_50B60125, , , , “(”, “\(”, “)”, “\)”, “{”, “\{”, “}”, “\}”, “#引号”, #引号)
    变量_50B60125 ＝ 文本_替换 (变量_50B60125, , , , #换行符, “\n”, “|”, “\|”, , , , , , )
    返回 (变量_50B60125)

.子程序 文本区分_只取汉字, 文本型, 公开, 在一大串网页源码中 只取出汉字
    .参数 源文本, 文本型, , 要取出汉字的源文本
    .参数 是否正则, 逻辑型, 可空, 可空，默认为假 不使用正则方式
    .参数 是否去除空格和空行, 逻辑型, 可空, 可为空，默认为假。
    .局部变量 变量_7A720125, 正则表达式类
    .局部变量 变量_7B720125, 文本型
    .局部变量 变量_7C720125, 整数型
    .局部变量 变量_EBA40225, 文本型

    .如果 (是否正则)
        变量_7A720125.创建 (“[^\x20-\x7f]”, 源文本)
        .计次循环首 (变量_7A720125.取匹配数量 (), 变量_7C720125)
            变量_7B720125 ＝ 变量_7B720125 ＋ 变量_7A720125.取匹配文本 (变量_7C720125)
        .计次循环尾 ()
        .如果真 (是否去除空格和空行)
            变量_7A720125.创建 (“\s”, 变量_7B720125)
            变量_7B720125 ＝ 变量_7A720125.替换 (“”)
        .如果真结束
        返回 (变量_7B720125)
    .否则
        变量_EBA40225 ＝ 源文本
        .如果真 (是否去除空格和空行)
            变量_EBA40225 ＝ 文本_替换 (源文本, , , , #换行符, “”, “ ”, “”)
        .如果真结束
        返回 (_只取汉字 (源文本))
    .如果结束
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

.子程序 _只取汉字, 文本型, 公开
    .参数 字符串, 文本型
    .局部变量 变量_F9100325, 字节集
    .局部变量 变量_FA100325, 整数型
    .局部变量 变量_FC100325, 文本型
    .局部变量 变量_00110325, 整数型
    .局部变量 变量_FB100325, 整数型
    .局部变量 变量_04110325, 整数型

    变量_F9100325 ＝ 到字节集 (字符串)
    变量_FA100325 ＝ 取字节集长度 (变量_F9100325)
    变量_FC100325 ＝ 取空白文本 (变量_FA100325)
    变量_00110325 ＝ 取指针文本_ (变量_FC100325)
    变量_FB100325 ＝ 1
    .判断循环首 (变量_FB100325 ＜ 变量_FA100325)
        .如果真 (变量_F9100325 [变量_FB100325] ≥ 176 且 变量_F9100325 [变量_FB100325 ＋ 1] ≥ 161 且 变量_F9100325 [变量_FB100325] ≤ 247 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 254)
            memcpy (变量_00110325 ＋ 变量_04110325, 取指针字节集_ (变量_F9100325) ＋ 变量_FB100325 － 1, 2)
            变量_04110325 ＝ 变量_04110325 ＋ 2
            变量_FB100325 ＝ 变量_FB100325 ＋ 2
            到循环尾 ()
        .如果真结束
        .如果真 (变量_F9100325 [变量_FB100325] ≥ 129 且 变量_F9100325 [变量_FB100325] ≤ 160)
            .如果真 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 64 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 126 或 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 128 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 161) 或 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 128 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 254))
                memcpy (变量_00110325 ＋ 变量_04110325, 取指针字节集_ (变量_F9100325) ＋ 变量_FB100325 － 1, 2)
                变量_04110325 ＝ 变量_04110325 ＋ 2
                变量_FB100325 ＝ 变量_FB100325 ＋ 2
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (变量_F9100325 [变量_FB100325] ≥ 170 且 变量_F9100325 [变量_FB100325] ≤ 254)
            .如果真 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 64 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 126 或 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 128 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 160))
                memcpy (变量_00110325 ＋ 变量_04110325, 取指针字节集_ (变量_F9100325) ＋ 变量_FB100325 － 1, 2)
                变量_04110325 ＝ 变量_04110325 ＋ 2
                变量_FB100325 ＝ 变量_FB100325 ＋ 2
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (变量_F9100325 [变量_FB100325] ≥ 170 且 变量_F9100325 [变量_FB100325] ≤ 176)
            .如果真 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 64 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 126 或 (变量_F9100325 [变量_FB100325 ＋ 1] ≥ 128 且 变量_F9100325 [变量_FB100325 ＋ 1] ≤ 161))
                memcpy (变量_00110325 ＋ 变量_04110325, 取指针字节集_ (变量_F9100325) ＋ 变量_FB100325 － 1, 2)
                变量_04110325 ＝ 变量_04110325 ＋ 2
                变量_FB100325 ＝ 变量_FB100325 ＋ 2
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (变量_F9100325 [变量_FB100325] ＞ 127 且 变量_F9100325 [变量_FB100325 ＋ 1] ＞ 127)
            变量_FB100325 ＝ 变量_FB100325 ＋ 2
            到循环尾 ()
        .如果真结束
        变量_FB100325 ＝ 变量_FB100325 ＋ 1
    .判断循环尾 ()
    assignZero (变量_FC100325, 变量_04110325, )
    返回 (变量_FC100325)

.子程序 文本区分_只取字母, 文本型, 公开, 在一大串网页源码中 只取字母
    .参数 源文本, 文本型, , 要取出字母的源文本
    .参数 大小写类型, 整数型, 可空, 默认为0  0=取大小写  1只取小写  2只取大写
    .局部变量 变量_7F720125, 正则表达式类
    .局部变量 变量_80720125, 文本型
    .局部变量 变量_81720125, 整数型

    .判断开始 (大小写类型 ＝ 0)
        变量_7F720125.创建 (“[a-zA-Z]”, 源文本, 真)
    .判断 (大小写类型 ＝ 1)
        变量_7F720125.创建 (“[a-z]”, 源文本, 真)
    .判断 (大小写类型 ＝ 2)
        变量_7F720125.创建 (“[A-Z]”, 源文本, 真)
    .默认
        
    .判断结束
    .计次循环首 (变量_7F720125.取匹配数量 (), 变量_81720125)
        变量_80720125 ＝ 变量_80720125 ＋ 变量_7F720125.取匹配文本 (变量_81720125)
    .计次循环尾 ()
    返回 (变量_80720125)

.子程序 文本区分_只取符号, 文本型, 公开, 在一大串网页源码中 只取符号
    .参数 源文本, 文本型, , 要取出符号的源文本
    .局部变量 变量_83720125, 正则表达式类
    .局部变量 变量_84720125, 文本型
    .局部变量 变量_85720125, 整数型

    变量_83720125.创建 (“[^0-9a-z\u4e00-\u9fa5]”, 源文本)
    .计次循环首 (变量_83720125.取匹配数量 (), 变量_85720125)
        变量_84720125 ＝ 变量_84720125 ＋ 变量_83720125.取匹配文本 (变量_85720125)
    .计次循环尾 ()
    返回 (变量_84720125)

.子程序 文本区分_只取数字, 文本型, 公开, 在一大串网页源码中 只取数字
    .参数 源文本, 文本型, , 要取出数字的源文本
    .局部变量 变量_87720125, 正则表达式类
    .局部变量 变量_88720125, 文本型
    .局部变量 变量_89720125, 整数型

    变量_87720125.创建 (“[0-9]”, 源文本)
    .计次循环首 (变量_87720125.取匹配数量 (), 变量_89720125)
        变量_88720125 ＝ 变量_88720125 ＋ 变量_87720125.取匹配文本 (变量_89720125)
    .计次循环尾 ()
    返回 (变量_88720125)

.子程序 文本_朗读, , 公开, 朗读一段指定的文本
    .参数 朗读的文本, 文本型, 可空
    .参数 百度语音引擎, 逻辑型, 可空, 可为空，默认使用微软语音引擎。
    .参数 音频数据, 字节集, 可空
    .参数 音频文件, 文本型, 可空, 如：C:\mp3，C:\MAV等等
    .参数 保存朗读文本至文件, 文本型, 可空, 只针对“朗读的文本”和“音频数据”有效，请提供要保存至的文件夹路径，如：C:\
    .参数 朗读方式, 逻辑型, 可空, 真=支持库方式  假=API方式  默认为假  API方式
    .局部变量 变量_B0C50125, 字节集
    .局部变量 变量_B1C50125, 文本型
    .局部变量 变量_23E40125, 文本型

    输出调试文本 (“文本_朗读 命令已弃用，请改用 文本_到语音。”)
    
    变量_B1C50125 ＝ “”
    .如果真 (是否为空 (保存朗读文本至文件) ＝ 假 且 目录_是否存在 (保存朗读文本至文件))
        .如果真 (取文本左边 (保存朗读文本至文件, 1) ≠ “\”)
            保存朗读文本至文件 ＝ 保存朗读文本至文件 ＋ “\”
        .如果真结束
        
    .如果真结束
    .判断开始 (删首尾空 (朗读的文本) ≠ “”)
        变量_B1C50125 ＝ 目录_取临时目录 () ＋ 校验_取md5 (到字节集 (朗读的文本)) ＋ “.mp3”
        .如果真 (文件_是否存在 (变量_B1C50125) ＝ 假)
            .如果 (百度语音引擎)
                变量_23E40125 ＝ “http://tts.baidu.com/text2audio?lan=zh&ie=UTF-8&text=” ＋ 编码_URL编码 (朗读的文本, , 真)
            .否则
                变量_23E40125 ＝ “http://api.microsofttranslator.com/V2/Http.svc/Speak?language=zh-CN&appid=05DBC69E5594C137B9E22680F92F8E5E115A7817&text=” ＋ 编码_URL编码 (朗读的文本, , 真) ＋ “&format=audio/mp3&options=MaxQuality”
            .如果结束
            变量_B0C50125 ＝ 网页_访问 (变量_23E40125)
            写到文件 (变量_B1C50125, 变量_B0C50125)
        .如果真结束
        
        .如果真 (是否为空 (保存朗读文本至文件) ＝ 假)
            .如果 (取字节集长度 (变量_B0C50125) ＝ 0)
                文件_复制 (变量_B1C50125, 保存朗读文本至文件 ＋ 朗读的文本 ＋ “.mp3”, 0)
            .否则
                写到文件 (保存朗读文本至文件 ＋ 朗读的文本 ＋ “.mp3”, 变量_B0C50125)
            .如果结束
            
        .如果真结束
        
    .判断 (是否为空 (音频数据) ＝ 假)
        变量_B1C50125 ＝ 目录_取临时目录 () ＋ 校验_取md5 (音频数据) ＋ “.mp3”
        .如果真 (文件_是否存在 (变量_B1C50125) ＝ 假)
            写到文件 (变量_B1C50125, 音频数据)
        .如果真结束
        
        .如果真 (是否为空 (保存朗读文本至文件) ＝ 假)
            写到文件 (保存朗读文本至文件 ＋ “音频数据.mp3”, 音频数据)
        .如果真结束
        
        
    .判断 (文件_是否存在 (音频文件))
        变量_B1C50125 ＝ 音频文件
        
    .默认
        输出调试文本 (“朗读的文本、音频数据和音频文件必须提供一个”)
    .判断结束
    
    .如果真 (文件_是否存在 (变量_B1C50125))
        .判断开始 (朗读方式)
            播放MP3 (1, 变量_B1C50125)
        .默认
            音乐_播放 (变量_B1C50125, 文本_取随机汉字 (10, ))
        .判断结束
        
    .如果真结束
    

.子程序 文本_朗读Ex, 逻辑型, 公开, 本命令由【sizaizuotian】提供接口
    .参数 朗读文本, 文本型
    .参数 保存朗读文本至文件, 文本型, 可空
    .参数 朗读方式, 逻辑型, 可空, 真=支持库方式  假=API方式  默认为假  API方式
    .局部变量 变量_6A9C0225, 文本型
    .局部变量 变量_6C9C0225, 文本型
    .局部变量 变量_6D9C0225, 字节集
    .局部变量 变量_6E9C0225, 文本型
    .局部变量 变量_2AA50225, 逻辑型

    变量_6A9C0225 ＝ 编码_URL编码 (朗读文本, , 真)
    变量_6C9C0225 ＝ “http://fanyi.baidu.com/gettts?lan=zh&text=” ＋ 变量_6A9C0225 ＋ “&spd=5&source=web.mp3”
    变量_6D9C0225 ＝ 网页_访问_对象 (变量_6C9C0225)
    .如果 (是否为空 (保存朗读文本至文件) ＝ 假)
        变量_2AA50225 ＝ 写到文件 (保存朗读文本至文件, 变量_6D9C0225)
        返回 (变量_2AA50225)
    .否则
        变量_6E9C0225 ＝ 目录_取临时目录 () ＋ 校验_取md5 (到字节集 (变量_6D9C0225)) ＋ “.mp3”
        变量_2AA50225 ＝ 写到文件 (变量_6E9C0225, 变量_6D9C0225)
        .判断开始 (朗读方式)
            播放MP3 (1, 变量_6E9C0225)
        .默认
            音乐_播放 (变量_6E9C0225, 文本_取随机汉字 (10, ))
        .判断结束
        
        返回 (变量_2AA50225)
    .如果结束
    返回 (真)
    

.子程序 文本_指针到文本A, 文本型, 公开, 返回指定内存指针所指向地址处的文本，注意调用本命令前一定要确保所提供的内存指针真实有效，且指向一个以零字符结束的文本串。
    .参数 内存文本指针, 整数型

    返回 (DLL_lstrcatA (内存文本指针, 0))

.子程序 文本_指针到文本W, 文本型, 公开, 取内存中Unicode字符串文本。返回指定内存指针所指向地址处的文本，注意调用本命令前一定要确保所提供的内存指针真实有效，且指向一个以零字符结束的文本串。 
    .参数 Unicode内存指针, 整数型
    .局部变量 变量_37AD0225, 字节型, , "0"
    .局部变量 变量_38AD0225, 整数型

    .如果真 (Unicode内存指针 ≠ 0)
        变量_38AD0225 ＝ lstrlen (Unicode内存指针) × 2 ＋ 8
        .如果真 (变量_38AD0225 ≠ 0)
            重定义数组 (变量_37AD0225, 假, 变量_38AD0225 － 1)
            RtlMoveMemory (取数据_通用型_数组 (变量_37AD0225), Unicode内存指针, 变量_38AD0225)
            返回 (编码_Unicode到Ansi (到字节集 (变量_37AD0225)))
        .如果真结束
        
    .如果真结束
    返回 (“”)
    

.子程序 文本_加密c, 字节集, 公开, 支持密钥加密，成功返回加密后文本，失败返回空。
    .参数 欲加密文本, 文本型
    .参数 密码, 文本型, 可空, 可为空，默认为 “bbs.125.la”
    .局部变量 变量_8EE50125, 整数型
    .局部变量 变量_8FE50125, 整数型
    .局部变量 变量_90E50125, 整数型
    .局部变量 变量_91E50125, 整数型
    .局部变量 变量_92E50125, 整数型
    .局部变量 变量_93E50125, 字节集
    .局部变量 变量_94E50125, 逻辑型

    .如果真 (取文本长度 (欲加密文本) ≠ 0)
        变量_94E50125 ＝ 1 ＝ CryptAcquireContextA (变量_90E50125, 字符 (0), “Microsoft Base Cryptographic Provider v1.0”, 1, 0)
        .如果真 (变量_94E50125 ＝ 假)
            变量_94E50125 ＝ 1 ＝ CryptAcquireContextA (变量_90E50125, 字符 (0), “Microsoft Base Cryptographic Provider v1.0”, 1, 8)
            .如果真 (变量_94E50125 ＝ 假)
                返回 ({ })
            .如果真结束
            
        .如果真结束
        密码 ＝ 选择 (是否为空 (密码), “bbs.125.la”, 密码)
        CryptCreateHash (变量_90E50125, 32771, 0, 0, 变量_8EE50125)
        CryptHashData (变量_8EE50125, 到字节集 (密码), 取文本长度 (密码), 0)
        DLL_CryptDeriveKey (变量_90E50125, 26625, 变量_8EE50125, 0, 变量_8FE50125)
        CryptDestroyHash (变量_8EE50125)
        
        变量_91E50125 ＝ 取文本长度 (欲加密文本)
        变量_92E50125 ＝ 变量_91E50125
        变量_93E50125 ＝ 取空白字节集 (变量_91E50125)
        变量_93E50125 ＝ 到字节集 (欲加密文本)
        
        变量_94E50125 ＝ DLL_CryptEncrypt2 (变量_8FE50125, 0, 1, 0, 变量_93E50125, 变量_91E50125, 变量_92E50125)
        DLL_CryptDestroyKey (变量_8FE50125)
        CryptDestroyHash (变量_8EE50125)
        CryptReleaseContext (变量_90E50125, 0)
    .如果真结束
    返回 (选择 (变量_94E50125, 变量_93E50125, { }))

.子程序 文本_解密c, 文本型, 公开, 支持密钥解密，成功返回解密后文本，失败返回空。
    .参数 加密后文本, 字节集
    .参数 密码, 文本型, 可空, 可为空，默认为 “bbs.125.la”
    .局部变量 变量_97E50125, 整数型
    .局部变量 变量_98E50125, 整数型
    .局部变量 变量_99E50125, 整数型
    .局部变量 变量_9AE50125, 逻辑型
    .局部变量 变量_9BE50125, 字节集
    .局部变量 变量_9CE50125, 整数型
    .局部变量 变量_9DE50125, 整数型

    .如果真 (取字节集长度 (加密后文本) ≠ 0)
        变量_9AE50125 ＝ 1 ＝ CryptAcquireContextA (变量_97E50125, 字符 (0), “Microsoft Base Cryptographic Provider v1.0”, 1, 0)
        .如果真 (变量_9AE50125 ＝ 假)
            变量_9AE50125 ＝ 1 ＝ CryptAcquireContextA (变量_97E50125, 字符 (0), “Microsoft Base Cryptographic Provider v1.0”, 1, 8)
            .如果真 (变量_9AE50125 ＝ 假)
                返回 (“”)
            .如果真结束
            
        .如果真结束
        密码 ＝ 选择 (是否为空 (密码), “bbs.125.la”, 密码)
        CryptCreateHash (变量_97E50125, 32771, 0, 0, 变量_98E50125)
        CryptHashData (变量_98E50125, 到字节集 (密码), 取文本长度 (密码), 0)
        DLL_CryptDeriveKey (变量_97E50125, 26625, 变量_98E50125, 0, 变量_99E50125)
        CryptDestroyHash (变量_98E50125)
        
        变量_9CE50125 ＝ 取字节集长度 (加密后文本)
        变量_9BE50125 ＝ 取空白字节集 (变量_9CE50125)
        变量_9BE50125 ＝ 加密后文本
        变量_9AE50125 ＝ DLL_CryptDecrypt2 (变量_99E50125, 0, 1, 0, 变量_9BE50125, 变量_9CE50125)
        
        DLL_CryptDestroyKey (变量_99E50125)
        CryptDestroyHash (变量_98E50125)
        CryptReleaseContext (变量_97E50125, 0)
    .如果真结束
    返回 (选择 (变量_9AE50125, 到文本 (变量_9BE50125), “”))
    
    
    
    
    

.子程序 文本_加密, 文本型, 公开, 失败返回空文本
    .参数 参数_待加密文本, 文本型, , 待加密文本
    .参数 参数_加密的密码, 文本型, , 加密的密码<建议5位以上的数字>
    .局部变量 变量_CAE50125, 整数型
    .局部变量 变量_CBE50125, 字节集
    .局部变量 变量_CCE50125, 字节集

    变量_CCE50125 ＝ 到字节集 (参数_待加密文本)
    .计次循环首 (取字节集长度 (变量_CCE50125), 变量_CAE50125)
        变量_CBE50125 ＝ 变量_CBE50125 ＋ 到字节集 (到字节 (位异或 (变量_CCE50125 [变量_CAE50125], 3600)))
    .计次循环尾 ()
    返回 (字节集_字节集到十六进制 (变量_CBE50125) ＋ 到大写 (取文本中间 (校验_取md5 (到字节集 (参数_加密的密码)), 3, 9)))

.子程序 文本_解密, 文本型, 公开, 失败返回空文本
    .参数 参数_待解密文本, 文本型, , 待解密文本
    .参数 参数_解密的密码, 文本型, , 解密的密码<建议5位以上的数字>
    .局部变量 变量_CFE50125, 整数型
    .局部变量 变量_D0E50125, 字节集
    .局部变量 变量_D1E50125, 字节集

    .如果真 (取文本右边 (参数_待解密文本, 9) ≠ 到大写 (取文本中间 (校验_取md5 (到字节集 (参数_解密的密码)), 3, 9)))
        返回 (“”)
    .如果真结束
    变量_D1E50125 ＝ 字节集_十六进制到字节集 (取文本左边 (参数_待解密文本, 取文本长度 (参数_待解密文本) － 9))
    .计次循环首 (取字节集长度 (变量_D1E50125), 变量_CFE50125)
        变量_D0E50125 ＝ 变量_D0E50125 ＋ 到字节集 (到字节 (位异或 (变量_D1E50125 [变量_CFE50125], 3600)))
    .计次循环尾 ()
    返回 (到文本 (变量_D0E50125))

.子程序 文本_加密_优化, 文本型, 公开, 失败返回空文本
    .参数 参数_待加密文本, 文本型, , 待加密文本
    .参数 参数_加密的密码, 文本型, , 加密的密码<建议5位以上的数字>
    .局部变量 变量_32E50225, 整数型
    .局部变量 变量_33E50225, 字节集

    
    变量_33E50225 ＝ 到字节集 (参数_待加密文本)
    .计次循环首 (取字节集长度 (变量_33E50225), 变量_32E50225)
        变量_33E50225 [变量_32E50225] ＝ 位异或 (变量_33E50225 [变量_32E50225], 3600)
    .计次循环尾 ()
    返回 (字节集_字节集到十六进制2 (变量_33E50225) ＋ 到大写 (取文本中间 (校验_取md5 (到字节集 (参数_加密的密码), , ), 3, 9)))

.子程序 文本_解密_优化, 文本型, 公开, 失败返回空文本
    .参数 参数_待解密文本, 文本型, , 待解密文本
    .参数 参数_解密的密码, 文本型, , 解密的密码<建议5位以上的数字>
    .局部变量 变量_36E50225, 整数型
    .局部变量 变量_37E50225, 字节集

    
    .如果真 (取文本右边 (参数_待解密文本, 9) ≠ 到大写 (取文本中间 (校验_取md5 (到字节集 (参数_解密的密码), , ), 3, 9)))
        返回 (“”)
    .如果真结束
    变量_37E50225 ＝ 字节集_十六进制到字节集2 (取文本左边 (参数_待解密文本, 取文本长度 (参数_待解密文本) － 9))
    .计次循环首 (取字节集长度 (变量_37E50225), 变量_36E50225)
        变量_37E50225 [变量_36E50225] ＝ 位异或 (变量_37E50225 [变量_36E50225], 3600)
    .计次循环尾 ()
    返回 (到文本 (变量_37E50225))

.子程序 文本_是否为数字, 逻辑型, 公开, 中间不能有空格,判断指定文本是否是数字
    .参数 参_文本, 文本型
    .局部变量 变量_85FA0125, 整数型
    .局部变量 变量_8AFA0125, 整数型
    .局部变量 变量_8CFA0125, 整数型

    
    变量_8AFA0125 ＝ 取文本长度 (参_文本)
    .如果真 (变量_8AFA0125 ＝ 0)
        返回 (假)
    .如果真结束
    .计次循环首 (变量_8AFA0125, 变量_85FA0125)
        变量_8CFA0125 ＝ 取代码 (参_文本, 变量_85FA0125)
        .判断开始 (变量_8CFA0125 ＜ 48)
            返回 (假)
        .判断 (变量_8CFA0125 ＞ 57)
            返回 (假)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    返回 (真)
    

.子程序 文本_自动补零, 文本型, 公开, 当指定文本长度不足时前面自动补零，通用用于数据库序列号
    .参数 参_欲补齐文本, 文本型
    .参数 参_补齐长度, 整数型

    返回 (取重复文本 (参_补齐长度 － 取文本长度 (参_欲补齐文本), “0”) ＋ 参_欲补齐文本)

.子程序 文本_是否小写字母, 逻辑型, 公开, 中间不能有空格,By:邓学彬(泪闯天涯)
    .参数 字符串, 文本型
    .局部变量 变量_73F80125, 整数型
    .局部变量 变量_74F80125, 整数型
    .局部变量 变量_75F80125, 整数型

    变量_73F80125 ＝ 取文本长度 (字符串)
    .如果真 (变量_73F80125 ＝ 0)
        返回 (假)
    .如果真结束
    .计次循环首 (变量_73F80125, 变量_74F80125)
        变量_75F80125 ＝ 取代码 (字符串, 变量_74F80125)
        .判断开始 (变量_75F80125 ＜ 97)
            返回 (假)
        .判断 (变量_75F80125 ＞ 122)
            返回 (假)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    返回 (真)

.子程序 文本_是否大写字母, 逻辑型, 公开, 中间不能有空格,By:邓学彬(泪闯天涯)
    .参数 字符串, 文本型
    .局部变量 变量_77F80125, 整数型
    .局部变量 变量_78F80125, 整数型
    .局部变量 变量_79F80125, 整数型

    变量_77F80125 ＝ 取文本长度 (字符串)
    .如果真 (变量_77F80125 ＝ 0)
        返回 (假)
    .如果真结束
    .计次循环首 (变量_77F80125, 变量_78F80125)
        变量_79F80125 ＝ 取代码 (字符串, 变量_78F80125)
        .判断开始 (变量_79F80125 ＜ 65)
            返回 (假)
        .判断 (变量_79F80125 ＞ 90)
            返回 (假)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    返回 (真)

.子程序 文本_取某位置文本, 文本型, 公开, 取某位置下的文本，如果指定位置超出文本长度，返回空文本。
    .参数 文本, 文本型
    .参数 位置, 整数型
    .参数 取出文本类型, 逻辑型, 参考 可空, 得到指定位置的文本类型，全角为真，半角为假。
    .局部变量 变量_94D30225, 文本型

    
    .如果真 (位置 ＞ 取文本长度 (文本) 或 位置 ≤ 0)
        返回 (“”)
    .如果真结束
    变量_94D30225 ＝ 取文本中间 (文本, 位置, 2)
    .如果真 (取代码 (变量_94D30225, ) ＜ 0)
        变量_94D30225 ＝ 取文本中间 (文本, 位置 － 1, 2)
        .如果真 (取代码 (变量_94D30225, ) ＜ 0)
            取出文本类型 ＝ 真
            返回 (变量_94D30225)
        .如果真结束
        取出文本类型 ＝ 真
        返回 (取文本中间 (文本, 位置, 2))
    .如果真结束
    取出文本类型 ＝ 假
    返回 (取文本中间 (文本, 位置, 1))

.子程序 文本_文本比较W, 整数型, 公开, 如果返回值小于0，表示文本一小于文本二；如果等于0，表示文本一等于文本二；如果大于0，表示文本一大于文本二。
    .参数 待比较文本一, 整数型
    .参数 待比较文本二, 整数型
    .参数 是否区分大小写, 逻辑型, 可空, 为真区分大小写，为假不区分。
    .局部变量 变量_A8EB0225, 短整数型
    .局部变量 变量_A9EB0225, 短整数型
    .局部变量 变量_AAEB0225, 整数型
    .局部变量 变量_ABEB0225, 逻辑型

    .循环判断首 ()
        
        .如果真 (指针_是否有效 (待比较文本一) ＝ 假 或 指针_是否有效 (待比较文本二) ＝ 假)
            变量_AAEB0225 ＝ 待比较文本一 － 待比较文本二
            跳出循环 ()
        .如果真结束
        变量_A8EB0225 ＝ 指针_到短整数型_汇编 (待比较文本一)
        变量_A9EB0225 ＝ 指针_到短整数型_汇编 (待比较文本二)
        变量_AAEB0225 ＝ 变量_A8EB0225 － 变量_A9EB0225
        .判断开始 (变量_AAEB0225 ＝ 0)
            变量_ABEB0225 ＝ 真
        .判断 (是否区分大小写 ＝ 假 且 (变量_A8EB0225 ≥ 65 且 变量_A8EB0225 ≤ 90 或 (变量_A8EB0225 ≥ 97 且 变量_A8EB0225 ≤ 122)))
            变量_ABEB0225 ＝ 变量_AAEB0225 ＝ 32 或 变量_AAEB0225 ＝ -32
        .默认
            变量_ABEB0225 ＝ 假
        .判断结束
        待比较文本一 ＝ 待比较文本一 ＋ 2
        待比较文本二 ＝ 待比较文本二 ＋ 2
    .循环判断尾 (变量_ABEB0225 且 变量_A8EB0225 ≠ 0)
    .判断开始 (变量_AAEB0225 ＜ 0)
        返回 (-1)
    .判断 (变量_AAEB0225 ＞ 0)
        返回 (1)
    .默认
        返回 (0)
    .判断结束
    

.子程序 文本_行尾序列转换, 文本型, 公开, LF转CRLF
    .参数 欲被转换的文本, 文本型
    .局部变量 变量_5FF10225, 文本型
    .局部变量 变量_60F10225, 整数型, , "0"
    .局部变量 变量_61F10225, 整数型
    .局部变量 变量_62F10225, 整数型

    变量_5FF10225 ＝ 欲被转换的文本
    文本_取文本起始位置 (变量_5FF10225, 字符 (10), 变量_60F10225)
    变量_61F10225 ＝ 取数组成员数 (变量_60F10225)
    .变量循环首 (变量_61F10225, 1, -1, 变量_62F10225)
        .如果真 (取文本中间 (变量_5FF10225, 变量_60F10225 [变量_62F10225] － 1, 1) ≠ 字符 (13))
            变量_5FF10225 ＝ 文本替换 (变量_5FF10225, 变量_60F10225 [变量_62F10225], 1, #换行符)
        .如果真结束
        
    .变量循环尾 ()
    返回 (变量_5FF10225)

.子程序 格式化文本A, 文本型, 公开, 字节集类型的参数必须传递数据指针, 比如 取指针_字节集型() 
    .参数 格式, 文本型
    .参数 参数1, 通用型, 参考 可空
    .参数 参数2, 通用型, 参考 可空
    .参数 参数3, 通用型, 参考 可空
    .参数 参数4, 通用型, 参考 可空
    .参数 参数5, 通用型, 参考 可空
    .参数 参数6, 通用型, 参考 可空
    .参数 参数7, 通用型, 参考 可空
    .参数 参数8, 通用型, 参考 可空
    .参数 参数9, 通用型, 参考 可空
    .参数 参数10, 通用型, 参考 可空
    .参数 参数11, 通用型, 参考 可空
    .参数 参数12, 通用型, 参考 可空
    .参数 参数13, 通用型, 参考 可空
    .参数 参数14, 通用型, 参考 可空
    .参数 参数15, 通用型, 参考 可空
    .参数 参数16, 通用型, 参考 可空
    .参数 参数17, 通用型, 参考 可空
    .参数 参数18, 通用型, 参考 可空
    .参数 参数19, 通用型, 参考 可空
    .参数 参数20, 通用型, 参考 可空
    .局部变量 变量_3FDF0225, 整数型
    .局部变量 变量_40DF0225, 整数型
    .局部变量 变量_41DF0225, 整数型
    .局部变量 变量_42DF0225, 整数型
    .局部变量 变量_43DF0225, 整数型
    .局部变量 变量_44DF0225, 文本型
    .局部变量 变量_45DF0225, 整数型

    变量_41DF0225 ＝ __make_list ()
    .如果真 (变量_41DF0225 ＝ 0)
        返回 (“”)
    .如果真结束
    变量_40DF0225 ＝ 4096
    变量_3FDF0225 ＝ DLL__malloc (变量_40DF0225)
    变量_45DF0225 ＝ 取指针_文本型 (格式)
    变量_43DF0225 ＝ DLL___vsnprintf_s (变量_3FDF0225, 变量_40DF0225, 变量_40DF0225 － 1, 变量_45DF0225, 变量_41DF0225)
    .判断循环首 (变量_43DF0225 ＝ -1)
        DLL__free (变量_3FDF0225)
        变量_40DF0225 ＝ 变量_40DF0225 × 2
        变量_3FDF0225 ＝ DLL__malloc (变量_40DF0225)
        变量_43DF0225 ＝ DLL___vsnprintf_s (变量_3FDF0225, 变量_40DF0225, 变量_40DF0225 － 1, 变量_45DF0225, 变量_41DF0225)
    .判断循环尾 ()
    变量_44DF0225 ＝ 指针到文本 (变量_3FDF0225)
    DLL__free (变量_3FDF0225)
    DLL__free (变量_41DF0225)
    返回 (变量_44DF0225)

.子程序 格式化文本W, 字节集, 公开, Unicode文本必须以\0\0结尾, 字节集类型的参数必须传递数据指针, 比如 取指针_字节集型() 
    .参数 格式, 字节集
    .参数 参数1, 通用型, 参考 可空
    .参数 参数2, 通用型, 参考 可空
    .参数 参数3, 通用型, 参考 可空
    .参数 参数4, 通用型, 参考 可空
    .参数 参数5, 通用型, 参考 可空
    .参数 参数6, 通用型, 参考 可空
    .参数 参数7, 通用型, 参考 可空
    .参数 参数8, 通用型, 参考 可空
    .参数 参数9, 通用型, 参考 可空
    .参数 参数10, 通用型, 参考 可空
    .参数 参数11, 通用型, 参考 可空
    .参数 参数12, 通用型, 参考 可空
    .参数 参数13, 通用型, 参考 可空
    .参数 参数14, 通用型, 参考 可空
    .参数 参数15, 通用型, 参考 可空
    .参数 参数16, 通用型, 参考 可空
    .参数 参数17, 通用型, 参考 可空
    .参数 参数18, 通用型, 参考 可空
    .参数 参数19, 通用型, 参考 可空
    .参数 参数20, 通用型, 参考 可空
    .局部变量 变量_63DF0225, 整数型
    .局部变量 变量_64DF0225, 整数型
    .局部变量 变量_65DF0225, 整数型
    .局部变量 变量_66DF0225, 整数型
    .局部变量 变量_67DF0225, 整数型
    .局部变量 变量_68DF0225, 整数型
    .局部变量 变量_69DF0225, 字节集

    变量_66DF0225 ＝ __make_list ()
    .如果真 (变量_66DF0225 ＝ 0)
        返回 ({ })
    .如果真结束
    变量_64DF0225 ＝ 4096
    变量_63DF0225 ＝ DLL__malloc (变量_64DF0225 × 2)
    变量_65DF0225 ＝ 取指针_字节集型 (格式)
    变量_68DF0225 ＝ DLL___vsnwprintf_s (变量_63DF0225, 变量_64DF0225, 变量_64DF0225 － 1, 变量_65DF0225, 变量_66DF0225)
    .判断循环首 (变量_68DF0225 ＝ -1)
        DLL__free (变量_63DF0225)
        变量_64DF0225 ＝ 变量_64DF0225 × 2
        变量_63DF0225 ＝ DLL__malloc (变量_64DF0225 × 2)
        变量_68DF0225 ＝ DLL___vsnwprintf_s (变量_63DF0225, 变量_64DF0225, 变量_64DF0225 － 1, 变量_65DF0225, 变量_66DF0225)
    .判断循环尾 ()
    变量_69DF0225 ＝ 指针到字节集 (变量_63DF0225, 变量_68DF0225 × 2 ＋ 2)
    DLL__free (变量_63DF0225)
    返回 (变量_69DF0225)

.子程序 格式化文本A_数组, 文本型, 公开, 数组里如果用到字节集参数那这个成员必须指向字节集数据地址, 可以使用 取指针_字节集型() 来获取
    .参数 格式, 文本型
    .参数 参数, 整数型, 参考 可空 数组
    .局部变量 变量_6CDF0225, 整数型
    .局部变量 变量_6DDF0225, 整数型
    .局部变量 变量_6EDF0225, 整数型
    .局部变量 变量_6FDF0225, 整数型
    .局部变量 变量_70DF0225, 整数型
    .局部变量 变量_71DF0225, 整数型
    .局部变量 变量_72DF0225, 文本型

    变量_6DDF0225 ＝ 4096
    变量_6CDF0225 ＝ DLL__malloc (变量_6DDF0225)
    变量_6FDF0225 ＝ 取数据_通用型_数组 (参数)
    变量_6EDF0225 ＝ 取指针_文本型 (格式)
    变量_71DF0225 ＝ DLL___vsnprintf_s (变量_6CDF0225, 变量_6DDF0225, 变量_6DDF0225 － 1, 变量_6EDF0225, 变量_6FDF0225)
    .判断循环首 (变量_71DF0225 ＝ -1)
        DLL__free (变量_6CDF0225)
        变量_6DDF0225 ＝ 变量_6DDF0225 × 2
        变量_6CDF0225 ＝ DLL__malloc (变量_6DDF0225)
        变量_71DF0225 ＝ DLL___vsnprintf_s (变量_6CDF0225, 变量_6DDF0225, 变量_6DDF0225 － 1, 变量_6EDF0225, 变量_6FDF0225)
    .判断循环尾 ()
    变量_72DF0225 ＝ 指针到文本 (变量_6CDF0225)
    DLL__free (变量_6CDF0225)
    返回 (变量_72DF0225)
    

.子程序 格式化文本W_数组, 字节集, 公开, 数组里如果用到字节集参数那这个成员必须指向字节集数据地址, 可以使用 取指针_字节集型() 来获取
    .参数 格式, 字节集
    .参数 参数, 整数型, 参考 可空 数组
    .局部变量 变量_75DF0225, 整数型
    .局部变量 变量_76DF0225, 整数型
    .局部变量 变量_77DF0225, 整数型
    .局部变量 变量_78DF0225, 整数型
    .局部变量 变量_79DF0225, 整数型
    .局部变量 变量_7ADF0225, 整数型
    .局部变量 变量_7BDF0225, 字节集

    变量_76DF0225 ＝ 4096
    变量_75DF0225 ＝ DLL__malloc (变量_76DF0225 × 2)
    变量_78DF0225 ＝ 取数据_通用型_数组 (参数)
    变量_77DF0225 ＝ 取指针_字节集型 (格式)
    变量_7ADF0225 ＝ DLL___vsnwprintf_s (变量_75DF0225, 变量_76DF0225, 变量_76DF0225 － 1, 变量_77DF0225, 变量_78DF0225)
    .判断循环首 (变量_7ADF0225 ＝ -1)
        DLL__free (变量_75DF0225)
        变量_76DF0225 ＝ 变量_76DF0225 × 2
        变量_75DF0225 ＝ DLL__malloc (变量_76DF0225 × 2)
        变量_7ADF0225 ＝ DLL___vsnwprintf_s (变量_75DF0225, 变量_76DF0225, 变量_76DF0225 － 1, 变量_77DF0225, 变量_78DF0225)
    .判断循环尾 ()
    变量_7BDF0225 ＝ 指针到字节集 (变量_75DF0225, 变量_7ADF0225 × 2 ＋ 2)
    DLL__free (变量_75DF0225)
    返回 (变量_7BDF0225)
    

.子程序 文本_数字字符串格式化, 文本型, 公开, 将数字字符串格式化为为名称指定的区域设置定制的数字字符串。
    .参数 欲格式化的数字字符串, 文本型, , "10462486528" => "10,462,486,528"
    .参数 每组数字中的位数, 整数型, 可空, 默认为3
    .局部变量 变量_45F90225, 整数型
    .局部变量 变量_46F90225, 自定义_50F90241
    .局部变量 变量_47F90225, 整数型
    .局部变量 变量_48F90225, 文本型

    .如果 (是否为空 (每组数字中的位数))
        变量_46F90225.成员_53F90235 ＝ 3
    .否则
        变量_46F90225.成员_53F90235 ＝ 每组数字中的位数
    .如果结束
    
    变量_46F90225.成员_55F90235 ＝ 取空白文本 (4)
    DLL_GetLocaleInfoA (#<?未知本地类型?>, #<?未知本地类型?>, 变量_46F90225.成员_55F90235, 4)
    变量_46F90225.成员_54F90235 ＝ “”
    变量_45F90225 ＝ DLL_GetNumberFormatA (#<?未知本地类型?>, 0, 欲格式化的数字字符串, 取数据_通用型 (变量_46F90225), #NULL, 0)
    .如果真 (变量_45F90225 ≠ 0)
        变量_47F90225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_45F90225)
        DLL_GetNumberFormatA (#<?未知本地类型?>, 0, 欲格式化的数字字符串, 取数据_通用型 (变量_46F90225), 变量_47F90225, 变量_45F90225)
        变量_48F90225 ＝ 指针到文本 (变量_47F90225)
        LocalFree (变量_47F90225)
    .如果真结束
    返回 (变量_48F90225)

.子程序 文本_到语音, 逻辑型, 公开, 通过微软语音Api将一段字符串转成语音朗读或保存。
    .参数 要发音的数据, 文本型
    .参数 保存文件名, 文本型, 可空, *.wav

    返回 (文本_到语音W (编码_Ansi到Unicode (要发音的数据, ), 编码_Ansi到Unicode (保存文件名, )))

.子程序 文本_到语音W, 逻辑型, 公开, 通过微软语音Api将一段字符串转成语音朗读或保存。
    .参数 要发音的数据, 字节集
    .参数 保存文件名, 字节集, 可空, *.wav
    .局部变量 变量_63080325, 整数型
    .局部变量 变量_64080325, 整数型
    .局部变量 变量_65080325, 整数型
    .局部变量 变量_66080325, 整数型
    .局部变量 变量_67080325, 整数型
    .局部变量 变量_68080325, 逻辑型
    .局部变量 变量_69080325, 整数型

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN10)
        输出调试文本 (#<?未知本地类型?>)
        返回 (假)
    .如果真结束
    CoInitialize (#NULL)
    变量_69080325 ＝ DLL_CoCreateInstance3 (取指针字节集_ (#图片资源_59080328), #NULL, #<?未知本地类型?>, 取指针字节集_ (#图片资源_5A080328), 变量_63080325)
    .如果真 (变量_69080325 ＝ #<?未知本地类型?> 且 变量_63080325 ≠ #NULL)
        .如果 (保存文件名 ≠ { } 且 保存文件名 ≠ { 0, 0 })
            变量_69080325 ＝ DLL_CoCreateInstance3 (取指针字节集_ (#图片资源_5B080328), #NULL, #CLSCTX_INPROC_SERVER, 取指针字节集_ (#图片资源_5C080328), 变量_64080325)
            .如果真 (变量_69080325 ＝ #<?未知本地类型?> 且 变量_64080325 ≠ #NULL)
                变量_69080325 ＝ CallObject (变量_63080325, #<?未知本地类型?>, 取指针整数_ (变量_65080325), , , , , , , , )
                .如果真 (变量_69080325 ＝ #<?未知本地类型?> 且 变量_65080325 ≠ #NULL)
                    变量_66080325 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
                    .如果真 (变量_66080325 ≠ #NULL)
                        变量_69080325 ＝ CallObject (变量_65080325, #<?未知本地类型?>, 变量_66080325, 取指针整数_ (变量_67080325), , , , , , , )
                        .如果真 (变量_69080325 ＝ #<?未知本地类型?> 且 变量_67080325 ≠ #NULL)
                            变量_69080325 ＝ CallObject (变量_64080325, #<?未知本地类型?>, 取指针_字节集型 (保存文件名), #<?未知本地类型?>, 变量_66080325, 变量_67080325, 0, , , , )
                            .如果真 (变量_69080325 ＝ #<?未知本地类型?>)
                                变量_69080325 ＝ CallObject (变量_63080325, #<?未知本地类型?>, 变量_64080325, 1, , , , , , , )
                                .如果真 (变量_69080325 ＝ #<?未知本地类型?>)
                                    变量_69080325 ＝ CallObject (变量_63080325, #<?未知本地类型?>, 取指针_字节集型 (要发音的数据), #<?未知本地类型?>, #NULL, , , , , , )
                                    变量_68080325 ＝ 变量_69080325 ＝ #<?未知本地类型?>
                                .如果真结束
                                变量_69080325 ＝ CallObject (变量_63080325, #<?未知本地类型?>, #NULL, 1, , , , , , , )
                            .如果真结束
                            DLL_CoTaskMemFree (变量_67080325)
                        .如果真结束
                        LocalFree (变量_66080325)
                    .如果真结束
                    SafeRelease (变量_65080325)
                .如果真结束
                SafeRelease (变量_64080325)
            .如果真结束
            
        .否则
            变量_69080325 ＝ CallObject (变量_63080325, #<?未知本地类型?>, 取指针_字节集型 (要发音的数据), #<?未知本地类型?>, #NULL, , , , , , )
            变量_68080325 ＝ 变量_69080325 ＝ #<?未知本地类型?>
        .如果结束
        SafeRelease (变量_63080325)
    .如果真结束
    CoUninitialize ()
    返回 (变量_68080325)

.子程序 文本_分割文本排序_冒泡, 文本型, 公开, 将多行用特定字符间隔的文本按某一列排序。失败返回空。冒泡排序算法，少量数据可以用，量大了建议用快速排序 【afu45】
    .参数 要排序的文本, 文本型, , 原文本
    .参数 行分隔符, 文本型, 可空, 按行分割出每条数据，默认#换行符
    .参数 列分隔符, 文本型, 可空, 按列分割出每个字段数据。如果本参数被省略，默认用字符|分割
    .参数 排序的列, 整数型, 可空, 按哪一列排序，从1开始。如果本参数被省略，默认按第1列排序
    .参数 数据类型, 整数型, 可空, 指定按哪种数据类型来排序，1.文本 2.整数 3.小数 4.日期时间(格式参考 到时间 ())。 默认按 1.文本排序
    .参数 排序方向正向, 逻辑型, 可空, 如果参数值为真，排序将从小到大；如果为假，则为从大到小。如果本参数被省略，将默认为真
    .参数 返回数组, 文本型, 可空 数组, 返回排序后的数组
    .局部变量 变量_8D0D0325, 自定义_7E0D0341, , "0"
    .局部变量 变量_8E0D0325, 自定义_7E0D0341
    .局部变量 变量_8F0D0325, 文本型, , "0"
    .局部变量 变量_900D0325, 文本型, , "0"
    .局部变量 变量_910D0325, 整数型
    .局部变量 变量_920D0325, 整数型
    .局部变量 变量_930D0325, 整数型
    .局部变量 变量_940D0325, 自定义_7E0D0341
    .局部变量 变量_950D0325, 文本型

    
    .如果真 (是否为空 (行分隔符))
        行分隔符 ＝ #换行符
    .如果真结束
    .如果真 (是否为空 (列分隔符))
        列分隔符 ＝ “|”
    .如果真结束
    .如果真 (是否为空 (排序的列))
        排序的列 ＝ 1
    .如果真结束
    .如果真 (是否为空 (数据类型))
        数据类型 ＝ 1
    .如果真结束
    .如果真 (是否为空 (排序方向正向))
        排序方向正向 ＝ 真
    .如果真结束
    
    变量_8F0D0325 ＝ 分割文本 (要排序的文本, 行分隔符, )
    .计次循环首 (取数组成员数 (变量_8F0D0325), 变量_910D0325)
        变量_900D0325 ＝ 分割文本 (变量_8F0D0325 [变量_910D0325], 列分隔符, )
        .如果真 (排序的列 ＜ 1 或 排序的列 ＞ 取数组成员数 (变量_900D0325))
            返回 (“”)
        .如果真结束
        .判断开始 (数据类型 ＝ 2)
            变量_8E0D0325.成员_7F0D0335 ＝ 到整数 (变量_900D0325 [排序的列])
        .判断 (数据类型 ＝ 3)
            变量_8E0D0325.成员_800D0335 ＝ 到小数 (变量_900D0325 [排序的列])
        .判断 (数据类型 ＝ 4)
            变量_8E0D0325.成员_810D0335 ＝ 到时间 (变量_900D0325 [排序的列])
        .默认
            变量_8E0D0325.成员_820D0335 ＝ 变量_900D0325 [排序的列]
            数据类型 ＝ 1
        .判断结束
        变量_8E0D0325.成员_830D0335 ＝ 变量_8F0D0325 [变量_910D0325]
        加入成员 (变量_8D0D0325, 变量_8E0D0325)
    .计次循环尾 ()
    变量_920D0325 ＝ 取数组成员数 (变量_8D0D0325)
    .判断循环首 (变量_920D0325 ＞ 0)
        变量_930D0325 ＝ 0
        .变量循环首 (1, 变量_920D0325 － 1, 1, 变量_910D0325)
            
            .如果真 (选择 (排序方向正向, 数据类型 ＝ 2 且 变量_8D0D0325 [变量_910D0325].成员_7F0D0335 ＞ 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_7F0D0335 或 (数据类型 ＝ 3 且 变量_8D0D0325 [变量_910D0325].成员_800D0335 ＞ 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_800D0335) 或 (数据类型 ＝ 4 且 变量_8D0D0325 [变量_910D0325].成员_810D0335 ＞ 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_810D0335) 或 (数据类型 ＝ 1 且 文本比较 (变量_8D0D0325 [变量_910D0325].成员_820D0335, 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_820D0335, 真) ＞ 0), 数据类型 ＝ 2 且 变量_8D0D0325 [变量_910D0325].成员_7F0D0335 ＜ 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_7F0D0335 或 (数据类型 ＝ 3 且 变量_8D0D0325 [变量_910D0325].成员_800D0335 ＜ 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_800D0335) 或 (数据类型 ＝ 4 且 变量_8D0D0325 [变量_910D0325].成员_810D0335 ＜ 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_810D0335) 或 (数据类型 ＝ 1 且 文本比较 (变量_8D0D0325 [变量_910D0325].成员_820D0335, 变量_8D0D0325 [变量_910D0325 ＋ 1].成员_820D0335, 真) ＜ 0)))
                变量_940D0325 ＝ 变量_8D0D0325 [变量_910D0325]
                变量_8D0D0325 [变量_910D0325] ＝ 变量_8D0D0325 [变量_910D0325 ＋ 1]
                变量_8D0D0325 [变量_910D0325 ＋ 1] ＝ 变量_940D0325
                变量_930D0325 ＝ 变量_910D0325
            .如果真结束
            
        .变量循环尾 ()
        变量_920D0325 ＝ 变量_930D0325
    .判断循环尾 ()
    
    .如果真 (是否为空 (返回数组) ＝ 假)
        重定义数组 (返回数组, 假, 0)
    .如果真结束
    
    .计次循环首 (取数组成员数 (变量_8D0D0325), 变量_910D0325)
        变量_950D0325 ＝ 变量_950D0325 ＋ 变量_8D0D0325 [变量_910D0325].成员_830D0335 ＋ 选择 (取数组成员数 (变量_8D0D0325) ＝ 变量_910D0325, “”, 行分隔符)
        .如果真 (是否为空 (返回数组) ＝ 假)
            加入成员 (返回数组, 变量_8D0D0325 [变量_910D0325].成员_830D0335)
        .如果真结束
        
    .计次循环尾 ()
    
    返回 (变量_950D0325)

.子程序 文本_分割文本排序_快速, 文本型, 公开, 将多行用特定字符间隔的文本按某一列排序。支持文本、整数、小数和日期时间类型。失败返回空。快速排序算法 【afu45】
    .参数 要排序的文本, 文本型, , 原文本
    .参数 行分隔符, 文本型, 可空, 按行分割出每条数据，默认 #换行符
    .参数 列分隔符, 文本型, 可空, 按列分割出每个字段数据。如果本参数被省略，默认用字符|分割
    .参数 排序的列, 整数型, 可空, 按哪一列排序，从1开始。如果本参数被省略，默认按第1列排序
    .参数 数据类型, 整数型, 可空, 指定按哪种数据类型来排序，1.文本 2.整数 3.小数 4.日期时间(格式参考 到时间 ())。 默认按 1.文本排序
    .参数 排序方向正向, 逻辑型, 可空, 如果参数值为真，排序将从小到大；如果为假，则为从大到小。如果本参数被省略，将默认为真
    .参数 返回数组, 文本型, 可空 数组, 返回排序后的数组
    .局部变量 变量_9D0D0325, 自定义_7E0D0341, , "0"
    .局部变量 变量_9E0D0325, 文本型, , "0"
    .局部变量 变量_9F0D0325, 文本型, , "0"
    .局部变量 变量_A00D0325, 整数型
    .局部变量 变量_A10D0325, 文本型
    .局部变量 变量_A20D0325, 自定义_7E0D0341, , "0"
    .局部变量 变量_A30D0325, 整数型
    .局部变量 变量_A40D0325, 整数型
    .局部变量 变量_A50D0325, 自定义_7E0D0341
    .局部变量 变量_A60D0325, 整数型
    .局部变量 变量_A70D0325, 整数型
    .局部变量 变量_A80D0325, 整数型
    .局部变量 变量_A90D0325, 自定义_7E0D0341

    
    .如果真 (要排序的文本 ＝ “”)
        返回 (“”)
    .如果真结束
    .如果真 (是否为空 (行分隔符))
        行分隔符 ＝ #换行符
    .如果真结束
    .如果真 (是否为空 (列分隔符))
        列分隔符 ＝ “|”
    .如果真结束
    .如果真 (是否为空 (排序的列))
        排序的列 ＝ 1
    .如果真结束
    .如果真 (是否为空 (数据类型))
        数据类型 ＝ 1
    .如果真结束
    .如果真 (是否为空 (排序方向正向))
        排序方向正向 ＝ 真
    .如果真结束
    
    变量_9E0D0325 ＝ 分割文本 (要排序的文本, 行分隔符, )
    .计次循环首 (取数组成员数 (变量_9E0D0325), 变量_A00D0325)
        变量_9F0D0325 ＝ 分割文本 (变量_9E0D0325 [变量_A00D0325], 列分隔符, )
        .如果真 (排序的列 ＜ 1 或 排序的列 ＞ 取数组成员数 (变量_9F0D0325))
            返回 (“”)
        .如果真结束
        .判断开始 (数据类型 ＝ 2)
            变量_A50D0325.成员_7F0D0335 ＝ 到整数 (变量_9F0D0325 [排序的列])
        .判断 (数据类型 ＝ 3)
            变量_A50D0325.成员_800D0335 ＝ 到小数 (变量_9F0D0325 [排序的列])
        .判断 (数据类型 ＝ 4)
            变量_A50D0325.成员_810D0335 ＝ 到时间 (变量_9F0D0325 [排序的列])
        .默认
            变量_A50D0325.成员_820D0335 ＝ 变量_9F0D0325 [排序的列]
            数据类型 ＝ 1
        .判断结束
        变量_A50D0325.成员_830D0335 ＝ 变量_9E0D0325 [变量_A00D0325]
        加入成员 (变量_9D0D0325, 变量_A50D0325)
    .计次循环尾 ()
    
    变量_A30D0325 ＝ 取数组成员数 (变量_9D0D0325)
    .计次循环首 (变量_A30D0325, 变量_A00D0325)
        变量_A70D0325 ＝ 1
        变量_A60D0325 ＝ 取数组成员数 (变量_A20D0325)
        变量_A50D0325 ＝ 变量_9D0D0325 [变量_A00D0325]
        .判断开始 (变量_A00D0325 ＝ 1)
            插入成员 (变量_A20D0325, 1, 变量_A50D0325)
            到循环尾 ()
        .判断 (数据类型 ＝ 1 且 文本比较 (变量_A50D0325.成员_820D0335, 变量_A20D0325 [变量_A60D0325].成员_820D0335, 真) ≥ 0 或 (数据类型 ＝ 2 且 变量_A50D0325.成员_7F0D0335 ≥ 变量_A20D0325 [变量_A60D0325].成员_7F0D0335) 或 (数据类型 ＝ 3 且 变量_A50D0325.成员_800D0335 ≥ 变量_A20D0325 [变量_A60D0325].成员_800D0335) 或 (数据类型 ＝ 4 且 变量_A50D0325.成员_810D0335 ＞ 变量_A20D0325 [变量_A60D0325].成员_810D0335))
            插入成员 (变量_A20D0325, 变量_A60D0325 ＋ 1, 变量_A50D0325)
            到循环尾 ()
        .判断 (数据类型 ＝ 1 且 文本比较 (变量_A50D0325.成员_820D0335, 变量_A20D0325 [1].成员_820D0335, 真) ≤ 0 或 (数据类型 ＝ 2 且 变量_A50D0325.成员_7F0D0335 ≤ 变量_A20D0325 [1].成员_7F0D0335) 或 (数据类型 ＝ 3 且 变量_A50D0325.成员_800D0335 ≤ 变量_A20D0325 [1].成员_800D0335) 或 (数据类型 ＝ 4 且 变量_A50D0325.成员_810D0335 ≤ 变量_A20D0325 [1].成员_810D0335))
            插入成员 (变量_A20D0325, 1, 变量_A50D0325)
            到循环尾 ()
        .默认
            
        .判断结束
        
        .判断循环首 (变量_A70D0325 ＜ 变量_A60D0325 － 1)
            变量_A80D0325 ＝ (变量_A70D0325 ＋ 变量_A60D0325) ＼ 2
            变量_A90D0325 ＝ 变量_A20D0325 [变量_A80D0325]
            .如果真 (数据类型 ＝ 1 且 变量_A50D0325.成员_820D0335 ＝ 变量_A90D0325.成员_820D0335 或 (数据类型 ＝ 2 且 变量_A50D0325.成员_7F0D0335 ＝ 变量_A90D0325.成员_7F0D0335) 或 (数据类型 ＝ 3 且 变量_A50D0325.成员_800D0335 ＝ 变量_A90D0325.成员_800D0335) 或 (数据类型 ＝ 4 且 变量_A50D0325.成员_810D0335 ＝ 变量_A90D0325.成员_810D0335))
                变量_A70D0325 ＝ 变量_A80D0325
                跳出循环 ()
            .如果真结束
            .如果 (数据类型 ＝ 1 且 变量_A50D0325.成员_820D0335 ＜ 变量_A90D0325.成员_820D0335 或 (数据类型 ＝ 2 且 变量_A50D0325.成员_7F0D0335 ＜ 变量_A90D0325.成员_7F0D0335) 或 (数据类型 ＝ 3 且 变量_A50D0325.成员_800D0335 ＜ 变量_A90D0325.成员_800D0335) 或 (数据类型 ＝ 4 且 变量_A50D0325.成员_810D0335 ＜ 变量_A90D0325.成员_810D0335))
                变量_A60D0325 ＝ 变量_A80D0325
            .否则
                变量_A70D0325 ＝ 变量_A80D0325
            .如果结束
            
        .判断循环尾 ()
        变量_A40D0325 ＝ 变量_A70D0325 ＋ 1
        插入成员 (变量_A20D0325, 变量_A40D0325, 变量_A50D0325)
    .计次循环尾 ()
    
    .如果真 (是否为空 (返回数组) ＝ 假)
        重定义数组 (返回数组, 假, 0)
    .如果真结束
    
    .如果 (排序方向正向)
        .计次循环首 (取数组成员数 (变量_A20D0325), 变量_A00D0325)
            变量_A10D0325 ＝ 变量_A10D0325 ＋ 变量_A20D0325 [变量_A00D0325].成员_830D0335 ＋ 选择 (取数组成员数 (变量_9D0D0325) ＝ 变量_A00D0325, “”, 行分隔符)
            .如果真 (是否为空 (返回数组) ＝ 假)
                加入成员 (返回数组, 变量_A20D0325 [变量_A00D0325].成员_830D0335)
            .如果真结束
            
        .计次循环尾 ()
    .否则
        
        .计次循环首 (取数组成员数 (变量_A20D0325), 变量_A00D0325)
            变量_A10D0325 ＝ 变量_A10D0325 ＋ 变量_A20D0325 [变量_A30D0325 － 变量_A00D0325 ＋ 1].成员_830D0335 ＋ 选择 (取数组成员数 (变量_9D0D0325) ＝ 变量_A00D0325, “”, 行分隔符)
            .如果真 (是否为空 (返回数组) ＝ 假)
                加入成员 (返回数组, 变量_A20D0325 [变量_A00D0325].成员_830D0335)
            .如果真结束
            
        .计次循环尾 ()
    .如果结束
    
    返回 (变量_A10D0325)

.子程序 文本_取代码, 字节型, 公开, 返回文本中指定位置处字符的代码，命令本身不判断文本长度。
    .参数 欲取字符代码的文本, 文本型
    .参数 欲取其代码的字符位置, 整数型, , 1为首位置，2为第2个位置，如此类推。

    置入代码 ({ 139, 69, 12, 72, 107, 200, 1, 139, 85, 8, 139, 18, 51, 192, 138, 4, 10, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 文本_取代码1, 整数型, 公开, 返回文本中指定位置处字符的代码，命令本身不判断文本长度。
    .参数 欲取字符代码的文本, 文本型
    .参数 欲取其代码的字符位置, 整数型, , 1为首位置，2为第2个位置，如此类推。

    置入代码 ({ 139, 69, 12, 72, 107, 200, 1, 139, 85, 8, 139, 18, 51, 192, 102, 139, 4, 17, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 文本_取代码W, 整数型, 公开, 返回文本中指定位置处字符的代码，命令本身不判断文本长度。
    .参数 欲取字符代码的文本, 字节集
    .参数 欲取其代码的字符位置, 整数型, , 1为首位置，2为第2个位置，如此类推。

    置入代码 ({ 139, 69, 12, 72, 107, 200, 2, 139, 85, 8, 139, 18, 131, 194, 8, 51, 192, 102, 139, 4, 17, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    
    返回 (0)

