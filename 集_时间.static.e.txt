.版本 2

.程序集 集_时间
.程序集变量 类变量_8ADB0215, 文本型, , "0"

.子程序 时间_秒到时分秒格式, 文本型, 公开, 返回指定格式的时间文本
    .参数 秒, 整数型
    .参数 格式, 文本型, 可空, 默认:d天h小时m分s秒
    .参数 自动补零, 逻辑型, 可空, 不足2位数自动前面补0
    .局部变量 变量_20D60225, 整数型
    .局部变量 变量_21D60225, 整数型
    .局部变量 变量_22D60225, 整数型
    .局部变量 变量_23D60225, 整数型
    .局部变量 变量_3FD70225, 整数型
    .局部变量 变量_8DDE0225, 文本型

    变量_23D60225 ＝ 秒
    .如果真 (是否为空 (格式) 或 格式 ＝ “”)
        格式 ＝ “d天h小时m分s秒”
    .如果真结束
    
    变量_20D60225 ＝ 变量_23D60225 ÷ 86400
    变量_21D60225 ＝ 变量_23D60225 ％ 86400 ÷ 3600
    变量_22D60225 ＝ 变量_23D60225 ％ 86400 ％ 3600 ÷ 60
    变量_23D60225 ＝ 变量_23D60225 ％ 86400 ％ 3600 ％ 60
    
    变量_3FD70225 ＝ 倒找文本 (格式, “d”, , 假)
    .如果真 (变量_3FD70225 ≠ -1)
        变量_8DDE0225 ＝ 到文本 (变量_20D60225)
        .如果真 (自动补零)
            变量_8DDE0225 ＝ 文本_自动补零 (变量_8DDE0225, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 变量_3FD70225, 1, 变量_8DDE0225)
    .如果真结束
    
    变量_3FD70225 ＝ 倒找文本 (格式, “h”, , 假)
    .如果真 (变量_3FD70225 ≠ -1)
        变量_8DDE0225 ＝ 到文本 (变量_21D60225)
        .如果真 (自动补零)
            变量_8DDE0225 ＝ 文本_自动补零 (变量_8DDE0225, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 变量_3FD70225, 1, 变量_8DDE0225)
    .如果真结束
    
    变量_3FD70225 ＝ 倒找文本 (格式, “m”, , 假)
    .如果真 (变量_3FD70225 ≠ -1)
        变量_8DDE0225 ＝ 到文本 (变量_22D60225)
        .如果真 (自动补零)
            变量_8DDE0225 ＝ 文本_自动补零 (变量_8DDE0225, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 变量_3FD70225, 1, 变量_8DDE0225)
    .如果真结束
    
    变量_3FD70225 ＝ 倒找文本 (格式, “s”, , 假)
    .如果真 (变量_3FD70225 ≠ -1)
        变量_8DDE0225 ＝ 到文本 (变量_23D60225)
        .如果真 (自动补零)
            变量_8DDE0225 ＝ 文本_自动补零 (变量_8DDE0225, 2)
        .如果真结束
        格式 ＝ 文本替换 (格式, 变量_3FD70225, 1, 变量_8DDE0225)
    .如果真结束
    
    返回 (格式)

.子程序 时间_十八位时间戳转北京, 日期时间型, 公开, 将【18位的时间戳】转换成【北京标准时间】
    .参数 十八位时间戳, 文本型, , 要转换的18位时间时间戳
    .局部变量 变量_63BA0225, 长整数型

    
    变量_63BA0225 ＝ (到长整数 (十八位时间戳) － 到长整数 (“621355968000000000”)) ÷ 10000
    返回 (时间_格林威治转北京 (变量_63BA0225))

.子程序 时间_北京转十八位时间戳, 文本型, 公开, 将【北京标准时间】转换成【18位的时间戳】
    .参数 时间, 日期时间型, , 要转换的时间
    .局部变量 变量_66BA0225, 长整数型
    .局部变量 变量_67BA0225, 长整数型

    
    变量_66BA0225 ＝ 到长整数 (时间_到时间戳 (时间, 假, ))
    变量_67BA0225 ＝ 变量_66BA0225 × 10000 ＋ 到长整数 (“621355968000000000”)
    返回 (到文本 (变量_67BA0225))

.子程序 时间_取时间间隔, 文本型, 公开, 返回一个文本，表示“时间1”减去“时间2”之后间隔的天，时，分，秒。返回示例：3天13时56分27秒
    .参数 时间1, 日期时间型
    .参数 时间2, 日期时间型
    .局部变量 变量_91B90225, 整数型
    .局部变量 变量_92B90225, 整数型
    .局部变量 变量_93B90225, 整数型
    .局部变量 变量_94B90225, 整数型
    .局部变量 变量_95B90225, 整数型
    .局部变量 变量_96B90225, 整数型
    .局部变量 变量_97B90225, 文本型

    
    变量_91B90225 ＝ 取时间间隔 (时间1, 时间2, 8)
    .如果真 (变量_91B90225 ＜ 0)
        变量_91B90225 ＝ 变量_91B90225 × -1
    .如果真结束
    变量_92B90225 ＝ 变量_91B90225 ％ 86400
    变量_93B90225 ＝ (变量_91B90225 － 变量_92B90225) ÷ 86400
    变量_91B90225 ＝ 变量_92B90225
    变量_92B90225 ＝ 变量_91B90225 ％ 3600
    变量_94B90225 ＝ (变量_91B90225 － 变量_92B90225) ÷ 3600
    变量_91B90225 ＝ 变量_92B90225
    变量_92B90225 ＝ 变量_91B90225 ％ 60
    变量_95B90225 ＝ (变量_91B90225 － 变量_92B90225) ÷ 60
    变量_96B90225 ＝ 变量_92B90225
    .如果真 (变量_93B90225 ≠ 0)
        变量_97B90225 ＝ 到文本 (变量_93B90225) ＋ “天”
    .如果真结束
    .如果真 (变量_94B90225 ≠ 0)
        变量_97B90225 ＝ 变量_97B90225 ＋ 到文本 (变量_94B90225) ＋ “时”
    .如果真结束
    .如果真 (变量_95B90225 ≠ 0)
        变量_97B90225 ＝ 变量_97B90225 ＋ 到文本 (变量_95B90225) ＋ “分”
    .如果真结束
    .如果真 (变量_96B90225 ≠ 0)
        变量_97B90225 ＝ 变量_97B90225 ＋ 到文本 (变量_96B90225) ＋ “秒”
    .如果真结束
    返回 (变量_97B90225)

.子程序 时间_转为GMT格式, 文本型, 公开, 将日期时间型数据转换为GMT格式 Greenwich Mean Time
    .参数 待转换时间, 日期时间型
    .局部变量 变量_88760125, 整数型
    .局部变量 变量_89760125, 文本型

    变量_88760125 ＝ 取星期几 (待转换时间)
    .判断开始 (变量_88760125 ＝ 1)
        变量_89760125 ＝ “Sun, ”
    .判断 (变量_88760125 ＝ 2)
        变量_89760125 ＝ “Mon, ”
    .判断 (变量_88760125 ＝ 3)
        变量_89760125 ＝ “Tue, ”
    .判断 (变量_88760125 ＝ 4)
        变量_89760125 ＝ “Wed, ”
    .判断 (变量_88760125 ＝ 5)
        变量_89760125 ＝ “Thu, ”
    .判断 (变量_88760125 ＝ 6)
        变量_89760125 ＝ “Fri, ”
    .判断 (变量_88760125 ＝ 7)
        变量_89760125 ＝ “Sat, ”
    .默认
        
    .判断结束
    变量_89760125 ＝ 变量_89760125 ＋ 到文本 (取日 (待转换时间)) ＋ “-”
    变量_88760125 ＝ 取月份 (待转换时间)
    .判断开始 (变量_88760125 ＝ 1)
        变量_89760125 ＝ 变量_89760125 ＋ “Jan” ＋ “-”
    .判断 (变量_88760125 ＝ 2)
        变量_89760125 ＝ 变量_89760125 ＋ “Feb” ＋ “-”
    .判断 (变量_88760125 ＝ 3)
        变量_89760125 ＝ 变量_89760125 ＋ “Mar” ＋ “-”
    .判断 (变量_88760125 ＝ 4)
        变量_89760125 ＝ 变量_89760125 ＋ “Apr” ＋ “-”
    .判断 (变量_88760125 ＝ 5)
        变量_89760125 ＝ 变量_89760125 ＋ “May” ＋ “-”
    .判断 (变量_88760125 ＝ 6)
        变量_89760125 ＝ 变量_89760125 ＋ “Jun” ＋ “-”
    .判断 (变量_88760125 ＝ 7)
        变量_89760125 ＝ 变量_89760125 ＋ “Jul” ＋ “-”
    .判断 (变量_88760125 ＝ 8)
        变量_89760125 ＝ 变量_89760125 ＋ “Aug” ＋ “-”
    .判断 (变量_88760125 ＝ 9)
        变量_89760125 ＝ 变量_89760125 ＋ “Sep” ＋ “-”
    .判断 (变量_88760125 ＝ 10)
        变量_89760125 ＝ 变量_89760125 ＋ “Oct” ＋ “-”
    .判断 (变量_88760125 ＝ 11)
        变量_89760125 ＝ 变量_89760125 ＋ “Nov” ＋ “-”
    .判断 (变量_88760125 ＝ 12)
        变量_89760125 ＝ 变量_89760125 ＋ “Dec” ＋ “-”
    .默认
        
    .判断结束
    
    
    
    变量_89760125 ＝ 变量_89760125 ＋ 到文本 (取年份 (待转换时间)) ＋ “ ” ＋ 到文本 (内部_补全 (取小时 (待转换时间))) ＋ “:” ＋ 到文本 (内部_补全 (取分钟 (待转换时间))) ＋ “:” ＋ 到文本 (内部_补全 (取秒 (待转换时间))) ＋ “ GMT”
    返回 (变量_89760125)

.子程序 内部_补全, 文本型
    .参数 变量_699D0225, 整数型
    .局部变量 变量_6E9D0225, 文本型

    .如果真 (变量_699D0225 ＜ 10)
        变量_6E9D0225 ＝ “0” ＋ 到文本 (变量_699D0225)
        返回 (变量_6E9D0225)
    .如果真结束
    返回 (到文本 (变量_699D0225))

.子程序 时间_转为GMT格式1, 文本型, 公开, 感谢会员shituo提供代码，将日期时间型数据转换为GMT格式 Greenwich Mean Time
    .参数 待转换时间, 日期时间型, 可空, 可为空，默认即现行时间。
    .局部变量 变量_0DD20125, 文本型
    .局部变量 变量_0ED20125, 精易_时间
    .局部变量 变量_13D20125, 逻辑型

    .如果 (是否为空 (待转换时间))
        
        DLL_GetSystemTime (变量_0ED20125)
    .否则
        
        
        
        
        
        
        DLL_VariantTimeToSystemTime (待转换时间, 变量_0ED20125)
    .如果结束
    
    变量_0DD20125 ＝ 取空白文本 (128)
    变量_13D20125 ＝ DLL_InternetTimeFromSystemTime (变量_0ED20125, 0, 变量_0DD20125, 128)
    返回 (选择 (变量_13D20125, 变量_0DD20125, “”))

.子程序 时间_转为GMT格式2, 文本型, 公开, 将日期时间型数据转换为GMT格式 Greenwich Mean Time
    .参数 Time, 日期时间型, 可空, 可空，默认即现行时间。
    .局部变量 变量_2BD20125, 逻辑型
    .局部变量 变量_2CD20125, 字节集
    .局部变量 变量_2DD20125, 精易_时间
    .局部变量 变量_2ED20125, 文本型

    .如果 (是否为空 (Time))
        
        DLL_GetSystemTime (变量_2DD20125)
    .否则
        变量_2DD20125.年 ＝ 取年份 (Time)
        变量_2DD20125.月 ＝ 取月份 (Time)
        变量_2DD20125.日 ＝ 取日 (Time)
        变量_2DD20125.时 ＝ 取小时 (Time)
        变量_2DD20125.分 ＝ 取分钟 (Time)
        变量_2DD20125.秒 ＝ 取秒 (Time)
        变量_2DD20125.星期 ＝ 取星期几 (Time)
    .如果结束
    
    变量_2CD20125 ＝ 取空白字节集 (100)
    变量_2BD20125 ＝ DLL_WinHttpTimeFromSystemTime (变量_2DD20125, 变量_2CD20125)
    变量_2ED20125 ＝ 编码_Unicode到Ansi (变量_2CD20125)
    返回 (变量_2ED20125)

.子程序 时间_转为GMT格式3, 文本型, 公开, 将日期时间型数据转换为GMT格式 Greenwich Mean Time
    .参数 lpDateTime, 日期时间型, 可空
    .局部变量 变量_06D20225, 精易_时间
    .局部变量 变量_07D20225, 文本型
    .局部变量 变量_08D20225, 文本型

    
    .判断开始 (是否为空 (lpDateTime))
        DLL_GetSystemTime (变量_06D20225)
    .判断 (DLL_VariantTimeToSystemTime (lpDateTime, 变量_06D20225) ≠ 1)
        返回 (“”)
    .默认
        
    .判断结束
    
    变量_07D20225 ＝ 取空白文本 (50)
    变量_08D20225 ＝ 取空白文本 (24)
    GetDateFormatA (#<?未知本地类型?>, 0, 变量_06D20225, “ddd, dd MMM yyyy”, 变量_07D20225, 50)
    GetTimeFormatA (#<?未知本地类型?>, 0, 变量_06D20225, “HH:mm:ss GMT”, 变量_08D20225, 24)
    返回 (变量_07D20225 ＋ “ ” ＋ 变量_08D20225)

.子程序 时间_GMT转为时间, 日期时间型, 公开, 感谢会员shituo提供代码，将GMT文本时间 转换成日期时间型
    .参数 GMT时间, 文本型
    .参数 东八区时差, 逻辑型, 可空, 默认为真
    .局部变量 变量_10D20125, 精易_时间
    .局部变量 变量_13D40225, 日期时间型

    DLL_InternetTimeToSystemTime (GMT时间, 变量_10D20125, 0)
    变量_13D40225 ＝ 指定时间 (变量_10D20125.年, 变量_10D20125.月, 变量_10D20125.日, 变量_10D20125.时, 变量_10D20125.分, 变量_10D20125.秒)
    .如果真 (是否为空 (东八区时差) 或 东八区时差)
        变量_13D40225 ＝ 增减时间 (变量_13D40225, #小时, 8)
    .如果真结束
    返回 (变量_13D40225)

.子程序 时间_GMT转为时间1, 日期时间型, 公开, 将GMT文本时间 转换成日期时间型
    .参数 GMT时间, 文本型
    .参数 东八区时差, 逻辑型, 可空, 默认为真
    .局部变量 变量_46D20125, 逻辑型
    .局部变量 变量_47D20125, 字节集
    .局部变量 变量_48D20125, 精易_时间
    .局部变量 变量_49D20125, 日期时间型

    变量_47D20125 ＝ 编码_Ansi到Unicode (GMT时间)
    变量_46D20125 ＝ DLL_WinHttpTimeToSystemTime (变量_47D20125, 变量_48D20125)
    变量_49D20125 ＝ 指定时间 (变量_48D20125.年, 变量_48D20125.月, 变量_48D20125.日, 变量_48D20125.时, 变量_48D20125.分, 变量_48D20125.秒)
    .如果真 (是否为空 (东八区时差) 或 东八区时差)
        变量_49D20125 ＝ 增减时间 (变量_49D20125, #小时, 8)
    .如果真结束
    返回 (变量_49D20125)

.子程序 时间_取现行时间戳, 文本型, 公开, 生成秒或毫秒时间戳，默认生成毫秒时间戳。
    .参数 是否取十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回
    .局部变量 变量_DDCE0125, 精易_时间
    .局部变量 变量_DECE0125, 文本型
    .局部变量 变量_DFCE0125, 文本型
    .局部变量 变量_E0CE0125, 文本型

    GetLocalTime (变量_DDCE0125)
    变量_DFCE0125 ＝ 文本_自动补零 (到文本 (变量_DDCE0125.毫), 3)
    变量_E0CE0125 ＝ 到文本 (到长整数 (取时间间隔 (取现行时间 (), 到时间 (“1970-01-01 08:00:00”), #秒)))
    变量_DECE0125 ＝ 变量_E0CE0125 ＋ 变量_DFCE0125
    
    .判断开始 (是否取十位时间戳)
        变量_DECE0125 ＝ 取文本左边 (变量_DECE0125, 10)
        .判断循环首 (取文本长度 (变量_DECE0125) ＜ 10)
            变量_DECE0125 ＝ 变量_DECE0125 ＋ “0”
        .判断循环尾 ()
        返回 (变量_DECE0125)
    .默认
        
        .判断循环首 (取文本长度 (变量_DECE0125) ＜ 13)
            变量_DECE0125 ＝ 变量_DECE0125 ＋ “0”
        .判断循环尾 ()
        返回 (变量_DECE0125)
    .判断结束
    

.子程序 时间_取现行时间戳1, 长整数型, 公开, 生成秒或毫秒时间戳
    .参数 精确到毫秒, 逻辑型, 可空, 默认为假 精确到秒10位数 精确到毫秒13位数
    .局部变量 变量_A5E40225, 长整数型

    
    DLL_GetSystemTimeAsFileTime (取指针地址_长整数型 (变量_A5E40225))
    变量_A5E40225 ＝ FileTimeToUnixTime (变量_A5E40225)
    .如果 (精确到毫秒)
        变量_A5E40225 ＝ 变量_A5E40225 ÷ 10000
    .否则
        变量_A5E40225 ＝ 变量_A5E40225 ÷ 10000000
    .如果结束
    返回 (变量_A5E40225)

.子程序 时间_取北京时间戳, 文本型, 公开, 生成秒或毫秒时间戳，默认生成毫秒时间戳。
    .参数 是否取十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回
    .局部变量 变量_8A790225, 日期时间型

    变量_8A790225 ＝ 时间_取北京时间 ()
    返回 (时间_到时间戳 (变量_8A790225, 是否取十位时间戳, ))

.子程序 时间_取北京时间, 日期时间型, 公开, 获取北京时间，超稳定，长久不失效，代码提供者：aqwvwv
    .参数 参_网址, 文本型, 可空
    .局部变量 变量_A7810225, 文本型
    .局部变量 变量_A8810225, 日期时间型

    .如果真 (是否为空 (参_网址))
        参_网址 ＝ “http://www.baidu.com/”
    .如果真结束
    网页_访问_对象 (参_网址, 2, , , , , 变量_A7810225, , , , , , , , , , , , )
    变量_A7810225 ＝ 文本_取出中间文本 (变量_A7810225, “Date:”, #换行符)
    变量_A8810225 ＝ 时间_GMT转为时间 (变量_A7810225)
    返回 (变量_A8810225)

.子程序 时间_到时间戳, 文本型, 公开, 把指定日期时间转换为秒或毫秒时间戳,默认生成毫秒时间戳。
    .参数 欲处理的时间, 日期时间型, 可空, 可为空，默认为现行时间。此处参数影响最终结果，如果含毫秒且毫秒不要为0，请留空！
    .参数 十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回
    .参数 是否补满10位, 逻辑型, 可空, 如果参数为真，则保证一定取出至少10位，如果不足10位，在前面补0。如果为假，则直接取出。
    .局部变量 变量_65F10225, 精易_时间
    .局部变量 变量_67F10225, 日期时间型
    .局部变量 变量_69F10225, 文本型
    .局部变量 变量_68F10225, 文本型

    GetLocalTime (变量_65F10225)
    .如果 (是否为空 (欲处理的时间))
        SystemTimeToVariantTime (变量_65F10225, 变量_67F10225)
    .否则
        变量_67F10225 ＝ 欲处理的时间
    .如果结束
    变量_69F10225 ＝ 到文本 (取时间间隔 (变量_67F10225, 到时间 (“1970-01-01 08:00:00”), #秒))
    .如果真 (是否补满10位)
        变量_69F10225 ＝ 文本_自动补零 (变量_69F10225, 10)
    .如果真结束
    .如果真 (十位时间戳)
        返回 (取文本左边 (变量_69F10225, 10))
    .如果真结束
    .如果 (是否为空 (欲处理的时间))
        变量_68F10225 ＝ 文本_自动补零 (到文本 (变量_65F10225.毫), 3)
    .否则
        变量_68F10225 ＝ “000”
    .如果结束
    返回 (变量_69F10225 ＋ 变量_68F10225)

.子程序 时间_到时间戳1, 文本型, 公开, 时间 => Unix时间戳
    .参数 时间, 日期时间型, 可空
    .参数 时间单位, 整数型, 可空, 秒、毫秒
    .局部变量 变量_4A080325, 精易_时间
    .局部变量 变量_4C080325, 长整数型

    .如果真 (是否为空 (时间))
        GetLocalTime (变量_4A080325)
        SystemTimeToVariantTime (变量_4A080325, 时间)
    .如果真结束
    变量_4C080325 ＝ 到长整数 (VariantTimeToQuadPart (时间) － VariantTimeToQuadPart ([1970年1月1日8时]))
    .如果 (时间单位 ＝ 1)
        变量_4C080325 ＝ 到长整数 (变量_4C080325 ÷ 10000)
    .否则
        变量_4C080325 ＝ 到长整数 (变量_4C080325 ÷ 10000000)
    .如果结束
    返回 (到文本 (变量_4C080325))

.子程序 时间_取随机时间戳, 文本型, 公开, 生成一个随机的时间戳。如：0.842703761170252
    .局部变量 变量_E1CE0125, 对象
    .局部变量 变量_E2CE0125, 文本型

    线程_初始化COM库 ()
    变量_E1CE0125.创建 (“ScriptControl”, )
    变量_E1CE0125.写属性 (“Language”, “JScript”)
    变量_E1CE0125.数值方法 (“ExecuteStatement”, “function time(){return Math.random().toString()}”)
    变量_E2CE0125 ＝ 变量_E1CE0125.文本方法 (“Run”, “time”)
    变量_E1CE0125.清除 ()
    线程_取消COM库 ()
    返回 (变量_E2CE0125)

.子程序 时间_时间戳转文本, 文本型, 公开, 把一个13位的时间戳，如：1325252169718 转成 2011-12-30 21:36:09
    .参数 时间戳, 文本型
    .参数 小时制式, 整数型, 可空, 留空或为0取当前系统时间制式，1表示12小时制，2表示24小时制; 注: 本参数只对10位时间戳有效
    .局部变量 变量_D3F00125, 对象
    .局部变量 变量_D4F00125, 文本型
    .局部变量 变量_D6F00125, 日期时间型
    .局部变量 变量_E1E70225, 整数型

    .如果 (取文本长度 (时间戳) ＝ 10)
        变量_D6F00125 ＝ 增减时间 (到时间 (“1970.01.01 08:00:00”), #秒, 到整数 (时间戳))
        .如果 (小时制式 ≤ 0 或 小时制式 ＞ 2)
            变量_E1E70225 ＝ 时间_取制式 ()
        .否则
            变量_E1E70225 ＝ 小时制式 － 1
        .如果结束
        返回 (选择 (变量_E1E70225 ＝ 0, 时间_格式化 (变量_D6F00125, “yyyy-MM-dd ”, “hh:mm:ss”, ), 时间_格式化 (变量_D6F00125, “yyyy-MM-dd ”, “HH:mm:ss”, )))
    .否则
        CoInitialize (0)
        .如果真 (变量_D3F00125.创建 (“ScriptControl”, ))
            变量_D3F00125.写属性 (“Language”, “JScript”)
            变量_D3F00125.数值方法 (“ExecuteStatement”, #<?未知本地类型?> ＋ “var Timer=new Date();Timer.setTime('” ＋ 时间戳 ＋ “');”)
            变量_D4F00125 ＝ 变量_D3F00125.文本方法 (“Eval”, “Timer.format('yyyy-MM-dd hh:mm:ss')”, )
            变量_D3F00125.清除 ()
        .如果真结束
        CoUninitialize ()
        返回 (变量_D4F00125)
    .如果结束
    

.子程序 时间_时间戳转文本1, 文本型, 公开, Unix时间戳 => 时间
    .参数 Unix时间戳, 文本型
    .参数 时间单位, 整数型, 可空, 秒、毫秒
    .局部变量 变量_55080325, 长整数型
    .局部变量 变量_56080325, 日期时间型

    .如果 (时间单位 ＝ 1)
        变量_55080325 ＝ VariantTimeToQuadPart ([1970年1月1日8时]) ＋ 到长整数 (到长整数 (Unix时间戳) × 10000)
    .否则
        变量_55080325 ＝ VariantTimeToQuadPart ([1970年1月1日8时]) ＋ 到长整数 (到长整数 (Unix时间戳) × 10000000)
    .如果结束
    变量_56080325 ＝ QuadPartToVariantTime (变量_55080325)
    返回 (时间_到文本 (变量_56080325, 1, , 2))

.子程序 时间_取公历节日, 文本型, 公开, 根据公历年月日,返回公历的节日,某些节日需要有年代才能确定是星期几.
    .参数 公历年, 整数型, 可空
    .参数 公历月, 整数型, 可空
    .参数 公历日, 整数型, 可空
    .局部变量 变量_94760125, 文本型
    .局部变量 变量_95760125, 整数型

    变量_95760125 ＝ 取星期几 (到时间 (到文本 (公历年) ＋ “年” ＋ 到文本 (公历月) ＋ “月” ＋ 到文本 (公历日) ＋ “日”))
    变量_94760125 ＝ “”
    .如果真 (公历月 ＝ 1 且 公历日 ＝ 1)
        变量_94760125 ＝ “元旦”
    .如果真结束
    .如果真 (公历月 ＝ 2 且 公历日 ＝ 14)
        变量_94760125 ＝ “情人节”
    .如果真结束
    .如果真 (公历月 ＝ 3 且 公历日 ＝ 5)
        变量_94760125 ＝ “雷峰纪念日”
    .如果真结束
    .如果真 (公历月 ＝ 3 且 公历日 ＝ 8)
        变量_94760125 ＝ “国际劳动妇女节”
    .如果真结束
    .如果真 (公历月 ＝ 3 且 公历日 ＝ 12)
        变量_94760125 ＝ “植树节”
    .如果真结束
    .如果真 (公历月 ＝ 3 且 公历日 ＝ 15)
        变量_94760125 ＝ “国际消费者权益日”
    .如果真结束
    .如果真 (公历月 ＝ 3 且 公历日 ＝ 23)
        变量_94760125 ＝ “国际气象日”
    .如果真结束
    .如果真 (公历月 ＝ 3 且 公历日 ＝ 31)
        变量_94760125 ＝ “安全教育日”
    .如果真结束
    .如果真 (公历月 ＝ 4 且 公历日 ＝ 1)
        变量_94760125 ＝ “愚人节”
    .如果真结束
    .如果真 (公历月 ＝ 4 且 公历日 ＝ 7)
        变量_94760125 ＝ “世界卫生日”
    .如果真结束
    .如果真 (公历月 ＝ 4 且 公历日 ＝ 22)
        变量_94760125 ＝ “世界地球日”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 1)
        变量_94760125 ＝ “国际劳动节”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 4)
        变量_94760125 ＝ “青年节”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 8)
        变量_94760125 ＝ “世界红十字日”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 12)
        变量_94760125 ＝ “国际护士节”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 15)
        变量_94760125 ＝ “国际家庭日”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 16)
        变量_94760125 ＝ “全国助残日”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 17)
        变量_94760125 ＝ “国际电信日”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＝ 31)
        变量_94760125 ＝ “世界无烟日”
    .如果真结束
    .如果真 (公历月 ＝ 6 且 公历日 ＝ 1)
        变量_94760125 ＝ “国际儿童节”
    .如果真结束
    .如果真 (公历月 ＝ 6 且 公历日 ＝ 5)
        变量_94760125 ＝ “国际环境保护日”
    .如果真结束
    .如果真 (公历月 ＝ 6 且 公历日 ＝ 6)
        变量_94760125 ＝ “全国爱眼日”
    .如果真结束
    .如果真 (公历月 ＝ 6 且 公历日 ＝ 25)
        变量_94760125 ＝ “全国土地日”
    .如果真结束
    .如果真 (公历月 ＝ 6 且 公历日 ＝ 26)
        变量_94760125 ＝ “国际禁毒日”
    .如果真结束
    .如果真 (公历月 ＝ 7 且 公历日 ＝ 1)
        变量_94760125 ＝ “党的生日、香港回归日”
    .如果真结束
    .如果真 (公历月 ＝ 7 且 公历日 ＝ 7)
        变量_94760125 ＝ “抗日战争胜利日”
    .如果真结束
    .如果真 (公历月 ＝ 7 且 公历日 ＝ 11)
        变量_94760125 ＝ “世界人口日”
    .如果真结束
    .如果真 (公历月 ＝ 8 且 公历日 ＝ 1)
        变量_94760125 ＝ “中国建军节”
    .如果真结束
    .如果真 (公历月 ＝ 8 且 公历日 ＝ 8)
        变量_94760125 ＝ “父亲节”
    .如果真结束
    .如果真 (公历月 ＝ 9 且 公历日 ＝ 8)
        变量_94760125 ＝ “国际扫盲日”
    .如果真结束
    .如果真 (公历月 ＝ 9 且 公历日 ＝ 9)
        变量_94760125 ＝ “毛泽东逝世”
    .如果真结束
    .如果真 (公历月 ＝ 9 且 公历日 ＝ 10)
        变量_94760125 ＝ “中国教师节”
    .如果真结束
    .如果真 (公历月 ＝ 9 且 公历日 ＝ 20)
        变量_94760125 ＝ “中国爱牙日”
    .如果真结束
    .如果真 (公历月 ＝ 9 且 公历日 ＝ 27)
        变量_94760125 ＝ “世界旅游日”
    .如果真结束
    .如果真 (公历月 ＝ 9 且 公历日 ＝ 28)
        变量_94760125 ＝ “世界聋人日、孔子诞辰”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 1)
        变量_94760125 ＝ “世界音乐日、国庆节”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 4)
        变量_94760125 ＝ “世界动物日”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 6)
        变量_94760125 ＝ “老人节”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 8)
        变量_94760125 ＝ “全国高血压日”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 9)
        变量_94760125 ＝ “世界邮政日”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 14)
        变量_94760125 ＝ “世界标准日”
    .如果真结束
    .如果真 (公历月 ＝ 10 且 公历日 ＝ 24)
        变量_94760125 ＝ “联合国日”
    .如果真结束
    .如果真 (公历月 ＝ 11 且 公历日 ＝ 1)
        变量_94760125 ＝ “万圣节”
    .如果真结束
    .如果真 (公历月 ＝ 11 且 公历日 ＝ 2)
        变量_94760125 ＝ “万灵节”
    .如果真结束
    .如果真 (公历月 ＝ 11 且 公历日 ＝ 12)
        变量_94760125 ＝ “孙中山诞辰”
    .如果真结束
    .如果真 (公历月 ＝ 11 且 公历日 ＝ 17)
        变量_94760125 ＝ “国际学生日”
    .如果真结束
    .如果真 (公历月 ＝ 12 且 公历日 ＝ 5)
        变量_94760125 ＝ “国际志愿人员日”
    .如果真结束
    .如果真 (公历月 ＝ 12 且 公历日 ＝ 20)
        变量_94760125 ＝ “澳门回归”
    .如果真结束
    .如果真 (公历月 ＝ 12 且 公历日 ＝ 25)
        变量_94760125 ＝ “圣诞节”
    .如果真结束
    .如果真 (公历月 ＝ 12 且 公历日 ＝ 26)
        变量_94760125 ＝ “毛泽东诞辰”
    .如果真结束
    .如果真 (公历月 ＝ 5 且 公历日 ＞ 7 且 公历日 ＜ 15 且 变量_95760125 ＝ 1)
        变量_94760125 ＝ “母亲节”
    .如果真结束
    .如果真 (公历月 ＝ 6 且 公历日 ＞ 14 且 公历日 ＜ 22 且 变量_95760125 ＝ 1)
        变量_94760125 ＝ “父亲节”
    .如果真结束
    .如果真 (公历月 ＝ 11 且 公历日 ＞ 21 且 变量_95760125 ＝ 1)
        变量_94760125 ＝ “感恩节”
    .如果真结束
    返回 (变量_94760125)

.子程序 时间_取节气文本, 文本型, 公开, 立春,雨水,惊蛰,春分,清明,谷雨；立夏,小满,芒种,夏至,小暑,大暑；立秋,处暑,白露,秋分,寒露,霜降；立冬,小雪,大雪,冬至,小寒,大寒
    .参数 节气顺序, 整数型, , 根据24个节气返回节气名称.

    .判断开始 (节气顺序 ＝ 1)
        返回 (“立春”)
    .判断 (节气顺序 ＝ 2)
        返回 (“雨水”)
    .判断 (节气顺序 ＝ 3)
        返回 (“惊蛰”)
    .判断 (节气顺序 ＝ 4)
        返回 (“春分”)
    .判断 (节气顺序 ＝ 5)
        返回 (“清明”)
    .判断 (节气顺序 ＝ 6)
        返回 (“谷雨”)
    .判断 (节气顺序 ＝ 7)
        返回 (“立夏”)
    .判断 (节气顺序 ＝ 8)
        返回 (“小满”)
    .判断 (节气顺序 ＝ 9)
        返回 (“芒种”)
    .判断 (节气顺序 ＝ 10)
        返回 (“夏至”)
    .判断 (节气顺序 ＝ 11)
        返回 (“小暑”)
    .判断 (节气顺序 ＝ 12)
        返回 (“大暑”)
    .判断 (节气顺序 ＝ 13)
        返回 (“立秋”)
    .判断 (节气顺序 ＝ 14)
        返回 (“处暑”)
    .判断 (节气顺序 ＝ 15)
        返回 (“白露”)
    .判断 (节气顺序 ＝ 16)
        返回 (“秋分”)
    .判断 (节气顺序 ＝ 17)
        返回 (“寒露”)
    .判断 (节气顺序 ＝ 18)
        返回 (“霜降”)
    .判断 (节气顺序 ＝ 19)
        返回 (“立冬”)
    .判断 (节气顺序 ＝ 20)
        返回 (“小雪”)
    .判断 (节气顺序 ＝ 21)
        返回 (“大雪”)
    .判断 (节气顺序 ＝ 22)
        返回 (“冬至”)
    .判断 (节气顺序 ＝ 23)
        返回 (“小寒”)
    .判断 (节气顺序 ＝ 24)
        返回 (“大寒”)
    .默认
        返回 (“”)
    .判断结束
    

.子程序 时间_取美式日期, 文本型, 公开, 转换日期时间表达为美式表达方式
    .参数 日期时间, 日期时间型
    .局部变量 变量_9A760125, 日期时间型
    .局部变量 变量_9B760125, 文本型

    变量_9A760125 ＝ 日期时间
    变量_9B760125 ＝ 到文本 (取年份 (变量_9A760125))
    变量_9B760125 ＝ 变量_9B760125 ＋ “/” ＋ 到文本 (取月份 (变量_9A760125))
    变量_9B760125 ＝ 变量_9B760125 ＋ “/” ＋ 到文本 (取日 (变量_9A760125))
    返回 (变量_9B760125)
    

.子程序 时间_取农历节日, 文本型, 公开, 取农历所对应该的节日，需要事先知道农历日期的月份，与日子，
    .参数 农历月份, 整数型
    .参数 农历天数, 整数型
    .局部变量 变量_9F760125, 文本型

    变量_9F760125 ＝ “”
    .如果真 (农历月份 ＝ 1 且 农历天数 ＝ 1)
        变量_9F760125 ＝ “春节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 1 且 农历天数 ＝ 15)
        变量_9F760125 ＝ “元宵节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 2 且 农历天数 ＝ 2)
        变量_9F760125 ＝ “中和节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 5 且 农历天数 ＝ 5)
        变量_9F760125 ＝ “端午节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 7 且 农历天数 ＝ 7)
        变量_9F760125 ＝ “七巧节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 8 且 农历天数 ＝ 15)
        变量_9F760125 ＝ “中秋节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 9 且 农历天数 ＝ 9)
        变量_9F760125 ＝ “重阳节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 12 且 农历天数 ＝ 8)
        变量_9F760125 ＝ “腊八节”
        
    .如果真结束
    .如果真 (农历月份 ＝ 12 且 农历天数 ＝ 24)
        变量_9F760125 ＝ “小年”
        
    .如果真结束
    返回 (变量_9F760125)

.子程序 时间_取身份证比较, 逻辑型, 公开, 对身份证号和一个日期进行比较,看两者是否一致
    .参数 身份证号, 文本型
    .参数 比较日期, 日期时间型
    .局部变量 变量_A8760125, 整数型

    变量_A8760125 ＝ 取文本长度 (身份证号)
    .如果真 (变量_A8760125 ＝ 15)
        .如果 (到数值 (“19” ＋ 取文本中间 (身份证号, 7, 2)) ＝ 取年份 (比较日期) 且 到数值 (取文本中间 (身份证号, 9, 2)) ＝ 取月份 (比较日期) 且 到数值 (取文本中间 (身份证号, 11, 2)) ＝ 取日 (比较日期))
            返回 (真)
        .否则
            返回 (假)
        .如果结束
        
    .如果真结束
    .如果真 (变量_A8760125 ＝ 18)
        .如果 (到数值 (取文本中间 (身份证号, 7, 4)) ＝ 取年份 (比较日期) 且 到数值 (取文本中间 (身份证号, 11, 2)) ＝ 取月份 (比较日期) 且 到数值 (取文本中间 (身份证号, 13, 2)) ＝ 取日 (比较日期))
            返回 (真)
        .否则
            返回 (假)
        .如果结束
        
    .如果真结束
    返回 (假)
    

.子程序 时间_取中国星期几, 文本型, 公开, 返回一个星期文本
    .参数 目标时间, 日期时间型, 可空, 如果星期数不为零,本参数不处理,否则将本参数内的时间进行处理.
    .局部变量 变量_EFAA0125, 整数型

    目标时间 ＝ 选择 (是否为空 (目标时间), 取现行时间 (), 目标时间)
    变量_EFAA0125 ＝ 取星期几 (目标时间)
    返回 (多项选择 (变量_EFAA0125, “星期日”, “星期一”, “星期二”, “星期三”, “星期四”, “星期五”, “星期六”))

.子程序 时间_取身份证日期, 文本型, 公开, 取一个身份证号中的出生日期,在本程序前对身份证是否正确进行简单判断,应该用真正的判断程序进行判断
    .参数 身份证号, 文本型
    .局部变量 变量_AC760125, 整数型

    变量_AC760125 ＝ 取文本长度 (身份证号)
    .如果真 (变量_AC760125 ＝ 15)
        返回 (“19” ＋ 取文本中间 (身份证号, 7, 6))
    .如果真结束
    .如果真 (变量_AC760125 ＝ 18)
        返回 (取文本中间 (身份证号, 7, 8))
    .如果真结束
    返回 (“”)
    

.子程序 时间_取身份证性别, 文本型, 公开, 判断身份证的性别
    .参数 身份证号, 文本型
    .局部变量 变量_AE760125, 整数型

    变量_AE760125 ＝ 取文本长度 (身份证号)
    .如果真 (变量_AE760125 ＝ 15)
        .如果 (到数值 (取文本中间 (身份证号, 15, 1)) ％ 2 ＝ 1)
            返回 (“男”)
        .否则
            返回 (“女”)
        .如果结束
        
    .如果真结束
    .如果真 (变量_AE760125 ＝ 18)
        .如果 (到数值 (取文本中间 (身份证号, 17, 1)) ％ 2 ＝ 1)
            返回 (“男”)
        .否则
            返回 (“女”)
        .如果结束
        
    .如果真结束
    返回 (“身份证有误”)

.子程序 时间_取身份证判断, 逻辑型, 公开, 判断身份证号是否正确，检测1900年到2030年中15位或18位身份证，正确返回真，错误返回假。
    .参数 身份证号, 文本型
    .局部变量 变量_76E40125, 整数型
    .局部变量 变量_77E40125, 整数型
    .局部变量 变量_78E40125, 整数型
    .局部变量 变量_79E40125, 整数型
    .局部变量 变量_7CE40125, 整数型, , "0"
    .局部变量 变量_7DE40125, 整数型
    .局部变量 变量_7EE40125, 整数型

    变量_76E40125 ＝ 取文本长度 (身份证号)
    .如果真 (变量_76E40125 ＝ 15 或 变量_76E40125 ＝ 18)
        .如果真 (变量_76E40125 ＝ 15)
            .如果真 (到数值 (取文本中间 (身份证号, 9, 2)) ≥ 13 或 到数值 (取文本中间 (身份证号, 9, 2)) ＝ 0)
                
                返回 (假)
            .如果真结束
            .如果真 (到数值 (取文本中间 (身份证号, 11, 2)) ≥ 32 或 到数值 (取文本中间 (身份证号, 11, 2)) ＝ 0)
                
                返回 (假)
            .如果真结束
            返回 (真)
        .如果真结束
        
        .如果真 (变量_76E40125 ＝ 18)
            变量_77E40125 ＝ 到数值 (取文本中间 (身份证号, 7, 4))
            .如果真 (变量_77E40125 ≤ 1900 或 变量_77E40125 ≥ 2030)
                
                返回 (假)
            .如果真结束
            变量_78E40125 ＝ 到数值 (取文本中间 (身份证号, 11, 2))
            .如果真 (变量_78E40125 ≥ 13 或 变量_78E40125 ＝ 0)
                
                返回 (假)
            .如果真结束
            变量_79E40125 ＝ 到数值 (取文本中间 (身份证号, 13, 2))
            .如果真 (变量_79E40125 ≥ 32 或 变量_79E40125 ＝ 0)
                
                返回 (假)
            .如果真结束
            
            变量_7CE40125 ＝ { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 }
            .计次循环首 (17, 变量_7DE40125)
                变量_7EE40125 ＝ 变量_7EE40125 ＋ 到整数 (取文本中间 (身份证号, 变量_7DE40125, 1)) × 变量_7CE40125 [变量_7DE40125]
            .计次循环尾 ()
            变量_7EE40125 ＝ 变量_7EE40125 ％ 11
            返回 (多项选择 (变量_7EE40125 ＋ 1, “1”, “0”, “x”, “9”, “8”, “7”, “6”, “5”, “4”, “3”, “2”) ＝ 到小写 (取文本右边 (身份证号, 1)))
        .如果真结束
        
    .如果真结束
    返回 (假)

.子程序 时间_身份证号转换, 文本型, 公开, 从15位转换到18位身份证号
    .参数 身份证号, 文本型
    .局部变量 变量_B2760125, 整数型, , "17"
    .局部变量 变量_B3760125, 文本型, , "11"
    .局部变量 变量_B4760125, 文本型
    .局部变量 变量_B5760125, 整数型
    .局部变量 变量_B6760125, 文本型
    .局部变量 变量_B7760125, 整数型
    .局部变量 变量_B8760125, 整数型

    变量_B2760125 ＝ { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 }
    变量_B3760125 ＝ { “1”, “0”, “X”, “9”, “8”, “7”, “6”, “5”, “4”, “3”, “2” }
    变量_B8760125 ＝ 取文本长度 (身份证号)
    .如果真 (变量_B8760125 ≠ 18)
        .如果真 (变量_B8760125 ≠ 15)
            返回 (“”)
        .如果真结束
        
    .如果真结束
    .如果真 (变量_B8760125 ＝ 15)
        身份证号 ＝ 取文本左边 (身份证号, 6) ＋ “19” ＋ 取文本右边 (身份证号, 9)
    .如果真结束
    .计次循环首 (17, 变量_B7760125)
        变量_B4760125 ＝ 取文本中间 (身份证号, 变量_B7760125, 1)
        变量_B5760125 ＝ 变量_B5760125 ＋ 到数值 (变量_B4760125) × 变量_B2760125 [变量_B7760125]
    .计次循环尾 ()
    变量_B6760125 ＝ 变量_B3760125 [变量_B5760125 ％ 11 ＋ 1]
    身份证号 ＝ 取文本左边 (身份证号, 17) ＋ 变量_B6760125
    返回 (身份证号)

.子程序 时间_到文本, 文本型, 公开, 返回文本格式的现行时间，如：2005053107123
    .参数 操作时间, 日期时间型, 可空, 可空。留空为现行时间
    .参数 输出格式, 整数型, 可空, 可空。0=N年N月N日 N时N分N秒  1=年-月-日 时:分:秒  2=年/月/日 时/分/秒  3=年月日时分秒
    .参数 取出类型, 整数型, 可空, 可空。留空为全部，1=只取年月日，2=取月日，3=只取时分秒，4=时分，5=分秒
    .参数 小时制式, 整数型, 可空, 留空或为0取当前系统时间制式，1表示12小时制，2表示24小时制
    .局部变量 变量_6AED0125, 文本型
    .局部变量 变量_6BED0125, 文本型
    .局部变量 变量_72ED0125, 文本型
    .局部变量 变量_1EEE0125, 整数型

    操作时间 ＝ 选择 (是否为空 (操作时间), 取现行时间 (), 操作时间)
    输出格式 ＝ 选择 (输出格式 ≥ 0 且 输出格式 ≤ 3, 输出格式, 0)
    变量_6AED0125 ＝ 多项选择 (输出格式 ＋ 1, “yyyy年MM月dd日 ”, “yyyy-MM-dd ”, “yyyy/MM/dd ”, “yyyyMMdd”)
    变量_6AED0125 ＝ 选择 (取出类型 ≥ 3 且 取出类型 ≤ 5, “”, 变量_6AED0125)
    变量_6BED0125 ＝ 多项选择 (输出格式 ＋ 1, “hh时mm分ss秒”, “hh:mm:ss”, “hh/mm/ss”, “hhmmss”)
    变量_6BED0125 ＝ 选择 (取出类型 ≥ 1 且 取出类型 ≤ 2, “”, 变量_6BED0125)
    .如果真 (取出类型 ＝ 1)
        变量_6AED0125 ＝ 删首尾空 (变量_6AED0125)
    .如果真结束
    .如果真 (取出类型 ＝ 2)
        变量_6AED0125 ＝ 多项选择 (输出格式 ＋ 1, “MM月dd日”, “MM-dd”, “MM/dd”, “MMdd”)
    .如果真结束
    .如果真 (取出类型 ＝ 4)
        变量_6BED0125 ＝ 多项选择 (输出格式 ＋ 1, “hh时mm分”, “hh:mm”, “hh/mm”, “hhmm”)
    .如果真结束
    .如果真 (取出类型 ＝ 5)
        变量_6BED0125 ＝ 多项选择 (输出格式 ＋ 1, “mm分ss秒”, “mm:ss”, “mm/ss”, “mmss”)
    .如果真结束
    .如果 (小时制式 ≤ 0 或 小时制式 ＞ 2)
        变量_1EEE0125 ＝ 时间_取制式 ()
    .否则
        变量_1EEE0125 ＝ 小时制式 － 1
    .如果结束
    变量_6BED0125 ＝ 选择 (变量_1EEE0125 ＝ 1, 子文本替换 (变量_6BED0125, “hh”, “HH”, , , 真), 变量_6BED0125)
    变量_72ED0125 ＝ 时间_格式化 (操作时间, 变量_6AED0125, 变量_6BED0125)
    返回 (变量_72ED0125)

.子程序 时间_身份证号15到18, 文本型, 公开, 将15位身份证转换为18位
    .参数 身份证号15, 文本型
    .局部变量 变量_C0760125, 整数型
    .局部变量 变量_C1760125, 整数型
    .局部变量 变量_C2760125, 文本型
    .局部变量 变量_C3760125, 文本型

    变量_C3760125 ＝ 取文本左边 (身份证号15, 6) ＋ “19” ＋ 取文本右边 (身份证号15, 9)
    .变量循环首 (18, 2, -1, 变量_C0760125)
        变量_C1760125 ＝ 变量_C1760125 ＋ 求次方 (2, 变量_C0760125 － 1) ％ 11 × 到数值 (取文本中间 (变量_C3760125, 19 － 变量_C0760125, 1))
    .变量循环尾 ()
    变量_C1760125 ＝ 变量_C1760125 ％ 11
    .判断开始 (变量_C1760125 ＝ 0)
        变量_C2760125 ＝ “1”
    .判断 (变量_C1760125 ＝ 1)
        变量_C2760125 ＝ “0”
    .判断 (变量_C1760125 ＝ 2)
        变量_C2760125 ＝ “X”
    .默认
        变量_C2760125 ＝ 删首尾空 (到文本 (12 － 变量_C1760125))
    .判断结束
    返回 (变量_C3760125 ＋ 变量_C2760125)

.子程序 时间_北京转格林威治, 长整数型, 公开, 将【北京标准时间】转换成【格林威治的标准时间】，13位的时间戳可用“时间_取现行时间戳（）”获得
    .参数 欲转换的时间, 日期时间型, 可空, 如果为空则取当前时间，如: 1970-01-01 08:00:00 或 2009年2月9日12时36分36秒

    .如果真 (是否为空 (欲转换的时间))
        欲转换的时间 ＝ 取现行时间 ()
    .如果真结束
    返回 (取时间间隔 (欲转换的时间, [1970年1月1日8时], #秒))

.子程序 时间_格林威治转北京, 日期时间型, 公开, 将【格林威治的标准时间】转换成【北京标准时间】,源码修改至官方用户
    .参数 要转换的格林威治时间, 长整数型, , 要转换的格林威治时间
    .局部变量 变量_FFF60125, 日期时间型
    .局部变量 变量_DE5E0225, 整数型
    .局部变量 变量_7A9D0225, 整数型

    变量_FFF60125 ＝ 指定时间 (1970, 1, 1, 8, 0, 0)
    变量_7A9D0225 ＝ 取文本长度 (到文本 (要转换的格林威治时间))
    .如果 (变量_7A9D0225 ≠ 10)
        变量_DE5E0225 ＝ 到整数 (取文本左边 (到文本 (要转换的格林威治时间), 10))
    .否则
        变量_DE5E0225 ＝ 要转换的格林威治时间
    .如果结束
    返回 (增减时间 (变量_FFF60125, #秒, 变量_DE5E0225))

.子程序 FileTimeToUnixTime, 长整数型
    .参数 变量_F5F60125, 长整数型
    .局部变量 变量_F6F60125, 长整数型

    变量_F6F60125 ＝ 变量_F5F60125 － 1.16444736e+017
    返回 (变量_F6F60125)

.子程序 UnixTimeToFileTime, 长整数型
    .参数 变量_09F70125, 长整数型
    .局部变量 变量_0AF70125, 长整数型
    .局部变量 变量_0BF70125, 整数型
    .局部变量 变量_0CF70125, 整数型

    变量_0BF70125 ＝ 取整数位数 (变量_09F70125)
    变量_0CF70125 ＝ 1
    .计次循环首 (17 － 变量_0BF70125, )
        变量_0CF70125 ＝ 变量_0CF70125 × 10
    .计次循环尾 ()
    变量_0AF70125 ＝ 变量_09F70125 × 变量_0CF70125 ＋ 1.16444736e+017
    返回 (变量_0AF70125)

.子程序 取整数位数, 整数型
    .参数 变量_F7F60125, 长整数型
    .局部变量 变量_F8F60125, 整数型
    .局部变量 变量_F9F60125, 长整数型

    变量_F9F60125 ＝ 变量_F7F60125
    变量_F8F60125 ＝ 1
    .循环判断首 ()
        变量_F9F60125 ＝ 变量_F9F60125 ÷ 10
        .如果 (变量_F9F60125 ≥ 1)
            变量_F8F60125 ＝ 变量_F8F60125 ＋ 1
        .否则
            跳出循环 ()
        .如果结束
        
    .循环判断尾 (变量_F9F60125 ≥ 1)
    返回 (变量_F8F60125)

.子程序 时间_WMI时间转日期, 日期时间型, 公开, 失败返回  [100年1月1日]
    .参数 WMI数据时间, 文本型, , 如“20140926001639.000000+480”
    .局部变量 变量_21E70125, 对象
    .局部变量 变量_24E70125, 日期时间型

    CoInitialize (0)
    .如果 (变量_21E70125.创建 (“WbemScripting.SWbemDateTime”, ))
        变量_21E70125.写属性 (“Value”, WMI数据时间)
        变量_24E70125 ＝ 变量_21E70125.日期方法 (“GetVarDate”, )
        变量_21E70125.清除 ()
    .否则
        变量_24E70125 ＝ 到时间 (0)
    .如果结束
    CoUninitialize ()
    返回 (变量_24E70125)

.子程序 时间_格式化, 文本型, 公开, 格式化指定日期与时间，失败返回空文本   GetTimeFormatA 该函数支持的最早时间是1600.1.1
    .参数 欲格式化时间, 日期时间型
    .参数 日期格式, 文本型, 可空, 可以为空，格式：yyyy [年]，M [月],d [日],dddd [星期]，如;yyyy/M/d dddd(年/月/日 星期几)
    .参数 时间格式, 文本型, 可空, 可以为空，格式：tt [上午或下午],h [小时],m [分钟], s [秒] 。如;hh:mm:ss(小时:分钟:秒),tt hh:mm:ss(上午或下午 小时:分钟:秒)
    .参数 使用24小时制, 逻辑型, 可空
    .参数 指定语言环境, 整数型, 可空, #LOCALE_*
    .局部变量 变量_09030325, 精易_时间
    .局部变量 变量_0A030325, 文本型
    .局部变量 变量_0B030325, 整数型
    .局部变量 变量_0C030325, 文本型

    .如果真 (DLL_VariantTimeToSystemTime (欲格式化时间, 变量_09030325) ＝ 1)
        变量_0A030325 ＝ 取空白文本 (51)
        assignZero (变量_0A030325, GetDateFormatA (指定语言环境, 0, 变量_09030325, 日期格式 ＋ 字符 (#NULL), 变量_0A030325, 50))
        变量_0C030325 ＝ 取空白文本 (51)
        .如果真 (使用24小时制)
            变量_0B030325 ＝ #TIME_FORCE24HOURFORMAT
        .如果真结束
        assignZero (变量_0C030325, GetTimeFormatA (指定语言环境, 变量_0B030325, 变量_09030325, 时间格式 ＋ 字符 (#NULL), 变量_0C030325, 50))
    .如果真结束
    返回 (变量_0A030325 ＋ 变量_0C030325)

.子程序 时间_格式化EX, 文本型, 公开, 将易语言中默认获取到的含有汉字的时间格式化为不含汉字的时间，源码由雪山凌狐提供
    .参数 未格式化时间, 日期时间型, , 使用易语言自带命令：取现行时间()等获取到的含汉字的时间
    .参数 日期间间隔, 文本型, 可空, 默认为“-”
    .参数 时间间间隔, 文本型, 可空, 默认为“:”
    .参数 返回模式, 整数型, 可空, 模式1为只返回时间（时分秒），模式为2为只返回日期（年月日），模式3为两者都返回，模式4为都返回，但日期与时间之间没有空格。如果为空，默认为1，如果不符合要求，返回为空
    .局部变量 变量_435C0225, 文本型
    .局部变量 变量_445C0225, 文本型
    .局部变量 变量_455C0225, 文本型
    .局部变量 变量_465C0225, 文本型
    .局部变量 变量_475C0225, 文本型
    .局部变量 变量_485C0225, 文本型
    .局部变量 变量_495C0225, 文本型

    .如果真 (是否为空 (日期间间隔))
        日期间间隔 ＝ “-”
    .如果真结束
    .如果真 (是否为空 (时间间间隔))
        时间间间隔 ＝ “:”
    .如果真结束
    .如果真 (是否为空 (返回模式))
        返回模式 ＝ 1
    .如果真结束
    
    
    变量_445C0225 ＝ 到文本 (取年份 (未格式化时间))
    变量_455C0225 ＝ 到文本 (取月份 (未格式化时间))
    .如果真 (取文本长度 (变量_455C0225) ＝ 1)
        变量_455C0225 ＝ “0” ＋ 变量_455C0225
    .如果真结束
    变量_465C0225 ＝ 到文本 (取日 (未格式化时间))
    .如果真 (取文本长度 (变量_465C0225) ＝ 1)
        变量_465C0225 ＝ “0” ＋ 变量_465C0225
    .如果真结束
    变量_475C0225 ＝ 到文本 (取小时 (未格式化时间))
    .如果真 (取文本长度 (变量_475C0225) ＝ 1)
        变量_475C0225 ＝ “0” ＋ 变量_475C0225
    .如果真结束
    变量_485C0225 ＝ 到文本 (取分钟 (未格式化时间))
    .如果真 (取文本长度 (变量_485C0225) ＝ 1)
        变量_485C0225 ＝ “0” ＋ 变量_485C0225
    .如果真结束
    变量_495C0225 ＝ 到文本 (取秒 (未格式化时间))
    .如果真 (取文本长度 (变量_495C0225) ＝ 1)
        变量_495C0225 ＝ “0” ＋ 变量_495C0225
    .如果真结束
    
    .判断开始 (返回模式 ＝ 1)
        变量_435C0225 ＝ 变量_475C0225 ＋ 时间间间隔 ＋ 变量_485C0225 ＋ 时间间间隔 ＋ 变量_495C0225
    .判断 (返回模式 ＝ 2)
        变量_435C0225 ＝ 变量_445C0225 ＋ 日期间间隔 ＋ 变量_455C0225 ＋ 日期间间隔 ＋ 变量_465C0225
    .判断 (返回模式 ＝ 3)
        变量_435C0225 ＝ 变量_445C0225 ＋ 日期间间隔 ＋ 变量_455C0225 ＋ 日期间间隔 ＋ 变量_465C0225 ＋ “ ” ＋ 变量_475C0225 ＋ 时间间间隔 ＋ 变量_485C0225 ＋ 时间间间隔 ＋ 变量_495C0225
    .判断 (返回模式 ＝ 4)
        变量_435C0225 ＝ 变量_445C0225 ＋ 日期间间隔 ＋ 变量_455C0225 ＋ 日期间间隔 ＋ 变量_465C0225 ＋ 变量_475C0225 ＋ 时间间间隔 ＋ 变量_485C0225 ＋ 时间间间隔 ＋ 变量_495C0225
    .默认
        
    .判断结束
    
    
    返回 (变量_435C0225)
    
    

.子程序 时间_取制式, 整数型, 公开, 取当前系统时间制式，返回值；0表示12小时制，1表示24小时制
    .局部变量 变量_26EE0125, 文本型

    变量_26EE0125 ＝ 取空白文本 (4)
    DLL_GetLocaleInfoA (0, #<?未知本地类型?>, 变量_26EE0125, 4)
    返回 (到整数 (变量_26EE0125))

.子程序 时间_同步校时, 日期时间型, 公开, 调用http://www.baidu.com网址接口,win8以上系统需要管理员权限
    .参数 参_是否同步, 逻辑型, 可空, 是否同步到北京时间，为空默认不同步
    .局部变量 变量_5AF10125, 文本型
    .局部变量 变量_5BF10125, 文本型
    .局部变量 变量_5CF10125, 日期时间型

    网页_访问S (“https://www.baidu.com”, 2, , , , , 变量_5AF10125)
    变量_5BF10125 ＝ 删首尾空 (文本_取出中间文本 (变量_5AF10125, “Date:”, #换行符))
    变量_5CF10125 ＝ 时间_GMT转为时间 (变量_5BF10125)
    .如果真 (参_是否同步)
        置现行时间 (变量_5CF10125)
    .如果真结束
    返回 (变量_5CF10125)

.子程序 时间_取月初, 日期时间型, 公开, 源码由论坛用户【ds9660】雕哥提供。
    .参数 参_指定时间, 日期时间型, 可空

    .如果真 (是否为空 (参_指定时间))
        参_指定时间 ＝ 取现行时间 ()
    .如果真结束
    返回 (增减时间 (取日期 (参_指定时间), #日, 1 － 取日 (参_指定时间)))

.子程序 时间_取月末, 日期时间型, 公开, 源码由论坛用户【ds9660】雕哥提供。
    .参数 参_指定时间, 日期时间型, 可空
    .局部变量 变量_729F0225, 日期时间型

    .如果真 (是否为空 (参_指定时间))
        参_指定时间 ＝ 取现行时间 ()
    .如果真结束
    变量_729F0225 ＝ 取日期 (增减时间 (参_指定时间, #月份, 1))
    返回 (增减时间 (变量_729F0225, #日, －取日 (变量_729F0225)))

.子程序 时间_取某年天数, 整数型, 公开, 阳历。
    .参数 某时间, 日期时间型

    返回 (选择 (取年份 (某时间) ％ 4 ＝ 0, 366, 365))

.子程序 时间_取月总天数, 整数型, 公开, 阳历。
    .参数 输入_年, 整数型
    .参数 输入_月, 整数型
    .局部变量 变量_48F60125, 日期时间型
    .局部变量 变量_49F60125, 整数型
    .局部变量 变量_4AF60125, 日期时间型

    变量_48F60125 ＝ 到时间 (到文本 (输入_年) ＋ “-” ＋ 到文本 (输入_月) ＋ “-” ＋ “1”)
    变量_4AF60125 ＝ 增减时间 (变量_48F60125, #月份, 1)
    变量_4AF60125 ＝ 增减时间 (变量_4AF60125, #日, -1)
    返回 (取日 (变量_4AF60125))

.子程序 时间_取第几周, , 公开, 查询指定日期是第几周
    .参数 参_指定日期, 日期时间型, 可空
    .参数 参_当月第几周, 整数型, 参考 可空
    .参数 参_当年第几周, 整数型, 参考 可空
    .局部变量 变量_4DF60125, 日期时间型

    变量_4DF60125 ＝ 选择 (是否为空 (参_指定日期), 取现行时间 (), 参_指定日期)
    参_当月第几周 ＝ 到整数 (编码_运行JS代码 (#<?未知本地类型?>, “getMonthWeek”, 到文本 (取年份 (变量_4DF60125)), 到文本 (取月份 (变量_4DF60125)), 到文本 (取日 (变量_4DF60125)), ))
    参_当年第几周 ＝ 到整数 (编码_运行JS代码 (#<?未知本地类型?>, “getYearWeek”, 到文本 (取年份 (变量_4DF60125)), 到文本 (取月份 (变量_4DF60125)), 到文本 (取日 (变量_4DF60125)), ))

.子程序 时间_取月份, 文本型, 公开, 返回一个月份,源码由论坛用户【shandmail 】提供
    .参数 目标时间, 日期时间型, 可空, 如果空或为零时取下面时间的返回月份
    .参数 是否英文, 逻辑型, 可空
    .局部变量 变量_17F70125, 整数型

    
    目标时间 ＝ 选择 (是否为空 (目标时间), 取现行时间 (), 目标时间)
    变量_17F70125 ＝ 取月份 (目标时间)
    .如果 (是否英文)
        返回 (多项选择 (变量_17F70125, “January”, “February”, “March”, “April”, “May”, “June”, “July”, “August”, “September”, “October”, “November”, “December”))
    .否则
        返回 (多项选择 (变量_17F70125, “一月”, “二月”, “三月”, “四月”, “五月”, “六月”, “七月”, “八月”, “九月”, “十月”, “十一月”, “十二月”))
    .如果结束
    

.子程序 时间_JSON转为时间, 日期时间型, 公开, 把JSON数据格式的日期（yyyy-MM-ddTHH:mm:ss.SSSZ）转北京时间
    .参数 JSON时间, 文本型, , JSON数据格式的日期（YYYY-MM-DDTHH:mm:ss.sssZ）
    .局部变量 变量_F4D30225, 文本型
    .局部变量 变量_F5D30225, 日期时间型
    .局部变量 变量_E5E60225, 整数型

    变量_E5E60225 ＝ 寻找文本 (JSON时间, “.”, , 假)
    .如果真 (变量_E5E60225 ＝ -1)
        变量_E5E60225 ＝ 寻找文本 (JSON时间, “Z”, , 假)
    .如果真结束
    .如果真 (变量_E5E60225 ＝ -1)
        输出调试文本 (“传递了错误的JSON时间！”)
        返回 ([1899年12月30日])
    .如果真结束
    变量_F4D30225 ＝ 取文本左边 (JSON时间, 变量_E5E60225 － 1)
    变量_F4D30225 ＝ 子文本替换 (变量_F4D30225, “T”, 字符 (32), , , 真)
    变量_F5D30225 ＝ 到时间 (变量_F4D30225)
    变量_F5D30225 ＝ 增减时间 (变量_F5D30225, #小时, 8)
    返回 (变量_F5D30225)

.子程序 时间_时间转为JSON, 文本型, 公开, 格式化为JSON数据格式（yyyy-MM-ddTHH:mm:ss.SSSZ）
    .参数 时间, 日期时间型, 可空, 留空时间默认取系统UTC时间格式。不为空请先减8个小时（东8区）。
    .局部变量 变量_F8D30225, 精易_时间

    .如果真 (是否为空 (时间))
        DLL_GetSystemTime (变量_F8D30225)
        SystemTimeToVariantTime (变量_F8D30225, 时间)
    .如果真结束
    返回 (时间_格式化 (时间, “yyyy'-'MM'-'dd'T'”, “hh':'mm':'ss'.” ＋ 文本_自动补零 (到文本 (变量_F8D30225.毫), 3) ＋ “Z'”, 真, #LOCALE_INVARIANT))

.子程序 时间_判断二十四节气, 文本型, 公开, 返回文本型：若节气日，返回节气名称；不是节气日返回空。注：判断日期范围为1901年1月1日—2099年12月31日
    .参数 日期, 日期时间型
    .局部变量 变量_8DD40225, 整数型
    .局部变量 变量_8ED40225, 整数型
    .局部变量 变量_8FD40225, 整数型
    .局部变量 变量_90D40225, 文本型

    
    变量_90D40225 ＝ “”
    变量_8DD40225 ＝ 取年份 (日期)
    变量_8ED40225 ＝ 取月份 (日期)
    变量_8FD40225 ＝ 取日 (日期)
    .判断开始 (变量_8DD40225 ≥ 2000 且 变量_8DD40225 ＜ 2100)
        变量_8DD40225 ＝ 变量_8DD40225 － 2000
        .判断开始 (变量_8ED40225 ＝ 2 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 3.87) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “立春”
        .判断 (变量_8ED40225 ＝ 2 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 18.73) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 26)
            变量_90D40225 ＝ “雨水”
        .判断 (变量_8ED40225 ＝ 3 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 5.63) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “惊蛰”
        .判断 (变量_8ED40225 ＝ 3 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 20.646) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 84)
            变量_90D40225 ＝ “春分”
        .判断 (变量_8ED40225 ＝ 4 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 4.81) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “清明”
        .判断 (变量_8ED40225 ＝ 4 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 20.1) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “谷雨”
        .判断 (变量_8ED40225 ＝ 5 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 5.52) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “立夏”
        .判断 (变量_8ED40225 ＝ 5 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 21.04) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 8)
            变量_90D40225 ＝ “小满”
        .判断 (变量_8ED40225 ＝ 6 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 5.678) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “芒种”
        .判断 (变量_8ED40225 ＝ 6 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 21.37) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “夏至”
        .判断 (变量_8ED40225 ＝ 7 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.108) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 16)
            变量_90D40225 ＝ “小暑”
        .判断 (变量_8ED40225 ＝ 7 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 22.83) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “大暑”
        .判断 (变量_8ED40225 ＝ 8 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.5) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 2)
            变量_90D40225 ＝ “立秋”
        .判断 (变量_8ED40225 ＝ 8 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.13) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “处暑”
        .判断 (变量_8ED40225 ＝ 9 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.646) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “白露”
        .判断 (变量_8ED40225 ＝ 9 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.042) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “秋分”
        .判断 (变量_8ED40225 ＝ 10 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 8.318) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “寒露”
        .判断 (变量_8ED40225 ＝ 10 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.438) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 89)
            变量_90D40225 ＝ “霜降”
        .判断 (变量_8ED40225 ＝ 11 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.438) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 89)
            变量_90D40225 ＝ “立冬”
        .判断 (变量_8ED40225 ＝ 11 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 22.36) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “小雪”
        .判断 (变量_8ED40225 ＝ 12 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.18) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “大雪”
        .判断 (变量_8ED40225 ＝ 12 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 21.94) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 21)
            变量_90D40225 ＝ “冬至”
        .判断 (变量_8ED40225 ＝ 1 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 5.4055) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 19)
            变量_90D40225 ＝ “小寒”
        .判断 (变量_8ED40225 ＝ 1 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 20.12) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 82)
            变量_90D40225 ＝ “大寒”
        .默认
            
        .判断结束
        
    .判断 (变量_8DD40225 ＞ 1900 且 变量_8DD40225 ＜ 2000)
        变量_8DD40225 ＝ 变量_8DD40225 － 1900
        .判断开始 (变量_8ED40225 ＝ 2 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 4.6295) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “立春”
        .判断 (变量_8ED40225 ＝ 2 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 19.4599) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “雨水”
        .判断 (变量_8ED40225 ＝ 3 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 6.3826) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “惊蛰”
        .判断 (变量_8ED40225 ＝ 3 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 21.4155) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “春分”
        .判断 (变量_8ED40225 ＝ 4 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 5.59) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “清明”
        .判断 (变量_8ED40225 ＝ 4 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 20.888) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “谷雨”
        .判断 (变量_8ED40225 ＝ 5 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 6.318) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 11)
            变量_90D40225 ＝ “立夏”
        .判断 (变量_8ED40225 ＝ 5 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 21.86) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “小满”
        .判断 (变量_8ED40225 ＝ 6 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 6.5) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 2)
            变量_90D40225 ＝ “芒种”
        .判断 (变量_8ED40225 ＝ 6 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 22.2) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 28)
            变量_90D40225 ＝ “夏至”
        .判断 (变量_8ED40225 ＝ 7 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.928) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 25)
            变量_90D40225 ＝ “小暑”
        .判断 (变量_8ED40225 ＝ 7 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.65) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 22)
            变量_90D40225 ＝ “大暑”
        .判断 (变量_8ED40225 ＝ 8 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.5) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “立秋”
        .判断 (变量_8ED40225 ＝ 8 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.95) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “处暑”
        .判断 (变量_8ED40225 ＝ 9 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 8.44) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 27)
            变量_90D40225 ＝ “白露”
        .判断 (变量_8ED40225 ＝ 9 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.822) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 42)
            变量_90D40225 ＝ “秋分”
        .判断 (变量_8ED40225 ＝ 10 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 9.098) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “寒露”
        .判断 (变量_8ED40225 ＝ 10 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 24.218) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “霜降”
        .判断 (变量_8ED40225 ＝ 11 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 8.218) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “立冬”
        .判断 (变量_8ED40225 ＝ 11 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 23.08) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 78)
            变量_90D40225 ＝ “小雪”
        .判断 (变量_8ED40225 ＝ 12 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 7.9) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 54)
            变量_90D40225 ＝ “大雪”
        .判断 (变量_8ED40225 ＝ 12 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 22.6) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 18)
            变量_90D40225 ＝ “冬至”
        .判断 (变量_8ED40225 ＝ 1 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 6.11) － 取整 (变量_8DD40225 ÷ 4) 且 变量_8DD40225 ≠ 82)
            变量_90D40225 ＝ “小寒”
        .判断 (变量_8ED40225 ＝ 1 且 变量_8FD40225 ＝ 取整 (变量_8DD40225 × 0.2422 ＋ 20.84) － 取整 (变量_8DD40225 ÷ 4))
            变量_90D40225 ＝ “大寒”
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    返回 (变量_90D40225)

.子程序 时间_星期几取日期, 日期时间型, 公开, 返回指定时间段里指定星期几的日期
    .参数 参_时间, 日期时间型, 可空, 留空默认取当前时间
    .参数 参_星期几, 整数型, , 1-7，分别代表星期一到星期日
    .局部变量 变量_4CD60225, 整数型
    .局部变量 变量_4DD60225, 整数型
    .局部变量 变量_4ED60225, 日期时间型

    
    .如果真 (是否为空 (参_时间))
        参_时间 ＝ 取现行时间 ()
    .如果真结束
    变量_4CD60225 ＝ 取星期几 (参_时间)
    .判断开始 (变量_4CD60225 ＝ 1)
        变量_4CD60225 ＝ 7
    .默认
        变量_4CD60225 ＝ 变量_4CD60225 － 1
    .判断结束
    变量_4DD60225 ＝ 变量_4CD60225 － 参_星期几
    变量_4ED60225 ＝ 增减时间 (参_时间, #日, －变量_4DD60225)
    返回 (变量_4ED60225)

.子程序 时间_取间隔_开始, , 公开, 取微秒级时间间隔.[Mr.Yang提供]
    .参数 标记, 文本型, 可空, 用于区分不同的时间.与"时间_取间隔_结束"对应.
    .局部变量 变量_7CDB0225, 长整数型
    .局部变量 变量_7DDB0225, 整数型
    .局部变量 变量_7EDB0225, 整数型

    
    标记 ＝ 选择 (标记 ＝ “”, “耗时”, 标记)
    .计次循环首 (取数组下标 (类变量_8ADB0215, 1), 变量_7EDB0225)
        .如果真 (类变量_8ADB0215 [变量_7EDB0225] [1] ＝ 标记)
            变量_7DDB0225 ＝ 变量_7EDB0225
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (变量_7DDB0225 ＝ 0)
        重定义数组 (类变量_8ADB0215, 真, 取数组下标 (类变量_8ADB0215, 1) ＋ 1, 2)
        变量_7DDB0225 ＝ 取数组下标 (类变量_8ADB0215, 1)
        类变量_8ADB0215 [变量_7DDB0225] [1] ＝ 标记
    .如果真结束
    QueryPerformanceCounter (变量_7CDB0225)
    类变量_8ADB0215 [变量_7DDB0225] [2] ＝ 到文本 (变量_7CDB0225)

.子程序 时间_取间隔_结束, 文本型, 公开, 取微秒级时间间隔.返回间隔时间.[Mr.Yang提供]
    .参数 标记, 文本型, 可空, 用于区分不同的时间.与"时间_取间隔_开始"对应.
    .局部变量 变量_80DB0225, 长整数型
    .局部变量 变量_81DB0225, 整数型
    .局部变量 变量_82DB0225, 整数型
    .局部变量 变量_83DB0225, 长整数型
    .局部变量 变量_84DB0225, 双精度小数型
    .局部变量 变量_85DB0225, 整数型
    .局部变量 变量_86DB0225, 整数型
    .局部变量 变量_87DB0225, 整数型
    .局部变量 变量_88DB0225, 双精度小数型
    .局部变量 变量_89DB0225, 文本型

    .如果真 (变量_83DB0225 ＝ 0)
        QueryPerformanceFrequency (变量_80DB0225)
        变量_83DB0225 ＝ 变量_80DB0225
    .如果真结束
    QueryPerformanceCounter (变量_80DB0225)
    标记 ＝ 选择 (标记 ＝ “”, “耗时”, 标记)
    .计次循环首 (取数组下标 (类变量_8ADB0215, 1), 变量_82DB0225)
        .如果真 (类变量_8ADB0215 [变量_82DB0225] [1] ＝ 标记)
            变量_81DB0225 ＝ 变量_82DB0225
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (变量_81DB0225 ＝ 0)
        输出调试文本 (#引号 ＋ “时间_取间隔” ＋ #引号 ＋ “ 标记不存在!”)
        返回 (“”)
    .如果真结束
    变量_84DB0225 ＝ (变量_80DB0225 － 到数值 (类变量_8ADB0215 [变量_81DB0225] [2])) ÷ 变量_83DB0225 × 1000
    变量_85DB0225 ＝ 变量_84DB0225 ％ 86400000 ÷ 3600000
    变量_86DB0225 ＝ 变量_84DB0225 ％ 86400000 ％ 3600000 ÷ 60000
    变量_87DB0225 ＝ 变量_84DB0225 ％ 86400000 ％ 3600000 ％ 60000 ÷ 1000
    变量_88DB0225 ＝ 四舍五入 (变量_84DB0225 ％ 86400000 ％ 3600000 ％ 60000 ％ 1000, 4)
    .如果真 (变量_85DB0225 ≠ 0)
        变量_89DB0225 ＝ 变量_89DB0225 ＋ 到文本 (变量_85DB0225) ＋ “时”
    .如果真结束
    .如果真 (变量_86DB0225 ≠ 0)
        变量_89DB0225 ＝ 变量_89DB0225 ＋ 到文本 (变量_86DB0225) ＋ “分”
    .如果真结束
    .如果真 (变量_87DB0225 ≠ 0)
        变量_89DB0225 ＝ 变量_89DB0225 ＋ 到文本 (变量_87DB0225) ＋ “秒”
    .如果真结束
    .如果真 (变量_88DB0225 ≠ 0)
        变量_89DB0225 ＝ 变量_89DB0225 ＋ 到文本 (变量_88DB0225) ＋ “毫秒”
    .如果真结束
    输出调试文本 (标记 ＋ “:” ＋ 变量_89DB0225)
    返回 (变量_89DB0225)

.子程序 FileTimeToVariantTime, 日期时间型, 公开
    .参数 FileTime, FILETIME
    .局部变量 变量_FCEC0225, FILETIME
    .局部变量 变量_FDEC0225, 精易_时间
    .局部变量 变量_FEEC0225, 日期时间型

    DLL_FileTimeToLocalFileTime (FileTime, 变量_FCEC0225)
    DLL_FileTimeToSystemTime (变量_FCEC0225, 变量_FDEC0225)
    SystemTimeToVariantTime (变量_FDEC0225, 变量_FEEC0225)
    返回 (变量_FEEC0225)

.子程序 VariantTimeToFileTime, FILETIME, 公开
    .参数 vTime, 日期时间型
    .局部变量 变量_41ED0225, 精易_时间
    .局部变量 变量_47ED0225, FILETIME
    .局部变量 变量_4BED0225, FILETIME

    DLL_VariantTimeToSystemTime (vTime, 变量_41ED0225)
    DLL_SystemTimeToFileTime (变量_41ED0225, 变量_47ED0225)
    DLL_LocalFileTimeToFileTime (变量_47ED0225, 变量_4BED0225)
    返回 (变量_4BED0225)

.子程序 VariantTimeToQuadPart, 长整数型, 公开, 时间 => 长整数
    .参数 vTime, 日期时间型
    .局部变量 变量_1C080325, FILETIME

    变量_1C080325 ＝ VariantTimeToFileTime (vTime)
    返回 (合并长整数 (变量_1C080325.dwLowDateTime, 变量_1C080325.dwHighDateTime))

.子程序 QuadPartToVariantTime, 日期时间型, 公开, 长整数 => 时间
    .参数 li, 长整数型
    .局部变量 变量_28080325, FILETIME

    变量_28080325.dwLowDateTime ＝ LOWPART (li)
    变量_28080325.dwHighDateTime ＝ HIGHPART (li)
    返回 (FileTimeToVariantTime (变量_28080325))

.子程序 时间_取NTP服务器时间戳, 长整数型, 公开, 通过NTP服务器获取网络时间！成功返回Unix时间戳，失败返回-1。
    .参数 NTP服务器, 文本型, 可空, time.windows.com
    .参数 精确到毫秒, 逻辑型, 可空
    .局部变量 变量_9FF80225, 文本型
    .局部变量 变量_9AF80225, 套接字信息
    .局部变量 变量_9BF80225, 整数型
    .局部变量 变量_AEF80225, 整数型
    .局部变量 变量_AFF80225, 整数型
    .局部变量 变量_B0F80225, 整数型
    .局部变量 变量_B1F80225, 整数型
    .局部变量 变量_B2F80225, 整数型
    .局部变量 变量_B7F80225, 整数型
    .局部变量 变量_B8F80225, 整数型
    .局部变量 变量_BEF80225, 整数型
    .局部变量 变量_BFF80225, 整数型
    .局部变量 变量_C7F80225, 整数型
    .局部变量 变量_CBF80225, 整数型
    .局部变量 变量_D2F80225, 字节集
    .局部变量 变量_DDF80225, 整数型
    .局部变量 变量_B6100325, 整数型
    .局部变量 变量_DEF80225, 长整数型

    .如果 (是否为空 (NTP服务器))
        变量_9FF80225 ＝ “time.windows.com”
    .否则
        变量_9FF80225 ＝ NTP服务器
    .如果结束
    变量_DEF80225 ＝ #<?未知本地类型?>
    .如果真 (WSAStartup (合并短整数 (1, 1), 变量_9AF80225) ＝ #ERROR_SUCCESS)
        变量_9BF80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 32)
        __set (变量_9BF80225, 4, #<?未知本地类型?>)
        __set (变量_9BF80225, 8, #SOCK_DGRAM)
        __set (变量_9BF80225, 12, #IPPROTO_UDP)
        
        
        .如果真 (DLL_getaddrinfo (变量_9FF80225, “123”, 变量_9BF80225, 取指针整数_ (变量_AEF80225)) ＝ #ERROR_SUCCESS)
            变量_AFF80225 ＝ __get (变量_AEF80225, 4)
            变量_B0F80225 ＝ __get (变量_AEF80225, 8)
            变量_B1F80225 ＝ __get (变量_AEF80225, 12)
            变量_B2F80225 ＝ socket (变量_AFF80225, 变量_B0F80225, 变量_B1F80225)
            .如果真 (变量_B2F80225 ≠ #<?未知本地类型?>)
                变量_B7F80225 ＝ __get (变量_AEF80225, 16)
                变量_B8F80225 ＝ __get (变量_AEF80225, 24)
                变量_BEF80225 ＝ 48
                变量_BFF80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_BEF80225)
                __set (变量_BFF80225, 0, 27)
                变量_C7F80225 ＝ DLL_sendto (变量_B2F80225, 变量_BFF80225, 变量_BEF80225, 0, 变量_B8F80225, 变量_B7F80225)
                .如果真 (变量_C7F80225 ＝ 变量_BEF80225)
                    变量_CBF80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 260)
                    __set (变量_CBF80225, 0, 1)
                    __set (变量_CBF80225, 4, 变量_B2F80225)
                    变量_D2F80225 ＝ { 3, 0, 0, 0, 0, 0, 0, 0 }
                    变量_C7F80225 ＝ DLL_select (变量_B2F80225 ＋ 1, 变量_CBF80225, #NULL, #NULL, 取指针_字节集型 (变量_D2F80225))
                    .如果真 (变量_C7F80225 ＞ 0)
                        memset (变量_BFF80225, 0, 变量_BEF80225)
                        变量_C7F80225 ＝ DLL_recvfrom2 (变量_B2F80225, 变量_BFF80225, 变量_BEF80225, 0, 变量_B8F80225, 变量_B7F80225)
                        .如果真 (变量_C7F80225 ＝ 变量_BEF80225)
                            变量_DDF80225 ＝ __get (变量_BFF80225, 40)
                            变量_DEF80225 ＝ 整数_有符号转无符号 (DLL_ntohl (变量_DDF80225)) － 2208988800
                            .如果真 (精确到毫秒)
                                变量_B6100325 ＝ __get (变量_BFF80225, 44)
                                变量_DEF80225 ＝ 变量_DEF80225 × 1000
                                变量_DEF80225 ＝ 变量_DEF80225 ＋ 整数_有符号转无符号 (DLL_ntohl (变量_B6100325)) × 2e-010 × 1000
                            .如果真结束
                            
                        .如果真结束
                        
                    .如果真结束
                    LocalFree (变量_CBF80225)
                .如果真结束
                LocalFree (变量_BFF80225)
                closesocket (变量_B2F80225)
            .如果真结束
            DLL_freeaddrinfo (变量_AEF80225)
        .如果真结束
        LocalFree (变量_9BF80225)
        WSACleanup ()
    .如果真结束
    返回 (变量_DEF80225)

.子程序 时间_格式化毫秒, 文本型, 公开, 返回的时间值将始终采用hh小时mm分钟ss秒的形式。超过二十四小时的时间不会转换为天或月。几分之一秒被忽略。
    .参数 毫秒, 整数型
    .局部变量 变量_14F90225, 整数型
    .局部变量 变量_15F90225, 整数型
    .局部变量 变量_16F90225, 文本型

    变量_14F90225 ＝ DLL_StrFromTimeIntervalA (#NULL, 0, 毫秒, 10)
    变量_14F90225 ＝ 变量_14F90225 ＋ 1
    变量_15F90225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_14F90225)
    DLL_StrFromTimeIntervalA (变量_15F90225, 变量_14F90225, 毫秒, 10)
    变量_16F90225 ＝ 指针到文本 (变量_15F90225)
    LocalFree (变量_15F90225)
    返回 (变量_16F90225)

.子程序 DateTimeToVariantTime, 日期时间型, 公开, 20220628113010.454317+480 => 2022-06-28 11:30:10
    .参数 DateTime, 字节集
    .局部变量 变量_E6080325, 整数型
    .局部变量 变量_E7080325, 整数型
    .局部变量 变量_E8080325, 长整数型
    .局部变量 变量_E9080325, 日期时间型
    .局部变量 变量_EA080325, 整数型

    CoInitialize (#NULL)
    变量_EA080325 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_E2080328), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_E3080328), 变量_E6080325)
    .如果真 (变量_EA080325 ＝ #<?未知本地类型?> 且 变量_E6080325 ≠ #NULL)
        变量_EA080325 ＝ CallObject (变量_E6080325, #<?未知本地类型?>, 取指针_字节集型 (DateTime), , , , , , , , )
        .如果真 (变量_EA080325 ＝ #<?未知本地类型?>)
            变量_EA080325 ＝ CallObject (变量_E6080325, #<?未知本地类型?>, #<?未知本地类型?>, 取指针整数_ (变量_E7080325), , , , , , , )
            .如果真 (变量_EA080325 ＝ #<?未知本地类型?>)
                变量_E8080325 ＝ 到长整数 (编码_Unicode到Ansi (指针_到字节集W (变量_E7080325)))
                变量_E9080325 ＝ QuadPartToVariantTime (变量_E8080325)
            .如果真结束
            
        .如果真结束
        SafeRelease (变量_E6080325)
    .如果真结束
    CoUninitialize ()
    返回 (变量_E9080325)

.子程序 LdapToVariantTime, 文本型, 公开, 130305048577611542 => 2013-12-03 08:40:57
    .参数 Ldap时间戳, 长整数型
    .局部变量 变量_13100325, 长整数型
    .局部变量 变量_14100325, 日期时间型

    变量_13100325 ＝ 到长整数 (VariantTimeToQuadPart ([1899年12月30日]) ＋ Ldap时间戳)
    变量_14100325 ＝ QuadPartToVariantTime (变量_13100325)
    返回 (时间_到文本 (变量_14100325, 1, , 2))

.子程序 VariantTimeToLdap, 文本型, 公开, 2013-12-03 08:40:57 => 130305048570000000
    .参数 vTime, 日期时间型, 可空
    .局部变量 变量_19100325, 精易_时间
    .局部变量 变量_1A100325, FILETIME
    .局部变量 变量_16100325, 长整数型

    .如果 (是否为空 (vTime))
        DLL_GetSystemTime (变量_19100325)
        DLL_SystemTimeToFileTime (变量_19100325, 变量_1A100325)
        变量_16100325 ＝ 合并长整数 (变量_1A100325.dwLowDateTime, 变量_1A100325.dwHighDateTime)
    .否则
        变量_16100325 ＝ VariantTimeToQuadPart (vTime)
    .如果结束
    变量_16100325 ＝ 到长整数 (变量_16100325 － VariantTimeToQuadPart ([1899年12月30日]))
    返回 (到文本 (变量_16100325))

