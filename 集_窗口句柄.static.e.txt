.版本 2

.程序集 集_窗口句柄
.程序集变量 类变量_C8130115, 精易_窗口信息, , "0"
.程序集变量 类变量_E57B0115, 整数型
.程序集变量 类变量_E67B0115, 子程序指针
.程序集变量 类变量_1CC30115, 整数型
.程序集变量 类变量_A2D50215, 整数型
.程序集变量 类变量_11E00215, 整数型
.程序集变量 类变量_30E00215, 整数型
.程序集变量 类变量_B6E30215, 整数型

.子程序 窗口_重画, 逻辑型, 公开, InvalidateRect
    .参数 窗口句柄, 整数型
    .参数 清除背景, 逻辑型, 可空

    返回 (InvalidateRect (窗口句柄, 0, 选择 (清除背景, 1, 0)) ≠ 0)

.子程序 窗口_隐藏任务按钮, , 公开, 顶级窗口,会在任务条里显示一个按钮.通过本功能可以将其隐藏
    .参数 窗口句柄, 整数型

    SetWindowLongA (窗口句柄, -8, GetDesktopWindow ())

.子程序 窗口_是否响应, 逻辑型, 公开, 返回 真=窗口有效且能及时响应.假=窗口无效或已死掉失去了响应
    .参数 窗口句柄, 整数型

    返回 (SendMessageTimeoutA (窗口句柄, 0, 0, 0, #<?未知本地类型?>, 128, 0) ≠ 0)

.子程序 窗口_取光标坐标, 逻辑型, 公开, 将插入标记的位置（按客户区坐标）信息拷贝到指定的POINT结构中
    .参数 参_坐标, 精易_坐标, 参考
    .局部变量 变量_4EC90225, 逻辑型

    变量_4EC90225 ＝ GetCaretPos (参_坐标) ≠ 0
    返回 (变量_4EC90225)

.子程序 窗口_发送拖放消息, 逻辑型, 公开, 向指定窗口发送拖拽消息_该函数为ANSIC文件名使用；不支持拖放对象
    .参数 参_句柄, 整数型, , 接受拖拽消息的句柄
    .参数 参_路径, 文本型, , 需要拖放的文件路径
    .局部变量 变量_B1B00225, 文本型
    .局部变量 变量_B2B00225, 整数型
    .局部变量 变量_B3B00225, 字节集
    .局部变量 变量_B4B00225, 整数型
    .局部变量 变量_B5B00225, 整数型
    .局部变量 变量_B6B00225, 整数型
    .局部变量 变量_B7B00225, 整数型

    变量_B2B00225 ＝ 参_句柄
    GetWindowThreadProcessId (变量_B2B00225, 变量_B6B00225)
    变量_B1B00225 ＝ 参_路径
    变量_B3B00225 ＝ 到字节集 (20) ＋ 取空白字节集 (16) ＋ 到字节集 (变量_B1B00225)
    变量_B5B00225 ＝ OpenProcess (位或 (8, 32), 0, 变量_B6B00225)
    变量_B4B00225 ＝ VirtualAllocEx (变量_B5B00225, 0, 取文本长度 (变量_B1B00225) ＋ 20, 4096, 4)
    DLL_WriteProcessMemory3 (变量_B5B00225, 变量_B4B00225, lstrcpyn_字节集 (变量_B3B00225, 变量_B3B00225, 0), 取文本长度 (变量_B1B00225) ＋ 20, 变量_B7B00225)
    .如果真 (变量_B7B00225 ≠ 取文本长度 (变量_B1B00225) ＋ 20)
        返回 (假)
    .如果真结束
    SendMessageA (变量_B2B00225, 563, 变量_B4B00225, 0)
    返回 (真)

.子程序 窗口_循环关闭, , 公开, 循环关闭一个窗口
    .参数 类名, 文本型, 可空, 窗口类名，可空
    .参数 标题, 文本型, 可空, 窗口标题，可空

    .判断循环首 (FindWindowA (类名, 标题) ≠ 0)
        PostMessageA (FindWindowA (类名, 标题), 16, 0, 0)
    .判断循环尾 ()

.子程序 窗口_嵌入桌面, 整数型, 公开, 返回前一个父窗口的句柄 (兼容Win10)
    .参数 窗口句柄, 整数型
    .局部变量 变量_CDAD0225, 整数型
    .局部变量 变量_CEAD0225, 整数型

    变量_CDAD0225 ＝ GetWorkerW ()
    变量_CEAD0225 ＝ SetParent (窗口句柄, 变量_CDAD0225)
    窗口_置位置和大小 (窗口句柄, , , , )
    返回 (变量_CEAD0225)

.子程序 GetWorkerW, 整数型
    .局部变量 变量_B9E30225, 整数型
    .局部变量 变量_BAE30225, 整数型

    变量_B9E30225 ＝ FindWindowA (“Progman”, 字符 (0))
    SendMessageTimeoutA (变量_B9E30225, 1324, 0, 0, #SMTO_NORMAL, 1000, 变量_BAE30225)
    EnumWindows (&EnumWindowsProc, 0)
    ShowWindow (类变量_B6E30215, #SW_HIDE)
    返回 (变量_B9E30225)

.子程序 EnumWindowsProc, 逻辑型
    .参数 变量_BBE30225, 整数型
    .参数 变量_BCE30225, 整数型
    .局部变量 变量_BDE30225, 整数型

    变量_BDE30225 ＝ FindWindowExA (变量_BBE30225, 0, 取指针_文本型 (“SHELLDLL_DefView”), 0)
    .如果真 (变量_BDE30225 ≠ 0)
        类变量_B6E30215 ＝ FindWindowExA (0, 变量_BBE30225, 取指针_文本型 (“WorkerW”), 0)
    .如果真结束
    返回 (真)

.子程序 窗口_是否全屏, 逻辑型, 公开
    .参数 窗口句柄, 整数型
    .局部变量 变量_12AC0225, 精易_矩形
    .局部变量 变量_13AC0225, 整数型
    .局部变量 变量_14AC0225, 整数型

    GetWindowRect (窗口句柄, 变量_12AC0225)
    变量_13AC0225 ＝ 取屏幕宽度 () － 变量_12AC0225.左边 ＋ 变量_12AC0225.右边 － 取屏幕宽度 ()
    变量_14AC0225 ＝ 取屏幕高度 () － 变量_12AC0225.顶边 ＋ 变量_12AC0225.底边 － 取屏幕高度 ()
    .如果真 (变量_13AC0225 ＞ 到整数 (取屏幕宽度 () － 50) 且 变量_14AC0225 ＞ 到整数 (取屏幕高度 () － 50))
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 窗口_取光标位置, 精易_矩形, 公开, 命令使用请查看例题。注意!.使用该命令时,需要保证被取光标位置的编辑框 [拥有输入焦点] 否则命令将会失败
    .参数 窗口句柄, 整数型, , 如果是自身，请直接输入-1
    .局部变量 变量_7FBA0125, 自定义_70BA0141
    .局部变量 变量_80BA0125, 精易_矩形
    .局部变量 变量_81BA0125, 整数型

    .判断开始 (窗口句柄 ＝ -1)
        变量_81BA0125 ＝ 线程_取自线程ID ()
    .默认
        变量_81BA0125 ＝ 线程_取ID (窗口句柄)
    .判断结束
    变量_7FBA0125.成员_71BA0135 ＝ 48
    GetGUIThreadInfo (变量_81BA0125, 变量_7FBA0125)
    变量_80BA0125 ＝ 变量_7FBA0125.成员_79BA0135
    返回 (变量_80BA0125)
    

.子程序 窗口_控件调整_销毁, , 公开, 销毁指定句柄的窗口控件
    .参数 窗口句柄, 整数型

    SetWindowLongA (窗口句柄, -4, 类变量_1CC30115)

.子程序 窗口控件调整过程, 整数型
    .参数 变量_15C30125, 整数型
    .参数 变量_16C30125, 整数型
    .参数 变量_17C30125, 整数型
    .参数 变量_18C30125, 整数型
    .局部变量 变量_19C30125, 整数型

    变量_19C30125 ＝ CallWindowProcA (类变量_1CC30115, 变量_15C30125, 变量_16C30125, 变量_17C30125, 变量_18C30125)
    .如果真 (变量_16C30125 ＝ 132)
        .如果真 (变量_19C30125 ＝ 1)
            变量_19C30125 ＝ 2
        .如果真结束
        
        
        
        
        
        
        
        
        
        
        
        
    .如果真结束
    返回 (变量_19C30125)

.子程序 窗口_控件调整_创建, , 公开, 在指定句柄窗口上创建自定义的控件
    .参数 窗口句柄, 整数型

    类变量_1CC30115 ＝ GetWindowLongA (窗口句柄, #GWL_WNDPROC)
    SetWindowLongA (窗口句柄, #GWL_WNDPROC, 到整数 (&窗口控件调整过程))

.子程序 窗口_取光标位置1, 精易_坐标, 公开
    .参数 线程ID, 整数型, 可空, 可空，留空为自身的线程ID
    .局部变量 变量_83BA0125, 自定义_70BA0141
    .局部变量 变量_84BA0125, 精易_坐标

    .如果真 (是否为空 (线程ID))
        线程ID ＝ GetCurrentThread ()
    .如果真结束
    变量_83BA0125.成员_71BA0135 ＝ 64
    变量_83BA0125.成员_71BA0135 ＝ 48
    GetGUIThreadInfo (线程ID, 变量_83BA0125)
    变量_84BA0125.横 ＝ 变量_83BA0125.成员_79BA0135.左边
    变量_84BA0125.纵 ＝ 变量_83BA0125.成员_79BA0135.顶边
    返回 (变量_84BA0125)

.子程序 窗口_是否在屏幕内, 逻辑型, 公开, 判断指定窗口是否在屏幕内，在屏幕内返回真，否则返回假
    .参数 窗口句柄, 整数型, , 要判断的窗口句柄
    .参数 是否自动校正, 逻辑型, , 如果窗口的左边、顶边小于0或大于屏蔽宽度或高度，将自动校正。
    .局部变量 变量_07B90125, 精易_位置和大小
    .局部变量 变量_09B90125, 逻辑型
    .局部变量 变量_0CB90125, 整数型
    .局部变量 变量_0DB90125, 整数型

    变量_07B90125 ＝ 窗口_取位置和大小 (窗口句柄)
    .如果真 (变量_07B90125.左边 ＜ 0 或 变量_07B90125.顶边 ＜ 0)
        变量_09B90125 ＝ 真
    .如果真结束
    系统_取屏幕分辨率 (, , 变量_0CB90125, 变量_0DB90125, )
    .如果真 (变量_07B90125.左边 ＞ 变量_0CB90125 或 变量_07B90125.顶边 ＞ 变量_0DB90125)
        变量_09B90125 ＝ 真
    .如果真结束
    .如果真 (变量_09B90125 且 是否自动校正)
        窗口_置位置和大小 (窗口句柄, 50, 50, 变量_07B90125.宽度, 变量_07B90125.高度)
    .如果真结束
    返回 (变量_09B90125 ＝ 假)

.子程序 窗口_监视热键_注册, , 公开, 使用例程：http://bbs.125.la/thread-40592-1-1.html  卸载：窗口_监视热键_卸载
    .参数 响应监视事件, 子程序指针, , 响应监视事件,3个参数,都为整数型,第1个为功能键,第2个为键代码,第3个为按键状态(1为按下，2为放开)

    .如果真 (类变量_E57B0115 ≠ 0)
        返回 ()
    .如果真结束
    类变量_E67B0115 ＝ 响应监视事件
    类变量_E57B0115 ＝ SetWindowsHookExA (13, &监视处理, GetModuleHandleA1 (0), 0)

.子程序 监视处理, 整数型
    .参数 变量_A1B90125, 整数型
    .参数 变量_A2B90125, 整数型
    .参数 变量_A3B90125, 整数型
    .局部变量 变量_A5B90125, 整数型
    .局部变量 变量_A6B90125, 自定义_FBB90141

    .如果真 (变量_A1B90125 ＝ 0)
        DLL_RtlMoveMemory17 (变量_A6B90125, 变量_A3B90125, 20)
        .判断开始 (变量_A6B90125.成员_FEB90135 ＜ 35)
            变量_A5B90125 ＝ 变量_A6B90125.成员_FCB90135
            .判断开始 (变量_A6B90125.成员_FCB90135 ＝ 160 或 变量_A6B90125.成员_FCB90135 ＝ 161)
                全局变量_A4B90105 ＝ #Shift键
            .判断 (变量_A6B90125.成员_FCB90135 ＝ 162 或 变量_A6B90125.成员_FCB90135 ＝ 163)
                全局变量_A4B90105 ＝ #Ctrl键
            .判断 (变量_A6B90125.成员_FCB90135 ＝ 164 或 变量_A6B90125.成员_FCB90135 ＝ 165)
                全局变量_A4B90105 ＝ #Alt键
            .判断 (变量_A6B90125.成员_FCB90135 ＝ 91 或 变量_A6B90125.成员_FCB90135 ＝ 92)
                全局变量_A4B90105 ＝ 91
            .默认
                
            .判断结束
            程序_执行整数子程序 (类变量_E67B0115, 全局变量_A4B90105, 变量_A5B90125, 1)
            
        .判断 (变量_A6B90125.成员_FEB90135 ＞ 127)
            变量_A5B90125 ＝ 变量_A6B90125.成员_FCB90135
            .判断开始 (变量_A6B90125.成员_FCB90135 ＝ 160 或 变量_A6B90125.成员_FCB90135 ＝ 161)
                全局变量_A4B90105 ＝ 0
                
            .判断 (变量_A6B90125.成员_FCB90135 ＝ 162 或 变量_A6B90125.成员_FCB90135 ＝ 163)
                全局变量_A4B90105 ＝ 0
                
            .判断 (变量_A6B90125.成员_FCB90135 ＝ 164 或 变量_A6B90125.成员_FCB90135 ＝ 165)
                全局变量_A4B90105 ＝ 0
                
            .判断 (变量_A6B90125.成员_FCB90135 ＝ 91 或 变量_A6B90125.成员_FCB90135 ＝ 92)
                全局变量_A4B90105 ＝ 0
            .默认
                
            .判断结束
            程序_执行整数子程序 (类变量_E67B0115, 全局变量_A4B90105, 变量_A5B90125, 2)
        .默认
            
        .判断结束
        
    .如果真结束
    返回 (CallNextHookEx (类变量_E57B0115, 变量_A1B90125, 变量_A2B90125, 变量_A3B90125))

.子程序 窗口_取小图标, 字节集, 公开, 成功返回图标数据，失败返回空字节集{ }。
    .参数 主窗口句柄, 整数型, , 当前窗口的句柄
    .参数 hWnd, 整数型, , 目标窗口的句柄
    .局部变量 变量_9BBD0125, 整数型

    变量_9BBD0125 ＝ GetClassLongA (hWnd, -34)
    .如果真 (变量_9BBD0125 ＝ 0)
        变量_9BBD0125 ＝ SendMessageA (hWnd, 127, 0, 0)
    .如果真结束
    .如果真 (变量_9BBD0125 ＝ 0)
        .如果真 (窗口_取父句柄 (hWnd) ＝ 0)
            变量_9BBD0125 ＝ 文件_取图标句柄 (进程_取程序路径 (窗口_句柄取进程ID (hWnd)))
        .如果真结束
        
    .如果真结束
    返回 (图片_通过句柄取图标 (主窗口句柄, 变量_9BBD0125, 16, 16, #白色))

.子程序 窗口_监视热键_卸载, , 公开, 卸载键盘HOOK
    UnhookWindowsHookEx (类变量_E57B0115)
    类变量_E57B0115 ＝ 0

.子程序 窗口_取控件ID, 整数型, 公开, 根据窗口句柄取出窗口控件的ID,顶级窗口将返回0;
    .参数 子窗口句柄, 整数型

    返回 (GetDlgCtrlID (子窗口句柄))

.子程序 窗口_控件ID取句柄, 整数型, 公开, 根据控件ID取出窗口句柄;
    .参数 父句柄, 整数型, , 上一级的窗口句柄;
    .参数 欲取句柄的控件ID, 整数型, , 控件ID用 "窗口_取控件ID()"命令取回;

    返回 (GetDlgItem (父句柄, 欲取句柄的控件ID))

.子程序 窗口_句柄取线程句柄, 整数型, 公开, 成功返回线程句柄,失败返回0
    .参数 窗口句柄, 整数型, 可空, 目标窗口句柄

    返回 (OpenThread (2032639, 0, 线程_取ID (窗口句柄)))

.子程序 窗口_置透明颜色, , 公开, 透明窗口指定的底色
    .参数 窗口句柄, 整数型, , 目标窗口句柄
    .参数 透明的颜色, 整数型

    SetWindowLongA (窗口句柄, -20, 524288)
    SetLayeredWindowAttributes (窗口句柄, 透明的颜色, 255, 1)

.子程序 窗口_激活, 整数型, 公开, 若函数调用成功，则返回原先活动窗口的句柄。若函数调用失败，则返回值为NULL   。
    .参数 窗口句柄, 整数型, 可空, 欲激活窗口的句柄
    .局部变量 变量_F5E50125, 整数型
    .局部变量 变量_F6E50125, 整数型
    .局部变量 变量_F7E50125, 整数型

    变量_F5E50125 ＝ GetCurrentThreadId ()
    变量_F6E50125 ＝ GetWindowThreadProcessId (窗口句柄, 0)
    AttachThreadInput (变量_F6E50125, 变量_F5E50125, 真)
    变量_F7E50125 ＝ SetActiveWindow (窗口句柄)
    AttachThreadInput (变量_F6E50125, 变量_F5E50125, 假)
    返回 (变量_F7E50125)

.子程序 窗口_还原, 逻辑型, 公开, 恢复一个最小化的程序，并将其激活；成功把回真，失败返回假；
    .参数 窗口句柄, 整数型, , 欲还原的窗口句柄

    返回 (OpenIcon (窗口句柄))

.子程序 窗口_置顶, 逻辑型, 公开, 设置窗口在最顶端,成功返回真，失败返回假
    .参数 窗口句柄, 整数型, , 欲设置的窗口句柄
    .参数 是否激活, 逻辑型, 可空, 默认为激活,如果为假,窗口显示后不激活,不获取键盘焦点

    是否激活 ＝ 是否为空 (是否激活) 或 是否激活
    返回 (SetWindowPos (窗口句柄, #HWND_TOPMOST, 0, 0, 0, 0, 位或 (#SWP_NOMOVE, #SWP_NOSIZE, 选择 (是否激活, 0, #SWP_NOACTIVATE))) ≠ 0)

.子程序 窗口_关闭, , 公开, 将指定窗口销毁(无返回值)
    .参数 窗口句柄, 整数型, , 欲销毁窗口的句柄

    DLL_PostMessageW (窗口句柄, #<?未知本地类型?>, #NULL, #NULL)

.子程序 窗口_取字符串宽度, 整数型, 公开, 取一段文本在屏幕上有多少个像素宽
    .参数 窗口句柄, 整数型
    .参数 字符串, 文本型
    .局部变量 变量_4BC20125, 精易_矩形
    .局部变量 变量_4CC20125, 整数型

    GetWindowRect (窗口句柄, 变量_4BC20125)
    变量_4CC20125 ＝ GetDC (窗口句柄)
    DrawTextA (变量_4CC20125, 字符串, -1, 变量_4BC20125, 位或 (1024, 32))
    ReleaseDC (0, 变量_4CC20125)
    返回 (变量_4BC20125.右边 － 变量_4BC20125.左边)

.子程序 窗口_按类名枚举, , 公开, 根据类名枚举窗口
    .参数 类名, 文本型
    .参数 子程序地址, 子程序指针, , 第一个参数为句柄
    .参数 备用参数, 整数型, 可空, 弄完记得释放
    .局部变量 变量_62C20125, 整数型
    .局部变量 变量_89100325, 整数型

    变量_62C20125 ＝ FindWindowExA (#NULL, #NULL, 取指针文本_ (类名), #NULL)
    .判断循环首 (变量_62C20125 ≠ 0)
        变量_89100325 ＝ 调用子程序_ (到整数 (子程序地址), 变量_62C20125, 备用参数, , , , , , , , , , , , , )
        .如果真 (变量_89100325 ＝ 0)
            跳出循环 ()
        .如果真结束
        变量_62C20125 ＝ FindWindowExA (#NULL, 变量_62C20125, 取指针文本_ (类名), #NULL)
    .判断循环尾 ()

.子程序 窗口_强制显示, 整数型, 公开, 对窗口进行置顶、激活等操作（注：非强制显示隐藏窗口）
    .参数 句柄, 整数型, , 目标窗口句柄
    .参数 总在最前, 逻辑型, 可空, 默认为假:取消总在最前  真:总在最前

    返回 (SetWindowPos (句柄, 选择 (总在最前, #HWND_TOPMOST, #HWND_NOTOPMOST), 0, 0, 0, 0, 位或 (#SWP_NOMOVE, #SWP_NOSIZE, #<?未知本地类型?>)))

.子程序 窗口_创建Flash, 整数型, 公开, 在指定句柄窗口上创建一个FLASH控件
    .参数 父窗口句柄, 整数型
    .参数 Flash地址, 文本型, , 可以为网络和本地的
    .参数 窗口宽度, 整数型
    .参数 窗口高度, 整数型
    .参数 窗口左边, 整数型, 可空, 可空。默认为1。
    .参数 窗口顶边, 整数型, 可空, 可空。默认为1。

    .如果真 (是否为空 (窗口左边))
        窗口左边 ＝ 1
    .如果真结束
    .如果真 (是否为空 (窗口顶边))
        窗口顶边 ＝ 1
    .如果真结束
    AtlAxWinInit ()
    返回 (CreateWindowExA (512, “AtlAxWin”, Flash地址, 位或 (1073741826, 268435456, 65536, 33554432), 窗口左边, 窗口顶边, 窗口宽度, 窗口高度, 父窗口句柄, 0, GetWindowLongA (父窗口句柄, -6), 0))

.子程序 窗口_闪动, , 公开, 无返回值
    .参数 窗口句柄, 整数型, , 指定闪动的窗口句柄 
    .参数 是否闪动, 逻辑型, , 是否闪动指定的窗口

    FlashWindow (窗口句柄, 是否闪动)

.子程序 窗口_闪动Ex, 逻辑型, 公开, 闪烁指定窗口，可选闪烁标题、任务栏、次数、速度，成功返回真，失败返回假。
    .参数 窗口句柄, 整数型, , 指定闪动的窗口句柄 
    .参数 闪烁类型, 整数型, 可空, 可为空,默认为标题闪烁,可选参数(多个值可相加);0=停止;1=标题;2=任务栏;3=标题与任务栏;4=连续
    .参数 闪烁次数, 整数型, 可空, 可为空,默认即1次.
    .参数 闪烁速度, 整数型, 可空, 可为空,即默认速度.单位为"毫秒"
    .局部变量 变量_CCD30125, 自定义_D4D30141

    变量_CCD30125.成员_D5D30135 ＝ 20
    变量_CCD30125.成员_D6D30135 ＝ 窗口句柄
    变量_CCD30125.成员_D8D30135 ＝ 选择 (是否为空 (闪烁次数), 1, 闪烁次数)
    变量_CCD30125.成员_D7D30135 ＝ 选择 (是否为空 (闪烁类型), 1, 闪烁类型)
    变量_CCD30125.成员_D9D30135 ＝ 闪烁速度
    返回 (DLL_FlashWindowEx (变量_CCD30125))

.子程序 窗口_写字, , 公开, 在指定的窗口上写字;
    .参数 窗口句柄, 整数型, 可空, 可空:默认为"当前窗口"
    .参数 内容, 文本型, 可空, 可空:默认为"精易论坛 bbs.125.la"
    .参数 字体, 文本型, 可空, 可空:默认为"宋体"
    .参数 字体大小, 整数型, 可空, 可空:默认为"28"
    .参数 字体颜色, 整数型, 可空, 可空:默认为"红色"
    .参数 横坐标, 整数型, 可空, 可空:默认为"0"
    .参数 纵坐标, 整数型, 可空, 可空:默认为"0"
    .局部变量 变量_F3AF0225, 整数型
    .局部变量 变量_F4AF0225, LOGFONT
    .局部变量 变量_F5AF0225, 整数型
    .局部变量 变量_F6AF0225, 整数型
    .局部变量 变量_F7AF0225, 整数型
    .局部变量 变量_F8AF0225, 整数型

    .判断开始 (是否为空 (窗口句柄))
        变量_F3AF0225 ＝ GetDC (GetForegroundWindow ())
    .默认
        变量_F3AF0225 ＝ GetDC (窗口句柄)
    .判断结束
    .如果真 (是否为空 (内容))
        内容 ＝ “精易论坛 bbs.125.la”
    .如果真结束
    .如果真 (是否为空 (字体))
        字体 ＝ “宋体”
    .如果真结束
    .如果真 (是否为空 (字体颜色))
        字体颜色 ＝ 255
    .如果真结束
    .如果真 (是否为空 (字体大小))
        字体大小 ＝ 26
    .如果真结束
    .如果真 (变量_F3AF0225 ＝ 0)
        返回 ()
    .如果真结束
    变量_F4AF0225.lfCharSet ＝ #<?未知本地类型?>
    memcpy (取数据_通用型_数组 (变量_F4AF0225.lfFaceName), 取指针_文本型 (字体), 取文本长度 (字体))
    变量_F4AF0225.lfHeight ＝ 字体大小
    变量_F5AF0225 ＝ CreateFontIndirectA (变量_F4AF0225)
    变量_F6AF0225 ＝ SelectObject (变量_F3AF0225, 变量_F5AF0225)
    变量_F7AF0225 ＝ SetBkMode (变量_F3AF0225, #<?未知本地类型?>)
    变量_F8AF0225 ＝ SetTextColor (变量_F3AF0225, 字体颜色)
    TextOutA (变量_F3AF0225, 横坐标, 纵坐标, 内容, 取文本长度 (内容))
    SetBkMode (变量_F3AF0225, 变量_F7AF0225)
    SetTextColor (变量_F3AF0225, 变量_F8AF0225)
    SelectObject (变量_F3AF0225, 变量_F6AF0225)
    DeleteObject (变量_F5AF0225)
    ReleaseDC (窗口句柄, 变量_F3AF0225)

.子程序 窗口_置父, 整数型, 公开, 指定一个窗口的新父(返回  前一个父窗口的句柄)
    .参数 子窗口句柄, 整数型, , 子窗口的句柄
    .参数 父窗口句柄, 整数型, , hWndChild的新父

    返回 (SetParent (子窗口句柄, 父窗口句柄))

.子程序 窗口_置父彗星, 逻辑型, 公开, 真正的置父窗口  By:邓学彬(泪闯天涯)
    .参数 父窗口句柄, 整数型
    .参数 子窗口句柄, 整数型
    .参数 子窗口左边, 整数型, 可空, 留空默认为0
    .参数 子窗口顶边, 整数型, 可空, 留空默认为0
    .参数 子窗口宽度, 整数型, 可空, 留空宽度不变
    .参数 子窗口高度, 整数型, 可空, 留空高度不变
    .局部变量 变量_BDB70225, 整数型
    .局部变量 变量_BEB70225, 整数型
    .局部变量 变量_BFB70225, 精易_矩形
    .局部变量 变量_C0B70225, 整数型
    .局部变量 变量_C1B70225, 整数型

    .判断开始 (父窗口句柄 ＝ 0)
        变量_C0B70225 ＝ GetPropA (子窗口句柄, “hwndparentold_tmp”)
        变量_BDB70225 ＝ GetPropA (子窗口句柄, “styleold_tmp”)
        SetWindowLongA (子窗口句柄, #GWL_STYLE, 变量_BDB70225)
        SetParent (子窗口句柄, 变量_C0B70225)
        RemovePropA (子窗口句柄, “hwndparentold_tmp”)
        RemovePropA (子窗口句柄, “styleold_tmp”)
        
    .默认
        
        SetParent (子窗口句柄, 父窗口句柄)
        
        变量_C0B70225 ＝ GetParent (子窗口句柄)
        变量_C1B70225 ＝ GetWindowLongA (子窗口句柄, #GWL_STYLE)
        变量_BDB70225 ＝ GetWindowLongA (子窗口句柄, #GWL_STYLE)
        
        变量_BEB70225 ＝ 位与 (变量_BDB70225, 位取反 (#WS_POPUP))
        变量_BEB70225 ＝ 位或 (变量_BEB70225, #WS_CHILD)
        
        SetPropA (子窗口句柄, “hwndparentold_tmp”, 变量_C0B70225)
        SetPropA (子窗口句柄, “styleold_tmp”, 变量_BDB70225)
        
        .如果真 (变量_BDB70225 ≠ 变量_BEB70225)
            SetWindowLongA (子窗口句柄, #GWL_STYLE, 变量_BEB70225)
        .如果真结束
        
    .判断结束
    
    GetWindowRect (子窗口句柄, 变量_BFB70225)
    .如果真 (是否为空 (子窗口宽度))
        子窗口宽度 ＝ 变量_BFB70225.右边 － 变量_BFB70225.左边
    .如果真结束
    .如果真 (是否为空 (子窗口高度))
        子窗口高度 ＝ 变量_BFB70225.底边 － 变量_BFB70225.顶边
    .如果真结束
    返回 (MoveWindow (子窗口句柄, 子窗口左边, 子窗口顶边, 子窗口宽度, 子窗口高度, 真))
    
    
    

.子程序 窗口_取句柄, 整数型, 公开, 成功返回控件的句柄，失败返回0
    .参数 父窗口句柄, 整数型, 可空, 如果是取顶级的窗口句柄请留空
    .参数 子窗口句柄, 整数型, 可空, 如果是取顶级的窗口句柄请留空
    .参数 窗口类名, 文本型, 可空, 窗口的类名
    .参数 窗口标题, 文本型, 可空, 窗口的标题

    返回 (FindWindowExA (父窗口句柄, 子窗口句柄, 取指针文本_ (窗口类名), 取指针文本_ (窗口标题)))

.子程序 窗口_取句柄_模糊, 整数型, 公开, 成功返回指定窗口句柄,失败返回0
    .参数 窗口标题, 文本型, 可空, 标题支持模糊，如窗口的标题为【精易⌒技术交流群①】你只需要【流群①】取可
    .参数 窗口类名, 文本型, 可空, 类名必须为精确的,或者不填
    .局部变量 变量_34770125, 整数型
    .局部变量 变量_22D40125, 文本型

    .判断循环首 (真)
        变量_34770125 ＝ FindWindowExA (0, 变量_34770125, 取指针文本_ (窗口类名), 0)
        .如果 (变量_34770125 ≠ 0)
            变量_22D40125 ＝ 到小写 (窗口_取标题 (变量_34770125))
            .如果真 (寻找文本 (变量_22D40125, 到小写 (窗口标题), , 假) ≠ -1)
                返回 (变量_34770125)
            .如果真结束
            
        .否则
            跳出循环 ()
        .如果结束
        
    .判断循环尾 ()
    返回 (0)

.子程序 窗口_取坐标, 精易_坐标, 公开, 取鼠标在指定窗口上的坐标；
    .参数 窗口句柄, 整数型, , 目标窗口句柄
    .局部变量 变量_BC440125, 精易_坐标
    .局部变量 变量_BD440125, 精易_位置和大小
    .局部变量 变量_BE440125, 精易_坐标

    变量_BC440125 ＝ 鼠标_取位置 ()
    变量_BD440125 ＝ 窗口_取位置和大小 (窗口句柄)
    变量_BE440125.横 ＝ 变量_BC440125.横 － 变量_BD440125.左边
    变量_BE440125.纵 ＝ 变量_BC440125.纵 － 变量_BD440125.顶边
    返回 (变量_BE440125)

.子程序 窗口_取控件坐标, 精易_坐标, 公开, 取指定窗口(左上角\顶点)在屏幕中的位置
    .参数 窗口句柄, 整数型, 可空, 可空:则取当前窗口句柄的位置
    .局部变量 变量_BB120125, 精易_坐标

    .如果真 (窗口句柄 ＝ 0)
        窗口句柄 ＝ GetFocus ()
    .如果真结束
    变量_BB120125.横 ＝ 0
    变量_BB120125.纵 ＝ 0
    ClientToScreen (窗口句柄, 变量_BB120125)
    返回 (变量_BB120125)

.子程序 窗口_置焦点, 逻辑型, 公开, 把焦点置到指定的控件上,成功返回真，失败返回假；
    .参数 窗口句柄, 整数型, , 要置焦点的窗口句柄

    返回 (SetForegroundWindow (窗口句柄))

.子程序 窗口_取标题, 文本型, 公开, 获取指定窗口句柄的标题
    .参数 窗口句柄, 整数型

    返回 (编码_Unicode到Ansi (窗口_取标题W (窗口句柄)))

.子程序 窗口_取标题W, 字节集, 公开, 获取指定窗口句柄的标题
    .参数 窗口句柄, 整数型
    .局部变量 变量_EDEC0225, 整数型
    .局部变量 变量_EEEC0225, 字节集

    变量_EDEC0225 ＝ GetWindowTextLengthW (窗口句柄)
    .如果真 (变量_EDEC0225 ＝ 0)
        返回 ({ })
    .如果真结束
    变量_EDEC0225 ＝ 变量_EDEC0225 ＋ 1
    变量_EEEC0225 ＝ 取空白字节集 (变量_EDEC0225 × 2)
    GetWindowTextW (窗口句柄, 取指针_字节集型 (变量_EEEC0225), 变量_EDEC0225)
    返回 (变量_EEEC0225)

.子程序 窗口_置标题, 逻辑型, 公开, 改指定窗口句柄的窗口标题(非"0"表示成功,返回"0"表示失败)
    .参数 窗口句柄, 整数型, , 欲更改窗口标题的句柄
    .参数 新标题, 文本型, , 欲改成的新标题

    返回 (SetWindowTextA (窗口句柄, 新标题))

.子程序 窗口_取类名, 文本型, 公开, 取指定窗口句柄的窗口类名(返回窗口类名,失败返回空文本)
    .参数 窗口句柄, 整数型, , 欲取类名的窗口句柄
    .局部变量 变量_D2130125, 文本型

    变量_D2130125 ＝ 取空白文本 (#MAX_PATH ＋ 1)
    assignZero (变量_D2130125, GetClassNameA (窗口句柄, 变量_D2130125, #MAX_PATH))
    返回 (变量_D2130125)

.子程序 窗口_置状态, 逻辑型, 公开, 成功返回真，失败返回假
    .参数 窗口句柄, 整数型, , 欲设置状态的窗口句柄
    .参数 状态类型, 整数型, , 0 隐藏取消激活 1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活

    返回 (ShowWindow (窗口句柄, 状态类型))

.子程序 窗口_最大化, , 公开, 将指定窗口最大化(无返回值) 
    .参数 窗口句柄, 整数型, , 欲最大化窗口的句柄
    .参数 是否无边框, 逻辑型, 可空, 如果窗口边框为[无边框]请将此参数设置为真

    窗口_置焦点 (窗口句柄)
    .如果 (是否无边框)
        窗口_置位置和大小 (窗口句柄, -2, -2, GetSystemMetrics (62), GetSystemMetrics (61))
    .否则
        PostMessageA (窗口句柄, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果结束
    

.子程序 窗口_最小化, 逻辑型, 公开, 成功返回真，失败返回假
    .参数 窗口句柄, 整数型, , 欲最小化的窗口句柄

    返回 (CloseWindow (窗口句柄) ≠ 0)

.子程序 窗口_圆角化, , 公开, 把窗口的四个直角设置成圆角
    .参数 窗口句柄, 整数型, , 要设置圆角的窗口
    .参数 圆角椭圆的宽, 整数型, 可空, 一般为50
    .参数 圆角椭圆的高, 整数型, 可空, 一般为50
    .局部变量 变量_AF2C0125, 整数型
    .局部变量 变量_B02C0125, 整数型
    .局部变量 变量_B12C0125, 整数型

    .如果真 (是否为空 (圆角椭圆的宽))
        圆角椭圆的宽 ＝ 50
    .如果真结束
    .如果真 (是否为空 (圆角椭圆的高))
        圆角椭圆的高 ＝ 50
    .如果真结束
    窗口_取控件大小 (窗口句柄, 变量_B02C0125, 变量_B12C0125)
    变量_AF2C0125 ＝ CreateRoundRectRgn (0, 0, 变量_B02C0125, 变量_B12C0125, 圆角椭圆的宽, 圆角椭圆的高)
    SetWindowRgn (窗口句柄, 变量_AF2C0125, 真)
    DeleteObject (变量_AF2C0125)

.子程序 控件_圆角化, , 公开, 把窗口的四个直角设置成圆角
    .参数 控件句柄, 整数型, , 要设置圆角的窗口
    .参数 圆角椭圆的宽, 整数型, , 一般为50
    .参数 圆角椭圆的高, 整数型, , 一般为50
    .局部变量 变量_3D760125, 整数型
    .局部变量 变量_3E760125, 整数型
    .局部变量 变量_3F760125, 整数型

    窗口_取控件大小 (控件句柄, 变量_3E760125, 变量_3F760125)
    变量_3D760125 ＝ CreateRoundRectRgn (0, 0, 变量_3E760125, 变量_3F760125, 圆角椭圆的宽, 圆角椭圆的高)
    SetWindowRgn (控件句柄, 变量_3D760125, 真)
    DeleteObject (变量_3D760125)

.子程序 控件_隐藏滚动条, 逻辑型, 公开, 隐藏控件的滚动条
    .参数 窗口句柄, 整数型
    .参数 指定要隐藏的滚动条, 整数型, 可空, #SB_xxx
    .局部变量 变量_D2090325, 整数型

    控件_显示滚动条 (窗口句柄)
    变量_D2090325 ＝ SetWindowLongA (窗口句柄, #GWL_WNDPROC, 到整数 (&CtrlProc))
    .如果真 (变量_D2090325 ≠ #NULL)
        SetPropA (窗口句柄, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|oldCtrlProc”, 变量_D2090325)
        ShowScrollBar (窗口句柄, 指定要隐藏的滚动条, 假)
        SetPropA (窗口句柄, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|wBar”, 指定要隐藏的滚动条)
    .如果真结束
    返回 (变量_D2090325 ≠ #NULL)

.子程序 CtrlProc, 整数型
    .参数 变量_C2090325, 整数型
    .参数 变量_C3090325, 整数型
    .参数 变量_C4090325, 整数型
    .参数 变量_C5090325, 整数型
    .局部变量 变量_D3090325, 整数型
    .局部变量 变量_E4090325, 整数型

    变量_D3090325 ＝ GetPropA (变量_C2090325, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|oldCtrlProc”)
    .如果真 (变量_C3090325 ＝ #<?未知本地类型?> 或 变量_C3090325 ＝ #<?未知本地类型?>)
        变量_E4090325 ＝ GetPropA (变量_C2090325, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|wBar”)
        ShowScrollBar (变量_C2090325, 变量_E4090325, 假)
    .如果真结束
    返回 (CallWindowProcA (变量_D3090325, 变量_C2090325, 变量_C3090325, 变量_C4090325, 变量_C5090325))

.子程序 控件_显示滚动条, 逻辑型, 公开, 显示控件的滚动条
    .参数 窗口句柄, 整数型
    .局部变量 变量_D9090325, 整数型
    .局部变量 变量_FA090325, 整数型

    变量_D9090325 ＝ GetPropA (窗口句柄, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|oldCtrlProc”)
    .如果真 (变量_D9090325 ≠ #NULL)
        SetWindowLongA (窗口句柄, #GWL_WNDPROC, 变量_D9090325)
    .如果真结束
    RemovePropA (窗口句柄, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|oldCtrlProc”)
    变量_FA090325 ＝ GetPropA (窗口句柄, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|wBar”)
    ShowScrollBar (窗口句柄, 变量_FA090325, 真)
    RemovePropA (窗口句柄, “{005A681D-41C3-4289-AB0B-38EAC54A8462}|wBar”)
    返回 (变量_D9090325 ≠ #NULL)

.子程序 窗口_置窗口化, , 公开, 将指定窗口窗口化.通常用于游戏中..
    .参数 句柄, 整数型, , 欲窗口化的窗口句柄(通常有这一个参数就可以了,其它可以不设定)
    .参数 新宽度, 整数型, 可空, 窗口化后的窗口宽度 可空:800
    .参数 新高度, 整数型, 可空, 窗口化后的窗口高度 可空:600
    .参数 窗口标题, 文本型, 可空, 窗口化后的窗口标题 可空:不修改原窗口标题(有的游戏修改标题后会自动退出)
    .参数 是否带边框, 逻辑型, 可空, 可空:无边框窗口 真:带标题栏(有的游戏屏蔽了边框的修改,可通过其它方法来实现)
    .参数 分辨率_宽, 整数型, 可空, 可空:不修改分辨率(有的游戏全屏时修改了其分辨率,需改回去..)
    .参数 分辨率_高, 整数型, 可空, 可空:不修改分辨率

    .如果真 (是否带边框)
        SetWindowLongA (句柄, -16, 348913664)
    .如果真结束
    .如果真 (是否为空 (窗口标题) ＝ 假)
        SetWindowTextA (句柄, 窗口标题)
    .如果真结束
    .如果真 (是否为空 (新宽度))
        新宽度 ＝ 800
    .如果真结束
    .如果真 (是否为空 (新高度))
        新高度 ＝ 600
    .如果真结束
    MoveWindow (句柄, 0, 0, 新宽度, 新高度, 真)
    .如果真 (取反 (是否为空 (分辨率_宽) 且 是否为空 (分辨率_高)))
        系统_置屏幕分辨率 (, 分辨率_宽, 分辨率_高, , 1)
    .如果真结束
    

.子程序 窗口_取祖句柄, 整数型, 公开, 取一个窗口的顶级句柄，如果提供的句柄已是顶级句柄，将直接返回。
    .参数 窗口句柄, 整数型, , 欲取祖窗口句柄的子窗口句柄

    返回 (GetAncestor (窗口句柄, #<?未知本地类型?>))

.子程序 窗口_取父句柄, 整数型, 公开, 判断一个窗口是否有父窗口，如有直接返回该窗口的像窗口句柄，否则返回0
    .参数 窗口句柄, 整数型, , 欲取父窗口的窗口句柄

    返回 (GetParent (窗口句柄))

.子程序 窗口_取父句柄EX, 整数型, 公开, 获取指定窗口句柄的父句柄
    .参数 窗口句柄, 整数型
    .参数 超时, 整数型, 可空, 为空则无限循环
    .局部变量 变量_7A790225, 整数型
    .局部变量 变量_7B790225, 整数型, , "0"
    .局部变量 变量_7C790225, 整数型

    .如果真 (是否为空 (超时))
        超时 ＝ -1
    .如果真结束
    变量_7A790225 ＝ 进程_ID取窗口句柄 (窗口_句柄取进程ID (窗口句柄), , , 超时)
    窗口_枚举所有子窗口 (变量_7A790225, 变量_7B790225)
    加入成员 (变量_7B790225, 变量_7A790225)
    .计次循环首 (取数组成员数 (变量_7B790225), 变量_7C790225)
        .如果真 (GetWindow (变量_7B790225 [变量_7C790225], 5) ＝ 窗口句柄)
            返回 (变量_7B790225 [变量_7C790225])
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 窗口_是否可见, 逻辑型, 公开, 返回真为可见，否则为不可见
    .参数 窗口句柄, 整数型, , 窗口句柄

    返回 (IsWindowVisible (窗口句柄))

.子程序 窗口_显示隐藏, 逻辑型, 公开, 窗口显示或隐藏
    .参数 窗口句柄, 整数型, , 欲操作的窗口句柄
    .参数 显示隐藏, 逻辑型, , 真 = 显示；假 = 隐藏；

    返回 (ShowWindowAsync (窗口句柄, 显示隐藏))

.子程序 窗口_置透明度, 逻辑型, 公开, 设置窗口透明状态(成功返回真,失败返回假)  
    .参数 窗口句柄, 整数型, , 设置透明化窗口的句柄
    .参数 透明度, 字节型, 可空, 设置整个窗口的透明度  取值范围是[0,255] 可空为不设定此参数
    .参数 透明色, 整数型, 可空, (#颜色)指定某颜色为完全透明(完全透明处不属于该窗口)  可空为不指定
    .参数 鼠标穿透, 逻辑型, 可空, 可空为假   真:窗口被鼠标穿透
    .局部变量 变量_E5B70225, 整数型
    .局部变量 变量_E6B70225, 整数型

    .如果 (鼠标穿透)
        变量_E5B70225 ＝ GetWindowLongA (窗口句柄, #GWL_EXSTYLE)
        变量_E5B70225 ＝ 位或 (变量_E5B70225, 32, 524288)
        SetWindowLongA (窗口句柄, #GWL_EXSTYLE, 变量_E5B70225)
    .否则
        SetWindowLongA (窗口句柄, #GWL_EXSTYLE, 524288)
    .如果结束
    
    .判断开始 (透明色 ＝ 0)
        变量_E6B70225 ＝ 2
    .默认
        .如果 (透明度 ＝ 0)
            变量_E6B70225 ＝ 1
        .否则
            变量_E6B70225 ＝ 3
        .如果结束
        
    .判断结束
    返回 (SetLayeredWindowAttributes (窗口句柄, 透明色, 透明度, 变量_E6B70225))

.子程序 窗口_取透明度, 整数型, 公开, 成功返回窗口的透明度，失败返回-1。
    .参数 窗口句柄, 整数型
    .局部变量 变量_E6F70225, 整数型
    .局部变量 变量_E7F70225, 整数型

    变量_E6F70225 ＝ GetWindowLongA (窗口句柄, #GWL_EXSTYLE)
    .如果 (位与 (变量_E6F70225, #WS_EX_LAYERED) ≠ 0)
        DLL_GetLayeredWindowAttributes (窗口句柄, #NULL, 变量_E7F70225, #NULL)
    .否则
        变量_E7F70225 ＝ -1
    .如果结束
    返回 (变量_E7F70225)

.子程序 窗口_置穿透, 逻辑型, 公开, @福仔
    .参数 窗口句柄, 整数型
    .参数 是否穿透, 逻辑型, 可空, 真为穿透,假为不穿透,默认为假
    .局部变量 变量_DBB70225, 整数型
    .局部变量 变量_DCB70225, 整数型

    .如果真 (取反 (是否穿透))
        变量_DBB70225 ＝ GetPropA (窗口句柄, “transparent_tmp”)
        RemovePropA (窗口句柄, “transparent_tmp”)
        SetWindowLongA (窗口句柄, #GWL_EXSTYLE, 变量_DBB70225)
        返回 (变量_DBB70225 ＝ GetWindowLongA (窗口句柄, #GWL_EXSTYLE))
    .如果真结束
    
    变量_DBB70225 ＝ GetWindowLongA (窗口句柄, #GWL_EXSTYLE)
    .如果真 (位与 (变量_DCB70225, #WS_EX_TRANSPARENT) ＝ 0)
        变量_DCB70225 ＝ 位或 (变量_DCB70225, #WS_EX_TRANSPARENT)
    .如果真结束
    .如果真 (位与 (变量_DCB70225, #WS_EX_LAYERED) ＝ 0)
        变量_DCB70225 ＝ 位或 (变量_DCB70225, #WS_EX_LAYERED)
    .如果真结束
    SetPropA (窗口句柄, “transparent_tmp”, 变量_DBB70225)
    SetWindowLongA (窗口句柄, #GWL_EXSTYLE, 变量_DCB70225)
    变量_DBB70225 ＝ GetWindowLongA (窗口句柄, #GWL_EXSTYLE)
    返回 (位与 (变量_DBB70225, #WS_EX_TRANSPARENT, #WS_EX_LAYERED) ≠ 0)

.子程序 窗口_总在最前, 逻辑型, 公开, 将指定窗口设为总在最前
    .参数 窗口句柄, 整数型, , 欲设置的窗口句柄
    .参数 是否总在最前, 逻辑型, 可空, 默认为假:取消总在最前  真:总在最前

    .如果真 (是否总在最前)
        窗口_置焦点 (窗口句柄)
    .如果真结束
    返回 (SetWindowPos (窗口句柄, 选择 (是否总在最前, #HWND_TOPMOST, #HWND_NOTOPMOST), 0, 0, 0, 0, 位或 (#SWP_NOSIZE, #SWP_NOMOVE)) ≠ 0)

.子程序 窗口_锁住解锁, 逻辑型, 公开, 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , 要锁住或解锁的窗口句柄
    .参数 类型, 逻辑型, , 真 = 锁住；假 = 解锁；

    返回 (DLL_EnableWindow (窗口句柄, 取反 (类型)))

.子程序 窗口_禁止关闭, 逻辑型, 公开, 控制窗口关闭按钮,(允许/禁止)关闭窗口 (成功返回真,失败返回假)
    .参数 窗口句柄, 整数型, , 欲禁止或解除禁止的窗口句柄
    .参数 禁止关闭, 逻辑型, 可空, 默认为真,禁止关闭； 假:允许关闭； 真:禁止关闭；
    .局部变量 变量_80220125, 整数型
    .局部变量 变量_81220125, 精易_矩形

    .如果真 (是否为空 (禁止关闭))
        禁止关闭 ＝ 真
    .如果真结束
    
    变量_80220125 ＝ GetSystemMenu (窗口句柄, 0)
    .如果真 (变量_80220125 ＝ 0)
        返回 (假)
    .如果真结束
    .如果 (禁止关闭 ＝ 真)
        EnableMenuItem (变量_80220125, 6, 1025)
    .否则
        EnableMenuItem (变量_80220125, 6, 1024)
    .如果结束
    .如果真 (取反 (GetWindowRect (窗口句柄, 变量_81220125)))
        返回 (假)
    .如果真结束
    .如果真 (取反 (RedrawWindow (0, 变量_81220125, 0, 位或 (1, 128, 256))))
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 窗口_热键注册, 逻辑型, 公开, 注册一个全局热键, 成功返回真, 失败返回假
    .参数 窗口句柄, 整数型
    .参数 功能键, 整数型, 可空, 1 Alt  2 Ctrl  4 Shift  8 Win 若要两个或以上的状态按键则把它们的值位或
    .参数 键代码, 整数型, , 如：#F键
    .参数 响应热键事件, 子程序指针, , 响应热键事件的子程序指针, 四个参数(窗口句柄, 消息, 热键ID, 参数)
    .参数 热键ID, 整数型, , 标识！必须大于0，销毁时用；
    .局部变量 变量_0D030325, 整数型
    .局部变量 变量_0E030325, 整数型
    .局部变量 变量_0F030325, 整数型
    .局部变量 变量_10030325, 整数型
    .局部变量 变量_11030325, 整数型

    .如果真 (热键ID ≠ 0)
        窗口_热键卸载 (窗口句柄, 热键ID)
        .如果真 (RegisterHotKey (窗口句柄, 热键ID, 功能键, 键代码))
            变量_0D030325 ＝ GetPropA (窗口句柄, “HOTKEYLIST”)
            .如果真 (变量_0D030325 ＝ #NULL)
                变量_0D030325 ＝ LocalAlloc (#LMEM_ZEROINIT, 12)
            .如果真结束
            .如果真 (变量_0D030325 ≠ #NULL)
                SetPropA (窗口句柄, “HOTKEYLIST”, 变量_0D030325)
                变量_0F030325 ＝ __get (变量_0D030325, 0)
                变量_0E030325 ＝ __get (变量_0D030325, 4)
                .如果真 (变量_0E030325 ＝ #NULL)
                    变量_0E030325 ＝ SetWindowLongA (窗口句柄, #GWL_WNDPROC, 到整数 (&HotkeyCallbackEvent))
                    __set (变量_0D030325, 4, 变量_0E030325)
                .如果真结束
                变量_11030325 ＝ LocalAlloc (#LMEM_ZEROINIT, (变量_0F030325 ＋ 1) × 12)
                .如果真 (变量_11030325 ≠ #NULL)
                    变量_10030325 ＝ __get (变量_0D030325, 8)
                    .如果真 (变量_10030325 ≠ #NULL)
                        memcpy (变量_11030325, 变量_10030325, 变量_0F030325 × 12)
                        LocalFree (变量_10030325)
                    .如果真结束
                    __set (变量_0D030325, 8, 变量_11030325)
                    变量_11030325 ＝ 变量_11030325 ＋ 变量_0F030325 × 12
                    __set (变量_11030325, 0, 窗口句柄)
                    __set (变量_11030325, 4, 热键ID)
                    __set (变量_11030325, 8, 到整数 (响应热键事件))
                .如果真结束
                __set (变量_0D030325, 0, 变量_0F030325 ＋ 1)
            .如果真结束
            返回 (真)
        .如果真结束
        
    .如果真结束
    返回 (假)

.子程序 窗口_热键卸载, 逻辑型, 公开, 成功返回真，失败返回假；
    .参数 窗口句柄, 整数型
    .参数 热键ID, 整数型, , 窗口_热键注册 时用的热键ID
    .局部变量 变量_15030325, 整数型
    .局部变量 变量_16030325, 整数型
    .局部变量 变量_17030325, 整数型
    .局部变量 变量_18030325, 整数型
    .局部变量 变量_19030325, 整数型
    .局部变量 变量_1A030325, 逻辑型
    .局部变量 变量_1B030325, 整数型

    .如果真 (热键ID ≠ 0)
        变量_15030325 ＝ GetPropA (窗口句柄, “HOTKEYLIST”)
        .如果真 (变量_15030325 ≠ #NULL)
            变量_16030325 ＝ __get (变量_15030325, 0)
            变量_17030325 ＝ __get (变量_15030325, 4)
            变量_18030325 ＝ __get (变量_15030325, 8)
            .如果真 (变量_18030325 ≠ #NULL)
                .计次循环首 (变量_16030325, 变量_1B030325)
                    变量_19030325 ＝ __get (变量_18030325, (变量_1B030325 － 1) × 12 ＋ 4)
                    .如果真 (变量_19030325 ＝ 热键ID)
                        变量_1A030325 ＝ UnregisterHotKey (窗口句柄, 变量_19030325)
                        .如果 (变量_16030325 ＝ 1)
                            .如果真 (变量_17030325 ≠ #NULL)
                                SetWindowLongA (窗口句柄, #GWL_WNDPROC, 变量_17030325)
                            .如果真结束
                            LocalFree (变量_18030325)
                            RemovePropA (窗口句柄, “HOTKEYLIST”)
                        .否则
                            .如果真 (变量_1B030325 ＜ 变量_16030325)
                                memcpy (变量_18030325 ＋ (变量_1B030325 － 1) × 12, 变量_18030325 ＋ 变量_1B030325 × 12, (变量_16030325 － 变量_1B030325) × 12)
                            .如果真结束
                            memset (变量_18030325 ＋ (变量_16030325 － 1) × 12, 0, 12)
                            __set (变量_15030325, 0, 变量_16030325 － 1)
                        .如果结束
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    返回 (变量_1A030325)

.子程序 HotkeyCallbackEvent, 整数型
    .参数 变量_1C030325, 整数型
    .参数 变量_1D030325, 整数型
    .参数 变量_1E030325, 整数型
    .参数 变量_1F030325, 整数型
    .局部变量 变量_20030325, 整数型
    .局部变量 变量_21030325, 整数型
    .局部变量 变量_22030325, 整数型
    .局部变量 变量_23030325, 整数型
    .局部变量 变量_24030325, 整数型
    .局部变量 变量_25030325, 整数型

    变量_20030325 ＝ GetPropA (变量_1C030325, “HOTKEYLIST”)
    变量_21030325 ＝ __get (变量_20030325, 0)
    变量_22030325 ＝ __get (变量_20030325, 4)
    变量_23030325 ＝ __get (变量_20030325, 8)
    .如果真 (变量_1D030325 ＝ #<?未知本地类型?>)
        .计次循环首 (变量_21030325, 变量_25030325)
            变量_24030325 ＝ __get (变量_23030325 ＋ (变量_25030325 － 1) × 12, 4)
            .如果真 (变量_24030325 ＝ 变量_1E030325)
                变量_22030325 ＝ __get (变量_23030325 ＋ (变量_25030325 － 1) × 12, 8)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    返回 (CallWindowProcA (变量_22030325, 变量_1C030325, 变量_1D030325, 变量_1E030325, 变量_1F030325))

.子程序 窗口_热键卸载所有, , 公开, 卸载所有热键
    .参数 窗口句柄, 整数型, , 目标窗口句柄
    .局部变量 变量_26030325, 整数型
    .局部变量 变量_27030325, 整数型
    .局部变量 变量_28030325, 整数型
    .局部变量 变量_29030325, 整数型
    .局部变量 变量_2A030325, 整数型
    .局部变量 变量_2B030325, 整数型

    变量_26030325 ＝ GetPropA (窗口句柄, “HOTKEYLIST”)
    .如果真 (变量_26030325 ≠ #NULL)
        变量_27030325 ＝ __get (变量_26030325, 0)
        变量_28030325 ＝ __get (变量_26030325, 4)
        .如果真 (变量_28030325 ≠ #NULL)
            SetWindowLongA (窗口句柄, #GWL_WNDPROC, 变量_28030325)
        .如果真结束
        变量_29030325 ＝ __get (变量_26030325, 8)
        .如果真 (变量_29030325 ≠ #NULL)
            .计次循环首 (变量_27030325, 变量_2B030325)
                变量_2A030325 ＝ __get (变量_29030325, (变量_2B030325 － 1) × 12 ＋ 4)
                UnregisterHotKey (窗口句柄, 变量_2A030325)
            .计次循环尾 ()
            LocalFree (变量_29030325)
        .如果真结束
        RemovePropA (窗口句柄, “HOTKEYLIST”)
    .如果真结束
    

.子程序 窗口_渐隐渐现, , 公开, 让你的窗口渐隐或渐现；
    .参数 窗口句柄, 整数型, , 要设置渐隐渐现的窗口句柄；
    .参数 操作类型, 整数型, 可空, 可空，默认为渐隐；0=渐隐，1=渐现；
    .参数 渐隐渐现速度, 整数型, 可空, 可空，默认为3；1-10,越小超快；
    .参数 渐隐后操作, 整数型, 可空, 可空，默认为0，结束进程；1=关闭窗口，2=隐藏窗口
    .局部变量 变量_FFE10225, 整数型
    .局部变量 变量_00E20225, 整数型

    .如果真 (渐隐渐现速度 ＝ 0)
        渐隐渐现速度 ＝ 3
    .如果真结束
    
    .如果 (操作类型 ＝ 1)
        .计次循环首 (255, 变量_00E20225)
            窗口_置透明度 (窗口句柄, 变量_00E20225, , )
            延时 (渐隐渐现速度)
            处理事件 ()
        .计次循环尾 ()
    .否则
        
        .计次循环首 (255, 变量_00E20225)
            窗口_置透明度 (窗口句柄, 255 － 变量_00E20225, , )
            延时 (渐隐渐现速度)
            处理事件 ()
        .计次循环尾 ()
        
        .判断开始 (渐隐后操作 ＝ 1)
            窗口_关闭 (窗口句柄)
        .判断 (渐隐后操作 ＝ 2)
            窗口_显示隐藏 (窗口句柄, 假)
        .默认
            变量_FFE10225 ＝ 窗口_取祖句柄 (窗口句柄)
            变量_FFE10225 ＝ 窗口_句柄取进程ID (变量_FFE10225)
            进程_结束 (变量_FFE10225)
        .判断结束
        
    .如果结束
    

.子程序 窗口_是否有子窗口, 逻辑型, 公开, 判断某个窗口下是否有子级窗口控件;
    .参数 窗口句柄, 整数型, , 目标窗口句柄

    返回 (选择 (窗口_取句柄 (窗口句柄) ＝ 0, 假, 真))

.子程序 窗口_控件加边框, , 公开, 在控件的边上加上一层边框;
    .参数 控件句柄, 整数型, 可空, 要加边框的控件句柄;
    .参数 鼠标被放开, 逻辑型, 可空, 在图片框鼠标被放开的时候把这个参数设置为真,控件句柄留空;
    .局部变量 变量_AD640125, 精易_矩形
    .局部变量 变量_AE640125, 整数型

    变量_AE640125 ＝ CreateDCA (“DISPLAY”, “”, “”, 0)
    .如果真 (鼠标被放开)
        .如果真 (全局变量_B0640105 ＝ 假)
            返回 ()
        .如果真结束
        全局变量_B0640105 ＝ 真
        GetWindowRect (全局变量_AF640105, 变量_AD640125)
        子程序_画边框 (变量_AE640125, 变量_AD640125)
        全局变量_B0640105 ＝ 取反 (全局变量_B0640105)
        DeleteDC (变量_AE640125)
    .如果真结束
    .判断开始 (全局变量_AF640105 ≠ 控件句柄)
        .如果真 (全局变量_B0640105)
            GetWindowRect (全局变量_AF640105, 变量_AD640125)
            子程序_画边框 (变量_AE640125, 变量_AD640125)
            全局变量_B0640105 ＝ 假
        .如果真结束
        GetWindowRect (控件句柄, 变量_AD640125)
        子程序_画边框 (变量_AE640125, 变量_AD640125)
        DeleteDC (变量_AE640125)
        全局变量_AF640105 ＝ 控件句柄
        全局变量_B0640105 ＝ 真
    .默认
        GetWindowRect (全局变量_AF640105, 变量_AD640125)
        子程序_画边框 (变量_AE640125, 变量_AD640125)
        全局变量_B0640105 ＝ 取反 (全局变量_B0640105)
        DeleteDC (变量_AE640125)
    .判断结束
    

.子程序 窗口_画矩形, , 公开, 本函数为微凉提供
    .参数 窗口句柄, 整数型, , 要画矩形的窗口的句柄
    .参数 矩形粗细, 整数型, 可空, 默认为3
    .参数 矩形颜色, 整数型, 可空, 默认为红色
    .参数 是否闪烁, 逻辑型, 可空
    .局部变量 变量_9FB70125, 精易_矩形
    .局部变量 变量_A0B70125, 整数型
    .局部变量 变量_A1B70125, 整数型
    .局部变量 变量_A2B70125, 整数型
    .局部变量 变量_A3B70125, 整数型
    .局部变量 变量_A4B70125, 整数型

    .如果真 (矩形粗细 ＝ 0)
        矩形粗细 ＝ 3
    .如果真结束
    .如果真 (矩形颜色 ＝ 0)
        矩形颜色 ＝ #红色
    .如果真结束
    变量_A0B70125 ＝ GetDesktopWindow ()
    变量_A1B70125 ＝ GetWindowDC (变量_A0B70125)
    变量_A2B70125 ＝ SetROP2 (变量_A1B70125, 10)
    GetWindowRect (窗口句柄, 变量_9FB70125)
    .如果真 (变量_9FB70125.左边 ＜ 0)
        变量_9FB70125.左边 ＝ 0
    .如果真结束
    .如果真 (变量_9FB70125.顶边 ＜ 0)
        变量_9FB70125.顶边 ＝ 0
    .如果真结束
    变量_A3B70125 ＝ CreatePen (0, 矩形粗细, 矩形颜色)
    变量_A4B70125 ＝ SelectObject (变量_A1B70125, 变量_A3B70125)
    Rectangle (变量_A1B70125, 变量_9FB70125.左边, 变量_9FB70125.顶边, 变量_9FB70125.右边, 变量_9FB70125.底边)
    .如果真 (是否闪烁 ＝ 真)
        程序_延时 (100)
        Rectangle (变量_A1B70125, 变量_9FB70125.左边, 变量_9FB70125.顶边, 变量_9FB70125.右边, 变量_9FB70125.底边)
        SetROP2 (变量_A1B70125, 变量_A2B70125)
    .如果真结束
    SelectObject (变量_A1B70125, 变量_A4B70125)
    DeleteObject (变量_A3B70125)
    ReleaseDC (变量_A0B70125, 变量_A1B70125)

.子程序 子程序_画边框
    .参数 变量_B1640125, 整数型
    .参数 变量_B2640125, 精易_矩形

    .如果真 (lpRect (变量_B2640125) ＝ 0)
        PatBlt (变量_B1640125, 变量_B2640125.左边, 变量_B2640125.顶边, 变量_B2640125.右边 － 变量_B2640125.左边, 3, 5570569)
        PatBlt (变量_B1640125, 变量_B2640125.左边, 变量_B2640125.顶边 ＋ 3, 3, 变量_B2640125.底边 － 变量_B2640125.顶边 － 6, 5570569)
        PatBlt (变量_B1640125, 变量_B2640125.右边, 变量_B2640125.顶边 ＋ 3, -3, 变量_B2640125.底边 － 变量_B2640125.顶边 － 6, 5570569)
        PatBlt (变量_B1640125, 变量_B2640125.左边, 变量_B2640125.底边, 变量_B2640125.右边 － 变量_B2640125.左边, -3, 5570569)
    .如果真结束
    

.子程序 窗口_取点标题, 文本型, 公开, 取出指定坐标的组件上的文字内容或标题(返回文字内容)
    .参数 水平位置, 整数型, 可空, (可空为鼠标当前坐标x)   文字所在的x坐标“X轴光标”
    .参数 垂直位置, 整数型, 可空, (可空为鼠标当前坐标y)   文字所以的y坐标“Y轴光标”
    .局部变量 变量_E9B40225, 文本型
    .局部变量 变量_EAB40225, 精易_坐标

    .如果真 (水平位置 ＝ 0 或 垂直位置 ＝ 0)
        变量_EAB40225 ＝ 鼠标_取位置 ()
        水平位置 ＝ 变量_EAB40225.横
        垂直位置 ＝ 变量_EAB40225.纵
    .如果真结束
    变量_E9B40225 ＝ 取空白文本 (256)
    SendMessageA (WindowFromPoint (水平位置, 垂直位置), 13, 256, 取指针文本_ (变量_E9B40225))
    返回 (变量_E9B40225)

.子程序 窗口_取桌面句柄, 整数型, 公开, 返回一个桌面的句柄
    返回 (FindWindowA (“Progman”, “Program Manager”))

.子程序 窗口_取坐标距离, 整数型, 公开, 返回两坐标点之间的距离
    .参数 坐标1, 精易_坐标, , 起始坐标
    .参数 坐标2, 精易_坐标, , 终点坐标

    返回 (取绝对值 (求平方根 (求次方 (坐标1.横 － 坐标2.横, 2) ＋ 求次方 (坐标1.纵 － 坐标2.纵, 2))))

.子程序 窗口_取控件大小, 逻辑型, 公开, 获取一个控件的大小（宽度和高度）
    .参数 窗口句柄, 整数型, , 欲获取一个控件大小窗口句柄
    .参数 窗口的宽度, 整数型, 参考 可空, 用来存放取回来的窗口宽度
    .参数 窗口的高度, 整数型, 参考 可空, 用来存放取回来的窗口高度
    .局部变量 变量_3D110125, 精易_矩形
    .局部变量 变量_3E110125, 逻辑型

    变量_3E110125 ＝ GetClientRect (窗口句柄, 变量_3D110125)
    窗口的宽度 ＝ 变量_3D110125.右边 － 变量_3D110125.左边
    窗口的高度 ＝ 变量_3D110125.底边 － 变量_3D110125.顶边
    返回 (变量_3E110125)

.子程序 窗口_取焦点句柄, 整数型, 公开, 取焦点句柄;获得自身拥有输入焦点的窗口句柄
    .局部变量 变量_04E60125, 整数型
    .局部变量 变量_05E60125, 整数型
    .局部变量 变量_06E60125, 整数型
    .局部变量 变量_07E60125, 整数型

    变量_04E60125 ＝ GetForegroundWindow ()
    变量_05E60125 ＝ GetCurrentThreadId ()
    变量_06E60125 ＝ GetWindowThreadProcessId (变量_04E60125, 0)
    .如果 (变量_05E60125 ＝ 变量_06E60125)
        变量_07E60125 ＝ GetFocus ()
    .否则
        AttachThreadInput (变量_06E60125, 变量_05E60125, 真)
        变量_07E60125 ＝ GetFocus ()
        AttachThreadInput (变量_06E60125, 变量_05E60125, 假)
    .如果结束
    返回 (变量_07E60125)

.子程序 窗口_取屏幕句柄, 整数型, 公开, 获取屏幕的句柄
    返回 (GetDesktopWindow ())

.子程序 窗口_是否最小化, 逻辑型, 公开, 已最小化返回真；否则返回假
    .参数 窗口句柄, 整数型, , 要判断的窗口句柄

    返回 (IsIconic (窗口句柄))

.子程序 窗口_是否最大化, 逻辑型, 公开, 已最大化返回真；否则返回假
    .参数 窗口句柄, 整数型, , 要判断的窗口句柄

    返回 (IsZoomed (窗口句柄))

.子程序 窗口_取控件内容, 文本型, 公开, 取指定窗口的标题。成功返回窗口标题，失败返回空。
    .参数 控件句柄, 整数型, , 指定的控件句柄
    .局部变量 变量_D80F0125, 文本型
    .局部变量 变量_D90F0125, 整数型
    .局部变量 变量_DA0F0125, 整数型

    变量_D90F0125 ＝ SendMessageA (控件句柄, 14, 0, 0) ＋ 1
    .如果 (变量_D90F0125 ＞ 50000)
        变量_DA0F0125 ＝ 50000
        变量_D80F0125 ＝ 取空白文本 (变量_DA0F0125)
        SendMessageA (控件句柄, 13, 变量_DA0F0125 ＋ 1, lstrcpynA_文本 (变量_D80F0125, 变量_D80F0125, 0))
        .如果真 (取代码 (取文本右边 (变量_D80F0125, 1), ) ＜ 0)
            变量_D80F0125 ＝ 取文本左边 (变量_D80F0125, 取文本长度 (变量_D80F0125) － 1)
        .如果真结束
        变量_D80F0125 ＝ 变量_D80F0125 ＋ “...后面略掉” ＋ 到文本 (变量_D90F0125 － 变量_DA0F0125) ＋ “个字符...”
    .否则
        变量_D80F0125 ＝ 取空白文本 (变量_D90F0125)
        SendMessageA (控件句柄, 13, 变量_D90F0125, lstrcpynA_文本 (变量_D80F0125, 变量_D80F0125, 0))
    .如果结束
    返回 (变量_D80F0125)

.子程序 窗口_置控件内容, , 公开, 往指定的编辑框内置指定的内容。
    .参数 控件句柄, 整数型, , 指定的编辑框控件句柄
    .参数 欲写入的内容, 文本型, , 欲写入目标编辑框的文本

    SendMessageA (控件句柄, 12, 0, 取指针文本_ (欲写入的内容))

.子程序 窗口_置控件状态, 逻辑型, 公开, 隐藏或显示控件；成功返回真；失败返回假
    .参数 窗口句柄, 整数型, , 欲操作的控件句柄
    .参数 显示隐藏, 逻辑型, , 真 = 显示；假 = 隐藏

    返回 (ShowScrollBar (窗口句柄, 2, 显示隐藏))

.子程序 窗口_置控件焦点, 逻辑型, 公开, 该函数对指定的窗口设置键盘焦点。 成功返回真，失败返回假；
    .参数 控件句柄, 整数型, , 目标控件句柄
    .局部变量 变量_EAE50125, 整数型
    .局部变量 变量_EBE50125, 整数型
    .局部变量 变量_F2E50125, 逻辑型

    变量_EAE50125 ＝ GetCurrentThreadId ()
    变量_EBE50125 ＝ GetWindowThreadProcessId (控件句柄, 0)
    AttachThreadInput (变量_EBE50125, 变量_EAE50125, 真)
    变量_F2E50125 ＝ SetFocus (控件句柄)
    AttachThreadInput (变量_EBE50125, 变量_EAE50125, 假)
    返回 (变量_F2E50125)

.子程序 窗口_更换鼠标指针, , 公开, 修改窗口的鼠标指针
    .参数 参_窗口句柄, 整数型, , 窗口句柄
    .参数 参_光标路径, 文本型, 可空, 后缀名为:ani\cur的鼠标指针文件路径
    .参数 参_光标指针, 整数型, 可空, #鼠标指针_
    .局部变量 变量_87D70225, 整数型, , "0"
    .局部变量 变量_88D70225, 整数型
    .局部变量 变量_89D70225, 整数型

    
    
    .如果 (是否为空 (参_光标路径) ＝ 假 且 参_光标路径 ≠ “”)
        变量_89D70225 ＝ LoadCursorFromFileA (参_光标路径)
    .否则
        变量_89D70225 ＝ DLL_LoadCursorW (0, 参_光标指针)
    .如果结束
    窗口_枚举所有子窗口 (参_窗口句柄, 变量_87D70225, )
    .计次循环首 (取数组成员数 (变量_87D70225), 变量_88D70225)
        SetClassLongA (变量_87D70225 [变量_88D70225], -12, 变量_89D70225)
    .计次循环尾 ()
    SetClassLongA (参_窗口句柄, -12, 变量_89D70225)

.子程序 窗口_枚举, 整数型, 公开, 枚举所有窗口,返回窗口句柄数目,失败返回0 
    .参数 窗口信息, 精易_窗口信息, 参考 可空 数组, 返回的窗口信息数组

    清除数组 (窗口信息)
    EnumWindows (&枚举窗口过程, 取指针_通用型_数组 (窗口信息))
    返回 (取数组成员数 (窗口信息))

.子程序 窗口_枚举接口, , 公开, 枚举全部窗口的接口
    .参数 回调函数, 子程序指针, , 回调子程序，返回值：整数型，直接返回1即可，共1个参数：窗口句柄[整数型]

    EnumWindows (回调函数, 0)

.子程序 枚举窗口过程
    .参数 变量_3FB80225, 整数型
    .参数 变量_40B80225, 整数型
    .局部变量 变量_2CB80225, 精易_窗口信息, , "0"
    .局部变量 变量_2DB80225, 整数型
    .局部变量 变量_2EB80225, 整数型

    变量_2EB80225 ＝ 指针转移 (变量_40B80225, 取指针_通用型_数组 (变量_2CB80225))
    变量_2DB80225 ＝ 取数组成员数 (变量_2CB80225) ＋ 1
    重定义数组 (变量_2CB80225, 真, 变量_2DB80225)
    
    变量_2CB80225 [变量_2DB80225].窗口句柄 ＝ 变量_3FB80225
    变量_2CB80225 [变量_2DB80225].进程ID ＝ 窗口_句柄取进程ID (变量_3FB80225)
    变量_2CB80225 [变量_2DB80225].线程ID ＝ 窗口_句柄取线程ID (变量_3FB80225)
    变量_2CB80225 [变量_2DB80225].窗口标题 ＝ 窗口_取标题 (变量_3FB80225)
    变量_2CB80225 [变量_2DB80225].窗口类名 ＝ 窗口_取类名 (变量_3FB80225)
    指针还原 (变量_40B80225, 取指针_通用型_数组 (变量_2CB80225), 变量_2EB80225)
    

.子程序 窗口_枚举子窗口, 整数型, 公开, 枚举指定句柄的下一级子窗口,返回子窗口句柄数目,失败或无子返回0
    .参数 父窗口句柄, 整数型, 可空, 指定父窗口句柄  可空:为桌面.找顶级窗口
    .参数 子窗口数组, 整数型, 参考 数组, 返回的所有符合条件的子窗口句柄
    .参数 类名, 文本型, 可空, 指定子窗口类名
    .局部变量 变量_F9170125, 整数型

    清除数组 (子窗口数组)
    变量_F9170125 ＝ FindWindowExA (父窗口句柄, 0, 取指针文本_ (类名), 0)
    .判断循环首 (变量_F9170125 ≠ 0)
        加入成员 (子窗口数组, 变量_F9170125)
        变量_F9170125 ＝ FindWindowExA (父窗口句柄, 变量_F9170125, 取指针文本_ (类名), 0)
    .判断循环尾 ()
    返回 (取数组成员数 (子窗口数组))

.子程序 窗口_模糊遍历窗口, 整数型, 公开, 返回满足条件的第一个窗口的句柄
    .参数 父窗口句柄, 整数型, 可空, 为空，则为桌面句柄
    .参数 要找的窗口类名, 文本型, 可空
    .参数 要找的窗口标题, 文本型, 可空
    .参数 结果句柄数组, 整数型, 参考 可空 数组, 如果指定数组，则遍历所有满足条件的子窗口，并将所有句柄写入该数组中。
    .局部变量 变量_15C20125, 整数型
    .局部变量 变量_16C20125, 逻辑型
    .局部变量 变量_1AD40125, 文本型
    .局部变量 变量_1ED40125, 文本型

    清除数组 (结果句柄数组)
    .如果真 (是否为空 (父窗口句柄))
        父窗口句柄 ＝ GetDesktopWindow ()
    .如果真结束
    变量_15C20125 ＝ GetWindow (父窗口句柄, 5)
    .判断循环首 (变量_15C20125 ≠ 0)
        变量_16C20125 ＝ 真
        .如果真 (要找的窗口类名 ≠ “”)
            变量_1AD40125 ＝ 窗口_取类名 (变量_15C20125)
            .如果真 (寻找文本 (到小写 (变量_1AD40125), 到小写 (要找的窗口类名), , 假) ＝ -1)
                变量_16C20125 ＝ 假
            .如果真结束
            处理事件 ()
        .如果真结束
        .如果真 (要找的窗口标题 ≠ “”)
            变量_1ED40125 ＝ 窗口_取标题 (变量_15C20125)
            .如果真 (寻找文本 (到小写 (变量_1ED40125), 到小写 (要找的窗口标题), 1, 假) ＝ -1)
                变量_16C20125 ＝ 假
            .如果真结束
            处理事件 ()
        .如果真结束
        .如果真 (变量_16C20125)
            .如果真 (是否为空 (结果句柄数组))
                返回 (变量_15C20125)
            .如果真结束
            加入成员 (结果句柄数组, 变量_15C20125)
        .如果真结束
        变量_15C20125 ＝ GetWindow (变量_15C20125, 2)
    .判断循环尾 ()
    .如果真 (取数组成员数 (结果句柄数组) ＞ 0)
        返回 (结果句柄数组 [1])
    .如果真结束
    返回 (0)

.子程序 窗口_枚举所有子窗口, 整数型, 公开, 枚举指定句柄下的所有子窗口句柄,返回子窗口句柄数目,失败或无子返回0
    .参数 父窗口句柄, 整数型, 可空, 当为空时相当于EnumWindows
    .参数 子窗口数组, 整数型, 数组, 变量储存返回值。
    .参数 类名, 文本型, 可空, 要过滤的窗口类名。
    .局部变量 变量_3BE00225, 整数型
    .局部变量 变量_3CE00225, 整数型
    .局部变量 变量_3DE00225, 整数型
    .局部变量 变量_3EE00225, 整数型
    .局部变量 变量_3FE00225, 整数型

    清除数组 (子窗口数组)
    类名 ＝ 选择 (取文本长度 (删首尾空 (类名)) ＞ 0, 类名, “”)
    变量_3BE00225 ＝ LocalAlloc (#LMEM_ZEROINIT, 20)
    __set (变量_3BE00225, 0, 0)
    __set (变量_3BE00225, 4, 取指针_文本型 (类名))
    __set (变量_3BE00225, 8, LocalAlloc (#LMEM_ZEROINIT, 400))
    __set (变量_3BE00225, 12, 400)
    EnumChildWindows (父窗口句柄, &EnumChildProc, 变量_3BE00225)
    
    
    变量_3DE00225 ＝ __get (变量_3BE00225, 0)
    变量_3FE00225 ＝ __get (变量_3BE00225, 8)
    
    重定义数组 (子窗口数组, 假, 变量_3DE00225)
    
    .计次循环首 (变量_3DE00225, 变量_3EE00225)
        子窗口数组 [变量_3EE00225] ＝ __get (变量_3FE00225, (变量_3EE00225 － 1) × 4)
    .计次循环尾 ()
    LocalFree (变量_3FE00225)
    LocalFree (变量_3BE00225)
    返回 (变量_3DE00225)

.子程序 EnumChildProc, 逻辑型
    .参数 变量_42B80225, 整数型
    .参数 变量_43B80225, 整数型
    .局部变量 变量_40E00225, 文本型
    .局部变量 变量_41E00225, 文本型
    .局部变量 变量_42E00225, 整数型
    .局部变量 变量_43E00225, 整数型
    .局部变量 变量_44E00225, 整数型
    .局部变量 变量_45E00225, 整数型
    .局部变量 变量_46E00225, 整数型

    .如果真 (变量_42B80225 ≠ 0)
        变量_40E00225 ＝ 窗口_取类名 (变量_42B80225)
        
        
        
        
        .如果真 (LocalSize (变量_43B80225) ＝ 20)
            变量_42E00225 ＝ __get (变量_43B80225, 0)
            变量_43E00225 ＝ __get (变量_43B80225, 4)
            .如果真 (变量_43E00225 ≠ 0)
                变量_41E00225 ＝ 指针到文本 (变量_43E00225)
            .如果真结束
            
            变量_44E00225 ＝ __get (变量_43B80225, 8)
            变量_45E00225 ＝ __get (变量_43B80225, 12)
            
            .如果真 (取文本长度 (变量_41E00225) ＞ 0 且 到小写 (变量_41E00225) ≠ 到小写 (变量_40E00225))
                返回 (真)
            .如果真结束
            
            .如果真 (变量_42E00225 × 4 ＋ 4 ＞ 变量_45E00225)
                变量_45E00225 ＝ 变量_45E00225 × 2
                变量_46E00225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_45E00225)
                RtlMoveMemory (变量_46E00225, 变量_44E00225, 变量_45E00225 ÷ 2)
                LocalFree (变量_44E00225)
                __set (变量_43B80225, 8, 变量_46E00225)
                __set (变量_43B80225, 12, 变量_45E00225)
                变量_44E00225 ＝ 变量_46E00225
            .如果真结束
            
            __set (变量_43B80225, 0, 变量_42E00225 ＋ 1)
            __set (变量_44E00225, 变量_42E00225 × 4, 变量_42B80225)
            
            返回 (真)
        .如果真结束
        
    .如果真结束
    返回 (假)

.子程序 窗口_是否子窗口, 逻辑型, 公开, 判断一个窗口和另一窗口是否为父子关系
    .参数 父窗口的句柄, 整数型, , 父窗口的句柄
    .参数 欲判断的窗口句柄, 整数型, , 欲判断的窗口句柄

    返回 (IsChild (父窗口的句柄, 欲判断的窗口句柄))

.子程序 窗口_句柄是否有效, 逻辑型, 公开, 有效返回真；不存在返回假；
    .参数 窗口句柄, 整数型, , 目标窗口句柄

    返回 (IsWindow (窗口句柄) ≠ 0)

.子程序 窗口_是否在最顶端, 逻辑型, 公开, 判断指定窗口是否在最前面；如果是返回真,否则返回假；
    .参数 进程名, 文本型, 可空, 欲判断窗口的程序进程名(注意区分大小写)
    .参数 窗口类名, 文本型, 可空, 欲判断窗口的类名(注意区分大小写)
    .参数 窗口标题, 文本型, 可空, 欲判断窗口的标题关键字
    .局部变量 变量_93140125, 整数型

    变量_93140125 ＝ GetForegroundWindow ()
    .如果真 (进程名 ＝ “” 且 窗口类名 ＝ “” 且 窗口标题 ＝ “”)
        输出调试文本 (“真想把你拉出去切了,一个条件都不给让我取什么?”)
        返回 (假)
    .如果真结束
    .如果真 (进程名 ≠ “”)
        .如果真 (窗口_句柄取进程名 (变量_93140125) ≠ 进程名)
            返回 (假)
        .如果真结束
        
    .如果真结束
    .如果真 (窗口类名 ≠ “”)
        .如果真 (窗口_取类名 (变量_93140125) ≠ 窗口类名)
            返回 (假)
        .如果真结束
        
    .如果真结束
    .如果真 (窗口标题 ≠ “”)
        .如果真 (寻找文本 (窗口_取标题 (变量_93140125), 窗口标题, , 假) ＝ -1)
            返回 (假)
        .如果真结束
        
    .如果真结束
    返回 (真)
    

.子程序 窗口_是否置顶, 逻辑型, 公开, 判断指定窗口的是否在最前面；如果是返回真,否则返回假；
    .参数 句柄, 整数型, , 欲判断窗口句柄
    .局部变量 变量_9CCE0125, 整数型

    变量_9CCE0125 ＝ GetWindowLongA (句柄, #GWL_EXSTYLE)
    返回 (位与 (变量_9CCE0125, #WS_EX_TOPMOST) ＝ #WS_EX_TOPMOST)

.子程序 窗口_是否禁止, 逻辑型, 公开, 判断指定窗口的是否被禁止；如果是返回真,否则返回假；
    .参数 窗口句柄, 整数型, , 欲判断窗口句柄

    返回 (IsWindowEnabled (窗口句柄) ＝ 0)
    

.子程序 窗口_取位置和大小, 精易_位置和大小, 公开, 取指定窗口的左边、顶边、宽度、高度
    .参数 窗口句柄, 整数型, , 欲取大小的窗口句柄
    .参数 检索恢复时的位置, 逻辑型, 可空
    .局部变量 变量_AC100325, 精易_矩形
    .局部变量 变量_AD100325, 精易_位置和大小
    .局部变量 变量_AE100325, 整数型

    .如果 (检索恢复时的位置)
        变量_AE100325 ＝ LocalAlloc (#LMEM_ZEROINIT, 44)
        .如果真 (变量_AE100325 ≠ #NULL)
            .如果真 (GetWindowPlacement (窗口句柄, 变量_AE100325))
                变量_AD100325.左边 ＝ __get (变量_AE100325, 28)
                变量_AD100325.顶边 ＝ __get (变量_AE100325, 32)
                变量_AD100325.宽度 ＝ __get (变量_AE100325, 36) － 变量_AD100325.左边
                变量_AD100325.高度 ＝ __get (变量_AE100325, 40) － 变量_AD100325.顶边
            .如果真结束
            LocalFree (变量_AE100325)
        .如果真结束
        
    .否则
        GetWindowRect (窗口句柄, 变量_AC100325)
        变量_AD100325.左边 ＝ 变量_AC100325.左边
        变量_AD100325.顶边 ＝ 变量_AC100325.顶边
        变量_AD100325.宽度 ＝ 变量_AC100325.右边 － 变量_AC100325.左边
        变量_AD100325.高度 ＝ 变量_AC100325.底边 － 变量_AC100325.顶边
    .如果结束
    返回 (变量_AD100325)

.子程序 窗口_置位置和大小, 逻辑型, 公开, 修改窗口的位置和大小
    .参数 窗口句柄, 整数型, , 欲改变位置和大小的窗口句柄
    .参数 左边位置, 整数型, 可空, 窗口新的左边位置，留空不变；
    .参数 顶边位置, 整数型, 可空, 窗口新的顶边位置，留空不变；
    .参数 新宽度, 整数型, 可空, 窗口的新宽度，留空不变；
    .参数 新高度, 整数型, 可空, 窗口的新高度，留空不变；
    .局部变量 变量_0B380125, 精易_矩形

    GetWindowRect (窗口句柄, 变量_0B380125)
    .如果真 (是否为空 (左边位置))
        左边位置 ＝ 变量_0B380125.左边
    .如果真结束
    .如果真 (是否为空 (顶边位置))
        顶边位置 ＝ 变量_0B380125.顶边
    .如果真结束
    .如果真 (是否为空 (新宽度))
        新宽度 ＝ 变量_0B380125.右边 － 变量_0B380125.左边
    .如果真结束
    .如果真 (是否为空 (新高度))
        新高度 ＝ 变量_0B380125.底边 － 变量_0B380125.顶边
    .如果真结束
    返回 (MoveWindow (窗口句柄, 左边位置, 顶边位置, 新宽度, 新高度, 真))

.子程序 窗口_取坐标子句柄, 整数型, 公开, 取父窗口中包含了指定坐标的第一个子窗口句柄(与其它取窗口句柄不同的是:可取出不可视或透明的窗口)
    .参数 父窗口句柄, 整数型, , 欲取坐标句柄所在的父窗口句柄
    .参数 横坐标, 整数型, , 指定横坐标
    .参数 纵坐标, 整数型, , 指定纵坐标

    返回 (ChildWindowFromPoint (父窗口句柄, 横坐标, 纵坐标))

.子程序 窗口_句柄取进程名, 文本型, 公开, 用指定的窗口句柄取回对应的进程名；成功返回进程名,失败返回空文本；
    .参数 窗口句柄, 整数型, , 要取进程名的窗口句柄；
    .局部变量 变量_1CA80225, 整数型

    GetWindowThreadProcessId (窗口句柄, 变量_1CA80225)
    返回 (进程_ID取进程名 (变量_1CA80225))

.子程序 窗口_句柄取线程ID, 整数型, 公开, 成功返回指定窗口的线程ID
    .参数 窗口句柄, 整数型, , 指定窗口句柄
    .局部变量 变量_EA370125, 整数型

    返回 (GetWindowThreadProcessId (窗口句柄, 变量_EA370125))

.子程序 窗口_句柄取进程ID, 整数型, 公开, 返回进程ID；
    .参数 窗口句柄, 整数型, , 目标窗口句柄
    .局部变量 变量_795B0125, 整数型

    GetWindowThreadProcessId (窗口句柄, 变量_795B0125)
    返回 (变量_795B0125)

.子程序 窗口_取任务栏句柄, 整数型, 公开, 取任务栏句柄
    返回 (FindWindowA (“Shell_TrayWnd”, 字符 (0)))

.子程序 窗口_取IE浏览框句柄, 整数型, 公开, 取IE浏览器中某个浏览框的句柄
    .参数 IEFrame句柄, 整数型, , IE浏览器中,类名为“IEFrame”的窗口句柄
    .局部变量 变量_74390125, 文本型
    .局部变量 变量_75390125, 整数型
    .局部变量 变量_76390125, 整数型

    变量_75390125 ＝ FindWindowExA (IEFrame句柄, 0, 0, 0)
    .判断循环首 (变量_75390125 ≠ 0)
        变量_74390125 ＝ 窗口_取类名 (变量_75390125)
        .如果真 (变量_74390125 ＝ “Internet Explorer_Server”)
            返回 (变量_75390125)
        .如果真结束
        变量_76390125 ＝ 窗口_取IE浏览框句柄 (变量_75390125)
        .如果真 (变量_76390125 ≠ 0)
            返回 (变量_76390125)
        .如果真结束
        变量_75390125 ＝ FindWindowExA (IEFrame句柄, 变量_75390125, 0, 0)
        系统_处理事件 ()
    .判断循环尾 ()
    返回 (0)

.子程序 窗口_取坐标处颜色, 整数型, 公开, 返回指定窗口指定坐标处颜色值；十进制
    .参数 窗口句柄, 整数型, 可空, 留空则取屏幕句柄；
    .参数 横坐标, 整数型, 可空, 留空则取鼠标处所在横坐标；
    .参数 纵坐标, 整数型, 可空, 留空则取鼠标处所在纵坐标；
    .局部变量 变量_6E3B0125, 精易_坐标
    .局部变量 变量_6F3B0125, 精易_位置和大小
    .局部变量 变量_CFF00125, 整数型
    .局部变量 变量_D0F00125, 整数型

    .如果 (窗口句柄 ＞ 0)
        .如果 (横坐标 ＝ 0 且 纵坐标 ＝ 0)
            变量_6E3B0125 ＝ 鼠标_取位置 ()
            变量_6F3B0125 ＝ 窗口_取位置和大小 (窗口句柄)
            横坐标 ＝ 变量_6E3B0125.横 － 变量_6F3B0125.左边
            纵坐标 ＝ 变量_6E3B0125.纵 － 变量_6F3B0125.顶边
        .否则
            变量_6F3B0125 ＝ 窗口_取位置和大小 (窗口句柄)
            横坐标 ＝ 横坐标 ＋ 变量_6F3B0125.左边
            纵坐标 ＝ 纵坐标 ＋ 变量_6F3B0125.顶边
        .如果结束
        变量_CFF00125 ＝ GetDC (0)
        变量_D0F00125 ＝ GetPixel (变量_CFF00125, 横坐标, 纵坐标)
        ReleaseDC (0, 变量_CFF00125)
        返回 (变量_D0F00125)
    .否则
        .如果 (横坐标 ＝ 0 且 纵坐标 ＝ 0)
            变量_6E3B0125 ＝ 鼠标_取位置 ()
            变量_CFF00125 ＝ GetDC (0)
            变量_D0F00125 ＝ GetPixel (变量_CFF00125, 变量_6E3B0125.横, 变量_6E3B0125.纵)
            ReleaseDC (0, 变量_CFF00125)
            返回 (变量_D0F00125)
        .否则
            变量_CFF00125 ＝ GetDC (0)
            变量_D0F00125 ＝ GetPixel (变量_CFF00125, 横坐标, 纵坐标)
            ReleaseDC (0, 变量_CFF00125)
            返回 (变量_D0F00125)
        .如果结束
        
    .如果结束
    
    返回 (0)

.子程序 窗口_屏蔽浏览器右键, 逻辑型, 公开, 注：只能屏蔽自身程序的浏览器；外部无效；请把该命令放在浏览器"已就绪"事件下；
    .参数 浏览器句柄, 整数型, , 浏览器句柄
    .参数 菜单回调子程序, 子程序指针, 可空, 留空为不弹菜单；
    .局部变量 变量_27E30225, 整数型
    .局部变量 变量_28E30225, 整数型

    变量_27E30225 ＝ 窗口_取IE浏览框句柄 (浏览器句柄)
    .如果真 (变量_27E30225 ＝ 0)
        输出调试文本 (“浏览器句柄无效！”)
        返回 (假)
    .如果真结束
    
    变量_28E30225 ＝ GetPropA (变量_27E30225, “GWL_WNDPROC”)
    .如果真 (变量_28E30225 ≠ 0)
        SetWindowLongA (变量_27E30225, #GWL_WNDPROC, 变量_28E30225)
        RemovePropA (变量_27E30225, “GWL_WNDPROC”)
        RemovePropA (变量_27E30225, “lProc”)
    .如果真结束
    
    SetPropA (变量_27E30225, “lProc”, 到整数 (菜单回调子程序))
    变量_28E30225 ＝ SetWindowLongA (变量_27E30225, #GWL_WNDPROC, 到整数 (&浏览器屏蔽右键消息处理))
    SetPropA (变量_27E30225, “GWL_WNDPROC”, 变量_28E30225)
    返回 (真)

.子程序 浏览器屏蔽右键消息处理, 整数型
    .参数 变量_22E30225, 整数型
    .参数 变量_23E30225, 整数型
    .参数 变量_24E30225, 整数型
    .参数 变量_25E30225, 整数型
    .局部变量 变量_26E30225, 整数型

    .如果真 (变量_23E30225 ＝ #WM_DESTROY)
        RemovePropA (变量_22E30225, “GWL_WNDPROC”)
        RemovePropA (变量_22E30225, “lProc”)
    .如果真结束
    .判断开始 (变量_23E30225 ＝ #WM_RBUTTONDOWN 或 变量_23E30225 ＝ #WM_RBUTTONUP 或 变量_23E30225 ＝ #WM_RBUTTONDBLCLK)
        变量_26E30225 ＝ GetPropA (变量_22E30225, “lProc”)
        返回 (CallWindowProcA (变量_26E30225, 0, 0, 0, 0))
    .默认
        变量_26E30225 ＝ GetPropA (变量_22E30225, “GWL_WNDPROC”)
        返回 (CallWindowProcA (变量_26E30225, 变量_22E30225, 变量_23E30225, 变量_24E30225, 变量_25E30225))
    .判断结束
    

.子程序 窗口_屏蔽编辑框右键, 逻辑型, 公开, 注：只能屏蔽自身程序的编辑框；外部无效；
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 菜单回调子程序, 子程序指针, 可空, 留空为不弹菜单；
    .局部变量 变量_2FE30225, 整数型

    .如果真 (IsWindow (编辑框句柄) ≠ 1)
        输出调试文本 (“编辑框句柄无效！”)
        返回 (假)
    .如果真结束
    
    变量_2FE30225 ＝ GetPropA (编辑框句柄, “GWL_WNDPROC”)
    .如果真 (变量_2FE30225 ≠ 0)
        SetWindowLongA (编辑框句柄, #GWL_WNDPROC, 变量_2FE30225)
        RemovePropA (编辑框句柄, “GWL_WNDPROC”)
        RemovePropA (编辑框句柄, “lProc”)
    .如果真结束
    
    SetPropA (编辑框句柄, “lProc”, 到整数 (菜单回调子程序))
    变量_2FE30225 ＝ SetWindowLongA (编辑框句柄, #GWL_WNDPROC, 到整数 (&编辑框屏蔽右键消息处理))
    SetPropA (编辑框句柄, “GWL_WNDPROC”, 变量_2FE30225)
    返回 (真)

.子程序 编辑框屏蔽右键消息处理, 整数型
    .参数 变量_2AE30225, 整数型
    .参数 变量_2BE30225, 整数型
    .参数 变量_2CE30225, 整数型
    .参数 变量_2DE30225, 整数型
    .局部变量 变量_2EE30225, 整数型

    .如果真 (变量_2BE30225 ＝ #WM_DESTROY)
        RemovePropA (变量_2AE30225, “GWL_WNDPROC”)
        RemovePropA (变量_2AE30225, “lProc”)
    .如果真结束
    .判断开始 (变量_2BE30225 ＝ #WM_RBUTTONDOWN 或 变量_2BE30225 ＝ #WM_RBUTTONUP 或 变量_2BE30225 ＝ #WM_RBUTTONDBLCLK)
        变量_2EE30225 ＝ GetPropA (变量_2AE30225, “lProc”)
        返回 (CallWindowProcA (变量_2EE30225, 0, 0, 0, 0))
    .默认
        变量_2EE30225 ＝ GetPropA (变量_2AE30225, “GWL_WNDPROC”)
        返回 (CallWindowProcA (变量_2EE30225, 变量_2AE30225, 变量_2BE30225, 变量_2CE30225, 变量_2DE30225))
    .判断结束
    

.子程序 窗口_屏蔽控件右键, 逻辑型, 公开, 屏蔽指定窗口的鼠标右键操作
    .参数 窗口句柄, 整数型, , 指定窗口句柄
    .局部变量 变量_36E30225, 整数型

    .如果真 (IsWindow (窗口句柄) ≠ 1)
        输出调试文本 (“窗口句柄无效！”)
        返回 (假)
    .如果真结束
    
    变量_36E30225 ＝ GetPropA (窗口句柄, “GWL_WNDPROC”)
    .如果真 (变量_36E30225 ≠ 0)
        SetWindowLongA (窗口句柄, #GWL_WNDPROC, 变量_36E30225)
        RemovePropA (窗口句柄, “GWL_WNDPROC”)
    .如果真结束
    
    变量_36E30225 ＝ SetWindowLongA (窗口句柄, #GWL_WNDPROC, 到整数 (&屏蔽控件右键_消息处理))
    SetPropA (窗口句柄, “GWL_WNDPROC”, 变量_36E30225)
    返回 (真)

.子程序 屏蔽控件右键_消息处理, 整数型
    .参数 变量_31E30225, 整数型
    .参数 变量_32E30225, 整数型
    .参数 变量_33E30225, 整数型
    .参数 变量_34E30225, 整数型
    .局部变量 变量_35E30225, 整数型

    .如果真 (变量_32E30225 ＝ #WM_DESTROY)
        RemovePropA (变量_31E30225, “GWL_WNDPROC”)
    .如果真结束
    .判断开始 (变量_32E30225 ＝ #WM_RBUTTONDOWN 或 变量_32E30225 ＝ #WM_RBUTTONUP 或 变量_32E30225 ＝ #WM_RBUTTONDBLCLK)
        返回 (0)
    .默认
        变量_35E30225 ＝ GetPropA (变量_31E30225, “GWL_WNDPROC”)
        返回 (CallWindowProcA (变量_35E30225, 变量_31E30225, 变量_32E30225, 变量_33E30225, 变量_34E30225))
    .判断结束
    

.子程序 窗口_按钮解除禁止, 逻辑型, 公开, 可以激活一些被禁止的按钮；成功返回真；失败返回假；
    .参数 控件句柄, 整数型, , 指定的按钮等控件句柄
    .参数 类型, 逻辑型, 可空, 真=解除禁止,假=禁止

    返回 (DLL_EnableWindow (控件句柄, 类型))

.子程序 窗口_取顶端窗口句柄, 整数型, 公开, 成功返回一个最顶端窗口的句柄
    返回 (GetForegroundWindow ())

.子程序 窗口_限制运行次数, 逻辑型, 公开, 真为超出次数，假为相反
    .参数 标题, 文本型
    .参数 类名, 文本型
    .参数 限制次数, 整数型, 可空, 限制多开的窗口数量，可空，默认为1
    .局部变量 变量_38C90125, 整数型
    .局部变量 变量_39C90125, 整数型

    .如果真 (限制次数 ≤ 0)
        限制次数 ＝ 1
    .如果真结束
    变量_39C90125 ＝ FindWindowExA (0, 0, 取指针文本_ (类名), 0)
    .判断循环首 (变量_39C90125 ≠ 0)
        .如果真 (窗口_取标题 (变量_39C90125) ＝ 标题)
            变量_38C90125 ＝ 变量_38C90125 ＋ 1
        .如果真结束
        变量_39C90125 ＝ FindWindowExA (0, 变量_39C90125, 取指针文本_ (类名), 0)
    .判断循环尾 ()
    .判断开始 (变量_38C90125 ＞ 限制次数)
        返回 (真)
    .默认
        返回 (假)
    .判断结束
    

.子程序 窗口_句柄取进程路径, 文本型, 公开, 根据指定窗口句柄获取程序的文件路径
    .参数 窗口句柄, 整数型, 可空
    .局部变量 变量_57F30225, 整数型
    .局部变量 变量_58F30225, 整数型
    .局部变量 变量_59F30225, 整数型
    .局部变量 变量_5AF30225, 文本型

    .如果 (窗口句柄 ≠ 0)
        GetWindowThreadProcessId (窗口句柄, 变量_57F30225)
        变量_58F30225 ＝ OpenProcess (位或 (#PROCESS_QUERY_INFORMATION, #PROCESS_VM_READ), 0, 变量_57F30225)
    .否则
        变量_58F30225 ＝ GetCurrentProcess ()
    .如果结束
    .如果真 (变量_58F30225 ≠ #NULL)
        变量_5AF30225 ＝ 取空白文本 (#MAX_PATH)
        变量_59F30225 ＝ GetModuleFileNameExA (变量_58F30225, #NULL, 变量_5AF30225, #MAX_PATH)
        CloseHandle (变量_58F30225)
    .如果真结束
    返回 (变量_5AF30225)

.子程序 窗口_取鼠标处控件标题, 文本型, 公开, 取出指定点的组件上的文字内容或标题(返回文字内容)
    .参数 水平位置, 整数型, 可空, (可空为鼠标当前坐标x)   文字所在的x坐标“X轴光标”
    .参数 垂直位置, 整数型, 可空, (可空为鼠标当前坐标y)   文字所以的y坐标“Y轴光标”
    .局部变量 变量_D5220125, 文本型
    .局部变量 变量_D6220125, 精易_坐标

    .如果真 (是否为空 (水平位置) 或 是否为空 (垂直位置))
        DLL_GetCursorPos (变量_D6220125)
        水平位置 ＝ 变量_D6220125.横
        垂直位置 ＝ 变量_D6220125.纵
    .如果真结束
    变量_D5220125 ＝ 取空白文本 (256)
    SendMessageA (WindowFromPoint (水平位置, 垂直位置), 13, 256, 取指针文本_ (变量_D5220125))
    返回 (变量_D5220125)

.子程序 窗口_取鼠标处窗口句柄, 整数型, 公开, 取鼠标处窗口句柄,成功返回句柄，失败返回0
    .局部变量 变量_7D380125, 精易_坐标
    .局部变量 变量_82100125, 整数型
    .局部变量 变量_83100125, 整数型

    变量_7D380125 ＝ 鼠标_取位置 ()
    返回 (WindowFromPoint (变量_7D380125.横, 变量_7D380125.纵))

.子程序 窗口_取指定坐标处句柄, 整数型, 公开, 取指定坐标处句柄,成功返回句柄，失败返回0
    .参数 横坐标, 整数型, , 桌面横坐标
    .参数 纵坐标, 整数型, , 桌面纵坐标

    返回 (WindowFromPoint (横坐标, 纵坐标))

.子程序 窗口_句柄枚举进程信息, 精易_进程信息, 公开, 返回进程ID，进程名，进程名全路径；
    .参数 窗口句柄, 整数型
    .局部变量 变量_7D150125, 整数型
    .局部变量 变量_7E150125, 精易_进程信息
    .局部变量 变量_7F150125, 文本型
    .局部变量 变量_80150125, 整数型
    .局部变量 变量_81150125, 整数型
    .局部变量 变量_82150125, 整数型
    .局部变量 变量_83150125, 精易_进程信息列表

    .如果真 (GetWindowThreadProcessId (窗口句柄, 变量_7D150125) ≠ 0)
        变量_7E150125.进程ID ＝ 变量_7D150125
        变量_7F150125 ＝ 取空白文本 (1024)
        变量_80150125 ＝ GetModuleFileNameExA (OpenProcess (1040, 0, 变量_7D150125), 0, 变量_7F150125, 1024)
        .如果真 (变量_80150125 ≠ 0)
            变量_7E150125.进程全路径名 ＝ 到文本 (删首尾空 (变量_7F150125))
        .如果真结束
        变量_81150125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
        .如果真 (变量_81150125 ≠ #INVALID_HANDLE_VALUE)
            变量_83150125.dwSize ＝ 296
            变量_82150125 ＝ Process32First (变量_81150125, 变量_83150125)
            .判断循环首 (变量_82150125 ≠ 0)
                .如果真 (变量_83150125.进程ID ＝ 变量_7D150125)
                    变量_7E150125.进程名 ＝ 到文本 (变量_83150125.进程名称)
                    跳出循环 ()
                .如果真结束
                变量_82150125 ＝ Process32Next (变量_81150125, 变量_83150125)
            .判断循环尾 ()
            CloseHandle (变量_81150125)
        .如果真结束
        
    .如果真结束
    返回 (变量_7E150125)

.子程序 窗口_是否激活, 逻辑型, 公开, 判断指定窗口是否激活状态，是则返回真，否则返回假。
    .参数 窗口句柄, 整数型
    .局部变量 变量_BEDA0125, 自定义_C2DA0141

    变量_BEDA0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_BEDA0125)
    返回 (变量_BEDA0125.成员_C8DA0135 ＝ 1)

.子程序 窗口_取矩形, 精易_矩形, 公开, 返回指定窗口的矩形信息
    .参数 窗口句柄, 整数型
    .局部变量 变量_DCDA0125, 自定义_C2DA0141

    变量_DCDA0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_DCDA0125)
    返回 (变量_DCDA0125.成员_C4DA0135)

.子程序 窗口_取客户区矩形, 精易_矩形, 公开, 返回指定窗口的矩形信息
    .参数 窗口句柄, 整数型
    .局部变量 变量_E9DA0125, 自定义_C2DA0141

    变量_E9DA0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_E9DA0125)
    返回 (变量_E9DA0125.成员_C5DA0135)

.子程序 窗口_取样式, 整数型, 公开, 返回指定窗口的窗口样式
    .参数 窗口句柄, 整数型
    .局部变量 变量_F7DA0125, 自定义_C2DA0141

    变量_F7DA0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_F7DA0125)
    返回 (变量_F7DA0125.成员_C6DA0135)

.子程序 窗口_取扩展样式, 整数型, 公开, 返回指定窗口的扩展样式
    .参数 窗口句柄, 整数型
    .局部变量 变量_00DB0125, 自定义_C2DA0141

    变量_00DB0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_00DB0125)
    返回 (变量_00DB0125.成员_C7DA0135)

.子程序 窗口_取边框宽度, 整数型, 公开, 返回指定窗口的宽度
    .参数 窗口句柄, 整数型
    .局部变量 变量_0DDB0125, 自定义_C2DA0141

    变量_0DDB0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_0DDB0125)
    返回 (变量_0DDB0125.成员_C9DA0135)

.子程序 窗口_取边框高度, 整数型, 公开, 返回指定窗口的高度
    .参数 窗口句柄, 整数型
    .局部变量 变量_16DB0125, 自定义_C2DA0141

    变量_16DB0125.成员_C3DA0135 ＝ 60
    DLL_GetWindowInfo (窗口句柄, 变量_16DB0125)
    返回 (变量_16DB0125.成员_CADA0135)

.子程序 窗口_取激活句柄, 整数型, 公开, 取激活的窗口句柄。
    返回 (DLL_GetActiveWindow ())

.子程序 窗口_限制尺寸, 逻辑型, 公开, 限制窗口拉伸最小尺寸与最大尺寸，超出则无法拉伸。注意：不支持外部窗口。
    .参数 窗口句柄, 整数型
    .参数 最小宽度, 整数型, 可空
    .参数 最小高度, 整数型, 可空
    .参数 最大宽度, 整数型, 可空
    .参数 最大高度, 整数型, 可空

    SetPropA (窗口句柄, “minimum width”, 选择 (是否为空 (最小宽度), -1, 最小宽度))
    SetPropA (窗口句柄, “minimum height”, 选择 (是否为空 (最小高度), -1, 最小高度))
    SetPropA (窗口句柄, “maximum width”, 选择 (是否为空 (最大宽度), -1, 最大宽度))
    SetPropA (窗口句柄, “maximum height”, 选择 (是否为空 (最大高度), -1, 最大高度))
    返回 (SetPropA (窗口句柄, “Limit size”, SetWindowLongA (窗口句柄, -4, 到整数 (&限制尺寸回调))))

.子程序 限制尺寸回调, 整数型
    .参数 变量_BDE10125, 整数型
    .参数 变量_BEE10125, 整数型
    .参数 变量_BFE10125, 整数型
    .参数 变量_C0E10125, 整数型
    .局部变量 变量_C4E10125, 整数型
    .局部变量 变量_CAE10125, 自定义_A9E10141
    .局部变量 变量_B3E60225, 整数型

    变量_C4E10125 ＝ GetPropA (变量_BDE10125, “Limit size”)
    .如果真 (GetPropA (变量_BDE10125, “Cancel the limit”) ＝ 1)
        RemovePropA (变量_BDE10125, “Limit size”)
        RemovePropA (变量_BDE10125, “Cancel the limit”)
        RemovePropA (变量_BDE10125, “minimum width”)
        RemovePropA (变量_BDE10125, “minimum height”)
        RemovePropA (变量_BDE10125, “maximum width”)
        RemovePropA (变量_BDE10125, “maximum height”)
        SetWindowLongA (变量_BDE10125, #GWL_WNDPROC, 变量_C4E10125)
        返回 (0)
    .如果真结束
    .如果真 (变量_BEE10125 ＝ 36)
        DLL_RtlMoveMemory26 (变量_CAE10125, 变量_C0E10125, 40)
        变量_B3E60225 ＝ GetPropA (变量_BDE10125, “minimum width”)
        .如果真 (变量_B3E60225 ＞ -1)
            变量_CAE10125.成员_ADE10135.横 ＝ 变量_B3E60225
        .如果真结束
        变量_B3E60225 ＝ GetPropA (变量_BDE10125, “minimum height”)
        .如果真 (变量_B3E60225 ＞ -1)
            变量_CAE10125.成员_ADE10135.纵 ＝ 变量_B3E60225
        .如果真结束
        变量_B3E60225 ＝ GetPropA (变量_BDE10125, “maximum width”)
        .如果真 (变量_B3E60225 ＞ -1)
            变量_CAE10125.成员_AEE10135.横 ＝ 变量_B3E60225
        .如果真结束
        变量_B3E60225 ＝ GetPropA (变量_BDE10125, “maximum height”)
        .如果真 (变量_B3E60225 ＞ -1)
            变量_CAE10125.成员_AEE10135.纵 ＝ 变量_B3E60225
        .如果真结束
        DLL_RtlMoveMemory27 (变量_C0E10125, 变量_CAE10125, 40)
    .如果真结束
    返回 (CallWindowProcA (变量_C4E10125, 变量_BDE10125, 变量_BEE10125, 变量_BFE10125, 变量_C0E10125))

.子程序 窗口_取消尺寸限制, 逻辑型, 公开, 取消 [窗口_限制尺寸] 的限制
    .参数 窗口句柄, 整数型
    .参数 是否取消限制, 逻辑型

    返回 (SetPropA (窗口句柄, “Cancel the limit”, 选择 (是否取消限制, 1, 0)))

.子程序 窗口_是否被遮挡, 逻辑型, 公开, 判断一个窗口是否被置顶窗口遮挡，是否返回真，否则返回假。
    .参数 窗口句柄, 整数型
    .局部变量 变量_61E50125, 自定义_C2DA0141
    .局部变量 变量_62E50125, 精易_矩形
    .局部变量 变量_63E50125, 逻辑型
    .局部变量 变量_64E50125, 精易_矩形
    .局部变量 变量_65E50125, 整数型

    变量_61E50125.成员_C3DA0135 ＝ 60
    .如果真 (DLL_GetWindowInfo (窗口句柄, 变量_61E50125))
        变量_62E50125 ＝ 变量_61E50125.成员_C4DA0135
        变量_63E50125 ＝ #WS_CHILD ＝ 位与 (变量_61E50125.成员_C6DA0135, #WS_CHILD)
        .如果真 (窗口句柄 ＝ GetDesktopWindow ())
            窗口句柄 ＝ GetWindow (GetTopWindow (窗口句柄), #GW_HWNDLAST)
        .如果真结束
        .循环判断首 ()
            变量_65E50125 ＝ 窗口句柄
            窗口句柄 ＝ GetNextWindow (窗口句柄, #GW_HWNDPREV)
            .判断循环首 (窗口句柄 ≠ 0)
                .如果真 (IsWindowVisible (窗口句柄))
                    GetWindowRect (窗口句柄, 变量_64E50125)
                    .如果真 (取反 (变量_64E50125.右边 ＜ 变量_62E50125.左边 或 变量_64E50125.左边 ＞ 变量_62E50125.右边 或 变量_64E50125.底边 ＜ 变量_62E50125.顶边 或 变量_64E50125.顶边 ＞ 变量_62E50125.底边))
                        返回 (真)
                    .如果真结束
                    处理事件 ()
                .如果真结束
                .如果 (变量_63E50125)
                    窗口句柄 ＝ GetParent (变量_65E50125)
                    变量_63E50125 ＝ #WS_CHILD ＝ 位与 (GetWindowLongA (窗口句柄, #GWL_STYLE), #WS_CHILD)
                .否则
                    跳出循环 ()
                .如果结束
                处理事件 ()
            .判断循环尾 ()
        .循环判断尾 (窗口句柄 ≠ 0)
    .如果真结束
    返回 (假)

.子程序 窗口_是否存在, 整数型, 公开, 根据指定窗口句柄或窗口标题，查询一个窗口是否存在，成功返回窗口句柄，否则返回0。
    .参数 参_句柄或标题, 文本型, , 支持窗口句柄与模糊标题
    .局部变量 变量_8CE90125, 精易_窗口信息, , "0"
    .局部变量 变量_A1E90125, 自定义_C2DA0141
    .局部变量 变量_8DE90125, 整数型
    .局部变量 变量_8EE90125, 整数型
    .局部变量 变量_90E90125, 文本型

    变量_A1E90125.成员_C3DA0135 ＝ 60
    .如果 (DLL_GetWindowInfo (到整数 (参_句柄或标题), 变量_A1E90125))
        返回 (到整数 (参_句柄或标题))
    .否则
        变量_8DE90125 ＝ 窗口_枚举 (变量_8CE90125)
        .计次循环首 (变量_8DE90125, 变量_8EE90125)
            .如果真 (寻找文本 (变量_8CE90125 [变量_8EE90125].窗口标题, 参_句柄或标题, , 假) ≠ -1)
                返回 (变量_8CE90125 [变量_8EE90125].窗口句柄)
            .如果真结束
            处理事件 ()
        .计次循环尾 ()
    .如果结束
    返回 (0)

.子程序 窗口_等待出现, 整数型, 公开, 等待指定窗口出现，成功返回窗口句柄，失败返回0，本命令类似于AU3脚本中WinWait命令。
    .参数 参_标题, 文本型, , 支持模糊标题
    .参数 参_内容, 文本型, 可空, 如果窗口标题相同，可以比较窗口内文本，支持模糊内容。
    .参数 参_超时, 整数型, 可空, 单位为毫秒,超过此时间等待还没结果则返回0,留空则一直等待
    .局部变量 变量_C1E90125, 整数型
    .局部变量 变量_BBE90125, 整数型
    .局部变量 变量_BCE90125, 整数型
    .局部变量 变量_BDE90125, 整数型
    .局部变量 变量_BEE90125, 整数型, , "0"
    .局部变量 变量_BFE90125, 整数型
    .局部变量 变量_C2E90125, 文本型

    变量_BCE90125 ＝ 选择 (参_超时 ＞ 0, 参_超时, 100000000 × 1000)
    变量_BBE90125 ＝ 取启动时间 ()
    .判断循环首 (取启动时间 () － 变量_BBE90125 ＜ 变量_BCE90125)
        变量_C1E90125 ＝ 窗口_是否存在 (参_标题)
        .如果真 (变量_C1E90125 ≠ 0)
            .如果 (取文本长度 (参_内容) ＞ 0)
                变量_BDE90125 ＝ 窗口_枚举子窗口 (变量_C1E90125, 变量_BEE90125)
                .计次循环首 (变量_BDE90125, 变量_BFE90125)
                    变量_C2E90125 ＝ 窗口_取标题 (变量_BEE90125 [变量_BFE90125])
                    .如果真 (寻找文本 (变量_C2E90125, 参_内容, , 假) ≠ -1)
                        返回 (变量_C1E90125)
                    .如果真结束
                    处理事件 ()
                .计次循环尾 ()
            .否则
                返回 (变量_C1E90125)
            .如果结束
            处理事件 ()
        .如果真结束
        程序_延时 (250)
    .判断循环尾 ()
    返回 (0)

.子程序 窗口_挂起, 整数型, 公开, 成功返回挂起计数，失败返回-1
    .参数 参_窗口句柄, 整数型
    .参数 参_是否挂起, 逻辑型, 可空
    .局部变量 变量_F0F70125, 整数型
    .局部变量 变量_F1F70125, 整数型
    .局部变量 变量_F5F70125, 整数型

    变量_F0F70125 ＝ GetWindowThreadProcessId (参_窗口句柄, 0)
    .如果真 (变量_F0F70125 ≠ 0)
        变量_F1F70125 ＝ OpenThread (2032639, 0, 变量_F0F70125)
        .如果真 (变量_F1F70125 ≠ 0)
            参_是否挂起 ＝ 选择 (是否为空 (参_是否挂起), 真, 参_是否挂起)
            .如果 (参_是否挂起)
                变量_F5F70125 ＝ SuspendThread (变量_F1F70125)
            .否则
                变量_F5F70125 ＝ ResumeThread (变量_F1F70125)
            .如果结束
            CloseHandle (变量_F1F70125)
        .如果真结束
        返回 (变量_F5F70125)
    .如果真结束
    返回 (-1)

.子程序 窗口_取窗口属性, 整数型, 公开, 如果函数成功，返回值是所需的32位值；如果函数失败，返回值是0。若想获得更多错误信息请调用 GetLastError函数。
    .参数 窗口句柄, 整数型, , 获取指定的窗口风格属性
    .参数 类型, 整数型, , 参考常量GWL相关

    返回 (GetWindowLongA (窗口句柄, 类型))

.子程序 窗口_置窗口属性, 整数型, 公开, 如果函数成功，返回值是指定的32位整数的原来的值。如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数。
    .参数 窗口句柄, 整数型, , 设置指定的窗口风格属性，如将有边框窗口设置为无边框窗口
    .参数 属性, 整数型, , 参考常量GWL相关
    .参数 新样式, 整数型, , 调用 窗口_取窗口属性 获取对应属性值并设置对应属性值

    返回 (SetWindowLongA (窗口句柄, 属性, 新样式))

.子程序 窗口_剔除风格, 整数型, 公开, 返回值是指定的32位整数的原来的值。如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数。
    .参数 参_句柄, 整数型
    .参数 参_待剔除风格, 整数型, , 参考常量值 #窗口风格_  
    .局部变量 变量_44C90225, 整数型

    变量_44C90225 ＝ GetWindowLongA (参_句柄, #GWL_STYLE)
    变量_44C90225 ＝ 位与 (变量_44C90225, 位取反 (参_待剔除风格))
    返回 (SetWindowLongA (参_句柄, #GWL_STYLE, 变量_44C90225))

.子程序 窗口_剔除扩展风格, 整数型, 公开, 返回值是指定的32位整数的原来的值。如果函数失败，返回值为0。若想获得更多错误信息，请调用GetLastError函数。
    .参数 参_句柄, 整数型
    .参数 参_待剔除扩展风格, 整数型, , 参考常量值 #窗口扩展_  
    .局部变量 变量_D3C90225, 整数型

    变量_D3C90225 ＝ GetWindowLongA (参_句柄, #GWL_EXSTYLE)
    变量_D3C90225 ＝ 位与 (变量_D3C90225, 位取反 (参_待剔除扩展风格))
    返回 (SetWindowLongA (参_句柄, #GWL_EXSTYLE, 变量_D3C90225))

.子程序 窗口_更新窗口, 整数型, 公开, 强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画
    .参数 窗口句柄, 整数型

    返回 (UpdateWindow (窗口句柄))

.子程序 窗口_隐藏小图标, , 公开, 隐藏标题左上角的小图标
    .参数 窗口句柄, 整数型

    SetWindowLongA (窗口句柄, #GWL_EXSTYLE, 65793)
    SendMessageA (窗口句柄, #WM_SETICON, 1, 0)
    SendMessageA (窗口句柄, #WM_SETICON, 0, 0)

.子程序 窗口_设为无焦点, 整数型, 公开, 设置窗口为无焦点窗口（类似输入法窗口不会获取焦点）
    .参数 窗口句柄, 整数型

    
    返回 (SetWindowLongA (窗口句柄, #GWL_EXSTYLE, #WS_EX_NOACTIVATE))

.子程序 窗口_复制到剪贴板, 整数型, 公开, 程序发送此消息给一个编辑框或combobox来复制当前选择的文本到剪贴板
    .参数 窗口句柄, 整数型

    
    返回 (SendMessageA (窗口句柄, #WM_COPY, 0, 0))

.子程序 窗口_取句柄_递归, 整数型, 公开, 成功返回控件的句柄，失败返回0
    .参数 句柄, 整数型
    .参数 指定类名, 文本型
    .局部变量 变量_C7D30225, 文本型
    .局部变量 变量_C8D30225, 整数型
    .局部变量 变量_C9D30225, 整数型

    变量_C8D30225 ＝ FindWindowExA (句柄, 0, 0, 0)
    .判断循环首 (变量_C8D30225 ＞ 0)
        变量_C7D30225 ＝ 窗口_取类名 (变量_C8D30225)
        .如果真 (变量_C7D30225 ＝ 指定类名)
            返回 (变量_C8D30225)
        .如果真结束
        变量_C9D30225 ＝ 窗口_取句柄_递归 (变量_C8D30225, 指定类名)
        .如果真 (变量_C9D30225 ≠ 0)
            返回 (变量_C9D30225)
        .如果真结束
        变量_C8D30225 ＝ FindWindowExA (句柄, 变量_C8D30225, 0, 0)
        系统_处理事件1 ()
    .判断循环尾 ()
    返回 (0)

.子程序 窗口_取顶端文件夹路径, 文本型, 公开, 成功返回路径，失败返回空文本
    .局部变量 变量_CED30225, 整数型
    .局部变量 变量_D2D30225, 文本型

    变量_CED30225 ＝ FindWindowA (“CabinetWClass”, 字符 (0))
    .如果真 (变量_CED30225 ≠ 0)
        变量_CED30225 ＝ 窗口_取句柄_递归 (变量_CED30225, “Breadcrumb Parent”)
        变量_CED30225 ＝ FindWindowExA (变量_CED30225, 0, 取指针文本_ (“ToolbarWindow32”), 0)
        变量_D2D30225 ＝ 窗口_取标题 (变量_CED30225)
        变量_D2D30225 ＝ 文本_取右边 (变量_D2D30225, “地址: ”)
    .如果真结束
    返回 (变量_D2D30225)

.子程序 窗口_注册窗口热键, 逻辑型, 公开, 注册窗口级热键,只有在窗口被激活时才有效
    .参数 窗口句柄, 整数型, , 要注册热键那个窗口的句柄
    .参数 功能键状态, 整数型, 可空, 请使用常量 #MOD_ALT、#MOD_CONTROL、#MOD_SHIFT 若要两个或以上的状态键按则把它们的值相加
    .参数 键代码, 整数型, , 请使用 #A键、#B键、#F1键、#F2键... 等常量
    .参数 热键响应类型, 整数型, 可空, 请使用常量:1.热键类型_键盘按下 2.热键类型_键盘松开;留空或传递0默认为键盘按下
    .参数 子程序指针, 子程序指针, , 热键事件调用的子程序
    .参数 允许继续输入, 逻辑型, 可空, 热键响应之后,是否允许继续输入该热键的文字(WM_CHAR),默认为假.不允许.
    .局部变量 变量_50D50225, 整数型
    .局部变量 变量_51D50225, 整数型
    .局部变量 变量_52D50225, 文本型
    .局部变量 变量_9E0C0325, 整数型

    变量_50D50225 ＝ 窗口句柄
    .如果真 (IsWindow (窗口句柄) ＝ 0)
        返回 (假)
    .如果真结束
    变量_51D50225 ＝ 到整数 (子程序指针)
    变量_9E0C0325 ＝ RegisterWindowMessageA (“Comet_HotKeyMessage”)
    .如果真 (变量_9E0C0325 ＝ 0)
        返回 (假)
    .如果真结束
    SetPropA (变量_50D50225, “Comet_HotKeyMessage”, 变量_9E0C0325)
    .如果真 (键代码 ＜ 1 或 键代码 ＞ 254)
        返回 (假)
    .如果真结束
    .如果真 (功能键状态 ＜ 0 或 功能键状态 ＞ 7)
        功能键状态 ＝ 0
    .如果真结束
    .如果真 (热键响应类型 ≤ 0 或 热键响应类型 ＞ 2)
        热键响应类型 ＝ 1
    .如果真结束
    SetHotKeyProp (变量_50D50225, 功能键状态, 键代码, 变量_51D50225, 热键响应类型, 允许继续输入)
    HotKey_SubClassWindow (GetAncestor (变量_50D50225, #<?未知本地类型?>))
    返回 (真)

.子程序 窗口_撤销窗口热键, 逻辑型, 公开, 撤销窗口级热键
    .参数 窗口句柄, 整数型, , 要撤销热键那个窗口的句柄
    .参数 键代码, 整数型, , 请使用 #A键、#B键、#F1键、#F2键... 等常量
    .局部变量 变量_B9D50225, 整数型
    .局部变量 变量_B7D50225, 整数型
    .局部变量 变量_C4D50225, 整数型
    .局部变量 变量_C3D50225, 文本型

    变量_B9D50225 ＝ 窗口句柄
    .如果真 (IsWindow (变量_B9D50225) ＝ 0)
        返回 (假)
    .如果真结束
    变量_C4D50225 ＝ 键代码
    .如果真 (变量_C4D50225 ＜ 1 或 变量_C4D50225 ＞ 254)
        返回 (假)
    .如果真结束
    变量_B7D50225 ＝ GetPropA (变量_B9D50225, “Comet_HotKeyProc”)
    .如果真 (变量_B7D50225 ＝ 0)
        返回 (假)
    .如果真结束
    SetWindowLongA (变量_B9D50225, #GWL_WNDPROC, 变量_B7D50225)
    变量_C3D50225 ＝ “HotKey” ＋ 到文本 (变量_C4D50225)
    RemovePropA (变量_B9D50225, 变量_C3D50225 ＋ “_Mod”)
    RemovePropA (变量_B9D50225, 变量_C3D50225 ＋ “_VirtKey”)
    RemovePropA (变量_B9D50225, 变量_C3D50225 ＋ “_Proc”)
    RemovePropA (变量_B9D50225, 变量_C3D50225 ＋ “_Type”)
    RemovePropA (变量_B9D50225, 变量_C3D50225 ＋ “_Char”)
    .如果真 (DLL_EnumPropsA (变量_B9D50225, 到整数 (&HotkeysEnumFunc)) ＝ 1)
        RemovePropA (变量_B9D50225, “Comet_HotKeyProc”)
        RemovePropA (变量_B9D50225, “Comet_HotKeyMessage”)
    .如果真结束
    返回 (真)

.子程序 HotkeysEnumFunc, 逻辑型
    .参数 变量_1A0B0325, 整数型
    .参数 变量_1B0B0325, 整数型
    .参数 变量_1C0B0325, 整数型
    .局部变量 变量_1D0B0325, 文本型

    .如果真 (变量_1B0B0325 ≠ #NULL)
        变量_1D0B0325 ＝ 指针到文本 (变量_1B0B0325)
        .如果真 (取文本右边 (变量_1D0B0325, 8) ＝ “_VirtKey”)
            返回 (假)
        .如果真结束
        
    .如果真结束
    返回 (真)

.子程序 SetHotKeyProp
    .参数 变量_53D50225, 整数型
    .参数 变量_54D50225, 整数型
    .参数 变量_55D50225, 整数型
    .参数 变量_56D50225, 整数型
    .参数 变量_57D50225, 整数型
    .参数 变量_58D50225, 逻辑型
    .局部变量 变量_59D50225, 文本型

    变量_59D50225 ＝ “HotKey” ＋ 到文本 (变量_55D50225)
    SetPropA (变量_53D50225, 变量_59D50225 ＋ “_Mod”, 变量_54D50225)
    SetPropA (变量_53D50225, 变量_59D50225 ＋ “_VirtKey”, 变量_55D50225)
    SetPropA (变量_53D50225, 变量_59D50225 ＋ “_Proc”, 变量_56D50225)
    SetPropA (变量_53D50225, 变量_59D50225 ＋ “_Type”, 变量_57D50225)
    SetPropA (变量_53D50225, 变量_59D50225 ＋ “_Char”, 到整数 (变量_58D50225))

.子程序 HotKey_SubClassWindow
    .参数 变量_5AD50225, 整数型
    .局部变量 变量_5BD50225, 整数型
    .局部变量 变量_5CD50225, 整数型

    变量_5BD50225 ＝ GetPropA (变量_5AD50225, “Comet_HotKeyProc”)
    .如果真 (变量_5BD50225 ＝ 0)
        变量_5BD50225 ＝ SetWindowLongA (变量_5AD50225, #GWL_WNDPROC, 到整数 (&HotKey_OnMessage))
        SetPropA (变量_5AD50225, “Comet_HotKeyProc”, 变量_5BD50225)
    .如果真结束
    变量_5CD50225 ＝ GetWindow (变量_5AD50225, #GW_CHILD)
    .判断循环首 (变量_5CD50225 ≠ 0)
        HotKey_SubClassWindow (变量_5CD50225)
        变量_5CD50225 ＝ GetWindow (变量_5CD50225, #GW_HWNDNEXT)
    .判断循环尾 ()

.子程序 HotKey_OnMessage, 整数型
    .参数 变量_5DD50225, 整数型
    .参数 变量_5ED50225, 整数型
    .参数 变量_5FD50225, 整数型
    .参数 变量_60D50225, 整数型

    .判断开始 (变量_5ED50225 ＝ #<?未知本地类型?> 或 变量_5ED50225 ＝ #<?未知本地类型?>)
        返回 (HotKey_OnKeyDown (变量_5DD50225, 变量_5ED50225, 变量_5FD50225, 变量_60D50225))
    .判断 (变量_5ED50225 ＝ #<?未知本地类型?> 或 变量_5ED50225 ＝ #<?未知本地类型?>)
        返回 (HotKey_OnKeyUP (变量_5DD50225, 变量_5ED50225, 变量_5FD50225, 变量_60D50225))
    .判断 (变量_5ED50225 ＝ #<?未知本地类型?>)
        返回 (HotKey_OnChar (变量_5DD50225, 变量_5ED50225, 变量_5FD50225, 变量_60D50225))
    .判断 (变量_5ED50225 ＝ GetPropA (变量_5DD50225, “Comet_HotKeyMessage”))
        返回 (HotKey_OnHotkeyMsg (变量_5DD50225, 变量_5ED50225, 变量_5FD50225, 变量_60D50225))
    .默认
        
    .判断结束
    返回 (HotKey_CallWindowProc (变量_5DD50225, 变量_5ED50225, 变量_5FD50225, 变量_60D50225))

.子程序 HotKey_OnKeyDown, 整数型
    .参数 变量_61D50225, 整数型
    .参数 变量_62D50225, 整数型
    .参数 变量_63D50225, 整数型
    .参数 变量_64D50225, 整数型
    .局部变量 变量_65D50225, 整数型
    .局部变量 变量_67D50225, 自定义_92D50241

    变量_65D50225 ＝ 变量_63D50225
    .如果真 (IsHotKey (变量_61D50225, 变量_65D50225, 变量_67D50225))
        .如果真 (变量_67D50225.成员_97D50235 ＝ 1)
            PostMessageA (变量_61D50225, GetPropA (变量_61D50225, “Comet_HotKeyMessage”), 变量_67D50225.成员_96D50235, 0)
        .如果真结束
        返回 (0)
    .如果真结束
    返回 (HotKey_CallWindowProc (变量_61D50225, 变量_62D50225, 变量_63D50225, 变量_64D50225))

.子程序 GetHotKeyProp, 自定义_92D50241
    .参数 变量_68D50225, 整数型
    .参数 变量_69D50225, 整数型
    .局部变量 变量_6AD50225, 自定义_92D50241
    .局部变量 变量_6BD50225, 文本型

    变量_6AD50225.成员_93D50235 ＝ 变量_68D50225
    变量_6BD50225 ＝ “HotKey” ＋ 到文本 (变量_69D50225)
    变量_6AD50225.成员_94D50235 ＝ GetPropA (变量_68D50225, 变量_6BD50225 ＋ “_Mod”)
    变量_6AD50225.成员_95D50235 ＝ GetPropA (变量_68D50225, 变量_6BD50225 ＋ “_VirtKey”)
    变量_6AD50225.成员_96D50235 ＝ GetPropA (变量_68D50225, 变量_6BD50225 ＋ “_Proc”)
    变量_6AD50225.成员_97D50235 ＝ GetPropA (变量_68D50225, 变量_6BD50225 ＋ “_Type”)
    变量_6AD50225.成员_98D50235 ＝ GetPropA (变量_68D50225, 变量_6BD50225 ＋ “_Char”) ≠ 0
    返回 (变量_6AD50225)

.子程序 IsHotKey, 逻辑型
    .参数 变量_6CD50225, 整数型
    .参数 变量_6DD50225, 整数型
    .参数 变量_6ED50225, 自定义_92D50241, 参考
    .局部变量 变量_6FD50225, 整数型
    .局部变量 变量_970C0325, 整数型

    变量_6ED50225 ＝ GetHotKeyProp (变量_6CD50225, 变量_6DD50225)
    .如果真 (变量_6ED50225.成员_96D50235 ＝ 0)
        变量_6FD50225 ＝ GetAncestor (变量_6CD50225, #<?未知本地类型?>)
        .如果真 (变量_6FD50225 ＝ 变量_6CD50225)
            返回 (假)
        .如果真结束
        变量_6ED50225 ＝ GetHotKeyProp (变量_6FD50225, 变量_6DD50225)
        .如果真 (变量_6ED50225.成员_96D50235 ＝ 0)
            返回 (假)
        .如果真结束
        
    .如果真结束
    .如果真 (变量_6ED50225.成员_94D50235 ＝ 0)
        返回 (真)
    .如果真结束
    变量_970C0325 ＝ 位或 (选择 (IsKeyDown (#<?未知本地类型?>), #MOD_CONTROL, 0), 选择 (IsKeyDown (#<?未知本地类型?>), #MOD_SHIFT, 0), 选择 (IsKeyDown (#<?未知本地类型?>), #MOD_ALT, 0))
    .如果真 (变量_970C0325 ＝ 变量_6ED50225.成员_94D50235)
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 IsKeyDown, 逻辑型
    .参数 变量_960C0325, 整数型

    返回 (位与 (GetAsyncKeyState (变量_960C0325), 32768) ≠ 0)

.子程序 HotKey_OnKeyUP, 整数型
    .参数 变量_70D50225, 整数型
    .参数 变量_71D50225, 整数型
    .参数 变量_72D50225, 整数型
    .参数 变量_73D50225, 整数型
    .局部变量 变量_74D50225, 整数型
    .局部变量 变量_76D50225, 自定义_92D50241

    变量_74D50225 ＝ 变量_72D50225
    .如果真 (IsHotKey (变量_70D50225, 变量_74D50225, 变量_76D50225))
        .如果真 (变量_76D50225.成员_97D50235 ＝ 2)
            PostMessageA (变量_70D50225, GetPropA (变量_70D50225, “Comet_HotKeyMessage”), 变量_76D50225.成员_96D50235, 0)
        .如果真结束
        返回 (0)
    .如果真结束
    返回 (HotKey_CallWindowProc (变量_70D50225, 变量_71D50225, 变量_72D50225, 变量_73D50225))

.子程序 HotKey_OnChar, 整数型
    .参数 变量_77D50225, 整数型
    .参数 变量_78D50225, 整数型
    .参数 变量_79D50225, 整数型
    .参数 变量_7AD50225, 整数型
    .局部变量 变量_7BD50225, 整数型
    .局部变量 变量_7CD50225, 整数型
    .局部变量 变量_7ED50225, 自定义_92D50241

    变量_7BD50225 ＝ 变量_79D50225
    .如果真 (变量_7BD50225 ≥ 97 且 变量_7BD50225 ≤ 122)
        变量_7CD50225 ＝ 变量_7BD50225 － 32
    .如果真结束
    .如果真 (IsHotKey (变量_77D50225, 变量_7CD50225, 变量_7ED50225))
        .如果真 (变量_7ED50225.成员_98D50235 ＝ 假)
            返回 (0)
        .如果真结束
        
    .如果真结束
    返回 (HotKey_CallWindowProc (变量_77D50225, 变量_78D50225, 变量_79D50225, 变量_7AD50225))

.子程序 HotKey_OnHotkeyMsg, 整数型
    .参数 变量_7FD50225, 整数型
    .参数 变量_80D50225, 整数型
    .参数 变量_81D50225, 整数型
    .参数 变量_82D50225, 整数型

    CallProc (变量_81D50225, 变量_7FD50225, , )
    返回 (0)

.子程序 HotKey_CallWindowProc, 整数型
    .参数 变量_83D50225, 整数型
    .参数 变量_84D50225, 整数型
    .参数 变量_85D50225, 整数型
    .参数 变量_86D50225, 整数型
    .局部变量 变量_87D50225, 整数型

    变量_87D50225 ＝ GetPropA (变量_83D50225, “Comet_HotKeyProc”)
    .如果真 (变量_87D50225 ＝ 0)
        返回 (DLL_DefWindowProcA (变量_83D50225, 变量_84D50225, 变量_85D50225, 变量_86D50225))
    .如果真结束
    返回 (CallWindowProcA (变量_87D50225, 变量_83D50225, 变量_84D50225, 变量_85D50225, 变量_86D50225))

.子程序 CallProc, 整数型
    .参数 变量_88D50225, 整数型
    .参数 变量_89D50225, 整数型, 可空
    .参数 变量_8AD50225, 整数型, 可空
    .参数 变量_8BD50225, 整数型, 可空

    .如果真 (变量_88D50225 ＝ 0)
        返回 (0)
    .如果真结束
    返回 (CallWindowProcA (取指针字节集_ ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }), 变量_88D50225, 变量_89D50225, 变量_8AD50225, 变量_8BD50225))

.子程序 窗口_毛玻璃特效, 逻辑型, 公开, 仅Win10有效，成功返回真，失败返回假。
    .参数 窗口句柄, 整数型
    .局部变量 变量_2BDB0225, 自定义_20DB0241
    .局部变量 变量_2CDB0225, 自定义_1FDB0241

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN10)
        输出调试文本 (#<?未知本地类型?>)
        返回 (假)
    .如果真结束
    
    变量_2BDB0225.成员_24DB0235 ＝ 3
    变量_2CDB0225.成员_21DB0235 ＝ 19
    变量_2CDB0225.成员_22DB0235 ＝ 变量_2BDB0225
    变量_2CDB0225.成员_23DB0235 ＝ 16
    返回 (DLL_SetWindowCompositionAttribute (窗口句柄, 变量_2CDB0225))

.子程序 窗口_监视锁屏_注册, 逻辑型, 公开, 注册指定的窗口以接收会话更改通知。
    .参数 窗口句柄, 整数型
    .参数 响应监视事件, 子程序指针, , 1个整数型参数，1=锁屏，2=取消锁屏
    .局部变量 变量_F8DF0225, 逻辑型

    变量_F8DF0225 ＝ DLL_WTSRegisterSessionNotification (窗口句柄, #<?未知本地类型?>)
    .如果 (变量_F8DF0225 ＝ 假)
        输出调试文本 (“安装通知失败”)
    .否则
        类变量_30E00215 ＝ 到整数 (响应监视事件)
        类变量_11E00215 ＝ SetWindowLongA (窗口句柄, #GWL_WNDPROC, 到整数 (&HandleMsgProc))
    .如果结束
    返回 (变量_F8DF0225)

.子程序 HandleMsgProc, 整数型
    .参数 变量_0AE00225, 整数型
    .参数 变量_0BE00225, 整数型
    .参数 变量_0CE00225, 整数型
    .参数 变量_0DE00225, 整数型

    .如果真 (变量_0BE00225 ＝ #<?未知本地类型?>)
        .如果真 (类变量_30E00215 ≠ 0)
            .判断开始 (变量_0CE00225 ＝ #<?未知本地类型?>)
                调用子程序_ (类变量_30E00215, 1, , , , , , , , , , , , , , )
            .判断 (变量_0CE00225 ＝ #<?未知本地类型?>)
                调用子程序_ (类变量_30E00215, 2, , , , , , , , , , , , , , )
            .默认
                
            .判断结束
            
        .如果真结束
        
    .如果真结束
    返回 (CallWindowProcA (类变量_11E00215, 变量_0AE00225, 变量_0BE00225, 变量_0CE00225, 变量_0DE00225))

.子程序 窗口_监视锁屏_卸载, 逻辑型, 公开, 取消注册指定的窗口，以便不接收其他会话更改通知。
    .参数 窗口句柄, 整数型

    SetWindowLongA (窗口句柄, #GWL_WNDPROC, 类变量_11E00215)
    类变量_30E00215 ＝ 0
    返回 (DLL_WTSUnRegisterSessionNotification (窗口句柄))

.子程序 窗口_禁止截图, 逻辑型, 公开, 保护自己的屏幕窗口内容不被捕获或复制
    .参数 窗口句柄, 整数型
    .参数 是否禁止, 逻辑型, 可空, 默认为真; 真为禁止, 假为取消
    .局部变量 变量_BAE40225, 整数型

    
    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN7)
        输出调试文本 (#<?未知本地类型?>)
        返回 (假)
    .如果真结束
    变量_BAE40225 ＝ #<?未知本地类型?>
    .如果真 (是否为空 (是否禁止) 或 是否禁止)
        变量_BAE40225 ＝ #<?未知本地类型?>
    .如果真结束
    返回 (DLL_SetWindowDisplayAffinity (窗口句柄, 变量_BAE40225))

.子程序 窗口_取滚动条位置, 精易_坐标, 公开, 取滚动条当前位置
    .参数 控件句柄, 整数型
    .局部变量 变量_D0E40225, 精易_坐标

    
    
    变量_D0E40225.横 ＝ GetScrollPos (控件句柄, #SB_HORZ)
    变量_D0E40225.纵 ＝ GetScrollPos (控件句柄, #SB_VERT)
    返回 (变量_D0E40225)

.子程序 窗口_置滚动条位置, , 公开, 置滚动条到指定位置
    .参数 控件句柄, 整数型
    .参数 坐标, 精易_坐标

    
    
    DLL_SetScrollPos (控件句柄, #SB_HORZ, 坐标.横, 真)
    DLL_SetScrollPos (控件句柄, #SB_VERT, 坐标.纵, 真)
    
    SendMessageA (控件句柄, #<?未知本地类型?>, 合并整数 (#<?未知本地类型?>, 坐标.横), 0)
    SendMessageA (控件句柄, #<?未知本地类型?>, 合并整数 (#<?未知本地类型?>, 坐标.纵), 0)

.子程序 窗口_将焦点切换到指定的窗口, , 公开, 将焦点切换到指定的窗口
    .参数 要激活的窗口句柄, 整数型
    .参数 是否使最小化的窗口还原, 逻辑型, 可空

    DLL_SwitchToThisWindow (要激活的窗口句柄, 是否使最小化的窗口还原)

.子程序 CBTMessageBoxProc, 整数型
    .参数 变量_AF050325, 整数型
    .参数 变量_B0050325, 整数型
    .参数 变量_B1050325, 整数型
    .局部变量 变量_B2050325, 整数型
    .局部变量 变量_B3050325, 整数型
    .局部变量 变量_B4050325, 整数型
    .局部变量 变量_B5050325, 整数型
    .局部变量 变量_B6050325, 整数型
    .局部变量 变量_B7050325, 精易_位置和大小
    .局部变量 变量_B8050325, 整数型
    .局部变量 变量_B9050325, 整数型

    .如果真 (变量_AF050325 ＝ #<?未知本地类型?> 且 变量_B1050325 ≠ #NULL)
        变量_B2050325 ＝ __get (变量_B1050325, 0)
        变量_B3050325 ＝ __get (变量_B2050325, 12)
        .如果真 (变量_B3050325 ＝ #NULL)
            变量_B3050325 ＝ 进程_ID取窗口句柄EX (进程_取自进程ID ())
        .如果真结束
        .如果真 (变量_B3050325 ≠ #NULL)
            变量_B4050325 ＝ GetPropA (变量_B3050325, “SetMessageBoxHook_hHook”)
            .如果真 (变量_B4050325 ≠ #NULL)
                RemovePropA (变量_B3050325, “SetMessageBoxHook_hHook”)
                变量_B5050325 ＝ __get (变量_B2050325, 20)
                变量_B6050325 ＝ __get (变量_B2050325, 16)
                变量_B7050325 ＝ 窗口_取位置和大小 (变量_B3050325)
                变量_B8050325 ＝ 变量_B7050325.左边 ＋ 四舍五入 ((变量_B7050325.宽度 － 变量_B5050325) ÷ 2, 0)
                变量_B9050325 ＝ 变量_B7050325.顶边 ＋ 四舍五入 ((变量_B7050325.高度 － 变量_B6050325) ÷ 2, 0)
                __set (变量_B2050325, 28, 变量_B8050325)
                __set (变量_B2050325, 24, 变量_B9050325)
                UnhookWindowsHookEx (变量_B4050325)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
    返回 (#<?未知本地类型?>)

.子程序 SetMessageBoxHook, 逻辑型, 公开, 让信息框居中在父窗口
    .参数 hwndParent, 整数型
    .参数 dwThreadId, 整数型, 可空, 线程的标识符
    .局部变量 变量_BB050325, 整数型

    RemoveMessageBoxHook (hwndParent)
    .如果真 (dwThreadId ＝ 0)
        dwThreadId ＝ GetWindowThreadProcessId (hwndParent, #NULL)
    .如果真结束
    .如果真 (dwThreadId ≠ 0)
        变量_BB050325 ＝ SetWindowsHookExA (#<?未知本地类型?>, &CBTMessageBoxProc, GetWindowLongA (hwndParent, #GWL_HINSTANCE), dwThreadId)
        .如果真 (变量_BB050325 ≠ #NULL)
            SetPropA (hwndParent, “SetMessageBoxHook_hHook”, 变量_BB050325)
        .如果真结束
        
    .如果真结束
    返回 (变量_BB050325 ≠ #NULL)

.子程序 RemoveMessageBoxHook, 逻辑型, 公开, 卸载钩子
    .参数 hwndParent, 整数型
    .局部变量 变量_F9050325, 整数型

    变量_F9050325 ＝ GetPropA (hwndParent, “SetMessageBoxHook_hHook”)
    .如果真 (变量_F9050325 ≠ #NULL)
        .如果真 (UnhookWindowsHookEx (变量_F9050325))
            RemovePropA (hwndParent, “SetMessageBoxHook_hHook”)
            返回 (真)
        .如果真结束
        
    .如果真结束
    返回 (假)

.子程序 窗口_清除视觉样式, 逻辑型, 公开, 清除通用组件库6.0的视觉样式
    .参数 窗口句柄, 整数型

    返回 (SetWindowTheme (窗口句柄, { 0, 0 }, { 0, 0 }) ＝ #<?未知本地类型?>)

.子程序 窗口_禁用控制按钮, 逻辑型, 公开, 禁用指定的控制按钮
    .参数 窗口句柄, 整数型
    .参数 控制按钮, 整数型, , 1、关闭按钮 2、最小化 3、最大化
    .局部变量 变量_E70E0325, 整数型
    .局部变量 变量_EE0E0325, 整数型

    变量_E70E0325 ＝ GetSystemMenu (窗口句柄, 0)
    .如果真 (变量_E70E0325 ≠ #NULL 且 控制按钮 ≥ 1 且 控制按钮 ≤ 3)
        变量_EE0E0325 ＝ 多项选择 (控制按钮, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
        返回 (RemoveMenu (变量_E70E0325, 变量_EE0E0325, 0))
    .如果真结束
    返回 (假)

