.版本 2

.程序集 类_模块枚举, , 公开
.程序集变量 Is64, 逻辑型
.程序集变量 集_错误信息, 文本型

.子程序 _初始化
    是否位64位进程 ()

.子程序 _销毁
    

.子程序 是否位64位进程, 逻辑型, 公开
    Is64 ＝ Is64System ()
    返回 (Is64)

.子程序 Is64System, 逻辑型
    返回 (读环境变量 (“CommonProgramW6432”) ≠ “”)

.子程序 Unicode转Ansi, 文本型
    .参数 变量_A39F0225, 字节集
    .参数 变量_A49F0225, 整数型, 可空
    .局部变量 变量_A59F0225, 整数型
    .局部变量 变量_A69F0225, 整数型
    .局部变量 变量_A79F0225, 文本型

    .如果真 (变量_A39F0225 ＝ { })
        返回 (“”)
    .如果真结束
    .如果真 (是否为空 (变量_A49F0225))
        变量_A49F0225 ＝ 936
    .如果真结束
    变量_A59F0225 ＝ 取字节集长度 (变量_A39F0225) ÷ 2
    变量_A69F0225 ＝ WideCharToMultiByte (变量_A49F0225, 0, 取指针_字节集型 (变量_A39F0225), 变量_A59F0225, 取指针_文本型 (变量_A79F0225), 0, 0, 0)
    变量_A79F0225 ＝ 取空白文本 (变量_A69F0225)
    WideCharToMultiByte (变量_A49F0225, 0, 取指针_字节集型 (变量_A39F0225), 变量_A59F0225, 取指针_文本型 (变量_A79F0225), 变量_A69F0225, 0, 0)
    返回 (变量_A79F0225)

.子程序 十到十六, 文本型
    .参数 变量_A89F0225, 长整数型
    .局部变量 变量_A99F0225, 文本型

    变量_A99F0225 ＝ 取空白文本 (255)
    DLL_wvsprintfA2 (变量_A99F0225, “0x%016I64X”, 变量_A89F0225)
    返回 (变量_A99F0225)
    

.子程序 枚举64位进程模块, 逻辑型, 公开, 返回假可调用  取最后错误 来获取错误信息
    .参数 进程ID, 整数型
    .参数 模块, 模块信息, 参考 数组
    .局部变量 变量_AC9F0225, 自定义_BC5C0241
    .局部变量 变量_AD9F0225, 自定义_BD5C0241
    .局部变量 变量_AE9F0225, 字节集
    .局部变量 变量_AF9F0225, 长整数型
    .局部变量 变量_B09F0225, 长整数型
    .局部变量 变量_B19F0225, 自定义_21A00241
    .局部变量 变量_B29F0225, 文本型
    .局部变量 变量_B39F0225, 逻辑型
    .局部变量 变量_B49F0225, 整数型
    .局部变量 变量_B69F0225, 整数型
    .局部变量 变量_B79F0225, 整数型
    .局部变量 变量_B89F0225, 模块信息

    变量_B79F0225 ＝ OpenProcess (1040, 0, 进程ID)
    .如果真 (变量_B79F0225 ＝ 0)
        集_错误信息 ＝ “打开目标进程失败,无法枚举进程模块!”
        返回 (假)
    .如果真结束
    .如果真 (Is64)
        
        .如果真 (DLL_NtWow64QueryInformationProcess64 (变量_B79F0225, 0, 变量_AC9F0225, 48, 0) ≠ 0)
            集_错误信息 ＝ “查询进程信息失败,无法枚举进程64位模块!”
            CloseHandle (变量_B79F0225)
            返回 (假)
        .如果真结束
        
        .如果真 (变量_AC9F0225.成员_C15C0235 ＝ 0)
            集_错误信息 ＝ “获取PEB64结构地址失败,无法枚举进程64位模块!”
            CloseHandle (变量_B79F0225)
            返回 (假)
        .如果真结束
        
        .如果真 (DLL_NtWow64ReadVirtualMemory64 (变量_B79F0225, 变量_AC9F0225.成员_C15C0235, 变量_AD9F0225, 40, 0) ≠ 0)
            集_错误信息 ＝ “获取Ldr64结构地址失败,无法枚举进程64位模块!”
            CloseHandle (变量_B79F0225)
            返回 (假)
        .如果真结束
        
        变量_AE9F0225 ＝ 取空白字节集 (8)
        .如果真 (DLL_NtWow64ReadVirtualMemory643 (变量_B79F0225, 变量_AD9F0225.成员_C85C0235 ＋ 16, 变量_AE9F0225, 8, 0) ≠ 0)
            集_错误信息 ＝ “获取Ldr64.InLoadOrderModuleList.Flink地址失败,无法枚举进程64位模块!”
            CloseHandle (变量_B79F0225)
            返回 (假)
        .如果真结束
        变量_AF9F0225 ＝ 取字节集数据 (变量_AE9F0225, #长整数型, 1)
        变量_B09F0225 ＝ 变量_AF9F0225
        
        .循环判断首 ()
            变量_AE9F0225 ＝ 取空白字节集 (104)
            .如果真 (DLL_NtWow64ReadVirtualMemory643 (变量_B79F0225, 变量_AF9F0225, 变量_AE9F0225, 104, 0) ＝ 0)
                DLL_RtlMoveMemory7 (变量_B19F0225, 变量_AE9F0225, 104)
                .如果真 (变量_B19F0225.成员_25A00235 ＝ 0)
                    跳出循环 ()
                .如果真结束
                
                .如果真 (变量_B09F0225 ＝ 变量_AF9F0225)
                    变量_AF9F0225 ＝ 变量_B19F0225.成员_22A00235.成员_2DA00235
                    
                .如果真结束
                
                变量_AE9F0225 ＝ 取空白字节集 (变量_B19F0225.成员_28A00235.成员_CE5C0235)
                .如果真 (DLL_NtWow64ReadVirtualMemory643 (变量_B79F0225, 变量_B19F0225.成员_28A00235.成员_D15C0235, 变量_AE9F0225, 变量_B19F0225.成员_28A00235.成员_CE5C0235, 0) ＝ 0)
                    变量_B29F0225 ＝ Unicode转Ansi (变量_AE9F0225)
                    变量_B89F0225.模块句柄 ＝ 十到十六 (变量_B19F0225.成员_25A00235)
                    变量_B89F0225.模块路径 ＝ 变量_B29F0225
                    加入成员 (模块, 变量_B89F0225)
                    
                .如果真结束
                变量_AF9F0225 ＝ 变量_B19F0225.成员_22A00235.成员_2DA00235
            .如果真结束
            
        .循环判断尾 (变量_B19F0225.成员_25A00235 ≠ 0)
        返回 (真)
    .如果真结束
    CloseHandle (变量_B79F0225)
    返回 (假)

.子程序 枚举32位进程模块, 逻辑型, 公开, 返回假可调用  取最后错误 来获取错误信息
    .参数 进程ID, 整数型
    .参数 模块, 模块信息, 参考 数组
    .局部变量 变量_BB9F0225, 自定义_BC5C0241
    .局部变量 变量_BC9F0225, 自定义_BD5C0241
    .局部变量 变量_BD9F0225, 字节集
    .局部变量 变量_BE9F0225, 长整数型
    .局部变量 变量_BF9F0225, 长整数型
    .局部变量 变量_C09F0225, 自定义_21A00241
    .局部变量 变量_C19F0225, 文本型
    .局部变量 变量_C29F0225, 逻辑型
    .局部变量 变量_C39F0225, 整数型
    .局部变量 变量_C49F0225, 精易_模块信息
    .局部变量 变量_C59F0225, 整数型
    .局部变量 变量_C69F0225, 整数型
    .局部变量 变量_C79F0225, 模块信息

    变量_C69F0225 ＝ OpenProcess (1040, 0, 进程ID)
    .如果真 (变量_C69F0225 ＝ 0)
        集_错误信息 ＝ “打开目标进程失败,无法枚举进程模块!”
        返回 (假)
    .如果真结束
    IsWow64Process (变量_C69F0225, 变量_C29F0225)
    
    .如果真 (Is64 ＝ 假 或 变量_C29F0225)
        变量_C39F0225 ＝ CreateToolhelp32Snapshot (8, 进程ID)
        .如果真 (变量_C39F0225 ＞ 0)
            
            变量_C49F0225.size ＝ 1024
            变量_C59F0225 ＝ Module32First (变量_C39F0225, 变量_C49F0225)
            .判断循环首 (变量_C59F0225 ≠ 0)
                
                
                变量_C19F0225 ＝ 到文本 (变量_C49F0225.模块完整路径)
                .如果真 (Is64)
                    变量_C19F0225 ＝ 子文本替换 (变量_C19F0225, “C:\Windows\System32”, “C:\Windows\SysWOW64”, , 1, 假)
                .如果真结束
                变量_C79F0225.模块句柄 ＝ 取十六进制文本 (变量_C49F0225.模块句柄)
                变量_C79F0225.模块路径 ＝ 变量_C19F0225
                加入成员 (模块, 变量_C79F0225)
                变量_C59F0225 ＝ Module32Next (变量_C39F0225, 变量_C49F0225)
            .判断循环尾 ()
            返回 (真)
        .如果真结束
        CloseHandle (变量_C39F0225)
    .如果真结束
    CloseHandle (变量_C69F0225)
    返回 (假)

.子程序 枚举进程模块, , 公开, 自动判断64或32
    .参数 进程ID, 整数型
    .参数 模块, 模块信息, 参考 数组
    .局部变量 变量_CA9F0225, 自定义_BC5C0241
    .局部变量 变量_CB9F0225, 自定义_BD5C0241
    .局部变量 变量_CC9F0225, 字节集
    .局部变量 变量_CD9F0225, 长整数型
    .局部变量 变量_CE9F0225, 长整数型
    .局部变量 变量_CF9F0225, 自定义_21A00241
    .局部变量 变量_D09F0225, 文本型
    .局部变量 变量_D19F0225, 逻辑型
    .局部变量 变量_D29F0225, 整数型
    .局部变量 变量_D39F0225, 精易_模块信息
    .局部变量 变量_D49F0225, 整数型
    .局部变量 变量_D59F0225, 整数型
    .局部变量 变量_D69F0225, 模块信息

    变量_D59F0225 ＝ OpenProcess (1040, 0, 进程ID)
    .如果真 (变量_D59F0225 ＝ 0)
        集_错误信息 ＝ “打开目标进程失败,无法枚举进程模块!”
        返回 ()
    .如果真结束
    .如果真 (Is64)
        
        .如果真 (DLL_NtWow64QueryInformationProcess64 (变量_D59F0225, 0, 变量_CA9F0225, 48, 0) ≠ 0)
            集_错误信息 ＝ “查询进程信息失败,无法枚举进程64位模块!”
            CloseHandle (变量_D59F0225)
            返回 ()
        .如果真结束
        
        .如果真 (变量_CA9F0225.成员_C15C0235 ＝ 0)
            集_错误信息 ＝ “获取PEB64结构地址失败,无法枚举进程64位模块!”
            CloseHandle (变量_D59F0225)
            返回 ()
        .如果真结束
        
        .如果真 (DLL_NtWow64ReadVirtualMemory64 (变量_D59F0225, 变量_CA9F0225.成员_C15C0235, 变量_CB9F0225, 40, 0) ≠ 0)
            集_错误信息 ＝ “获取Ldr64结构地址失败,无法枚举进程64位模块!”
            CloseHandle (变量_D59F0225)
            返回 ()
        .如果真结束
        
        变量_CC9F0225 ＝ 取空白字节集 (8)
        .如果真 (DLL_NtWow64ReadVirtualMemory643 (变量_D59F0225, 变量_CB9F0225.成员_C85C0235 ＋ 16, 变量_CC9F0225, 8, 0) ≠ 0)
            集_错误信息 ＝ “获取Ldr64.InLoadOrderModuleList.Flink地址失败,无法枚举进程64位模块!”
            CloseHandle (变量_D59F0225)
            返回 ()
        .如果真结束
        变量_CD9F0225 ＝ 取字节集数据 (变量_CC9F0225, #长整数型, 1)
        变量_CE9F0225 ＝ 变量_CD9F0225
        
        .循环判断首 ()
            变量_CC9F0225 ＝ 取空白字节集 (104)
            .如果真 (DLL_NtWow64ReadVirtualMemory643 (变量_D59F0225, 变量_CD9F0225, 变量_CC9F0225, 104, 0) ＝ 0)
                DLL_RtlMoveMemory7 (变量_CF9F0225, 变量_CC9F0225, 104)
                .如果真 (变量_CF9F0225.成员_25A00235 ＝ 0)
                    跳出循环 ()
                .如果真结束
                
                .如果真 (变量_CE9F0225 ＝ 变量_CD9F0225)
                    变量_CD9F0225 ＝ 变量_CF9F0225.成员_22A00235.成员_2DA00235
                    
                .如果真结束
                
                变量_CC9F0225 ＝ 取空白字节集 (变量_CF9F0225.成员_28A00235.成员_CE5C0235)
                .如果真 (DLL_NtWow64ReadVirtualMemory643 (变量_D59F0225, 变量_CF9F0225.成员_28A00235.成员_D15C0235, 变量_CC9F0225, 变量_CF9F0225.成员_28A00235.成员_CE5C0235, 0) ＝ 0)
                    变量_D09F0225 ＝ Unicode转Ansi (变量_CC9F0225)
                    变量_D69F0225.模块句柄 ＝ 十到十六 (变量_CF9F0225.成员_25A00235)
                    变量_D69F0225.模块路径 ＝ 变量_D09F0225
                    加入成员 (模块, 变量_D69F0225)
                    
                .如果真结束
                变量_CD9F0225 ＝ 变量_CF9F0225.成员_22A00235.成员_2DA00235
            .如果真结束
            
        .循环判断尾 (变量_CF9F0225.成员_25A00235 ≠ 0)
        IsWow64Process (变量_D59F0225, 变量_D19F0225)
    .如果真结束
    .如果真 (Is64 ＝ 假 或 变量_D19F0225)
        变量_D29F0225 ＝ CreateToolhelp32Snapshot (8, 进程ID)
        .如果真 (变量_D29F0225 ＞ 0)
            
            变量_D39F0225.size ＝ 1024
            变量_D49F0225 ＝ Module32First (变量_D29F0225, 变量_D39F0225)
            .判断循环首 (变量_D49F0225 ≠ 0)
                
                
                变量_D09F0225 ＝ 到文本 (变量_D39F0225.模块完整路径)
                .如果真 (Is64)
                    变量_D09F0225 ＝ 子文本替换 (变量_D09F0225, “C:\Windows\System32”, “C:\Windows\SysWOW64”, , 1, 假)
                .如果真结束
                变量_D69F0225.模块句柄 ＝ 取十六进制文本 (变量_D39F0225.base)
                变量_D69F0225.模块路径 ＝ 变量_D09F0225
                加入成员 (模块, 变量_D69F0225)
                变量_D49F0225 ＝ Module32Next (变量_D29F0225, 变量_D39F0225)
            .判断循环尾 ()
            
        .如果真结束
        CloseHandle (变量_D29F0225)
    .如果真结束
    CloseHandle (变量_D59F0225)

.子程序 取最后错误, 文本型, 公开
    返回 (集_错误信息)

.子程序 取文件名, 文本型, 公开
    .参数 文件路径, 文本型
    .局部变量 变量_D89F0225, 文本型

    变量_D89F0225 ＝ 文件路径
    .判断循环首 (真)
        .如果真 (寻找文本 (变量_D89F0225, “\”, , 假) ＝ -1)
            跳出循环 ()
        .如果真结束
        变量_D89F0225 ＝ 取文本右边 (变量_D89F0225, 取文本长度 (变量_D89F0225) － 寻找文本 (变量_D89F0225, “\”, , 假))
    .判断循环尾 ()
    返回 (变量_D89F0225)

.子程序 模块名取句柄, 文本型, 公开, 枚举64位进程模块，返回指定模块名的十六进制句柄。
    .参数 进程ID, 整数型
    .参数 模块名, 文本型
    .局部变量 变量_DB9F0225, 模块信息, , "0"
    .局部变量 变量_DC9F0225, 整数型

    枚举64位进程模块 (进程ID, 变量_DB9F0225)
    .计次循环首 (取数组成员数 (变量_DB9F0225), 变量_DC9F0225)
        .如果真 (取文件名 (变量_DB9F0225 [变量_DC9F0225].模块路径) ＝ 模块名)
            返回 (变量_DB9F0225 [变量_DC9F0225].模块句柄)
        .如果真结束
        
    .计次循环尾 ()
    返回 (“”)

