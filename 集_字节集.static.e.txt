.版本 2

.程序集 集_字节集
.子程序 字节集_字节集转文本, 文本型, 公开, 以文本表示字节集，适合于字节集的调试用,查看字节集可以将一串字节集用文本形式表示出来，极大地方便了调试字节集变量。感谢易友[缘诚]提供优化查看速度方案
    .参数 原始字节集, 字节集, , 要查看的字节集
    .局部变量 变量_3EB80125, 整数型
    .局部变量 变量_3FB80125, 整数型
    .局部变量 变量_40B80125, 整数型
    .局部变量 变量_41B80125, 文本型

    变量_3EB80125 ＝ 打开内存文件 ()
    变量_3FB80125 ＝ 取字节集长度 (原始字节集)
    .计次循环首 (变量_3FB80125, 变量_40B80125)
        插入文本 (变量_3EB80125, 到文本 (原始字节集 [变量_40B80125]) ＋ “,”)
        处理事件 ()
    .计次循环尾 ()
    移到文件首 (变量_3EB80125)
    变量_41B80125 ＝ “{” ＋ 读入文本 (变量_3EB80125, )
    关闭文件 (变量_3EB80125)
    .如果 (取文本右边 (变量_41B80125, 1) ＝ “,”)
        变量_41B80125 ＝ 取文本左边 (变量_41B80125, 取文本长度 (变量_41B80125) － 1) ＋ “}”
    .否则
        变量_41B80125 ＝ 变量_41B80125 ＋ “}”
    .如果结束
    
    返回 (变量_41B80125)
    
    

.子程序 字节集_字节集转文本ex, 文本型, 公开, 感谢【@贫民窟 】提供源码
    .参数 字节集, 字节集
    .局部变量 变量_919E0225, 整数型
    .局部变量 变量_929E0225, 字节集
    .局部变量 变量_939E0225, 整数型
    .局部变量 变量_949E0225, 整数型
    .局部变量 变量_959E0225, 字节型
    .局部变量 变量_969E0225, 字节型
    .局部变量 变量_979E0225, 字节型
    .局部变量 变量_989E0225, 字节型

    变量_919E0225 ＝ 取字节集长度 (字节集)
    .如果真 (变量_919E0225 ＝ 0)
        返回 (“”)
    .如果真结束
    
    变量_929E0225 ＝ 取空白字节集 (变量_919E0225 × 4 ＋ 2)
    变量_929E0225 [1] ＝ 123
    变量_939E0225 ＝ 1
    
    .计次循环首 (变量_919E0225, 变量_949E0225)
        变量_959E0225 ＝ 字节集 [变量_949E0225]
        变量_939E0225 ＝ 变量_939E0225 ＋ 1
        
        变量_969E0225 ＝ 变量_959E0225 ＼ 100
        变量_959E0225 ＝ 变量_959E0225 － 变量_969E0225 × 100
        
        变量_979E0225 ＝ 变量_959E0225 ＼ 10
        
        变量_959E0225 ＝ 变量_959E0225 － 变量_979E0225 × 10
        
        .判断开始 (变量_969E0225 ＞ 0)
            变量_929E0225 [变量_939E0225] ＝ 变量_969E0225 ＋ 48
            变量_939E0225 ＝ 变量_939E0225 ＋ 1
            变量_929E0225 [变量_939E0225] ＝ 变量_979E0225 ＋ 48
            变量_939E0225 ＝ 变量_939E0225 ＋ 1
        .默认
            .如果真 (变量_979E0225 ＞ 0)
                变量_929E0225 [变量_939E0225] ＝ 变量_979E0225 ＋ 48
                变量_939E0225 ＝ 变量_939E0225 ＋ 1
            .如果真结束
            
        .判断结束
        
        变量_929E0225 [变量_939E0225] ＝ 变量_959E0225 ＋ 48
        .判断开始 (变量_919E0225 ＝ 变量_949E0225)
            变量_929E0225 [变量_939E0225 ＋ 1] ＝ 125
            
        .默认
            变量_939E0225 ＝ 变量_939E0225 ＋ 1
            变量_929E0225 [变量_939E0225] ＝ 44
        .判断结束
        
    .计次循环尾 ()
    返回 (到文本 (变量_929E0225))

.子程序 字节集_文本转字节集ex, 字节集, 公开, 感谢【@贫民窟 】提供源码
    .参数 参_文本, 文本型
    .局部变量 变量_9A9E0225, 字节集
    .局部变量 变量_9B9E0225, 整数型
    .局部变量 变量_9C9E0225, 字节集
    .局部变量 变量_9D9E0225, 整数型
    .局部变量 变量_9E9E0225, 字节集
    .局部变量 变量_9F9E0225, 整数型
    .局部变量 变量_A09E0225, 整数型
    .局部变量 变量_A19E0225, 字节型
    .局部变量 变量_A29E0225, 逻辑型
    .局部变量 变量_A39E0225, 整数型
    .局部变量 变量_56C70225, 文本型

    变量_56C70225 ＝ 参_文本
    
    .如果真 (取文本左边 (变量_56C70225, 1) ≠ “{”)
        变量_56C70225 ＝ “{” ＋ 变量_56C70225
    .如果真结束
    
    .如果真 (取文本右边 (变量_56C70225, 1) ≠ “}”)
        变量_56C70225 ＝ 变量_56C70225 ＋ “}”
    .如果真结束
    
    变量_9E9E0225 ＝ 到字节集 (删全部空 (变量_56C70225))
    变量_9F9E0225 ＝ 取字节集长度 (变量_9E9E0225)
    .如果真 (变量_9F9E0225 ＜ 1)
        返回 ({ })
    .如果真结束
    
    变量_9A9E0225 ＝ 取空白字节集 (变量_9F9E0225)
    变量_9B9E0225 ＝ 1
    变量_9C9E0225 ＝ { 0, 0, 0 }
    变量_9D9E0225 ＝ 1
    .计次循环首 (变量_9F9E0225, 变量_A09E0225)
        变量_A19E0225 ＝ 变量_9E9E0225 [变量_A09E0225]
        .判断开始 (变量_A19E0225 ＞ 47 且 变量_A19E0225 ＜ 58)
            .如果真 (变量_9D9E0225 ＞ 3)
                信息框 (“error”, 0, )
                返回 ({ })
            .如果真结束
            变量_9C9E0225 [变量_9D9E0225] ＝ 变量_A19E0225 － 48
            变量_9D9E0225 ＝ 变量_9D9E0225 ＋ 1
            变量_A29E0225 ＝ 真
            变量_A39E0225 ＝ 变量_A39E0225 ＋ 1
            
        .默认
            
            .如果真 (变量_A29E0225)
                变量_A29E0225 ＝ 假
                .判断开始 (变量_A39E0225 ＝ 1)
                    变量_A19E0225 ＝ 变量_9C9E0225 [1]
                .判断 (变量_A39E0225 ＝ 2)
                    变量_A19E0225 ＝ 变量_9C9E0225 [1] × 10 ＋ 变量_9C9E0225 [2]
                .默认
                    变量_A19E0225 ＝ 变量_9C9E0225 [1] × 100 ＋ 变量_9C9E0225 [2] × 10 ＋ 变量_9C9E0225 [3]
                .判断结束
                变量_9A9E0225 [变量_9B9E0225] ＝ 变量_A19E0225
                变量_9B9E0225 ＝ 变量_9B9E0225 ＋ 1
                变量_9C9E0225 [1] ＝ 0
                变量_9C9E0225 [2] ＝ 0
                变量_9C9E0225 [3] ＝ 0
                变量_9D9E0225 ＝ 1
                变量_A39E0225 ＝ 0
            .如果真结束
            
        .判断结束
        
    .计次循环尾 ()
    返回 (取字节集左边 (变量_9A9E0225, 变量_9B9E0225 － 1))

.子程序 字节集_文本转字节集, 字节集, 公开, 将“字节集_字节集转文本”得到的文本字节集重新转换为字节集。感谢【御风软件】提供代码
    .参数 文本字节集, 文本型
    .局部变量 变量_BF380225, 整数型
    .局部变量 变量_C0380225, 文本型, , "0"
    .局部变量 变量_C1380225, 整数型
    .局部变量 变量_C2380225, 字节集

    变量_C0380225 ＝ 分割文本 (取文本中间 (文本字节集, 2, 取文本长度 (文本字节集) － 1), “,”, )
    变量_C1380225 ＝ 取数组成员数 (变量_C0380225)
    变量_C2380225 ＝ 取空白字节集 (变量_C1380225)
    .计次循环首 (变量_C1380225, 变量_BF380225)
        变量_C2380225 [变量_BF380225] ＝ 到字节 (变量_C0380225 [变量_BF380225])
    .计次循环尾 ()
    返回 (变量_C2380225)

.子程序 字节集_十六进制到字节集, 字节集, 公开, 将一串十六进制文本还原为字节集。还原为字节集可以将默认的16进制文本转换成字节集。如“00BFAD00”可还原为{0,191,173,0}
    .参数 原始16进制文本, 文本型, , 如“00BFAD00AFD4FD4F9E054F9FF91FC5FF2076FBAFDB071044”
    .局部变量 变量_98F50225, 整数型
    .局部变量 变量_99F50225, 整数型
    .局部变量 变量_9AF50225, 整数型
    .局部变量 变量_9CF50225, 字节集
    .局部变量 变量_A1F50225, 短整数型
    .局部变量 变量_A6F50225, 字节型
    .局部变量 变量_9BF50225, 整数型
    .局部变量 变量_A0F50225, 整数型

    变量_98F50225 ＝ 取指针_文本型 (原始16进制文本)
    变量_99F50225 ＝ 取文本长度 (原始16进制文本)
    变量_9AF50225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_99F50225 ＋ 1)
    .变量循环首 (0, 变量_99F50225 － 2, 2, 变量_9BF50225)
        变量_A1F50225 ＝ 指针_到短整数型_汇编 (变量_98F50225 ＋ 变量_9BF50225)
        .如果 (DLL__sscanf (取指针地址_短整数型 (变量_A1F50225), “%x”, 变量_A6F50225) ＞ 0)
            __set_byte (变量_9AF50225, 变量_A0F50225, 变量_A6F50225)
            变量_A0F50225 ＝ 变量_A0F50225 ＋ 1
        .否则
            
            
            
        .如果结束
        
    .变量循环尾 ()
    变量_9CF50225 ＝ 指针到字节集 (变量_9AF50225, 变量_A0F50225)
    LocalFree (变量_9AF50225)
    返回 (变量_9CF50225)

.子程序 字节集_字节集到十六进制, 文本型, 公开, 将字节集用16进制表示.可以将字节集用系统标准16进制表示
    .参数 原始字节集, 字节集, , 用于转换的字节集
    .局部变量 变量_84F50225, 整数型
    .局部变量 变量_88F50225, 文本型
    .局部变量 变量_94F50225, 整数型
    .局部变量 变量_8CF50225, 整数型
    .局部变量 变量_90F50225, 整数型

    变量_94F50225 ＝ 取字节集长度 (原始字节集)
    变量_84F50225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_94F50225 × 2 ＋ 1)
    .计次循环首 (变量_94F50225, 变量_8CF50225)
        变量_90F50225 ＝ 变量_90F50225 ＋ DLL__sprintf (变量_84F50225 ＋ 变量_90F50225, “%02X”, 原始字节集 [变量_8CF50225])
    .计次循环尾 ()
    变量_88F50225 ＝ 指针到文本 (变量_84F50225)
    LocalFree (变量_84F50225)
    返回 (变量_88F50225)

.子程序 字节集_十六进制到字节集2, 字节集, 公开, 将一串十六进制文本还原为字节集。还原为字节集可以将默认的16进制文本转换成字节集。如“00BFAD00”可还原为{0,191,173,0}
    .参数 原始16进制文本, 文本型, , 如“00BFAD00AFD4FD4F9E054F9FF91FC5FF2076FBAFDB071044”
    .局部变量 变量_59E40225, 字节集
    .局部变量 变量_5AE40225, 字节集
    .局部变量 变量_5BE40225, 整数型
    .局部变量 变量_5CE40225, 整数型
    .局部变量 变量_5DE40225, 整数型
    .局部变量 变量_5EE40225, 整数型
    .局部变量 变量_5FE40225, 整数型

    
    变量_59E40225 ＝ 到字节集 (原始16进制文本)
    变量_5BE40225 ＝ 取字节集长度 (变量_59E40225)
    .如果真 (位与 (变量_5BE40225, 1) ＝ 1)
        变量_59E40225 ＝ 变量_59E40225 ＋ 取空白字节集 (1)
        变量_5BE40225 ＝ 变量_5BE40225 ＋ 1
        变量_59E40225 [变量_5BE40225] ＝ 变量_59E40225 [变量_5BE40225 － 1]
        变量_59E40225 [变量_5BE40225 － 1] ＝ 48
    .如果真结束
    变量_5AE40225 ＝ 取空白字节集 (右移 (变量_5BE40225, 1))
    .变量循环首 (1, 变量_5BE40225, 2, 变量_5CE40225)
        变量_5DE40225 ＝ 变量_5DE40225 ＋ 1
        变量_5EE40225 ＝ 变量_59E40225 [变量_5CE40225]
        变量_5FE40225 ＝ 变量_59E40225 [变量_5CE40225 ＋ 1]
        .判断开始 (变量_5EE40225 ＞ 96)
            变量_5EE40225 ＝ 变量_5EE40225 － 87
        .判断 (变量_5EE40225 ＞ 64)
            变量_5EE40225 ＝ 变量_5EE40225 － 55
        .默认
            变量_5EE40225 ＝ 变量_5EE40225 － 48
        .判断结束
        .判断开始 (变量_5FE40225 ＞ 96)
            变量_5FE40225 ＝ 变量_5FE40225 － 87
        .判断 (变量_5FE40225 ＞ 64)
            变量_5FE40225 ＝ 变量_5FE40225 － 55
        .默认
            变量_5FE40225 ＝ 变量_5FE40225 － 48
        .判断结束
        变量_5AE40225 [变量_5DE40225] ＝ 左移 (变量_5EE40225, 4) ＋ 变量_5FE40225
    .变量循环尾 ()
    返回 (变量_5AE40225)

.子程序 字节集_字节集到十六进制2, 文本型, 公开, 将字节集用16进制表示.可以将字节集用系统标准16进制表示
    .参数 原始字节集, 字节集, , 用于转换的字节集
    .局部变量 变量_61E40225, 整数型
    .局部变量 变量_62E40225, 整数型
    .局部变量 变量_63E40225, 整数型
    .局部变量 变量_64E40225, 整数型
    .局部变量 变量_65E40225, 字节集
    .局部变量 变量_66E40225, 整数型
    .局部变量 变量_67E40225, 整数型
    .局部变量 变量_68E40225, 整数型

    变量_61E40225 ＝ 取字节集长度 (原始字节集)
    变量_66E40225 ＝ 变量_61E40225 × 2
    
    变量_65E40225 ＝ 取空白字节集 (变量_66E40225 ＋ 1)
    .变量循环首 (1, 变量_66E40225, 2, 变量_68E40225)
        变量_67E40225 ＝ 变量_67E40225 ＋ 1
        变量_62E40225 ＝ 原始字节集 [变量_67E40225]
        .如果 (变量_62E40225 ＞ 15)
            变量_63E40225 ＝ 位与 (右移 (变量_62E40225, 4), 15)
            .如果 (变量_63E40225 ＞ 9)
                变量_65E40225 [变量_68E40225] ＝ 变量_63E40225 ＋ 55
            .否则
                变量_65E40225 [变量_68E40225] ＝ 变量_63E40225 ＋ 48
            .如果结束
            
        .否则
            变量_65E40225 [变量_68E40225] ＝ 48
        .如果结束
        变量_64E40225 ＝ 位与 (变量_62E40225, 15)
        .如果 (变量_64E40225 ＞ 9)
            变量_65E40225 [变量_68E40225 ＋ 1] ＝ 变量_64E40225 ＋ 55
        .否则
            变量_65E40225 [变量_68E40225 ＋ 1] ＝ 变量_64E40225 ＋ 48
        .如果结束
        
    .变量循环尾 ()
    返回 (到文本 (变量_65E40225))

.子程序 到十六进制, 文本型
    .参数 变量_90C30125, 整数型
    .局部变量 变量_91C30125, 文本型

    变量_91C30125 ＝ 取十六进制文本 (变量_90C30125)
    .如果真 (取文本长度 (变量_91C30125) ％ 2 ＝ 1)
        返回 (“0” ＋ 变量_91C30125)
    .如果真结束
    返回 (变量_91C30125)

.子程序 字节集_寻找取左, 字节集, 公开, 从字节集的左边按 欲寻找的字节集 开始寻找 如 字节集_取左边({105,108,121,13,10,83,101},{13,10}) 将返回 {105,108,121}
    .参数 被查找的字节集, 字节集, , 被查找的字节集
    .参数 欲寻找的字节集, 字节集, , 欲寻找的字节集
    .参数 起始寻找位置, 整数型, 可空, 可为空，默认为1，从左往右寻找，如果为负数，则从右往左寻找。
    .局部变量 变量_1CD40225, 整数型
    .局部变量 变量_1DD40225, 整数型
    .局部变量 变量_1ED40225, 整数型
    .局部变量 变量_1FD40225, 整数型
    .局部变量 变量_20D40225, 字节集

    变量_1CD40225 ＝ 取字节集长度 (被查找的字节集)
    
    变量_1DD40225 ＝ 起始寻找位置
    .如果真 (变量_1DD40225 ＜ 0)
        变量_1DD40225 ＝ 变量_1DD40225 × -1
        .如果真 (变量_1DD40225 ＝ 1)
            变量_1DD40225 ＝ 0
        .如果真结束
        变量_1ED40225 ＝ 1
    .如果真结束
    
    .如果 (变量_1ED40225 ＝ 1)
        变量_1FD40225 ＝ 倒找字节集 (被查找的字节集, 欲寻找的字节集, 变量_1CD40225 － 变量_1DD40225)
    .否则
        .如果真 (变量_1DD40225 ＝ 0)
            变量_1DD40225 ＝ 1
        .如果真结束
        变量_1FD40225 ＝ 寻找字节集 (被查找的字节集, 欲寻找的字节集, 变量_1DD40225)
    .如果结束
    
    .如果真 (变量_1FD40225 ＝ -1)
        返回 ({ })
    .如果真结束
    
    变量_20D40225 ＝ 取字节集左边 (被查找的字节集, 变量_1FD40225 － 1)
    返回 (变量_20D40225)

.子程序 字节集_寻找取右, 字节集, 公开, 从字节集的右边按 欲寻找的字节集 开始寻找  如 字节集_取右边({105,108,121,13,10,83,101},{13,10}) 将返回 {83,101}
    .参数 被查找的字节集, 字节集, , 被查找的字节集
    .参数 欲寻找的字节集, 字节集, , 欲寻找的字节集
    .参数 起始寻找位置, 整数型, 可空, 可为空，默认为1，从左往右寻找，如果为负数，则从右往左寻找。
    .局部变量 变量_21D40225, 整数型
    .局部变量 变量_22D40225, 整数型
    .局部变量 变量_23D40225, 整数型
    .局部变量 变量_24D40225, 整数型
    .局部变量 变量_25D40225, 字节集

    变量_21D40225 ＝ 取字节集长度 (被查找的字节集)
    
    变量_22D40225 ＝ 起始寻找位置
    .如果真 (变量_22D40225 ＜ 0)
        变量_22D40225 ＝ 变量_22D40225 × -1
        .如果真 (变量_22D40225 ＝ 1)
            变量_22D40225 ＝ 0
        .如果真结束
        变量_23D40225 ＝ 1
    .如果真结束
    
    .如果 (变量_23D40225 ＝ 1)
        变量_24D40225 ＝ 倒找字节集 (被查找的字节集, 欲寻找的字节集, 变量_21D40225 － 变量_22D40225)
    .否则
        .如果真 (变量_22D40225 ＝ 0)
            变量_22D40225 ＝ 1
        .如果真结束
        变量_24D40225 ＝ 寻找字节集 (被查找的字节集, 欲寻找的字节集, 变量_22D40225)
    .如果结束
    
    .如果真 (变量_24D40225 ＝ -1)
        返回 ({ })
    .如果真结束
    
    变量_25D40225 ＝ 取字节集右边 (被查找的字节集, 变量_21D40225 － 取字节集长度 (欲寻找的字节集) － 变量_24D40225 ＋ 1)
    返回 (变量_25D40225)

.子程序 字节集_寻找取中, 字节集, 公开
    .参数 要操作的字节集, 字节集
    .参数 前面字节集, 字节集
    .参数 后面字节集, 字节集
    .参数 起始搜寻位置, 整数型, 可空, 可空。1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。
    .局部变量 变量_B9B50125, 字节集
    .局部变量 变量_BAB50125, 整数型

    变量_BAB50125 ＝ 寻找字节集 (要操作的字节集, 前面字节集, 起始搜寻位置)
    .如果真 (变量_BAB50125 ＝ -1)
        返回 ({ })
    .如果真结束
    变量_B9B50125 ＝ 取字节集右边 (要操作的字节集, 取字节集长度 (要操作的字节集) － 变量_BAB50125 － 取字节集长度 (前面字节集) ＋ 1)
    变量_BAB50125 ＝ 寻找字节集 (变量_B9B50125, 后面字节集, )
    .如果真 (变量_BAB50125 ＝ -1)
        返回 ({ })
    .如果真结束
    变量_B9B50125 ＝ 取字节集左边 (变量_B9B50125, 变量_BAB50125 － 1)
    返回 (变量_B9B50125)

.子程序 字节集_到文本, 文本型, 公开
    .参数 字节集, 字节集
    .局部变量 变量_E9DD0125, 文本型
    .局部变量 变量_EADD0125, 字节集

    变量_EADD0125 ＝ 字节集 ＋ { 0 }
    返回 (指针到文本 (字节集_取指针 (变量_EADD0125)))

.子程序 字节集_到整数, 整数型, 公开
    .参数 字节集, 字节集
    .参数 位置, 整数型, 可空, 默认为1
    .局部变量 变量_EDDD0125, 整数型
    .局部变量 变量_EEDD0125, 整数型
    .局部变量 变量_EFDD0125, 整数型

    变量_EEDD0125 ＝ 字节集_取指针 (字节集)
    变量_EFDD0125 ＝ 字节集_取长度 (字节集)
    .如果真 (是否为空 (位置) ＝ 真)
        位置 ＝ 1
    .如果真结束
    .如果真 (位置 ＞ 变量_EFDD0125 或 位置 ＜ 1)
        返回 (0)
    .如果真结束
    .如果 (变量_EFDD0125 － 位置 ＜ 4)
        RtlMoveMemory_整数传址1 (变量_EDDD0125, 变量_EEDD0125 ＋ 位置 － 1, 变量_EFDD0125 － 位置 ＋ 1)
    .否则
        RtlMoveMemory_整数传址1 (变量_EDDD0125, 变量_EEDD0125 ＋ 位置 － 1, 4)
    .如果结束
    返回 (变量_EDDD0125)

.子程序 整数型_到文本, 文本型
    .参数 变量_F0DD0125, 整数型
    .局部变量 变量_F1DD0125, 文本型
    .局部变量 变量_F2DD0125, 整数型, , "1"

    变量_F1DD0125 ＝ 文本型_取空白 (4)
    变量_F2DD0125 [1] ＝ 变量_F0DD0125
    wsprintfA (变量_F1DD0125, “%d”, 变量_F2DD0125)
    返回 (变量_F1DD0125)

.子程序 字节集_取左边, 字节集, 公开
    .参数 字节集, 字节集
    .参数 欲取出字节的数目, 整数型
    .局部变量 变量_F5DD0125, 整数型
    .局部变量 变量_F6DD0125, 整数型

    变量_F5DD0125 ＝ 字节集_取长度 (字节集)
    .如果真 (变量_F5DD0125 ＜ 1)
        返回 ({ })
    .如果真结束
    .判断开始 (欲取出字节的数目 ＜ 1)
        返回 ({ })
    .判断 (欲取出字节的数目 ＞ 变量_F5DD0125)
        欲取出字节的数目 ＝ 变量_F5DD0125
    .默认
        
    .判断结束
    变量_F6DD0125 ＝ 字节集_取指针 (字节集)
    返回 (指针到字节集 (变量_F6DD0125, 欲取出字节的数目))

.子程序 字节集_取右边, 字节集, 公开
    .参数 字节集, 字节集
    .参数 欲取出字节的数目, 整数型
    .局部变量 变量_F9DD0125, 整数型
    .局部变量 变量_FADD0125, 整数型

    变量_F9DD0125 ＝ 字节集_取长度 (字节集)
    .如果真 (变量_F9DD0125 ＜ 1)
        返回 ({ })
    .如果真结束
    .判断开始 (欲取出字节的数目 ＜ 1)
        返回 ({ })
    .判断 (欲取出字节的数目 ＞ 变量_F9DD0125)
        欲取出字节的数目 ＝ 变量_F9DD0125
    .默认
        
    .判断结束
    变量_FADD0125 ＝ 字节集_取指针 (字节集) ＋ 变量_F9DD0125 － 欲取出字节的数目
    返回 (指针到字节集 (变量_FADD0125, 欲取出字节的数目))

.子程序 字节集_取空白, 字节集, 公开
    .参数 零字节数目, 整数型
    .局部变量 变量_FCDD0125, 整数型
    .局部变量 变量_FDDD0125, 字节集

    .如果真 (零字节数目 ＜ 1)
        返回 ({ })
    .如果真结束
    变量_FCDD0125 ＝ LocalAlloc (64, 零字节数目)
    .如果真 (变量_FCDD0125 ＝ 0)
        返回 ({ })
    .如果真结束
    变量_FDDD0125 ＝ 指针到字节集 (变量_FCDD0125, 零字节数目)
    LocalFree (变量_FCDD0125)
    返回 (变量_FDDD0125)

.子程序 字节集_取长度, 整数型, 公开
    .参数 字节集, 字节集
    .局部变量 变量_FFDD0125, 整数型
    .局部变量 变量_00DE0125, 整数型

    .如果真 (字节集 ＝ { })
        返回 (0)
    .如果真结束
    
    置入代码 ({ 139, 93, 8, 139, 27, 139, 91, 4, 137, 93, 252 })
    
    
    返回 (变量_FFDD0125)

.子程序 字节集_取指定位置字节集, 字节集, 公开
    .参数 字节集, 字节集
    .参数 起始取出位置, 整数型
    .参数 欲取出字节的数目, 整数型
    .局部变量 变量_04DE0125, 整数型
    .局部变量 变量_05DE0125, 整数型

    变量_04DE0125 ＝ 字节集_取长度 (字节集)
    .如果真 (变量_04DE0125 ＜ 1)
        返回 ({ })
    .如果真结束
    .判断开始 (起始取出位置 ＜ 1)
        起始取出位置 ＝ 1
    .判断 (起始取出位置 ＞ 变量_04DE0125)
        返回 ({ })
    .默认
        
    .判断结束
    .如果真 (欲取出字节的数目 ＜ 1)
        返回 ({ })
    .如果真结束
    .如果真 (欲取出字节的数目 ＋ 起始取出位置 － 1 ＞ 变量_04DE0125)
        欲取出字节的数目 ＝ 变量_04DE0125 － 起始取出位置 ＋ 1
    .如果真结束
    变量_05DE0125 ＝ 字节集_取指针 (字节集) ＋ 起始取出位置 － 1
    返回 (指针到字节集 (变量_05DE0125, 欲取出字节的数目))

.子程序 字节集_取中间, 字节集, 公开, 取指定字节集中 指定前后字节集中间的数据，用法与”文本_取出中间文本“类似
    .参数 要操作的字节集, 字节集
    .参数 前面字节集, 字节集
    .参数 后面字节集, 字节集
    .参数 起始搜寻位置, 整数型, 可空, 可空。1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。
    .局部变量 变量_905D0225, 字节集
    .局部变量 变量_915D0225, 整数型

    变量_915D0225 ＝ 寻找字节集 (要操作的字节集, 前面字节集, 起始搜寻位置)
    .如果真 (变量_915D0225 ＝ -1)
        返回 ({ })
    .如果真结束
    变量_905D0225 ＝ 取字节集右边 (要操作的字节集, 取字节集长度 (要操作的字节集) － 变量_915D0225 － 取字节集长度 (前面字节集) ＋ 1)
    变量_915D0225 ＝ 寻找字节集 (变量_905D0225, 后面字节集, 起始搜寻位置)
    .如果真 (变量_915D0225 ＝ -1)
        返回 ({ })
    .如果真结束
    变量_905D0225 ＝ 取字节集左边 (变量_905D0225, 变量_915D0225 － 1)
    返回 (变量_905D0225)
    
    
    
    
    
    
    
    
    

.子程序 字节集_替换, 字节集, 公开, 将指定字节集的某一部分用其它的字节集替换,然后返回替换后的结果.
    .参数 欲替换其部分的字节集, 字节集
    .参数 起始替换位置, 整数型, , 替换的起始位置,1为首位置,2为第2个位置,如此类推.
    .参数 替换长度, 整数型
    .参数 用作替换的字节集, 字节集, 可空, 可以被省略.如果本参数被省略,则删除字节集中的指定部分.
    .局部变量 变量_0ADE0125, 整数型
    .局部变量 变量_0BDE0125, 字节集
    .局部变量 变量_0CDE0125, 字节集

    .如果真 (欲替换其部分的字节集 ＝ { })
        返回 ({ })
    .如果真结束
    .如果真 (替换长度 ＜ 1)
        返回 (欲替换其部分的字节集)
    .如果真结束
    变量_0ADE0125 ＝ 字节集_取长度 (欲替换其部分的字节集)
    .如果真 (起始替换位置 ＜ 1)
        起始替换位置 ＝ 1
    .如果真结束
    .如果真 (起始替换位置 ＞ 变量_0ADE0125)
        返回 (欲替换其部分的字节集)
    .如果真结束
    变量_0BDE0125 ＝ 字节集_取左边 (欲替换其部分的字节集, 起始替换位置 － 1)
    变量_0CDE0125 ＝ 字节集_取右边 (欲替换其部分的字节集, 变量_0ADE0125 － (起始替换位置 ＋ 替换长度) ＋ 1)
    返回 (变量_0BDE0125 ＋ 用作替换的字节集 ＋ 变量_0CDE0125)

.子程序 字节集_寻找, 整数型, 公开, 返回一字节集在另一字节集中最先出现的位置,位置值从 1 开始.如果未找到,返回 -1.
    .参数 被搜寻的字节集, 字节集
    .参数 欲寻找的字节集, 字节集
    .参数 起始搜寻位置, 整数型, 可空, 1为首位置,2为第2个位置,如此类推,如果被省略,则“寻找字节集”命令默认从首部开始,“倒找字节集”命令默认从尾部开始.

    置入代码 ({ 83, 82, 86, 87, 139, 125, 8, 139, 63, 133, 255, 116, 119, 139, 95, 4, 131, 251, 0, 126, 111, 141, 87, 8, 139, 117, 12, 139, 54, 133, 246, 116, 99, 139, 78, 4, 131, 249, 0, 126, 91, 141, 70, 8, 137, 69, 244, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 65, 73, 137, 77, 248, 41, 203, 137, 93, 252, 1, 194, 139, 117, 244, 137, 215, 137, 217, 138, 38, 70, 227, 42, 138, 7, 71, 73, 48, 224, 117, 246, 137, 250, 137, 203, 139, 77, 248, 227, 15, 138, 38, 138, 7, 70, 71, 48, 224, 117, 217, 73, 227, 2, 235, 241, 139, 69, 16, 3, 69, 252, 41, 216, 235, 3, 131, 200, 255, 95, 94, 90, 91, 131, 196, 12, 137, 236, 93, 194, 16, 0 })
    返回 (0)

.子程序 字节集_取指针, 整数型, 公开
    .参数 字节集, 字节集

    返回 (lstrcpyn_字节集 (字节集, 字节集, 0))

.子程序 字节集_子替换, 字节集, 公开, 将所有的预被替换的字节集用 用作替换的子字节集 替换
    .参数 欲被替换的字节集, 字节集
    .参数 欲被替换的子字节集, 字节集
    .参数 用作替换的子字节集, 字节集, 可空, 可以被省略。如果省略本参数，则默认为空字节集。
    .参数 进行替换的起始位置, 整数型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
    .参数 替换进行的次数, 整数型, 可空, 可以被省略。对子字节集进行替换的次数。如果省略，默认进行所有可能的替换。
    .局部变量 变量_02EF0125, 整数型, , "0"
    .局部变量 变量_03EF0125, 整数型
    .局部变量 变量_04EF0125, 整数型
    .局部变量 变量_05EF0125, 字节集
    .局部变量 变量_06EF0125, 整数型
    .局部变量 变量_07EF0125, 整数型

    .如果真 (欲被替换的字节集 ＝ { } 或 欲被替换的子字节集 ＝ { })
        返回 ({ })
    .如果真结束
    .如果真 (是否为空 (进行替换的起始位置))
        进行替换的起始位置 ＝ 1
    .如果真结束
    变量_03EF0125 ＝ 字节集_寻找子 (欲被替换的字节集, 欲被替换的子字节集, 变量_02EF0125, 进行替换的起始位置)
    .如果真 (变量_03EF0125 ＝ 0)
        返回 (欲被替换的字节集)
    .如果真结束
    .如果真 (是否为空 (替换进行的次数) 或 替换进行的次数 ＞ 变量_03EF0125)
        替换进行的次数 ＝ 变量_03EF0125
    .如果真结束
    变量_05EF0125 ＝ 欲被替换的字节集
    变量_06EF0125 ＝ 字节集_取长度 (欲被替换的子字节集)
    
    变量_07EF0125 ＝ 字节集_取长度 (用作替换的子字节集) － 变量_06EF0125
    
    .计次循环首 (替换进行的次数, 变量_04EF0125)
        .如果 (变量_04EF0125 ＝ 1)
            变量_05EF0125 ＝ 字节集_替换 (变量_05EF0125, 变量_02EF0125 [变量_04EF0125], 变量_06EF0125, 用作替换的子字节集)
        .否则
            变量_05EF0125 ＝ 字节集_替换 (变量_05EF0125, 变量_02EF0125 [变量_04EF0125] ＋ 变量_07EF0125 × (变量_04EF0125 － 1), 变量_06EF0125, 用作替换的子字节集)
        .如果结束
        
    .计次循环尾 ()
    返回 (变量_05EF0125)

.子程序 字节集_寻找子, 整数型, 公开, 查找所有欲寻找的字节集 ，将每个位置放入 结果数组
    .参数 被搜寻的字节集, 字节集
    .参数 欲寻找的字节集, 字节集
    .参数 结果数组, 整数型, 数组
    .参数 开始偏移, 整数型, 可空
    .局部变量 变量_0CEF0125, 整数型
    .局部变量 变量_0DEF0125, 整数型
    .局部变量 变量_0EEF0125, 整数型

    清除数组 (结果数组)
    变量_0CEF0125 ＝ 1
    .如果 (是否为空 (开始偏移))
        变量_0DEF0125 ＝ 1
    .否则
        变量_0DEF0125 ＝ 开始偏移
    .如果结束
    变量_0EEF0125 ＝ 字节集_取长度 (欲寻找的字节集)
    .判断循环首 (变量_0CEF0125 ≠ -1)
        变量_0CEF0125 ＝ 字节集_寻找 (被搜寻的字节集, 欲寻找的字节集, 变量_0DEF0125)
        .如果真 (变量_0CEF0125 ≠ -1)
            加入成员 (结果数组, 变量_0CEF0125)
            变量_0DEF0125 ＝ 变量_0CEF0125 ＋ 变量_0EEF0125
        .如果真结束
        
    .判断循环尾 ()
    返回 (取数组成员数 (结果数组))

.子程序 AdjustString, 字节集, 公开, 字节序大小端转换
    .参数 pBuf, 整数型
    .参数 dwSize, 整数型
    .局部变量 变量_DBF10225, 整数型
    .局部变量 变量_DCF10225, 字节集
    .局部变量 变量_DDF10225, 整数型

    变量_DBF10225 ＝ LocalAlloc (#LMEM_ZEROINIT, dwSize)
    .变量循环首 (0, dwSize － 2, 2, 变量_DDF10225)
        memcpy (变量_DBF10225 ＋ 变量_DDF10225 ＋ 1, pBuf ＋ 变量_DDF10225, 1)
        memcpy (变量_DBF10225 ＋ 变量_DDF10225, pBuf ＋ 变量_DDF10225 ＋ 1, 1)
    .变量循环尾 ()
    变量_DCF10225 ＝ 指针到字节集 (变量_DBF10225, dwSize)
    LocalFree (变量_DBF10225)
    返回 (变量_DCF10225)

.子程序 字节集_反转, 字节集, 公开, 字节序反转
    .参数 字节集, 字节集
    .局部变量 变量_F6F60225, 整数型
    .局部变量 变量_F7F60225, 字节集
    .局部变量 变量_F8F60225, 整数型

    变量_F8F60225 ＝ 取字节集长度 (字节集)
    变量_F7F60225 ＝ 取空白字节集 (变量_F8F60225)
    .计次循环首 (变量_F8F60225, 变量_F6F60225)
        变量_F7F60225 [变量_F8F60225 － 变量_F6F60225 ＋ 1] ＝ 字节集 [变量_F6F60225]
    .计次循环尾 ()
    返回 (变量_F7F60225)

