.版本 2

.程序集 集_进程线程
.程序集变量 类变量_895B0115, 线程许可证, , "0"

.子程序 进程_名取句柄ex, 整数型
    .参数 变量_7BC70225, 文本型
    .参数 变量_7CC70225, 整数型, 可空
    .局部变量 变量_7DC70225, 精易_窗口信息, , "0"
    .局部变量 变量_7EC70225, 整数型
    .局部变量 变量_7FC70225, 整数型
    .局部变量 变量_80C70225, 文本型, , "0"
    .局部变量 变量_81C70225, 整数型, , "0"
    .局部变量 变量_82C70225, 整数型
    .局部变量 变量_83C70225, 整数型

    
    变量_7EC70225 ＝ 进程_枚举 (变量_80C70225, 变量_81C70225)
    .计次循环首 (变量_7EC70225, 变量_7FC70225)
        .如果真 (变量_7BC70225 ＝ 变量_80C70225 [变量_7FC70225])
            变量_83C70225 ＝ 变量_81C70225 [变量_7FC70225]
            .如果真 (是否为空 (变量_7CC70225) ≠ 真)
                .如果真 (变量_7CC70225 ＝ 变量_81C70225 [变量_7FC70225])
                    变量_83C70225 ＝ 变量_81C70225 [变量_7FC70225]
                    跳出循环 ()
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
    变量_7EC70225 ＝ 窗口_枚举 (变量_7DC70225)
    .计次循环首 (变量_7EC70225, 变量_7FC70225)
        .如果真 (变量_7DC70225 [变量_7FC70225].进程ID ＝ 变量_83C70225)
            变量_82C70225 ＝ 窗口_取祖句柄 (变量_7DC70225 [变量_7FC70225].窗口句柄)
            跳出循环 ()
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
    返回 (变量_82C70225)

.子程序 进程_禁止被打开, 逻辑型, 公开
    .局部变量 变量_93A20225, 字节集

    
    变量_93A20225 ＝ 取空白字节集 (512)
    .如果真 (DLL_InitializeAcl (变量_93A20225, 1024, 2) ＝ 假)
        返回 (假)
    .如果真结束
    .如果真 (DLL_SetSecurityInfo (-1, 6, 2147483652, 0, 0, 变量_93A20225, 0) ≠ 0)
        返回 (假)
    .如果真结束
    返回 (真)
    
    

.子程序 进程_强力结束进程, 逻辑型, 公开, 强制结束进程。
    .参数 hProcess, 整数型, , 进程句柄
    .参数 ExitStatus, 整数型, , 填0
    .局部变量 变量_EF800225, 整数型
    .局部变量 变量_F0800225, 整数型
    .局部变量 变量_F1800225, 自定义_67810241
    .局部变量 变量_F2800225, 逻辑型

    变量_F2800225 ＝ 假
    变量_F1800225.成员_6D810235 ＝ 24
    变量_EF800225 ＝ ZwCreateJobObject (变量_F0800225, #JOB_OBJECT_ALL_ACCESS, 变量_F1800225)
    .如果真 (变量_EF800225 ≥ 0)
        变量_EF800225 ＝ ZwAssignProcessToJobObject (变量_F0800225, hProcess)
        .如果真 (变量_EF800225 ≥ 0)
            变量_EF800225 ＝ ZwTerminateJobObject (变量_F0800225, ExitStatus)
            .如果真 (变量_EF800225 ≥ 0)
                变量_F2800225 ＝ 真
            .如果真结束
            
        .如果真结束
        ZwClose (变量_F0800225)
    .如果真结束
    .如果真 (变量_F2800225 ＝ 假)
        变量_EF800225 ＝ ZwTerminateProcess (hProcess, ExitStatus)
        .如果真 (变量_EF800225 ≥ 0)
            变量_F2800225 ＝ 真
        .如果真结束
        
    .如果真结束
    返回 (变量_F2800225)

.子程序 进程_强力打开进程, 整数型, 公开, 和OpenProcess的函数填法相似
    .参数 dwDesiredAccess, 整数型
    .参数 bInhert, 逻辑型
    .参数 ProcessId, 整数型
    .局部变量 变量_F6800225, 整数型
    .局部变量 变量_F7800225, 自定义_66810241
    .局部变量 变量_F8800225, 自定义_67810241
    .局部变量 变量_F9800225, 整数型
    .局部变量 变量_FA800225, PROCESS_BASIC_INFORMATION
    .局部变量 变量_FB800225, 整数型
    .局部变量 变量_FC800225, 整数型
    .局部变量 变量_FD800225, 整数型
    .局部变量 变量_FE800225, 整数型
    .局部变量 变量_FF800225, 自定义_6A810241
    .局部变量 变量_00810225, 整数型
    .局部变量 变量_01810225, 字节集
    .局部变量 变量_02810225, 整数型
    .局部变量 变量_03810225, 字节集
    .局部变量 变量_04810225, 整数型

    变量_F8800225.成员_6D810235 ＝ 24
    .如果真 (bInhert)
        变量_F8800225.成员_70810235 ＝ 位或 (变量_F8800225.成员_70810235, #OBJ_INHERIT)
    .如果真结束
    变量_F7800225.成员_6B810235 ＝ ProcessId ＋ 1
    变量_F6800225 ＝ ZwOpenProcess (变量_FE800225, dwDesiredAccess, 变量_F8800225, 变量_F7800225)
    .如果真 (变量_F6800225 ≥ 0)
        变量_04810225 ＝ 变量_FE800225
        返回 (变量_04810225)
    .如果真结束
    变量_00810225 ＝ 1
    .循环判断首 ()
        变量_01810225 ＝ 取空白字节集 (变量_00810225)
        变量_04810225 ＝ DLL_ZwQuerySystemInformation (16, 变量_01810225, 变量_00810225, 0)
        
        .如果 (变量_04810225 ＝ #STATUS_INFO_LENGTH_MISMATCH)
            变量_00810225 ＝ 变量_00810225 × 2
            变量_01810225 ＝ 取空白字节集 (变量_00810225)
        .否则
            跳出循环 ()
        .如果结束
        
    .循环判断尾 (变量_04810225 ＝ #STATUS_INFO_LENGTH_MISMATCH)
    变量_02810225 ＝ 取指针_字节集 (变量_01810225, 变量_01810225, 0)
    RtlMoveMemory_整数传址1 (变量_F9800225, 变量_02810225, 4)
    变量_02810225 ＝ 变量_02810225 ＋ 4
    .计次循环首 (变量_F9800225, 变量_FB800225)
        DLL_RtlMoveMemory10 (变量_FF800225, 变量_02810225, 16)
        .如果真 (变量_FF800225.成员_82810235 ＝ #OB_TYPE_PROCESS)
            变量_F7800225.成员_6B810235 ＝ 变量_FF800225.成员_80810235
            变量_F6800225 ＝ ZwOpenProcess (变量_FC800225, #PROCESS_DUP_HANDLE, 变量_F8800225, 变量_F7800225)
            .如果真 (变量_F6800225 ≥ 0)
                变量_F6800225 ＝ ZwDuplicateObject (变量_FC800225, 变量_FF800225.成员_84810235, #ZwGetCurrentProcess, 变量_FD800225, #PROCESS_ALL_ACCESS, 0, #DUPLICATE_SAME_ATTRIBUTES)
                .如果真 (变量_F6800225 ≥ 0)
                    变量_F6800225 ＝ DLL_ZwQueryInformationProcess (变量_FD800225, 0, 变量_FA800225, 24, 0)
                    .如果真 (变量_F6800225 ≥ 0)
                        .如果真 (变量_FA800225.UniqueProcessId ＝ ProcessId)
                            变量_F6800225 ＝ ZwDuplicateObject (变量_FC800225, 变量_FF800225.成员_84810235, #ZwGetCurrentProcess, 变量_FE800225, dwDesiredAccess, #OBJ_INHERIT, #DUPLICATE_SAME_ATTRIBUTES)
                            .如果真 (变量_F6800225 ≥ 0)
                                变量_04810225 ＝ 变量_FE800225
                            .如果真结束
                            
                        .如果真结束
                        
                    .如果真结束
                    
                .如果真结束
                变量_F6800225 ＝ ZwClose (变量_FD800225)
            .如果真结束
            变量_F6800225 ＝ ZwClose (变量_FC800225)
        .如果真结束
        变量_02810225 ＝ 变量_02810225 ＋ 16
    .计次循环尾 ()
    返回 (变量_04810225)

.子程序 进程_PID取路径, 文本型, 公开, 解决了一个句柄泄漏问题
    .参数 PID, 整数型, , 进程ID
    .局部变量 变量_06810225, 整数型
    .局部变量 变量_07810225, 文本型
    .局部变量 变量_08810225, 文本型

    变量_06810225 ＝ OpenProcess (1024, 0, PID)
    .如果真 (变量_06810225 ＝ 0)
        变量_06810225 ＝ 进程_强力打开进程 (1024, 假, PID)
    .如果真结束
    变量_08810225 ＝ 取空白文本 (512)
    .如果真 (GetProcessImageFileNameA (变量_06810225, 变量_08810225, 512) ＝ 0)
        返回 (“”)
    .如果真结束
    CloseHandle (变量_06810225)
    变量_08810225 ＝ DOS路径转换_ (变量_08810225)
    变量_08810225 ＝ 删首尾空 (变量_08810225)
    .如果 (变量_08810225 ＝ “”)
        返回 (“-”)
    .否则
        变量_07810225 ＝ 变量_08810225
        变量_07810225 ＝ 子文本替换 (变量_07810225, “\Device\HarddiskVolume6”, “H:”, , 1, 假)
        变量_07810225 ＝ 子文本替换 (变量_07810225, “\Device\HarddiskVolume5”, “G:”, , 1, 假)
        变量_07810225 ＝ 子文本替换 (变量_07810225, “\Device\HarddiskVolume4”, “F:”, , 1, 假)
        变量_07810225 ＝ 子文本替换 (变量_07810225, “\Device\HarddiskVolume3”, “E:”, , 1, 假)
        变量_07810225 ＝ 子文本替换 (变量_07810225, “\Device\HarddiskVolume2”, “D:”, , 1, 假)
        变量_07810225 ＝ 子文本替换 (变量_07810225, “\Device\HarddiskVolume1”, “C:”, , 1, 假)
        返回 (变量_07810225)
    .如果结束
    

.子程序 DOS路径转换_, 文本型
    .参数 变量_09810225, 文本型
    .局部变量 变量_0A810225, 文本型
    .局部变量 变量_0B810225, 字节集
    .局部变量 变量_0C810225, 整数型
    .局部变量 变量_0D810225, 字节集, , "0"
    .局部变量 变量_0E810225, 整数型
    .局部变量 变量_0F810225, 整数型
    .局部变量 变量_10810225, 文本型, , "0"
    .局部变量 变量_11810225, 文本型, , "0"
    .局部变量 变量_27A20225, 文本型

    变量_0C810225 ＝ GetLogicalDriveStringsA (0, { })
    变量_0B810225 ＝ 取空白字节集 (变量_0C810225)
    GetLogicalDriveStringsA (变量_0C810225, 变量_0B810225)
    变量_0D810225 ＝ 分割字节集 (变量_0B810225, { 0 }, )
    变量_0E810225 ＝ 取数组成员数 (变量_0D810225) － 1
    .如果真 (变量_0E810225 ＞ 0)
        重定义数组 (变量_10810225, 假, 变量_0E810225)
        重定义数组 (变量_11810225, 假, 变量_0E810225)
        .计次循环首 (变量_0E810225, 变量_0F810225)
            变量_0B810225 ＝ 变量_0D810225 [变量_0F810225]
            变量_0B810225 [取字节集长度 (变量_0B810225)] ＝ 0
            变量_10810225 [变量_0F810225] ＝ 到文本 (变量_0B810225)
            
            变量_0A810225 ＝ 取空白文本 (260)
            QueryDosDeviceA (变量_10810225 [变量_0F810225], 变量_0A810225, 260)
            变量_11810225 [变量_0F810225] ＝ 变量_0A810225
            
            .如果真 (变量_09810225 ≈ 变量_11810225 [变量_0F810225] ＋ “\”)
                返回 (子文本替换 (变量_09810225, 变量_11810225 [变量_0F810225], 变量_10810225 [变量_0F810225], 1, 1, 真))
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    返回 (变量_09810225)

.子程序 进程_定位, 逻辑型, 公开, 通过进程PID定位进程
    .参数 PID, 整数型

    返回 (文件_定位W (进程_取路径W (PID), ))

.子程序 进程_内存使用, 双精度小数型, 公开, 查看指定进程ID的内存使用情况
    .参数 PID, 整数型
    .参数 返回单位, 整数型, 可空, 0=Byte，1=KB，2=MB，3=GB，默认为1
    .局部变量 变量_BD5E0225, 整数型
    .局部变量 变量_2E050325, 整数型
    .局部变量 变量_2F050325, 整数型
    .局部变量 变量_32050325, 整数型
    .局部变量 变量_30050325, 整数型
    .局部变量 变量_45050325, 整数型

    .如果真 (是否为空 (返回单位) 或 返回单位 ＜ 0)
        返回单位 ＝ 1
    .如果真结束
    变量_BD5E0225 ＝ OpenProcess (位或 (#PROCESS_QUERY_INFORMATION, #PROCESS_VM_READ), 0, PID)
    .如果真 (变量_BD5E0225 ≠ #NULL)
        变量_32050325 ＝ 40
        变量_30050325 ＝ HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 变量_32050325)
        .如果真 (变量_30050325 ≠ #NULL)
            .如果 (_WIN32_WINNT ≥ #_WIN32_WINNT_WIN7)
                变量_2E050325 ＝ GetModuleHandleA (“Kernel32.dll”)
                .如果真 (变量_2E050325 ≠ #NULL)
                    变量_2F050325 ＝ GetProcAddress (变量_2E050325, “K32GetProcessMemoryInfo”)
                    .如果真 (变量_2F050325 ≠ #NULL)
                        调用子程序_ (变量_2F050325, 变量_BD5E0225, 变量_30050325, 变量_32050325, , , , , , , , , , , , )
                    .如果真结束
                    
                .如果真结束
                
            .否则
                DLL_GetProcessMemoryInfo (变量_BD5E0225, 变量_30050325, 变量_32050325)
            .如果结束
            变量_45050325 ＝ __get (变量_30050325, 12)
            DLL_HeapFree (GetProcessHeap (), 0, 变量_30050325)
        .如果真结束
        CloseHandle (变量_BD5E0225)
        返回 (整数_有符号转无符号 (变量_45050325) ÷ 求次方 (1024, 返回单位))
    .如果真结束
    返回 (0)

.子程序 进程_取命令行32, 文本型, 公开, 取指定进程ID的命令行.32位系统专用
    .参数 进程ID, 整数型
    .局部变量 变量_6D5E0225, 整数型
    .局部变量 变量_6E5E0225, PROCESS_BASIC_INFORMATION
    .局部变量 变量_6F5E0225, 整数型
    .局部变量 变量_705E0225, 整数型
    .局部变量 变量_715E0225, 自定义_825E0241
    .局部变量 变量_725E0225, 字节集
    .局部变量 变量_735E0225, 整数型

    RtlAdjustPrivilege (#SeDebugPrivilege, 1, 0, #NULL)
    变量_6D5E0225 ＝ OpenProcess (1024 ＋ 16, 0, 进程ID)
    DLL_ZwQueryInformationProcess (变量_6D5E0225, 0, 变量_6E5E0225, 24, 0)
    变量_725E0225 ＝ 取空白字节集 (4)
    
    NtReadVirtualMemory_Bin (变量_6D5E0225, 变量_6E5E0225.PebBaseAddress ＋ 16, 变量_725E0225, 4, 0)
    变量_6F5E0225 ＝ 取字节集数据 (变量_725E0225, 3, )
    NtReadVirtualMemory_Bin (变量_6D5E0225, 变量_6F5E0225 ＋ 68, 变量_725E0225, 4, 0)
    变量_705E0225 ＝ 取字节集数据 (变量_725E0225, 3, )
    DLL_VirtualQueryEx (变量_6D5E0225, 变量_705E0225, 变量_715E0225, 28)
    变量_735E0225 ＝ 变量_715E0225.成员_8C5E0235 ＋ 变量_715E0225.成员_895E0235 － 变量_705E0225
    变量_725E0225 ＝ 取空白字节集 (变量_735E0225)
    NtReadVirtualMemory_Bin (变量_6D5E0225, 变量_705E0225, 变量_725E0225, 变量_735E0225, 0)
    CloseHandle (变量_6D5E0225)
    返回 (编码_Unicode到Ansi (变量_725E0225))

.子程序 进程_取用户名, 文本型, 公开, 获取指定进程的用户名
    .参数 进程PID, 整数型
    .局部变量 变量_2BF10225, 整数型
    .局部变量 变量_2CF10225, 整数型
    .局部变量 变量_2DF10225, 整数型
    .局部变量 变量_2EF10225, 整数型
    .局部变量 变量_2FF10225, 整数型
    .局部变量 变量_30F10225, 整数型
    .局部变量 变量_31F10225, 长整数型
    .局部变量 变量_33F10225, 字节集
    .局部变量 变量_36F10225, 文本型
    .局部变量 变量_45F10225, 整数型
    .局部变量 变量_41F10225, 文本型

    DLL_NtQuerySystemInformation (#SystemProcessInformation, #NULL, 0, 变量_2BF10225)
    .如果真 (变量_2BF10225 ＝ 0)
        返回 (“”)
    .如果真结束
    变量_2CF10225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_2BF10225)
    变量_2DF10225 ＝ DLL_NtQuerySystemInformation (#SystemProcessInformation, 变量_2CF10225, 变量_2BF10225, #NULL)
    .如果真 (变量_2DF10225 ≠ 0)
        LocalFree (变量_2CF10225)
        输出调试文本 (取错误信息文本_API (变量_2DF10225, “Ntdll.dll”))
        返回 (“”)
    .如果真结束
    变量_2EF10225 ＝ 变量_2CF10225
    变量_2FF10225 ＝ 指针_到整数 (变量_2EF10225 ＋ 68)
    .判断循环首 (变量_2FF10225 ≠ 进程PID)
        变量_30F10225 ＝ 指针_到整数 (变量_2EF10225)
        .如果真 (变量_30F10225 ＝ #NULL)
            跳出循环 ()
        .如果真结束
        变量_2EF10225 ＝ 变量_2EF10225 ＋ 变量_30F10225
        变量_2FF10225 ＝ 指针_到整数 (变量_2EF10225 ＋ 68)
    .判断循环尾 ()
    .如果真 (变量_2FF10225 ＝ 进程PID)
        变量_31F10225 ＝ 指针_到长整数型_汇编 (变量_2EF10225 ＋ 32)
        变量_2BF10225 ＝ 0
        DLL_WinStationGetProcessSid (#NULL, 变量_2FF10225, 变量_31F10225, #NULL, 变量_2BF10225)
        变量_33F10225 ＝ 取空白字节集 (变量_2BF10225)
        .如果真 (DLL_WinStationGetProcessSid (#NULL, 变量_2FF10225, 变量_31F10225, 取指针_字节集型 (变量_33F10225), 变量_2BF10225) ＝ #NULL)
            LocalFree (变量_2CF10225)
            返回 (“服务关闭”)
        .如果真结束
        变量_2BF10225 ＝ 0
        DLL_LookupAccountSidA (#NULL, 取指针_字节集型 (变量_33F10225), #NULL, 变量_2BF10225, #NULL, 变量_45F10225, #NULL)
        变量_36F10225 ＝ 取空白文本 (变量_2BF10225)
        变量_41F10225 ＝ 取空白文本 (变量_45F10225)
        .如果真 (DLL_LookupAccountSidA (#NULL, 取指针_字节集型 (变量_33F10225), 取指针_文本型 (变量_36F10225), 变量_2BF10225, 取指针_文本型 (变量_41F10225), 变量_45F10225, #NULL))
            LocalFree (变量_2CF10225)
            返回 (变量_36F10225)
        .如果真结束
        
    .如果真结束
    LocalFree (变量_2CF10225)
    返回 (“”)

.子程序 进程_取命令行, 文本型, 公开, 取指定进程ID的命令行.64位系统专用
    .参数 PID, 整数型
    .局部变量 变量_905C0225, 自定义_BC5C0241
    .局部变量 变量_915C0225, 自定义_BD5C0241
    .局部变量 变量_925C0225, 自定义_BE5C0241
    .局部变量 变量_935C0225, 字节集
    .局部变量 变量_945C0225, 整数型
    .局部变量 变量_955C0225, 自定义_D25C0241
    .局部变量 变量_965C0225, 整数型
    .局部变量 变量_975C0225, 文本型

    RtlAdjustPrivilege (#SeDebugPrivilege, 1, 0, #NULL)
    变量_965C0225 ＝ OpenProcess (1040, 0, PID)
    .如果真 (变量_965C0225 ≠ 0)
        .如果真 (DLL_NtWow64QueryInformationProcess64 (变量_965C0225, 0, 变量_905C0225, 48, 0) ＝ 0)
            .如果真 (DLL_NtWow64ReadVirtualMemory64 (变量_965C0225, 变量_905C0225.成员_C15C0235, 变量_915C0225, 40, 0) ＝ 0)
                .如果真 (DLL_NtWow64ReadVirtualMemory642 (变量_965C0225, 变量_915C0225.成员_C95C0235 ＋ 96, 变量_925C0225, 32, 0) ＝ 0)
                    .如果真 (变量_925C0225.成员_CB5C0235.成员_D15C0235 ＞ 0)
                        变量_935C0225 ＝ 取空白字节集 (变量_925C0225.成员_CB5C0235.成员_CE5C0235)
                        DLL_NtWow64ReadVirtualMemory643 (变量_965C0225, 变量_925C0225.成员_CB5C0235.成员_D15C0235, 变量_935C0225, 变量_925C0225.成员_CB5C0235.成员_CE5C0235, 0)
                        变量_975C0225 ＝ 编码_Unicode到Ansi (变量_935C0225)
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    CloseHandle (变量_965C0225)
    返回 (变量_975C0225)

.子程序 进程_是否被挂起, 逻辑型, 公开, 检测进程是否被暂停，亦可用于窗口是否假死
    .参数 进程PID, 整数型
    .参数 超时时间, 整数型, 可空, 检测窗口的响应时间，超时则为假死，单位：毫秒；可空，默认100毫秒
    .局部变量 变量_585A0225, 整数型
    .局部变量 变量_595A0225, 整数型

    .如果真 (是否为空 (超时时间))
        超时时间 ＝ 100
    .如果真结束
    变量_595A0225 ＝ 进程_ID取窗口句柄EX (进程PID)
    .如果真 (变量_595A0225 ＝ 0)
        返回 (假)
    .如果真结束
    变量_585A0225 ＝ DLL_SendMessageTimeoutA (变量_595A0225, #WM_GETTEXTLENGTH, 0, 0, #SMTO_NORMAL, 超时时间, 0)
    .判断开始 (变量_585A0225 ＝ 1)
        返回 (假)
    .默认
        返回 (真)
    .判断结束
    

.子程序 进程_是否被挂起1, 逻辑型, 公开, 检查进程的主线程状态是否为暂停。
    .参数 pid, 整数型
    .局部变量 变量_A5FE0225, 整数型
    .局部变量 变量_A9FE0225, 整数型
    .局部变量 变量_AAFE0225, 整数型
    .局部变量 变量_B4FE0225, 整数型
    .局部变量 变量_D1FE0225, 整数型
    .局部变量 变量_D5FE0225, 整数型
    .局部变量 变量_B8FE0225, 整数型

    变量_A5FE0225 ＝ DLL_NtQuerySystemInformation (#SystemProcessInformation, #NULL, 0, 变量_A9FE0225)
    变量_AAFE0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_A9FE0225)
    变量_A5FE0225 ＝ DLL_NtQuerySystemInformation (#SystemProcessInformation, 变量_AAFE0225, 变量_A9FE0225, 变量_A9FE0225)
    .如果真 (变量_A5FE0225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_A5FE0225, ))
        LocalFree (变量_AAFE0225)
        返回 (假)
    .如果真结束
    变量_B4FE0225 ＝ 变量_AAFE0225
    .循环判断首 ()
        变量_B4FE0225 ＝ 变量_B4FE0225 ＋ 变量_B8FE0225
        变量_D1FE0225 ＝ __get (变量_B4FE0225, 68)
        .如果真 (变量_D1FE0225 ＝ pid)
            变量_D5FE0225 ＝ __get (变量_B4FE0225, 240)
            跳出循环 ()
        .如果真结束
        变量_B8FE0225 ＝ __get (变量_B4FE0225, 0)
    .循环判断尾 (变量_B8FE0225 ≠ 0)
    LocalFree (变量_AAFE0225)
    返回 (变量_D5FE0225 ＝ 5)

.子程序 进程_取程序路径, 文本型, 公开, 取指定进程的程序路径，成功返回程序路径，失败或进程不存在返回空文本
    .参数 进程ID, 整数型
    .局部变量 变量_0B6A0125, 整数型
    .局部变量 变量_0C6A0125, 精易_模块信息
    .局部变量 变量_0D6A0125, 文本型

    变量_0B6A0125 ＝ CreateToolhelp32Snapshot (8, 进程ID)
    .判断开始 (进程ID ＝ 4)
        CloseHandle (变量_0B6A0125)
        返回 (目录_取system32目录 ())
    .判断 (变量_0B6A0125 ＝ #INVALID_HANDLE_VALUE)
        返回 (进程_取路径 (进程ID))
    .默认
        
    .判断结束
    变量_0C6A0125.size ＝ 1024
    
    Module32First (变量_0B6A0125, 变量_0C6A0125)
    变量_0D6A0125 ＝ 到文本 (变量_0C6A0125.模块完整路径)
    .判断开始 (取文本左边 (变量_0D6A0125, 11) ＝ “\SystemRoot”)
        变量_0D6A0125 ＝ 读环境变量 (“SystemRoot”) ＋ 子文本替换 (变量_0D6A0125, “\SystemRoot”, “”, , 1, 假)
    .判断 (取文本左边 (变量_0D6A0125, 4) ＝ “\??\”)
        变量_0D6A0125 ＝ 子文本替换 (变量_0D6A0125, “\??\”, “”, , 1, 假)
    .默认
        
    .判断结束
    CloseHandle (变量_0B6A0125)
    返回 (变量_0D6A0125)

.子程序 进程_取路径, 文本型, 公开, 成功返回路径,失败返回空文本
    .参数 PID, 整数型, 可空

    返回 (编码_Unicode到Ansi (进程_取路径W (PID)))

.子程序 进程_取路径W, 字节集, 公开, 成功返回Unicode路径,失败返回空字节集
    .参数 ProcessID, 整数型, 可空
    .局部变量 变量_A8E20225, 整数型
    .局部变量 变量_A9E20225, 字节集
    .局部变量 变量_AAE20225, 整数型

    .如果 (ProcessID ＝ 0)
        变量_A8E20225 ＝ GetCurrentProcess ()
    .否则
        变量_A8E20225 ＝ OpenProcess (#PROCESS_QUERY_LIMITED_INFORMATION, 0, ProcessID)
    .如果结束
    .如果真 (变量_A8E20225 ＝ #NULL)
        返回 ({ })
    .如果真结束
    变量_A9E20225 ＝ 取空白字节集 (#MAX_PATH × 2 ＋ 2)
    变量_AAE20225 ＝ DLL_GetProcessImageFileNameW (变量_A8E20225, 变量_A9E20225, #MAX_PATH)
    CloseHandle (变量_A8E20225)
    变量_A9E20225 ＝ 取字节集左边 (变量_A9E20225, 变量_AAE20225 × 2 ＋ 2)
    返回 (DosToLogicalDrive (变量_A9E20225))

.子程序 进程_暂停, , 公开, 将指定进程暂停(无返回值)
    .参数 进程ID, 整数型, , 欲被暂停进程的进程ID
    .参数 状态, 逻辑型, 可空, 可空为假:恢复进程   真:暂停进程
    .局部变量 变量_942B0125, 整数型

    变量_942B0125 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID)
    .如果 (状态)
        ZwSuspendProcess (变量_942B0125)
    .否则
        ZwResumeProcess (变量_942B0125)
    .如果结束
    CloseHandle (变量_942B0125)

.子程序 进程_结束, 逻辑型, 公开, 结束指定进程。成功返回真，失败返回假。本命令为初级命令
    .参数 进程ID, 整数型, 可空, 如果为空或为0将结束自己
    .局部变量 变量_B3B50225, 整数型
    .局部变量 变量_B4B50225, 逻辑型

    .如果 (进程ID ＝ 0)
        变量_B3B50225 ＝ GetCurrentProcess ()
    .否则
        变量_B3B50225 ＝ OpenProcess (#<?未知本地类型?>, 0, 进程ID)
    .如果结束
    .如果真 (变量_B3B50225 ＝ #NULL)
        返回 (假)
    .如果真结束
    变量_B4B50225 ＝ TerminateProcess (变量_B3B50225, 0)
    CloseHandle (变量_B3B50225)
    返回 (变量_B4B50225)

.子程序 进程_结束1, 逻辑型, 公开, 结束指定进程。成功返回真，失败返回假。本命令为初级命令
    .参数 进程名, 文本型, 可空, 欲结束的进程名,如果为空将结束自己
    .参数 是否区分大小写, 逻辑型, 可空, 默认为不区分,真=区分
    .局部变量 变量_E8EA0225, 整数型

    变量_E8EA0225 ＝ 进程_名取ID (进程名, 是否区分大小写)
    .如果真 (变量_E8EA0225 ＝ 0)
        返回 (假)
    .如果真结束
    返回 (进程_结束 (变量_E8EA0225))

.子程序 进程_枚举, 整数型, 公开, 失败返回0，成功返回进程数量
    .参数 进程名数组, 文本型, 参考 可空 数组, 返回的进程名 数组
    .参数 进程ID数组, 整数型, 参考 可空 数组, 返回的进程ID 数组
    .局部变量 变量_57E50125, 精易_进程信息列表
    .局部变量 变量_58E50125, 整数型
    .局部变量 变量_59E50125, 整数型

    变量_58E50125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_58E50125 ＝ #INVALID_HANDLE_VALUE)
        返回 (0)
    .如果真结束
    清除数组 (进程名数组)
    清除数组 (进程ID数组)
    变量_57E50125.dwSize ＝ 296
    变量_59E50125 ＝ Process32First (变量_58E50125, 变量_57E50125)
    .判断开始 (是否为空 (进程名数组) ＝ 假 且 是否为空 (进程ID数组) ＝ 假)
        .判断循环首 (变量_59E50125 ≠ 0)
            加入成员 (进程名数组, 到文本 (变量_57E50125.进程名称))
            加入成员 (进程ID数组, 变量_57E50125.进程ID)
            变量_59E50125 ＝ Process32Next (变量_58E50125, 变量_57E50125)
        .判断循环尾 ()
    .判断 (是否为空 (进程名数组) ＝ 假)
        .判断循环首 (变量_59E50125 ≠ 0)
            加入成员 (进程名数组, 到文本 (变量_57E50125.进程名称))
            变量_59E50125 ＝ Process32Next (变量_58E50125, 变量_57E50125)
        .判断循环尾 ()
    .默认
        .判断循环首 (变量_59E50125 ≠ 0)
            加入成员 (进程ID数组, 变量_57E50125.进程ID)
            变量_59E50125 ＝ Process32Next (变量_58E50125, 变量_57E50125)
        .判断循环尾 ()
        CloseHandle (变量_58E50125)
        返回 (取数组成员数 (进程ID数组))
    .判断结束
    CloseHandle (变量_58E50125)
    返回 (取数组成员数 (进程名数组))

.子程序 进程_取系统进程列表, 整数型, 公开, 失败返回0，成功返回进程数量
    .参数 进程信息数组, 精易_进程信息数组, 参考 数组
    .局部变量 变量_81AE0225, 自定义_C8AE0241
    .局部变量 变量_82AE0225, 整数型
    .局部变量 变量_83AE0225, 整数型
    .局部变量 变量_84AE0225, 整数型
    .局部变量 变量_85AE0225, 整数型
    .局部变量 变量_86AE0225, 精易_进程信息数组
    .局部变量 变量_87AE0225, 整数型

    清除数组 (进程信息数组)
    变量_82AE0225 ＝ DLL_NtQuerySystemInformation (5, 变量_83AE0225, 0, 变量_84AE0225)
    变量_87AE0225 ＝ LocalAlloc (64, 变量_84AE0225)
    变量_83AE0225 ＝ 变量_87AE0225
    变量_82AE0225 ＝ DLL_NtQuerySystemInformation (5, 变量_83AE0225, 变量_84AE0225, 0)
    .如果真 (变量_82AE0225 ＝ 0)
        变量_85AE0225 ＝ LocalAlloc (64, 512)
        DLL_RtlMoveMemory2 (变量_81AE0225, 变量_83AE0225, 248)
        .判断循环首 (变量_81AE0225.成员_CEAE0235 ≠ 0)
            WideCharToMultiByte (936, 512, 变量_81AE0225.成员_D4AE0235.成员_44EE0135, -1, 变量_85AE0225, 变量_81AE0225.成员_D4AE0235.成员_42EE0135, 0, 0)
            变量_86AE0225.进程名称 ＝ 选择 (变量_81AE0225.成员_D4AE0235.成员_44EE0135 ＝ 0, “System Idle Process”, 指针到文本 (变量_85AE0225))
            变量_86AE0225.进程标识符 ＝ 变量_81AE0225.成员_D6AE0235
            变量_86AE0225.进程模块标识符 ＝ 0
            变量_86AE0225.父进程标识符 ＝ 变量_81AE0225.成员_D7AE0235
            变量_86AE0225.线程优先权 ＝ 变量_81AE0225.成员_D5AE0235
            变量_86AE0225.线程数 ＝ 变量_81AE0225.成员_CFAE0235
            加入成员 (进程信息数组, 变量_86AE0225)
            变量_83AE0225 ＝ 变量_83AE0225 ＋ 变量_81AE0225.成员_CEAE0235
            DLL_RtlMoveMemory2 (变量_81AE0225, 变量_83AE0225, 248)
        .判断循环尾 ()
        WideCharToMultiByte (936, 512, 变量_81AE0225.成员_D4AE0235.成员_44EE0135, -1, 变量_85AE0225, 变量_81AE0225.成员_D4AE0235.成员_42EE0135, 0, 0)
        变量_86AE0225.进程名称 ＝ 选择 (变量_81AE0225.成员_D4AE0235.成员_44EE0135 ＝ 0, “System Idle Process”, 指针到文本 (变量_85AE0225))
        变量_86AE0225.进程标识符 ＝ 变量_81AE0225.成员_D6AE0235
        变量_86AE0225.进程模块标识符 ＝ 0
        变量_86AE0225.父进程标识符 ＝ 变量_81AE0225.成员_D7AE0235
        变量_86AE0225.线程优先权 ＝ 变量_81AE0225.成员_D5AE0235
        变量_86AE0225.线程数 ＝ 变量_81AE0225.成员_CFAE0235
        加入成员 (进程信息数组, 变量_86AE0225)
        LocalFree (变量_85AE0225)
    .如果真结束
    LocalFree (变量_87AE0225)
    返回 (取数组成员数 (进程信息数组))

.子程序 进程_取同名ID, 整数型, 公开, 取相同名称进程，成功返回数量；失败返回-1
    .参数 进程名, 文本型
    .参数 进程ID数组, 整数型, 可空 数组, 返回进程ID的数组
    .参数 区分大小写, 逻辑型, 可空, 默认不区分进程名大小写

    返回 (进程_取同名IDW (编码_Ansi到Unicode (进程名, ), 进程ID数组, 区分大小写))

.子程序 进程_取同名IDW, 整数型, 公开, 取相同名称进程，成功返回数量；失败返回-1
    .参数 进程名, 字节集
    .参数 进程ID数组, 整数型, 可空 数组, 返回进程ID的数组
    .参数 区分大小写, 逻辑型, 可空, 默认不区分进程名大小写
    .局部变量 变量_BBEA0225, 整数型
    .局部变量 变量_BCEA0225, 自定义_74E20241
    .局部变量 变量_BDEA0225, 逻辑型

    清除数组 (进程ID数组)
    变量_BBEA0225 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_BBEA0225 ＝ #INVALID_HANDLE_VALUE)
        返回 (#INVALID_HANDLE_VALUE)
    .如果真结束
    变量_BCEA0225.成员_77E20235 ＝ 556
    变量_BDEA0225 ＝ DLL_Process32FirstW (变量_BBEA0225, 变量_BCEA0225)
    .判断循环首 (变量_BDEA0225)
        .如果真 (文本_文本比较W (取数据_通用型_数组 (变量_BCEA0225.成员_80E20235), 取指针_字节集型 (进程名), 区分大小写) ＝ 0)
            加入成员 (进程ID数组, 变量_BCEA0225.成员_79E20235)
        .如果真结束
        变量_BDEA0225 ＝ DLL_Process32NextW (变量_BBEA0225, 变量_BCEA0225)
    .判断循环尾 ()
    CloseHandle (变量_BBEA0225)
    返回 (取数组成员数 (进程ID数组))

.子程序 进程_ID是否有效, 逻辑型, 公开, 判断一个进程ID是否存在
    .参数 进程ID, 整数型
    .局部变量 变量_B0EB0225, 逻辑型
    .局部变量 变量_B1EB0225, 整数型
    .局部变量 变量_B2EB0225, 整数型
    .局部变量 变量_B3EB0225, 整数型
    .局部变量 变量_B4EB0225, 整数型
    .局部变量 变量_B5EB0225, 整数型
    .局部变量 变量_B6EB0225, 整数型

    .如果真 (进程ID ≠ 0)
        变量_B2EB0225 ＝ 1024
        变量_B5EB0225 ＝ 变量_B2EB0225 × 4
        变量_B4EB0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_B5EB0225)
        变量_B0EB0225 ＝ EnumProcesses (变量_B4EB0225, 变量_B5EB0225, 变量_B1EB0225)
        .如果真 (变量_B0EB0225)
            .变量循环首 (0, 变量_B1EB0225 － 4, 4, 变量_B6EB0225)
                变量_B3EB0225 ＝ __get (变量_B4EB0225, 变量_B6EB0225)
                .如果真 (进程ID ＝ 变量_B3EB0225)
                    LocalFree (变量_B4EB0225)
                    返回 (真)
                .如果真结束
                
            .变量循环尾 ()
        .如果真结束
        LocalFree (变量_B4EB0225)
    .如果真结束
    返回 (假)

.子程序 进程_取ID数组, 整数型, 公开, 已弃用！请使用 进程_取同名ID
    .参数 进程名, 文本型, , 程序进程名
    .参数 进程ID数组, 整数型, 参考 数组, 返回的进程ID 数组
    .参数 区分大小写, 逻辑型, 可空, 默认不区分进程名大小写

    返回 (进程_取同名ID (进程名, 进程ID数组, 区分大小写))

.子程序 进程_名取ID, 整数型, 公开, 通过进程名取进程ID；失败返回0 
    .参数 进程名, 文本型, , 取要进程ID的进程名
    .参数 是否区分大小写, 逻辑型, 可空, 默认为不区分,真=区分
    .局部变量 变量_176A0125, 精易_进程信息列表
    .局部变量 变量_196A0125, 整数型
    .局部变量 变量_1A6A0125, 整数型

    变量_196A0125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_196A0125 ＝ #INVALID_HANDLE_VALUE)
        返回 (0)
    .如果真结束
    变量_176A0125.dwSize ＝ 296
    变量_1A6A0125 ＝ Process32First (变量_196A0125, 变量_176A0125)
    .判断循环首 (变量_1A6A0125 ≠ 0)
        .如果真 (文本比较 (进程名, 到文本 (变量_176A0125.进程名称), 是否区分大小写) ＝ 0)
            CloseHandle (变量_196A0125)
            返回 (变量_176A0125.进程ID)
        .如果真结束
        变量_1A6A0125 ＝ Process32Next (变量_196A0125, 变量_176A0125)
    .判断循环尾 ()
    CloseHandle (变量_196A0125)
    返回 (0)

.子程序 进程_打开, 整数型, 公开, 通过目标窗口句柄或进程ID取进程句柄，成功返回进程句柄
    .参数 句柄或pid, 整数型, , 窗口句柄或进程ID
    .局部变量 变量_DE5B0125, 整数型
    .局部变量 变量_DF5B0125, 整数型

    变量_DF5B0125 ＝ 句柄或pid
    .如果真 (IsWindow (句柄或pid) ≠ 0)
        GetWindowThreadProcessId (句柄或pid, 变量_DF5B0125)
    .如果真结束
    变量_DE5B0125 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 变量_DF5B0125)
    返回 (变量_DE5B0125)

.子程序 进程_打开1, 整数型, 公开, 通过目标进程ID取进程句柄，成功就返回进程句柄
    .参数 进程ID, 整数型, , 目标进程ID

    返回 (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))

.子程序 进程_关闭, 逻辑型, 公开, 关闭已经打开的操作句柄
    .参数 进程句柄, 整数型, , 进程句柄,线程句柄

    返回 (CloseHandle (进程句柄))

.子程序 进程_创建, 整数型, 公开, 创建一个程序进程(成功返回进程ID,失败返回0)
    .参数 程序路径, 文本型, , 欲创建进程的执行路径
    .参数 命令行, 文本型, 可空, 附加上程序路径后的命令行参数
    .参数 运行目录, 文本型, 可空, 通常留空,特殊情况下使用
    .参数 进程结构, 精易_进程结构, 参考 可空, 接收进程结构信息的变量,如果不为空，产品的句柄用CloseHandle函数释放
    .局部变量 变量_CBC30125, STARTUPINFO

    .如果真 (运行目录 ＝ “”)
        运行目录 ＝ 取文本左边 (程序路径, 倒找文本 (程序路径, “\”, , 假))
    .如果真结束
    DLL_CreateProcessA (取指针文本_ (程序路径), 命令行, 0, 0, 假, 0, 0, 取指针文本_ (运行目录), 变量_CBC30125, 进程结构)
    .如果真 (是否为空 (进程结构))
        CloseHandle (进程结构.进程句柄)
        CloseHandle (进程结构.线程句柄)
    .如果真结束
    返回 (进程结构.进程标识符)

.子程序 进程_创建W, 整数型, 公开, 创建一个新进程并返回进程ID
    .参数 程序路径, 字节集, , 欲创建进程的执行路径
    .参数 命令行, 字节集, 可空, 附加上程序路径后的命令行参数
    .参数 是否等待, 逻辑型, 可空, 是否等待程序运行完毕
    .参数 显示方式, 整数型, 可空, 1、隐藏窗口；2、普通激活；3、最小化激活；4、最大化激活；5、普通不激活；6、最小化不激活；7、新桌面中隐藏创建；默认为“普通激活”
    .参数 运行目录, 字节集, 可空
    .参数 以挂起的方式创建, 逻辑型, 可空, 以挂起的方式创建进程
    .参数 挂起后的线程句柄, 整数型, 参考 可空, 以挂起的方式创建为真时才接收挂起后的线程句柄，不用时需要释放。
    .参数 目标进程PID, 整数型, 可空, 同一任务组ID留空或为假时以指定进程的令牌创建进程
    .参数 同一任务组ID, 逻辑型, 可空, 指定创建的进程任务组ID与目标进程一致
    .参数 要注入的DLL文件名, 字节集, 可空, 以挂起的方式创建必须为真
    .局部变量 变量_1DEC0225, 整数型
    .局部变量 变量_0AEC0225, 字节集
    .局部变量 变量_37EC0225, 字节集
    .局部变量 变量_2EEC0225, 整数型
    .局部变量 变量_7FEC0225, 字节集
    .局部变量 变量_DEEB0225, STARTUPINFO
    .局部变量 变量_E2EB0225, 自定义_AAB50241
    .局部变量 变量_03050325, 整数型
    .局部变量 变量_22FE0225, 整数型
    .局部变量 变量_2AFE0225, 整数型
    .局部变量 变量_2EFE0225, 整数型
    .局部变量 变量_2FFE0225, 逻辑型
    .局部变量 变量_08050325, 整数型
    .局部变量 变量_43100325, 整数型
    .局部变量 变量_44100325, 整数型
    .局部变量 变量_45100325, 整数型
    .局部变量 变量_46100325, 整数型

    .如果真 (同一任务组ID)
        .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_VISTA)
            输出调试文本 (#<?未知本地类型?>)
            返回 (0)
        .如果真结束
        
    .如果真结束
    变量_1DEC0225 ＝ 取字节集长度 (命令行)
    变量_0AEC0225 ＝ 取空白字节集 (#MAX_PATH × 2)
    .如果真 (变量_1DEC0225 ＞ 0)
        memcpy (取指针_字节集型 (变量_0AEC0225), 取指针_字节集型 (命令行), 变量_1DEC0225)
    .如果真结束
    变量_DEEB0225.cb ＝ 68
    变量_DEEB0225.dwFlags ＝ #STARTF_USESHOWWINDOW
    .如果真 (显示方式 ＜ 1 或 显示方式 ＞ 7)
        显示方式 ＝ 2
    .如果真结束
    .如果 (显示方式 ＝ 7)
        变量_37EC0225 ＝ 编码_Ansi到Unicode (“Desktop”, )
        变量_2EEC0225 ＝ DLL_CreateDesktopW (变量_37EC0225, #NULL, #NULL, 0, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL)
        变量_DEEB0225.lpDesktop ＝ 取指针_字节集型 (变量_37EC0225)
        变量_DEEB0225.wShowWindow ＝ #SW_HIDE
    .否则
        变量_DEEB0225.wShowWindow ＝ 多项选择 (显示方式, #SW_HIDE, #SW_SHOWNORMAL, #SW_SHOWMINIMIZED, #SW_SHOWMAXIMIZED, #SW_SHOWNOACTIVATE, #<?未知本地类型?>)
    .如果结束
    .如果 (运行目录 ＝ { })
        变量_7FEC0225 ＝ 字节集_寻找取左 (程序路径, { 92, 0 }, -1) ＋ { 0, 0 }
    .否则
        变量_7FEC0225 ＝ 运行目录
    .如果结束
    .如果真 (以挂起的方式创建)
        变量_03050325 ＝ #<?未知本地类型?>
    .如果真结束
    .如果 (目标进程PID ≠ 0)
        RtlAdjustPrivilege (#SeDebugPrivilege, 1, 0, #NULL)
        变量_22FE0225 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 目标进程PID)
        .如果真 (变量_22FE0225 ≠ #NULL)
            .如果 (同一任务组ID)
                变量_1DEC0225 ＝ 0
                DLL_InitializeProcThreadAttributeList (#NULL, 1, 0, 变量_1DEC0225)
                变量_03050325 ＝ #<?未知本地类型?>
                变量_DEEB0225.cb ＝ 72
                变量_08050325 ＝ HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 变量_1DEC0225)
                .如果真 (变量_08050325 ≠ #NULL)
                    DLL_InitializeProcThreadAttributeList (变量_08050325, 1, 0, 变量_1DEC0225)
                    .如果真 (DLL_UpdateProcThreadAttribute (变量_08050325, 0, #<?未知本地类型?>, 取指针整数_ (变量_22FE0225), 4, #NULL, #NULL))
                        变量_DEEB0225.lpAttributeList ＝ 变量_08050325
                    .如果真结束
                    变量_2FFE0225 ＝ DLL_CreateProcessAsUserW (#NULL, 取指针_字节集型 (程序路径), 取指针_字节集型 (变量_0AEC0225), #NULL, #NULL, 假, 变量_03050325, #NULL, 取指针_字节集型 (变量_7FEC0225), 变量_DEEB0225, 变量_E2EB0225)
                    DLL_DeleteProcThreadAttributeList (变量_08050325)
                    DLL_HeapFree (GetProcessHeap (), 0, 变量_08050325)
                .如果真结束
                
            .否则
                .如果真 (OpenProcessToken (变量_22FE0225, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>), 变量_2AFE0225))
                    .如果真 (DLL_DuplicateTokenEx (变量_2AFE0225, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>), #NULL, #<?未知本地类型?>, #<?未知本地类型?>, 变量_2EFE0225))
                        变量_2FFE0225 ＝ DLL_CreateProcessWithTokenW (变量_2EFE0225, 0, 取指针_字节集型 (程序路径), 取指针_字节集型 (变量_0AEC0225), 变量_03050325, #NULL, 取指针_字节集型 (变量_7FEC0225), 变量_DEEB0225, 变量_E2EB0225)
                        CloseHandle (变量_2EFE0225)
                    .如果真结束
                    CloseHandle (变量_2AFE0225)
                .如果真结束
                
            .如果结束
            CloseHandle (变量_22FE0225)
        .如果真结束
        RtlAdjustPrivilege (#SeDebugPrivilege, 0, 0, #NULL)
    .否则
        变量_2FFE0225 ＝ DLL_CreateProcessW (取指针_字节集型 (程序路径), 取指针_字节集型 (变量_0AEC0225), #NULL, #NULL, 假, 变量_03050325, #NULL, 取指针_字节集型 (变量_7FEC0225), 变量_DEEB0225, 变量_E2EB0225)
    .如果结束
    .如果真 (变量_2FFE0225 ＝ 假)
        .如果真 (变量_2EEC0225 ≠ #NULL)
            DLL_CloseDesktop (变量_2EEC0225)
        .如果真结束
        返回 (0)
    .如果真结束
    .如果真 (以挂起的方式创建)
        .如果真 (文件_是否存在W (要注入的DLL文件名))
            变量_1DEC0225 ＝ 取字节集长度 (要注入的DLL文件名) ＋ 2
            变量_43100325 ＝ VirtualAllocEx (变量_E2EB0225.成员_ACB50235, #NULL, 变量_1DEC0225, #MEM_COMMIT, #PAGE_READWRITE)
            .如果真 (变量_43100325 ≠ #NULL)
                WriteProcessMemory_字节集 (变量_E2EB0225.成员_ACB50235, 变量_43100325, 要注入的DLL文件名 ＋ { 0, 0 }, 变量_1DEC0225, #NULL)
                变量_44100325 ＝ GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “LoadLibraryW”)
                变量_45100325 ＝ CreateRemoteThread (变量_E2EB0225.成员_ACB50235, #NULL, 0, 变量_44100325, 变量_43100325, 0, #NULL)
                .如果真 (变量_45100325 ≠ #NULL)
                    WaitForSingleObject (变量_45100325, #INFINITE)
                    GetExitCodeThread (变量_45100325, 变量_46100325)
                    CloseHandle (变量_45100325)
                .如果真结束
                VirtualFreeEx (变量_E2EB0225.成员_ACB50235, 变量_43100325, 0, #MEM_RELEASE)
            .如果真结束
            
        .如果真结束
        CloseHandle (变量_E2EB0225.成员_ACB50235)
        .如果真 (变量_2EEC0225 ≠ #NULL)
            DLL_CloseDesktop (变量_2EEC0225)
        .如果真结束
        挂起后的线程句柄 ＝ 变量_E2EB0225.成员_ABB50235
        返回 (变量_E2EB0225.成员_F3EB0235)
    .如果真结束
    CloseHandle (变量_E2EB0225.成员_ABB50235)
    .如果 (是否等待)
        WaitForSingleObject (变量_E2EB0225.成员_ACB50235, #INFINITE)
    .否则
        DLL_WaitForInputIdle (变量_E2EB0225.成员_ACB50235, 1000)
    .如果结束
    CloseHandle (变量_E2EB0225.成员_ACB50235)
    .如果真 (变量_2EEC0225 ≠ #NULL)
        DLL_CloseDesktop (变量_2EEC0225)
    .如果真结束
    返回 (变量_E2EB0225.成员_F3EB0235)

.子程序 进程_创建Ex, 整数型, 公开, 创建一个程序进程(成功返回进程ID,失败返回0)
    .参数 程序路径, 文本型, , 欲创建进程的执行路径
    .参数 命令行, 文本型, 可空, 附加上程序路径后的命令行参数
    .参数 是否等待, 逻辑型, 可空, 是否等待程序运行完毕,默认为假.
    .参数 显示方式, 整数型, 可空, 被运行程序窗口显示方式.参数值可以为以下常量之一:1 #隐藏窗口 2 #普通激活 3 #最小化激活 4 #最大化激活 5 #普通不激活 6 #最小化不激活.如果省略本参数,默认为“普通激活”方式.
    .参数 运行目录, 文本型, 可空, 通常留空,特殊情况下使用
    .参数 进程结构, 精易_进程结构, 参考 可空, 接收进程结构信息的变量,如果不为空，产品的句柄用CloseHandle函数释放
    .局部变量 变量_4F9C0225, STARTUPINFO

    .如果真 (运行目录 ＝ “”)
        运行目录 ＝ 取文本左边 (程序路径, 倒找文本 (程序路径, “\”, , 假))
    .如果真结束
    变量_4F9C0225.cb ＝ 68
    .判断开始 (显示方式 ＝ 1)
        变量_4F9C0225.dwFlags ＝ 1
        变量_4F9C0225.wShowWindow ＝ 0
    .判断 (显示方式 ＝ 3)
        变量_4F9C0225.dwFlags ＝ 1
        变量_4F9C0225.wShowWindow ＝ 2
    .判断 (显示方式 ＝ 4)
        变量_4F9C0225.dwFlags ＝ 1
        变量_4F9C0225.wShowWindow ＝ 3
    .判断 (显示方式 ＝ 5)
        变量_4F9C0225.dwFlags ＝ 1
        变量_4F9C0225.wShowWindow ＝ 4
    .判断 (显示方式 ＝ 6)
        变量_4F9C0225.dwFlags ＝ 1
        变量_4F9C0225.wShowWindow ＝ 6
    .默认
        变量_4F9C0225.dwFlags ＝ 0
        变量_4F9C0225.wShowWindow ＝ 1
    .判断结束
    DLL_CreateProcessA (取指针文本_ (程序路径), 命令行, 0, 0, 假, 0, 0, 取指针文本_ (运行目录), 变量_4F9C0225, 进程结构)
    .如果 (是否等待)
        WaitForSingleObject (进程结构.进程句柄, -1)
    .否则
        DLL_WaitForInputIdle (进程结构.进程句柄, 1000)
    .如果结束
    .如果真 (是否为空 (进程结构))
        CloseHandle (进程结构.进程句柄)
        CloseHandle (进程结构.线程句柄)
    .如果真结束
    返回 (进程结构.进程标识符)

.子程序 进程_名取句柄, 整数型, 公开, 通过进程名取对应的窗口句柄；成功返回窗口句柄，失败返回0，返回-1表示找不到进程。
    .参数 进程名, 文本型, , 要取窗口句柄的进程名；
    .局部变量 变量_FFE00125, 整数型
    .局部变量 变量_FEE00125, 整数型

    变量_FFE00125 ＝ 进程_名取ID (进程名)
    .如果真 (变量_FFE00125 ≠ 0)
        返回 (进程_ID取窗口句柄 (变量_FFE00125, , , 100, 真))
    .如果真结束
    返回 (-1)

.子程序 进程_取自进程ID, 整数型, 公开, 取自身的进程ID，成功返回进程ID；失败返回0
    返回 (GetCurrentProcessId ())

.子程序 进程_ID取进程名, 文本型, 公开, 通过进程ID取得该进程执行文件名，也就是进程名;
    .参数 参数_进程ID, 整数型, , 该进程的ID;
    .局部变量 变量_E3E30125, 整数型
    .局部变量 变量_E4E30125, 整数型
    .局部变量 变量_E5E30125, 精易_进程信息列表
    .局部变量 变量_E6E30125, 文本型

    变量_E3E30125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_E3E30125 ≠ #INVALID_HANDLE_VALUE)
        变量_E5E30125.dwSize ＝ 296
        变量_E4E30125 ＝ Process32Next (变量_E3E30125, 变量_E5E30125)
        .判断循环首 (变量_E4E30125 ≠ 0)
            .如果真 (变量_E5E30125.进程ID ＝ 参数_进程ID)
                变量_E6E30125 ＝ 到文本 (变量_E5E30125.进程名称)
                跳出循环 ()
            .如果真结束
            变量_E4E30125 ＝ Process32Next (变量_E3E30125, 变量_E5E30125)
        .判断循环尾 ()
        CloseHandle (变量_E3E30125)
    .如果真结束
    返回 (变量_E6E30125)

.子程序 进程_ID取窗口句柄, 整数型, 公开, 通过进程ID取得该进程的窗口句柄,超时则返回零;PS:返回的句柄不一定是祖句柄,只要满足条件就返回
    .参数 进程ID, 整数型, , 该进程的ID;
    .参数 窗口标题, 文本型, 可空, 模糊参数 如果为空,忽略此参数
    .参数 窗口类名, 文本型, 可空, 模糊参数 如果为空,忽略此参数
    .参数 超时, 整数型, 可空, 为空则无限循环
    .参数 是否可见, 逻辑型, 可空, 可空 默认为真,只查找可见的窗口;为假则查找包括不可见的窗口
    .局部变量 变量_CBED0225, 整数型
    .局部变量 变量_CCED0225, 整数型
    .局部变量 变量_CDED0225, 整数型
    .局部变量 变量_CEED0225, 整数型
    .局部变量 变量_CFED0225, 文本型
    .局部变量 变量_D0ED0225, 文本型

    .如果真 (是否为空 (是否可见))
        是否可见 ＝ 真
    .如果真结束
    变量_CBED0225 ＝ DLL_GetTickCount ()
    变量_CCED0225 ＝ 选择 (是否为空 (超时) 或 超时 ＜ 0, 31536000, 超时)
    .判断循环首 (DLL_GetTickCount () － 变量_CBED0225 ＜ 变量_CCED0225)
        变量_CDED0225 ＝ FindWindowExA (#NULL, 变量_CDED0225, #NULL, #NULL)
        .如果真 (变量_CDED0225 ＝ 0)
            跳出循环 ()
        .如果真结束
        .如果真 (是否可见)
            .如果真 (IsWindowVisible (变量_CDED0225) ＝ 假)
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        GetWindowThreadProcessId (变量_CDED0225, 变量_CEED0225)
        .如果真 (变量_CEED0225 ＝ 进程ID 且 GetParent (变量_CDED0225) ＝ 0)
            变量_CFED0225 ＝ 窗口_取类名 (变量_CDED0225)
            变量_D0ED0225 ＝ 窗口_取标题 (变量_CDED0225)
            .判断开始 (是否为空 (窗口标题) 且 是否为空 (窗口类名))
                返回 (变量_CDED0225)
            .判断 (是否为空 (窗口标题))
                .如果真 (寻找文本 (变量_CFED0225, 窗口类名, , 假) ≠ -1)
                    返回 (变量_CDED0225)
                .如果真结束
                
            .判断 (是否为空 (窗口类名))
                .如果真 (寻找文本 (变量_D0ED0225, 窗口标题, , 假) ≠ -1)
                    返回 (变量_CDED0225)
                .如果真结束
                
            .判断 (寻找文本 (变量_CFED0225, 窗口类名, , 假) ≠ -1 且 寻找文本 (变量_D0ED0225, 窗口标题, , 假) ≠ -1)
                返回 (变量_CDED0225)
            .默认
                
            .判断结束
            
        .如果真结束
        处理事件 ()
    .判断循环尾 ()
    返回 (0)

.子程序 EnumParenthwnd, 整数型, 公开, 进程_ID取窗口句柄
    .参数 dwPid, 整数型
    .参数 EnumParentProc, 整数型, , int EnumParentProc(HWND hWnd)
    .局部变量 变量_FDFA0225, 整数型
    .局部变量 变量_FEFA0225, 整数型

    .判断循环首 (真)
        变量_FDFA0225 ＝ FindWindowExA (#NULL, 变量_FDFA0225, #NULL, #NULL)
        .如果真 (变量_FDFA0225 ＝ #NULL)
            跳出循环 ()
        .如果真结束
        GetWindowThreadProcessId (变量_FDFA0225, 变量_FEFA0225)
        .如果真 (变量_FEFA0225 ＝ dwPid)
            .如果真 (程序_Call (EnumParentProc, 变量_FDFA0225, , , , ) ＝ 1)
                返回 (变量_FDFA0225)
            .如果真结束
            
        .如果真结束
        
    .判断循环尾 ()
    返回 (#NULL)

.子程序 进程_ID取窗口句柄EX, 整数型, 公开, 通过枚举窗口信息对比来获取指定进程ID的窗口句柄
    .参数 进程ID, 整数型
    .局部变量 变量_D85E0225, 精易_窗口信息, , "0"
    .局部变量 变量_D95E0225, 整数型

    清除数组 (变量_D85E0225)
    窗口_枚举 (变量_D85E0225)
    .计次循环首 (取数组成员数 (变量_D85E0225), 变量_D95E0225)
        .如果真 (变量_D85E0225 [变量_D95E0225].进程ID ＝ 进程ID)
            返回 (窗口_取祖句柄 (变量_D85E0225 [变量_D95E0225].窗口句柄))
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 进程_取线程数, 整数型, 公开, 通过进程ID或进程名获取指定进程线程数。
    .参数 进程ID或进程名, 文本型, , 不区分大小写
    .局部变量 变量_F0E30125, 整数型
    .局部变量 变量_F1E30125, 整数型
    .局部变量 变量_F2E30125, 精易_进程信息列表
    .局部变量 变量_F3E30125, 整数型

    变量_F0E30125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    变量_F2E30125.dwSize ＝ 296
    变量_F1E30125 ＝ Process32Next (变量_F0E30125, 变量_F2E30125)
    .判断循环首 (变量_F1E30125 ＝ 1)
        .判断开始 (到整数 (进程ID或进程名) ≠ 0)
            .如果真 (到整数 (进程ID或进程名) ＝ 变量_F2E30125.进程ID)
                变量_F3E30125 ＝ 变量_F2E30125.cntThreads
                跳出循环 ()
            .如果真结束
            
        .判断 (文本比较 (进程ID或进程名, 到文本 (变量_F2E30125.进程名称), 假) ＝ 0)
            变量_F3E30125 ＝ 变量_F2E30125.cntThreads
            跳出循环 ()
        .默认
            
        .判断结束
        变量_F1E30125 ＝ Process32Next (变量_F0E30125, 变量_F2E30125)
    .判断循环尾 ()
    CloseHandle (变量_F0E30125)
    返回 (变量_F3E30125)

.子程序 进程_ID取模块, 整数型, 公开, 失败为0，成功返回模块数量(该命令为高级成员命令)
    .参数 进程ID, 整数型, 可空, 为空 则取当前进程模块
    .参数 模块信息数组, 精易_模块信息, 参考 可空 数组, 返回的模块信息 数组
    .局部变量 变量_54230125, 整数型
    .局部变量 变量_55230125, 精易_模块信息
    .局部变量 变量_56230125, 整数型

    清除数组 (模块信息数组)
    变量_54230125 ＝ CreateToolhelp32Snapshot (8, 进程ID)
    .如果真 (变量_54230125 ＝ #INVALID_HANDLE_VALUE)
        返回 (0)
    .如果真结束
    变量_55230125.size ＝ 1024
    变量_56230125 ＝ Module32First (变量_54230125, 变量_55230125)
    .判断循环首 (变量_56230125 ≠ 0)
        加入成员 (模块信息数组, 变量_55230125)
        变量_56230125 ＝ Module32Next (变量_54230125, 变量_55230125)
    .判断循环尾 ()
    CloseHandle (变量_54230125)
    返回 (取数组成员数 (模块信息数组))

.子程序 进程_ID取模块句柄列表, 整数型, 公开, 检索指定进程中满足指定过滤条件的每个模块的句柄。
    .参数 进程ID, 整数型, 可空
    .参数 模块句柄列表, 整数型, 参考 可空 数组, 接收
    .局部变量 变量_67F30225, 整数型
    .局部变量 变量_76F30225, 整数型
    .局部变量 变量_7CF30225, 整数型
    .局部变量 变量_82F30225, 整数型

    清除数组 (模块句柄列表)
    .如果 (进程ID ＝ 0)
        变量_67F30225 ＝ GetCurrentProcess ()
    .否则
        变量_67F30225 ＝ OpenProcess (位或 (#PROCESS_QUERY_INFORMATION, #PROCESS_VM_READ), 0, 进程ID)
    .如果结束
    .如果真 (变量_67F30225 ＝ #NULL)
        返回 (0)
    .如果真结束
    DLL_EnumProcessModulesEx (变量_67F30225, #NULL, 0, 变量_76F30225, #<?未知本地类型?>)
    .如果真 (变量_76F30225 ＝ 0)
        CloseHandle (变量_67F30225)
        返回 (0)
    .如果真结束
    变量_7CF30225 ＝ 变量_76F30225 ÷ 4
    重定义数组 (模块句柄列表, 假, 变量_7CF30225)
    变量_82F30225 ＝ 取数据_通用型_数组 (模块句柄列表)
    .如果真 (DLL_EnumProcessModulesEx (变量_67F30225, 变量_82F30225, 变量_76F30225, #NULL, #<?未知本地类型?>) ＝ 假)
        CloseHandle (变量_67F30225)
        清除数组 (模块句柄列表)
        返回 (0)
    .如果真结束
    CloseHandle (变量_67F30225)
    删除成员 (模块句柄列表, 1, )
    变量_7CF30225 ＝ 取数组成员数 (模块句柄列表)
    返回 (变量_7CF30225)

.子程序 进程_是否存在, 逻辑型, 公开, 判断指定进程是否存在(此判断与进程其它信息无关联)(存在返回真，不存在或失败返回假)
    .参数 进程名, 文本型, , 欲检测的进程名
    .参数 是否区分大小写, 逻辑型, 可空, 默认为不区分,真=区分
    .局部变量 变量_65880125, 精易_进程信息列表
    .局部变量 变量_66880125, 整数型
    .局部变量 变量_67880125, 整数型

    变量_66880125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_66880125 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    变量_65880125.dwSize ＝ 296
    变量_67880125 ＝ Process32First (变量_66880125, 变量_65880125)
    .判断循环首 (变量_67880125 ≠ 0)
        .如果真 (文本比较 (进程名, 到文本 (变量_65880125.进程名称), 是否区分大小写) ＝ 0)
            CloseHandle (变量_66880125)
            返回 (真)
        .如果真结束
        变量_67880125 ＝ Process32Next (变量_66880125, 变量_65880125)
    .判断循环尾 ()
    CloseHandle (变量_66880125)
    返回 (假)

.子程序 进程_提升权限, 逻辑型, 公开, 提升进程到指定权限( #备份  #启动  #关机  #调试)
    .参数 目标进程ID, 整数型, 可空, 为空表示当前进程ID
    .参数 权限类别, 文本型, 可空, 为空:#调试( #备份  #启动  #关机  #调试)
    .局部变量 变量_5FEB0225, 整数型
    .局部变量 变量_63EB0225, 整数型
    .局部变量 变量_75EB0225, 自定义_D2230141
    .局部变量 变量_7BEB0225, 自定义_D6230141
    .局部变量 变量_67EB0225, 逻辑型

    .如果 (目标进程ID ＝ 0)
        变量_5FEB0225 ＝ GetCurrentProcess ()
    .否则
        变量_5FEB0225 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 目标进程ID)
    .如果结束
    .如果真 (变量_5FEB0225 ＝ 0)
        返回 (假)
    .如果真结束
    .如果真 (OpenProcessToken (变量_5FEB0225, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), 变量_63EB0225))
        .如果 (是否为空 (权限类别))
            DLL_LookupPrivilegeValueA (#NULL, #调试, 变量_75EB0225)
        .否则
            DLL_LookupPrivilegeValueA (#NULL, 权限类别, 变量_75EB0225)
        .如果结束
        变量_7BEB0225.成员_D7230135 ＝ 1
        变量_7BEB0225.成员_8BEB0235 ＝ 变量_75EB0225.成员_D3230135
        变量_7BEB0225.成员_8CEB0235 ＝ 变量_75EB0225.成员_D4230135
        变量_7BEB0225.成员_DA230135 ＝ #<?未知本地类型?>
        
        变量_67EB0225 ＝ DLL_AdjustTokenPrivileges (变量_63EB0225, 假, 变量_7BEB0225, 16, #NULL, #NULL)
        CloseHandle (变量_63EB0225)
    .如果真结束
    CloseHandle (变量_5FEB0225)
    返回 (变量_67EB0225)

.子程序 进程_取模块句柄, 整数型, 公开, 获取指定模块名的句柄
    .参数 模块名, 文本型, 可空

    返回 (GetModuleHandleA (模块名))

.子程序 进程_取模块句柄1, 长整数型, 公开, 获取指定进程模块名的句柄
    .参数 pid, 整数型
    .参数 模块名称, 文本型
    .局部变量 变量_10020325, 进程_模块信息, , "0"
    .局部变量 变量_16020325, 整数型
    .局部变量 变量_17020325, 整数型

    变量_16020325 ＝ 进程_枚举进程模块 (pid, 变量_10020325)
    .计次循环首 (变量_16020325, 变量_17020325)
        .如果真 (文本比较 (模块名称, 变量_10020325 [变量_17020325].模块文件名, 假) ＝ 0)
            返回 (变量_10020325 [变量_17020325].模块句柄)
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 进程_取启动参数, 文本型, 公开, 取当前进程的命令行
    返回 (GetCommandLineA ())

.子程序 进程_提升权限到Debug, 逻辑型, 公开, 成功返回真，把一个进程的权限提升到调试级权限
    .参数 进程ID, 整数型, 可空, 可空为提升当前进程

    返回 (进程_提升权限 (进程ID, #调试))

.子程序 进程_取优先级, 整数型, 公开, 特殊进程需要特权，检索指定的进程的优先级。返回值：0=最高,1=高于标准,2=实时,3=标准,4=低于标准,5=低,返回-1表示无权限访问进程。
    .参数 进程ID, 整数型, 可空, 欲设置的进程标识符,可为空，即自身进程。
    .局部变量 变量_D4DC0125, 整数型
    .局部变量 变量_D5DC0125, 整数型
    .局部变量 变量_D6DC0125, 整数型

    变量_D4DC0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (1024, 0, 进程ID))
    .如果真 (变量_D4DC0125 ＝ 0)
        返回 (-1)
    .如果真结束
    变量_D5DC0125 ＝ DLL_GetPriorityClass (变量_D4DC0125)
    .判断开始 (变量_D5DC0125 ＝ 256)
        变量_D6DC0125 ＝ 2
    .判断 (变量_D5DC0125 ＝ 128)
        变量_D6DC0125 ＝ 0
    .判断 (变量_D5DC0125 ＝ 32768)
        变量_D6DC0125 ＝ 1
    .判断 (变量_D5DC0125 ＝ 32)
        变量_D6DC0125 ＝ 3
    .判断 (变量_D5DC0125 ＝ 16384)
        变量_D6DC0125 ＝ 4
    .判断 (变量_D5DC0125 ＝ 64)
        变量_D6DC0125 ＝ 5
    .默认
        变量_D6DC0125 ＝ 0
    .判断结束
    CloseHandle (变量_D4DC0125)
    返回 (变量_D6DC0125)

.子程序 进程_置优先级, 逻辑型, 公开, 特殊进程需要特权，设置一个进程的优先级别,成功返回真，失败返回假。
    .参数 进程ID, 整数型, 可空, 欲设置的进程标识符,可为空，即自身进程。
    .参数 进程级别, 整数型, 可空, 可为空，默认即0最高。0=最高,1=高于标准,2=实时,3=标准,4=低于标准,5=低
    .局部变量 变量_D9DC0125, 整数型
    .局部变量 变量_DADC0125, 逻辑型

    .如果真 (进程级别 ＝ 0)
        进程级别 ＝ 128
    .如果真结束
    .如果真 (进程级别 ＝ 1)
        进程级别 ＝ 32768
    .如果真结束
    .如果真 (进程级别 ＝ 2)
        进程级别 ＝ 256
    .如果真结束
    .如果真 (进程级别 ＝ 3)
        进程级别 ＝ 32
    .如果真结束
    .如果真 (进程级别 ＝ 4)
        进程级别 ＝ 16384
    .如果真结束
    .如果真 (进程级别 ＝ 5)
        进程级别 ＝ 64
    .如果真结束
    .如果真 (是否为空 (进程级别) 或 进程级别 ＝ 0)
        进程级别 ＝ 128
    .如果真结束
    变量_D9DC0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (512, 0, 进程ID))
    .如果真 (变量_D9DC0125 ＝ 0)
        返回 (假)
    .如果真结束
    变量_DADC0125 ＝ DLL_SetPriorityClass (变量_D9DC0125, 进程级别)
    CloseHandle (变量_D9DC0125)
    返回 (变量_DADC0125)

.子程序 进程_取句柄数, 整数型, 公开, 特殊进程需要特权，获取指定进程句柄数量,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_26DD0125, 整数型
    .局部变量 变量_2FDD0125, 整数型

    变量_26DD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_2FDD0125 ＝ 选择 (DLL_GetProcessHandleCount (变量_26DD0125, 变量_2FDD0125), 变量_2FDD0125, -1)
    CloseHandle (变量_26DD0125)
    返回 (变量_2FDD0125)

.子程序 进程_取IO读取计数, 长整数型, 公开, 特殊进程需要特权，获取指定进程IO读取计数,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_32DD0125, 整数型
    .局部变量 变量_3ADD0125, 自定义_3BDD0141
    .局部变量 变量_43DD0125, 长整数型

    变量_32DD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_43DD0125 ＝ 选择 (DLL_GetProcessIoCounters (变量_32DD0125, 变量_3ADD0125), 变量_3ADD0125.成员_3CDD0135, -1)
    CloseHandle (变量_32DD0125)
    返回 (变量_43DD0125)

.子程序 进程_取IO读取字节, 长整数型, 公开, 特殊进程需要特权，获取指定进程IO读取字节数,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_4DDD0125, 整数型
    .局部变量 变量_4EDD0125, 自定义_3BDD0141
    .局部变量 变量_4FDD0125, 长整数型

    变量_4DDD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_4FDD0125 ＝ 选择 (DLL_GetProcessIoCounters (变量_4DDD0125, 变量_4EDD0125), 变量_4EDD0125.成员_3FDD0135, -1)
    CloseHandle (变量_4DDD0125)
    返回 (变量_4FDD0125)

.子程序 进程_取IO其它计数, 长整数型, 公开, 特殊进程需要特权，获取指定进程IO其它计数,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_5ADD0125, 整数型
    .局部变量 变量_5BDD0125, 自定义_3BDD0141
    .局部变量 变量_5CDD0125, 长整数型

    变量_5ADD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_5CDD0125 ＝ 选择 (DLL_GetProcessIoCounters (变量_5ADD0125, 变量_5BDD0125), 变量_5BDD0125.成员_3EDD0135, -1)
    CloseHandle (变量_5ADD0125)
    返回 (变量_5CDD0125)

.子程序 进程_取IO其它字节, 长整数型, 公开, 特殊进程需要特权，获取指定进程IO其它字节,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_69DD0125, 整数型
    .局部变量 变量_6ADD0125, 自定义_3BDD0141
    .局部变量 变量_6BDD0125, 长整数型

    变量_69DD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_6BDD0125 ＝ 选择 (DLL_GetProcessIoCounters (变量_69DD0125, 变量_6ADD0125), 变量_6ADD0125.成员_41DD0135, -1)
    CloseHandle (变量_69DD0125)
    返回 (变量_6BDD0125)

.子程序 进程_取IO写入计数, 长整数型, 公开, 特殊进程需要特权，获取指定进程IO写入计数,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_76DD0125, 整数型
    .局部变量 变量_77DD0125, 自定义_3BDD0141
    .局部变量 变量_78DD0125, 长整数型

    变量_76DD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_78DD0125 ＝ 选择 (DLL_GetProcessIoCounters (变量_76DD0125, 变量_77DD0125), 变量_77DD0125.成员_3DDD0135, -1)
    CloseHandle (变量_76DD0125)
    返回 (变量_78DD0125)

.子程序 进程_取IO写入字节, 长整数型, 公开, 特殊进程需要特权，获取指定进程IO写入字节,与XP系统任务管理器功能一样，失败返回-1。
    .参数 进程ID, 整数型, 可空, 可为空，默认即当前进程。
    .局部变量 变量_83DD0125, 整数型
    .局部变量 变量_84DD0125, 自定义_3BDD0141
    .局部变量 变量_85DD0125, 长整数型

    变量_83DD0125 ＝ 选择 (是否为空 (进程ID), GetCurrentProcess (), OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
    变量_85DD0125 ＝ 选择 (DLL_GetProcessIoCounters (变量_83DD0125, 变量_84DD0125), 变量_84DD0125.成员_40DD0135, -1)
    CloseHandle (变量_83DD0125)
    返回 (变量_85DD0125)

.子程序 进程_取父ID, 整数型, 公开, 根据进程名或进程ID取出进程父ID，失败返回-1。
    .参数 参_ID或名称, 文本型, , 进程PID或进程名称
    .局部变量 变量_6AEE0125, 整数型
    .局部变量 变量_6BEE0125, SYSTEM_PROCESS_INFORMATION
    .局部变量 变量_6CEE0125, 整数型
    .局部变量 变量_6DEE0125, 整数型
    .局部变量 变量_6EEE0125, 整数型
    .局部变量 变量_6FEE0125, 文本型

    ZwQuerySystemInformation (#SystemProcessInformation, 0, 0, 变量_6DEE0125)
    变量_6CEE0125 ＝ GlobalAlloc (64, 变量_6DEE0125)
    变量_6AEE0125 ＝ ZwQuerySystemInformation (#SystemProcessInformation, 变量_6CEE0125, 变量_6DEE0125, 变量_6DEE0125)
    .如果真 (变量_6AEE0125 ＝ 0)
        变量_6EEE0125 ＝ 变量_6CEE0125
        DLL_RtlMoveMemory31 (变量_6BEE0125, 变量_6CEE0125, 184)
        .判断循环首 (变量_6BEE0125.NextEntryDelta ≠ 0)
            变量_6EEE0125 ＝ 变量_6EEE0125 ＋ 变量_6BEE0125.NextEntryDelta
            DLL_RtlMoveMemory31 (变量_6BEE0125, 变量_6EEE0125, 184)
            变量_6FEE0125 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_6BEE0125.ImageName.成员_44EE0135, 变量_6BEE0125.ImageName.成员_42EE0135))
            .如果真 (文本比较 (变量_6FEE0125, 参_ID或名称, 假) ＝ 0 或 到整数 (参_ID或名称) ＝ 变量_6BEE0125.ProcessId)
                GlobalFree (变量_6CEE0125)
                返回 (变量_6BEE0125.InheritedFromProcessId)
            .如果真结束
            处理事件 ()
        .判断循环尾 ()
    .如果真结束
    GlobalFree (变量_6CEE0125)
    返回 (-1)

.子程序 进程_守护, 逻辑型, 公开, 前台版会在运行目录下生成AutoRunApp.vbs隐藏文件，后台版会在运行目录下生成AutoRunApp.bat隐藏文件，注意：后台版需手动结束wscript.exe进程
    .参数 程序路径, 文本型, , 目标程序的完整路径
    .参数 后台守护, 逻辑型, 可空, 为假则以控制台前台显示

    返回 (进程_守护W (编码_Ansi到Unicode (程序路径, ), 后台守护))

.子程序 进程_守护W, 逻辑型, 公开, 前台版会在运行目录下生成AutoRunApp.vbs隐藏文件，后台版会在运行目录下生成AutoRunApp.bat隐藏文件，注意：后台版需手动结束wscript.exe进程
    .参数 程序路径, 字节集, , 目标程序的完整路径
    .参数 后台守护, 逻辑型, 可空, 为假则以控制台前台显示
    .局部变量 变量_E4E90225, 字节集
    .局部变量 变量_FDE90225, 字节集
    .局部变量 变量_05EA0225, 字节集
    .局部变量 变量_01EA0225, 整数型
    .局部变量 变量_4DEA0225, 整数型

    变量_E4E90225 ＝ 编码_Ansi到Unicode (“AutoRunApp”, )
    .如果真 (DLL_OpenEventW (#<?未知本地类型?>, 假, 变量_E4E90225) ≠ #NULL)
        返回 (假)
    .如果真结束
    DLL_CreateEventW (#NULL, 假, 假, 变量_E4E90225)
    .如果真 (_GetLastError () ＝ #<?未知本地类型?>)
        输出调试文本 (“当文件已存在时，无法创建该文件！”)
        返回 (假)
    .如果真结束
    变量_05EA0225 ＝ 编码_Ansi到Unicode (选择 (后台守护, #AuAppVBs, #AuAppBat), 真)
    变量_FDE90225 ＝ 删除Unicode结尾空白字节 (文件_到短文件名W (程序路径), )
    变量_FDE90225 ＝ 子字节集替换 (变量_FDE90225, { 92, 0 }, { 92, 0, 92, 0 }, , )
    变量_05EA0225 ＝ 子字节集替换 (变量_05EA0225, 编码_Ansi到Unicode (“程序路径”, 真), 变量_FDE90225, , )
    变量_05EA0225 ＝ 子字节集替换 (变量_05EA0225, 编码_Ansi到Unicode (“程序名”, 真), 字节集_寻找取右 (删除Unicode结尾空白字节 (程序路径, ), { 92, 0 }, -1), , )
    变量_FDE90225 ＝ 删除Unicode结尾空白字节 (目录_取运行目录W ()) ＋ 编码_Ansi到Unicode (选择 (后台守护, “\AutoRunApp.vbs”, “\AutoRunApp.bat”), )
    变量_4DEA0225 ＝ DLL_CreateFileW (变量_FDE90225, #GENERIC_WRITE, 位或 (#FILE_SHARE_READ, #FILE_SHARE_WRITE, #<?未知本地类型?>), #NULL, #<?未知本地类型?>, #FILE_ATTRIBUTE_HIDDEN, #NULL)
    .如果真 (变量_4DEA0225 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    .如果 (后台守护)
        WriteFile (变量_4DEA0225, { 255, 254 }, 2, #NULL, #NULL)
    .否则
        变量_05EA0225 ＝ W2A_CP (变量_05EA0225, m_CodePage)
    .如果结束
    WriteFile (变量_4DEA0225, 变量_05EA0225, 取字节集长度 (变量_05EA0225), #NULL, #NULL)
    CloseHandle (变量_4DEA0225)
    变量_01EA0225 ＝ DLL_ShellExecuteW (#NULL, 编码_Ansi到Unicode (“Open”, ), 变量_FDE90225, { 0, 0 }, { 0, 0 }, #<?未知本地类型?>)
    返回 (变量_01EA0225 ≥ 32)

.子程序 进程_终止进程, 逻辑型, 公开, 一个或多个任务进程结束
    .参数 进程名, 文本型
    .参数 完整路径, 文本型, 可空, 只终止指定路径的进程

    返回 (进程_终止进程W (编码_Ansi到Unicode (进程名, ), 编码_Ansi到Unicode (完整路径, )))

.子程序 进程_终止进程W, 逻辑型, 公开, 一个或多个任务进程结束
    .参数 进程名, 字节集, , 进程名->Unicode
    .参数 完整路径, 字节集, 可空, 只终止指定路径的进程
    .局部变量 变量_87E20225, 整数型
    .局部变量 变量_88E20225, 自定义_74E20241
    .局部变量 变量_89E20225, 逻辑型
    .局部变量 变量_8AE20225, 整数型
    .局部变量 变量_8BE20225, 整数型
    .局部变量 变量_8CE20225, 字节集

    变量_8BE20225 ＝ 取字节集长度 (进程名)
    变量_87E20225 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_87E20225 ＝ #INVALID_HANDLE_VALUE)
        返回 (假)
    .如果真结束
    变量_88E20225.成员_77E20235 ＝ 556
    变量_89E20225 ＝ DLL_Process32FirstW (变量_87E20225, 变量_88E20225)
    .判断循环首 (变量_89E20225)
        变量_8CE20225 ＝ 到字节集 (变量_88E20225.成员_80E20235)
        变量_8CE20225 ＝ 取字节集左边 (变量_8CE20225, 变量_8BE20225)
        .如果真 (变量_8CE20225 ＝ 进程名)
            Sleep (1)
            .如果真 (是否为空 (完整路径) ＝ 假 且 取字节集长度 (完整路径) ＞ 3)
                .如果真 (进程_取路径W (变量_88E20225.成员_79E20235) ≠ 完整路径)
                    变量_89E20225 ＝ DLL_Process32NextW (变量_87E20225, 变量_88E20225)
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            变量_8AE20225 ＝ OpenProcess (#<?未知本地类型?>, 0, 变量_88E20225.成员_79E20235)
            TerminateProcess (变量_8AE20225, 0)
            CloseHandle (变量_8AE20225)
        .如果真结束
        变量_89E20225 ＝ DLL_Process32NextW (变量_87E20225, 变量_88E20225)
    .判断循环尾 ()
    CloseHandle (变量_87E20225)
    返回 (真)

.子程序 进程_端口取PID, 整数型, 公开, 通过本地端口取出进程PID
    .参数 端口号, 整数型
    .局部变量 变量_EFEA0225, 整数型
    .局部变量 变量_F3EA0225, 整数型
    .局部变量 变量_F7EA0225, 整数型
    .局部变量 变量_FBEA0225, 自定义_D8D40241
    .局部变量 变量_24EB0225, 自定义_22D50241
    .局部变量 变量_04EB0225, 整数型
    .局部变量 变量_03EB0225, 整数型

    
    DLL_GetExtendedTcpTable (#NULL, 变量_EFEA0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_EFEA0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_F3EA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_EFEA0225)
    变量_04EB0225 ＝ DLL_GetExtendedTcpTable (变量_F3EA0225, 变量_EFEA0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_04EB0225 ＝ #<?未知本地类型?>)
        变量_F7EA0225 ＝ __get (变量_F3EA0225, 0)
        .计次循环首 (变量_F7EA0225, 变量_03EB0225)
            memcpy (取数据_通用型 (变量_FBEA0225), 变量_F3EA0225 ＋ 4 ＋ (变量_03EB0225 － 1) × 24, 24)
            .如果真 (端口号 ＝ 整数到端口 (变量_FBEA0225.成员_E1D40235))
                LocalFree (变量_F3EA0225)
                返回 (变量_FBEA0225.成员_E4D40235)
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    LocalFree (变量_F3EA0225)
    
    变量_EFEA0225 ＝ 0
    DLL_GetExtendedUdpTable (#NULL, 变量_EFEA0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_EFEA0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_F3EA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_EFEA0225)
    变量_04EB0225 ＝ DLL_GetExtendedUdpTable (变量_F3EA0225, 变量_EFEA0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_04EB0225 ＝ #<?未知本地类型?>)
        变量_F7EA0225 ＝ __get (变量_F3EA0225, 0)
        .计次循环首 (变量_F7EA0225, 变量_03EB0225)
            memcpy (取数据_通用型 (变量_24EB0225), 变量_F3EA0225 ＋ 4 ＋ (变量_03EB0225 － 1) × 12, 12)
            .如果真 (端口号 ＝ 整数到端口 (变量_24EB0225.成员_26D50235))
                LocalFree (变量_F3EA0225)
                返回 (变量_24EB0225.成员_27D50235)
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    LocalFree (变量_F3EA0225)
    返回 (0)

.子程序 进程_PID取端口, 整数型, 公开, 通过进程PID取出本地端口
    .参数 PID, 整数型, , 进程ID
    .局部变量 变量_3DEB0225, 整数型
    .局部变量 变量_3EEB0225, 整数型
    .局部变量 变量_3FEB0225, 整数型
    .局部变量 变量_40EB0225, 自定义_D8D40241
    .局部变量 变量_41EB0225, 自定义_22D50241
    .局部变量 变量_42EB0225, 整数型
    .局部变量 变量_43EB0225, 整数型

    
    DLL_GetExtendedTcpTable (#NULL, 变量_3DEB0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_3DEB0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_3EEB0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_3DEB0225)
    变量_42EB0225 ＝ DLL_GetExtendedTcpTable (变量_3EEB0225, 变量_3DEB0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_42EB0225 ＝ #<?未知本地类型?>)
        变量_3FEB0225 ＝ __get (变量_3EEB0225, 0)
        .计次循环首 (变量_3FEB0225, 变量_43EB0225)
            memcpy (取数据_通用型 (变量_40EB0225), 变量_3EEB0225 ＋ 4 ＋ (变量_43EB0225 － 1) × 24, 24)
            .如果真 (PID ＝ 变量_40EB0225.成员_E4D40235)
                LocalFree (变量_3EEB0225)
                返回 (整数到端口 (变量_40EB0225.成员_E1D40235))
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    LocalFree (变量_3EEB0225)
    
    变量_3DEB0225 ＝ 0
    DLL_GetExtendedUdpTable (#NULL, 变量_3DEB0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_3DEB0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_3EEB0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_3DEB0225)
    变量_42EB0225 ＝ DLL_GetExtendedUdpTable (变量_3EEB0225, 变量_3DEB0225, 真, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_42EB0225 ＝ #<?未知本地类型?>)
        变量_3FEB0225 ＝ __get (变量_3EEB0225, 0)
        .计次循环首 (变量_3FEB0225, 变量_43EB0225)
            memcpy (取数据_通用型 (变量_41EB0225), 变量_3EEB0225 ＋ 4 ＋ (变量_43EB0225 － 1) × 12, 12)
            .如果真 (PID ＝ 变量_41EB0225.成员_27D50235)
                LocalFree (变量_3EEB0225)
                返回 (整数到端口 (变量_41EB0225.成员_26D50235))
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    LocalFree (变量_3EEB0225)
    返回 (0)

.子程序 整数到端口, 整数型
    .参数 变量_D9D50225, 整数型

    返回 (位或 (右移 (位与 (变量_D9D50225, 65280), 8), 左移 (位与 (变量_D9D50225, 255), 8)))

.子程序 进程_取进程启动时间, 文本型, 公开, 返回进程启动时间，如：20200813145000
    .参数 进程ID, 整数型, 可空, PID
    .局部变量 变量_0DE20225, 整数型
    .局部变量 变量_0EE20225, FILETIME
    .局部变量 变量_0FE20225, FILETIME
    .局部变量 变量_10E20225, FILETIME
    .局部变量 变量_11E20225, FILETIME
    .局部变量 变量_51E60225, 日期时间型

    .如果 (进程ID ＝ 0)
        变量_0DE20225 ＝ GetCurrentProcess ()
    .否则
        变量_0DE20225 ＝ OpenProcess (#PROCESS_QUERY_LIMITED_INFORMATION, 0, 进程ID)
    .如果结束
    DLL_GetProcessTimes (变量_0DE20225, 变量_0EE20225, 变量_0FE20225, 变量_10E20225, 变量_11E20225)
    CloseHandle (变量_0DE20225)
    变量_51E60225 ＝ FileTimeToVariantTime (变量_0EE20225)
    返回 (时间_格式化 (变量_51E60225, “yyyyMMdd”, “hhmmss”, 真))

.子程序 进程_DEP保护, 逻辑型, 公开, 数据执行保护开关; 成功返回真, 失败返回假
    .参数 dwFlags, 整数型, 可空, 如果DEP系统策略为OptIn或OptOut并且为该进程启用了DEP, 则将dwFlags设置为0将禁用该进程的DEP

    .如果真 (DLL_GetSystemDEPPolicy () ＜ 2)
        返回 (假)
    .如果真结束
    返回 (DLL_SetProcessDEPPolicy (dwFlags))

.子程序 进程_是否为64位, 逻辑型, 公开, 判断指定进程是否为64位
    .参数 进程ID, 整数型
    .局部变量 变量_FBE40225, 整数型
    .局部变量 变量_FDE40225, 逻辑型
    .局部变量 变量_02E50225, 逻辑型

    变量_FBE40225 ＝ OpenProcess (#PROCESS_QUERY_INFORMATION, 0, 进程ID)
    .如果真 (变量_FBE40225 ≠ 0)
        .如果真 (IsWow64Process (变量_FBE40225, 变量_FDE40225) 且 变量_FDE40225 ＝ 假)
            变量_02E50225 ＝ 真
        .如果真结束
        CloseHandle (变量_FBE40225)
    .如果真结束
    返回 (变量_02E50225)

.子程序 进程_取子进程IDW, 整数型, 公开, 取指定进程ID为父进程的子进程ID
    .参数 进程ID, 整数型
    .参数 子进程名, 字节集
    .局部变量 变量_9DE60225, 整数型
    .局部变量 变量_9EE60225, 自定义_74E20241
    .局部变量 变量_9FE60225, 逻辑型
    .局部变量 变量_A0E60225, 整数型
    .局部变量 变量_A1E60225, PROCESS_BASIC_INFORMATION
    .局部变量 变量_A2E60225, 整数型

    变量_9DE60225 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 0)
    .如果真 (变量_9DE60225 ＝ #INVALID_HANDLE_VALUE)
        返回 (#INVALID_HANDLE_VALUE)
    .如果真结束
    变量_9EE60225.成员_77E20235 ＝ 556
    变量_9FE60225 ＝ DLL_Process32FirstW (变量_9DE60225, 变量_9EE60225)
    .判断循环首 (变量_9FE60225)
        .如果真 (文本_文本比较W (取数据_通用型_数组 (变量_9EE60225.成员_80E20235), 取指针_字节集型 (子进程名), ) ＝ 0)
            变量_A0E60225 ＝ OpenProcess (#PROCESS_QUERY_INFORMATION, 0, 变量_9EE60225.成员_79E20235)
            变量_9FE60225 ＝ DLL_NtQueryInformationProcess (变量_A0E60225, #NULL, 取数据_通用型 (变量_A1E60225), 24, #NULL) ≥ 0
            .如果真 (变量_9FE60225)
                .如果真 (变量_A1E60225.InheritedFromUniqueProcessId ＝ 进程ID)
                    变量_A2E60225 ＝ 变量_9EE60225.成员_79E20235
                    跳出循环 ()
                .如果真结束
                
            .如果真结束
            CloseHandle (变量_A0E60225)
        .如果真结束
        变量_9FE60225 ＝ DLL_Process32NextW (变量_9DE60225, 变量_9EE60225)
    .判断循环尾 ()
    CloseHandle (变量_9DE60225)
    返回 (变量_A2E60225)

.子程序 进程_取子进程ID, 整数型, 公开, 取指定进程ID为父进程的子进程ID
    .参数 进程ID, 整数型
    .参数 子进程名, 文本型

    返回 (进程_取子进程IDW (进程ID, 编码_Ansi到Unicode (子进程名, )))

.子程序 进程_取远程会话ID, 整数型, 公开, 检索与指定进程关联的远程桌面服务会话
    .参数 进程ID, 整数型
    .局部变量 变量_7FED0225, 整数型

    DLL_ProcessIdToSessionId (进程ID, 变量_7FED0225)
    返回 (变量_7FED0225)

.子程序 进程_DLL取自身信息, 进程_模块信息, 公开, 编译成DLL后被其他程序加载时用于查看自身模块信息
    .局部变量 变量_86F10225, 整数型
    .局部变量 变量_C6F10225, 整数型
    .局部变量 变量_CCF10225, 文本型
    .局部变量 变量_93F10225, 整数型
    .局部变量 变量_9DF10225, 文本型
    .局部变量 变量_A7F10225, 进程_模块信息

    DLL_GetModuleHandleExA (位或 (#<?未知本地类型?>, #<?未知本地类型?>), 变量_86F10225, 变量_86F10225)
    .如果真 (变量_86F10225 ≠ #NULL)
        变量_C6F10225 ＝ GetCurrentProcess ()
        变量_CCF10225 ＝ 取空白文本 (#MAX_PATH)
        变量_93F10225 ＝ DLL_GetModuleBaseNameA (变量_C6F10225, 变量_86F10225, 变量_CCF10225, #MAX_PATH)
        .如果真 (变量_93F10225 ＞ 0)
            变量_A7F10225.模块文件名 ＝ 变量_CCF10225
        .如果真结束
        变量_9DF10225 ＝ 取空白文本 (#MAX_PATH)
        变量_93F10225 ＝ DLL_GetModuleFileNameA (变量_86F10225, 变量_9DF10225, #MAX_PATH)
        .如果真 (变量_93F10225 ＞ 0)
            变量_A7F10225.模块完整路径 ＝ 变量_9DF10225
        .如果真结束
        变量_A7F10225.模块句柄 ＝ 变量_86F10225
    .如果真结束
    返回 (变量_A7F10225)

.子程序 进程_DLL取自身信息1, 进程_模块信息, 公开, 编译成DLL后被其他程序加载时用于查看自身模块信息
    .参数 模块名, 文本型, 可空
    .局部变量 变量_7AF20225, 整数型
    .局部变量 变量_82F20225, 整数型
    .局部变量 变量_78F20225, 自定义_825E0241
    .局部变量 变量_93F20225, 进程_模块信息
    .局部变量 变量_9BF20225, 文本型
    .局部变量 变量_B2F20225, 文本型
    .局部变量 变量_9FF20225, 整数型

    变量_7AF20225 ＝ GetCurrentProcess ()
    .如果 (是否为空 (模块名))
        变量_82F20225 ＝ GetModuleHandleA1 (#NULL)
    .否则
        变量_82F20225 ＝ GetModuleHandleA (模块名)
    .如果结束
    .如果真 (变量_82F20225 ＝ #NULL)
        返回 (变量_93F20225)
    .如果真结束
    .如果真 (DLL_VirtualQueryEx (变量_7AF20225, 变量_82F20225, 变量_78F20225, 28) ＝ 0)
        返回 (变量_93F20225)
    .如果真结束
    变量_9BF20225 ＝ 取空白文本 (#MAX_PATH)
    变量_9FF20225 ＝ DLL_GetModuleBaseNameA (变量_7AF20225, 变量_78F20225.成员_8A5E0235, 变量_9BF20225, #MAX_PATH)
    .如果真 (变量_9FF20225 ＞ 0)
        变量_93F20225.模块文件名 ＝ 变量_9BF20225
    .如果真结束
    变量_B2F20225 ＝ 取空白文本 (#MAX_PATH)
    变量_9FF20225 ＝ DLL_GetModuleFileNameA (变量_82F20225, 变量_B2F20225, #MAX_PATH)
    .如果真 (变量_9FF20225 ＞ 0)
        变量_93F20225.模块完整路径 ＝ 变量_B2F20225
    .如果真结束
    变量_93F20225.模块句柄 ＝ 变量_78F20225.成员_8A5E0235
    返回 (变量_93F20225)

.子程序 进程_句柄取进程ID, 整数型, 公开, 成功则返回值是进程标识符。失败返回值为零！
    .参数 进程句柄, 整数型, , 进程的句柄。句柄必须具有 PROCESS_QUERY_INFORMATION 或 PROCESS_QUERY_LIMITED_INFORMATION 访问权限。

    返回 (DLL_GetProcessId (进程句柄))

.子程序 进程_是否被调试, 逻辑型, 公开, 判断指定的进程是否正在调试
    .参数 进程句柄, 整数型, , hProcess
    .局部变量 变量_CFF20225, 逻辑型

    DLL_CheckRemoteDebuggerPresent (进程句柄, 变量_CFF20225)
    返回 (变量_CFF20225)

.子程序 进程_取系统版本, , 公开
    .参数 进程ID, 整数型, 可空, 0
    .参数 主要版本号, 整数型, 参考 可空, OSMajorVersion
    .参数 次要版本号, 整数型, 参考 可空, OSMinorVersion
    .参数 内部版本号, 短整数型, 参考 可空, OSBuildNumber

    置入代码 ({ 100, 139, 29, 48, 0, 0, 0, 141, 155, 172, 0, 0, 0, 185, 3, 0, 0, 0, 139, 3, 139, 84, 205, 8, 137, 2, 131, 235, 4, 226, 243, 201, 194, 14, 0 })
    
    
    
    
    
    
    
    
    
    
    

.子程序 进程_取资源字符串, 文本型, 公开, 从与指定模块关联的可执行文件加载字符串资源，并将字符串复制到带有终止空字符的缓冲区中。
    .参数 模块名, 文本型
    .参数 标识符, 整数型

    返回 (编码_Unicode到Ansi (进程_取资源字符串W (编码_Ansi到Unicode (模块名, ), 标识符)))

.子程序 进程_取资源字符串W, 字节集, 公开, 从与指定模块关联的可执行文件加载字符串资源，并将字符串复制到带有终止空字符的缓冲区中。
    .参数 模块名, 字节集
    .参数 标识符, 整数型
    .局部变量 变量_38FD0225, 整数型
    .局部变量 变量_63FD0225, 逻辑型
    .局部变量 变量_57FD0225, 整数型
    .局部变量 变量_5BFD0225, 整数型
    .局部变量 变量_5FFD0225, 字节集

    变量_38FD0225 ＝ DLL_GetModuleHandleW (取指针_字节集型 (模块名))
    .如果真 (变量_38FD0225 ＝ #NULL)
        变量_38FD0225 ＝ DLL_LoadLibraryW (取指针_字节集型 (模块名))
        变量_63FD0225 ＝ 真
    .如果真结束
    .如果真 (变量_38FD0225 ＝ #NULL)
        返回 ({ })
    .如果真结束
    变量_57FD0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 8)
    变量_5BFD0225 ＝ DLL_LoadStringW (变量_38FD0225, 标识符, 变量_57FD0225, 0)
    .如果真 (变量_5BFD0225 ＞ 0)
        变量_5FFD0225 ＝ 指针到字节集 (__get (变量_57FD0225, 0), 变量_5BFD0225 × 2) ＋ { 0, 0 }
    .如果真结束
    LocalFree (变量_57FD0225)
    .如果真 (变量_63FD0225 且 变量_38FD0225 ≠ #NULL)
        FreeLibrary (变量_38FD0225)
    .如果真结束
    返回 (变量_5FFD0225)

.子程序 进程_取执行权限级别, 整数型, 公开, 获取进程当前UAC的执行权限级别。0、低级；1、中级；2、高级；3、系统级；-1、未知。
    .参数 pid, 整数型, 可空
    .局部变量 变量_79FF0225, 整数型
    .局部变量 变量_7AFF0225, 整数型
    .局部变量 变量_7BFF0225, 整数型
    .局部变量 变量_7CFF0225, 整数型
    .局部变量 变量_7DFF0225, 整数型
    .局部变量 变量_7EFF0225, 整数型
    .局部变量 变量_7FFF0225, 整数型

    .如果 (pid ＞ 0)
        变量_79FF0225 ＝ OpenProcess (#PROCESS_QUERY_INFORMATION, 0, pid)
    .否则
        变量_79FF0225 ＝ GetCurrentProcess ()
    .如果结束
    .如果真 (变量_79FF0225 ＝ #NULL)
        返回 (-1)
    .如果真结束
    .如果真 (OpenProcessToken (变量_79FF0225, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), 变量_7AFF0225))
        DLL_GetTokenInformation (变量_7AFF0225, #<?未知本地类型?>, #NULL, 0, 取指针整数_ (变量_7BFF0225))
        变量_7CFF0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_7BFF0225)
        .如果真 (DLL_GetTokenInformation (变量_7AFF0225, #<?未知本地类型?>, 变量_7CFF0225, 变量_7BFF0225, 取指针整数_ (变量_7BFF0225)))
            变量_7DFF0225 ＝ __get (变量_7CFF0225, 0)
            变量_7EFF0225 ＝ DLL_GetSidSubAuthorityCount (变量_7DFF0225)
            变量_7FFF0225 ＝ __get (DLL_GetSidSubAuthority (变量_7DFF0225, __get (变量_7EFF0225, 0) － 1), 0)
        .如果真结束
        LocalFree (变量_7CFF0225)
        CloseHandle (变量_7AFF0225)
    .如果真结束
    CloseHandle (变量_79FF0225)
    .判断开始 (变量_7FFF0225 ＝ #<?未知本地类型?>)
        返回 (0)
    .判断 (变量_7FFF0225 ≥ #<?未知本地类型?> 且 变量_7FFF0225 ＜ #<?未知本地类型?>)
        返回 (1)
    .判断 (变量_7FFF0225 ≥ #<?未知本地类型?> 且 变量_7FFF0225 ＜ #<?未知本地类型?>)
        返回 (2)
    .判断 (变量_7FFF0225 ≥ #<?未知本地类型?>)
        返回 (3)
    .默认
        返回 (-1)
    .判断结束
    

.子程序 进程_是否有管理员特权, 逻辑型, 公开, 判断指定程序是否运行在管理员身份下
    .参数 进程ID, 整数型, 可空
    .局部变量 变量_30000325, 整数型
    .局部变量 变量_31000325, 整数型
    .局部变量 变量_32000325, 整数型
    .局部变量 变量_33000325, 字节集
    .局部变量 变量_34000325, 整数型
    .局部变量 变量_35000325, 整数型
    .局部变量 变量_36000325, 整数型
    .局部变量 变量_37000325, 整数型
    .局部变量 变量_38000325, 整数型
    .局部变量 变量_39000325, 逻辑型
    .局部变量 变量_3A000325, 整数型

    .如果真 (进程ID ≤ 0)
        进程ID ＝ GetCurrentProcessId ()
    .如果真结束
    变量_30000325 ＝ OpenProcess (#PROCESS_QUERY_LIMITED_INFORMATION, 0, 进程ID)
    .如果真 (变量_30000325 ≠ #NULL)
        .如果真 (OpenProcessToken (变量_30000325, #<?未知本地类型?>, 变量_31000325))
            变量_33000325 ＝ { 0, 0, 0, 0, 0, 5 }
            .如果真 (DLL_AllocateAndInitializeSid (取指针_字节集型 (变量_33000325), 2, #<?未知本地类型?>, #<?未知本地类型?>, 0, 0, 0, 0, 0, 0, 变量_32000325))
                DLL_GetTokenInformation (变量_31000325, #<?未知本地类型?>, #NULL, 0, 取指针整数_ (变量_34000325))
                变量_35000325 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_34000325)
                DLL_GetTokenInformation (变量_31000325, #<?未知本地类型?>, 变量_35000325, 变量_34000325, 取指针整数_ (变量_34000325))
                变量_36000325 ＝ __get (变量_35000325, 0)
                .变量循环首 (0, 变量_36000325 － 1, 1, 变量_3A000325)
                    变量_37000325 ＝ __get (变量_35000325, 4 ＋ 8 × 变量_3A000325)
                    .如果真 (DLL_EqualSid (变量_32000325, 变量_37000325))
                        变量_38000325 ＝ __get (变量_35000325, 8 ＋ 8 × 变量_3A000325)
                        变量_39000325 ＝ 位与 (变量_38000325, #<?未知本地类型?>) ≠ #<?未知本地类型?>
                        跳出循环 ()
                    .如果真结束
                    
                .变量循环尾 ()
                LocalFree (变量_35000325)
                DLL_FreeSid (变量_32000325)
            .如果真结束
            CloseHandle (变量_31000325)
        .如果真结束
        CloseHandle (变量_30000325)
    .如果真结束
    返回 (变量_39000325)

.子程序 进程_枚举进程模块, 整数型, 公开, 遍历指定进程的模块信息
    .参数 pid, 整数型
    .参数 模块信息, 进程_模块信息, 参考 数组
    .局部变量 变量_8B010325, 整数型
    .局部变量 变量_8C010325, 逻辑型
    .局部变量 变量_8D010325, 逻辑型
    .局部变量 变量_8E010325, 整数型
    .局部变量 变量_95010325, 整数型
    .局部变量 变量_A7010325, 整数型
    .局部变量 变量_B4010325, 整数型
    .局部变量 变量_BF010325, 整数型
    .局部变量 变量_C0010325, 短整数型
    .局部变量 变量_C2010325, 整数型
    .局部变量 变量_C1010325, 字节集
    .局部变量 变量_D2010325, 进程_模块信息

    清除数组 (模块信息)
    变量_8B010325 ＝ OpenProcess (位或 (#PROCESS_QUERY_INFORMATION, #PROCESS_VM_READ), 0, pid)
    .如果真 (变量_8B010325 ≠ #NULL)
        变量_8C010325 ＝ IsWow64Process (变量_8B010325, 变量_8D010325) 且 变量_8D010325 ＝ 假
        .如果 (变量_8C010325)
            变量_8E010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 48)
            .如果真 (变量_8E010325 ≠ #NULL 且 DLL_NtWow64QueryInformationProcess642 (变量_8B010325, #<?未知本地类型?>, 变量_8E010325, 48, #NULL) ＝ #ERROR_SUCCESS)
                变量_95010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 8)
                .如果真 (变量_95010325 ≠ #NULL 且 DLL_NtWow64ReadVirtualMemory644 (变量_8B010325, 指针_到长整数型_汇编 (变量_8E010325 ＋ 8) ＋ 24, 变量_95010325, 8, #NULL) ＝ #ERROR_SUCCESS)
                    变量_A7010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
                    .如果真 (变量_A7010325 ≠ #NULL 且 DLL_NtWow64ReadVirtualMemory644 (变量_8B010325, 指针_到长整数型_汇编 (变量_95010325) ＋ 16, 变量_A7010325, 16, #NULL) ＝ #ERROR_SUCCESS)
                        变量_B4010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 160)
                        .如果真 (变量_B4010325 ≠ #NULL 且 DLL_NtWow64ReadVirtualMemory644 (变量_8B010325, 指针_到长整数型_汇编 (变量_A7010325), 变量_B4010325, 160, #NULL) ＝ #ERROR_SUCCESS)
                            变量_BF010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 8)
                            .如果真 (变量_BF010325 ≠ #NULL)
                                memcpy (变量_BF010325, 变量_B4010325 ＋ 48, 8)
                                变量_C2010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 1024)
                                .判断循环首 (指针_到长整数型_汇编 (变量_BF010325) ≠ #NULL)
                                    .如果真 (DLL_NtWow64ReadVirtualMemory644 (变量_8B010325, 指针_到长整数型_汇编 (变量_B4010325), 变量_B4010325, 160, #NULL) ≠ #ERROR_SUCCESS)
                                        跳出循环 ()
                                    .如果真结束
                                    memcpy (变量_BF010325, 变量_B4010325 ＋ 48, 8)
                                    .如果真 (指针_到长整数型_汇编 (变量_BF010325) ＝ #NULL)
                                        跳出循环 ()
                                    .如果真结束
                                    变量_D2010325.模块句柄 ＝ 指针_到长整数型_汇编 (变量_BF010325)
                                    变量_C0010325 ＝ 指针_到短整数型_汇编 (变量_B4010325 ＋ 90)
                                    .如果真 (变量_C0010325 ＞ 1024)
                                        暂停 ()
                                    .如果真结束
                                    memset (变量_C2010325, 0, 1024)
                                    DLL_NtWow64ReadVirtualMemory644 (变量_8B010325, 指针_到长整数型_汇编 (变量_B4010325 ＋ 96), 变量_C2010325, 变量_C0010325, #NULL)
                                    变量_C1010325 ＝ 指针到字节集 (变量_C2010325, 变量_C0010325)
                                    变量_D2010325.模块文件名 ＝ 编码_Unicode到Ansi (变量_C1010325)
                                    变量_C0010325 ＝ 指针_到短整数型_汇编 (变量_B4010325 ＋ 74)
                                    .如果真 (变量_C0010325 ＞ 1024)
                                        暂停 ()
                                    .如果真结束
                                    memset (变量_C2010325, 0, 1024)
                                    DLL_NtWow64ReadVirtualMemory644 (变量_8B010325, 指针_到长整数型_汇编 (变量_B4010325 ＋ 80), 变量_C2010325, 变量_C0010325, #NULL)
                                    变量_C1010325 ＝ 指针到字节集 (变量_C2010325, 变量_C0010325)
                                    变量_D2010325.模块完整路径 ＝ 编码_Unicode到Ansi (变量_C1010325)
                                    加入成员 (模块信息, 变量_D2010325)
                                .判断循环尾 ()
                                LocalFree (变量_C2010325)
                                LocalFree (变量_BF010325)
                            .如果真结束
                            LocalFree (变量_B4010325)
                        .如果真结束
                        LocalFree (变量_A7010325)
                    .如果真结束
                    LocalFree (变量_95010325)
                .如果真结束
                LocalFree (变量_8E010325)
            .如果真结束
            
        .否则
            变量_8E010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 24)
            .如果真 (变量_8E010325 ≠ #NULL 且 DLL_NtQueryInformationProcess (变量_8B010325, #<?未知本地类型?>, 变量_8E010325, 24, #NULL) ＝ #ERROR_SUCCESS)
                .如果真 (DLL_NtReadVirtualMemory (变量_8B010325, __get (变量_8E010325, 4) ＋ 12, 取指针整数_ (变量_95010325), 4, #NULL) ＝ #ERROR_SUCCESS)
                    变量_A7010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 8)
                    .如果真 (变量_A7010325 ≠ #NULL 且 DLL_NtReadVirtualMemory (变量_8B010325, 变量_95010325 ＋ 12, 变量_A7010325, 8, #NULL) ＝ #ERROR_SUCCESS)
                        变量_B4010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 84)
                        .如果真 (变量_B4010325 ≠ #NULL 且 DLL_NtReadVirtualMemory (变量_8B010325, __get (变量_A7010325, 0), 变量_B4010325, 84, #NULL) ＝ #ERROR_SUCCESS)
                            变量_BF010325 ＝ __get (变量_B4010325, 24)
                            变量_C2010325 ＝ LocalAlloc (#LMEM_ZEROINIT, 1024)
                            .判断循环首 (变量_BF010325 ≠ #NULL)
                                .如果真 (DLL_NtReadVirtualMemory (变量_8B010325, __get (变量_B4010325, 0), 变量_B4010325, 84, #NULL) ≠ #ERROR_SUCCESS)
                                    跳出循环 ()
                                .如果真结束
                                变量_BF010325 ＝ __get (变量_B4010325, 24)
                                .如果真 (变量_BF010325 ＝ #NULL)
                                    跳出循环 ()
                                .如果真结束
                                变量_D2010325.模块句柄 ＝ 到长整数 (变量_BF010325)
                                变量_C0010325 ＝ 指针_到短整数型_汇编 (变量_B4010325 ＋ 46)
                                .如果真 (变量_C0010325 ＞ 1024)
                                    暂停 ()
                                .如果真结束
                                memset (变量_C2010325, 0, 1024)
                                DLL_NtReadVirtualMemory (变量_8B010325, __get (变量_B4010325, 48), 变量_C2010325, 变量_C0010325, #NULL)
                                变量_C1010325 ＝ 指针到字节集 (变量_C2010325, 变量_C0010325)
                                变量_D2010325.模块文件名 ＝ 编码_Unicode到Ansi (变量_C1010325)
                                变量_C0010325 ＝ 指针_到短整数型_汇编 (变量_B4010325 ＋ 38)
                                .如果真 (变量_C0010325 ＞ 1024)
                                    暂停 ()
                                .如果真结束
                                memset (变量_C2010325, 0, 1024)
                                DLL_NtReadVirtualMemory (变量_8B010325, __get (变量_B4010325, 40), 变量_C2010325, 变量_C0010325, #NULL)
                                变量_C1010325 ＝ 指针到字节集 (变量_C2010325, 变量_C0010325)
                                变量_D2010325.模块完整路径 ＝ 子文本替换 (编码_Unicode到Ansi (变量_C1010325), 目录_取特定目录 (, #CSIDL_SYSTEM), 目录_取特定目录 (, #CSIDL_SYSTEMX86), , 1, 假)
                                加入成员 (模块信息, 变量_D2010325)
                            .判断循环尾 ()
                            LocalFree (变量_C2010325)
                            LocalFree (变量_B4010325)
                        .如果真结束
                        LocalFree (变量_A7010325)
                    .如果真结束
                    
                .如果真结束
                LocalFree (变量_8E010325)
            .如果真结束
            
        .如果结束
        CloseHandle (变量_8B010325)
    .如果真结束
    返回 (取数组成员数 (模块信息))

.子程序 进程_按用户名枚举进程, 整数型, 公开, 枚举在不同用户上下文中运行的进程
    .参数 用户名, 文本型, , SYSTEM
    .参数 进程ID数组, 整数型, 参考 数组

    返回 (进程_按用户名枚举进程W (编码_Ansi到Unicode (用户名, ), 进程ID数组))

.子程序 进程_按用户名枚举进程W, 整数型, 公开, 枚举在不同用户上下文中运行的进程
    .参数 用户名, 字节集, , SYSTEM
    .参数 进程ID数组, 整数型, 参考 数组
    .局部变量 变量_EA060325, 整数型
    .局部变量 变量_EB060325, 整数型
    .局部变量 变量_EC060325, 整数型
    .局部变量 变量_ED060325, 整数型
    .局部变量 变量_EE060325, 整数型
    .局部变量 变量_EF060325, 整数型
    .局部变量 变量_F0060325, 整数型
    .局部变量 变量_F1060325, 整数型
    .局部变量 变量_F2060325, 整数型
    .局部变量 变量_F3060325, 整数型

    清除数组 (进程ID数组)
    .如果真 (DLL_WTSEnumerateProcessesW (#NULL, 0, 1, 变量_EA060325, 变量_EB060325))
        .变量循环首 (0, 变量_EB060325 － 1, 1, 变量_F3060325)
            变量_EC060325 ＝ __get (变量_EA060325 ＋ 变量_F3060325 × 16, 12)
            变量_EF060325 ＝ 0
            变量_F1060325 ＝ 0
            DLL_LookupAccountSidW (#NULL, 变量_EC060325, #NULL, 变量_EF060325, #NULL, 变量_F1060325, 变量_F2060325)
            .如果真 (变量_EF060325 ＞ 0 且 变量_F1060325 ＞ 0)
                变量_EE060325 ＝ LocalAlloc (#LMEM_ZEROINIT, (变量_EF060325 ＋ 1) × 2)
                变量_F0060325 ＝ LocalAlloc (#LMEM_ZEROINIT, (变量_F1060325 ＋ 1) × 2)
                .如果真 (变量_EE060325 ≠ #NULL 且 变量_F0060325 ≠ #NULL)
                    .如果真 (DLL_LookupAccountSidW (#NULL, 变量_EC060325, 变量_EE060325, 变量_EF060325, 变量_F0060325, 变量_F1060325, 变量_F2060325))
                        .如果真 (DLL_lstrcmpiW (变量_EE060325, 用户名 ＋ { 0, 0 }) ＝ 0)
                            变量_ED060325 ＝ __get (变量_EA060325 ＋ 变量_F3060325 × 16, 4)
                            加入成员 (进程ID数组, 变量_ED060325)
                        .如果真结束
                        
                    .如果真结束
                    
                .如果真结束
                .如果真 (变量_EE060325 ≠ #NULL)
                    LocalFree (变量_EE060325)
                .如果真结束
                .如果真 (变量_F0060325 ≠ #NULL)
                    LocalFree (变量_F0060325)
                .如果真结束
                
            .如果真结束
            
        .变量循环尾 ()
        DLL_WTSFreeMemory (变量_EA060325)
    .如果真结束
    返回 (取数组成员数 (进程ID数组))

.子程序 进程_取内存占用, 长整数型, 公开, 返回占用页的大小，以字节为单位。
    .参数 进程ID, 整数型
    .局部变量 变量_D5080325, 自定义_BE080341
    .局部变量 变量_D6080325, 整数型
    .局部变量 变量_D7080325, 整数型
    .局部变量 变量_D8080325, 整数型
    .局部变量 变量_D9080325, 整数型
    .局部变量 变量_DA080325, 整数型
    .局部变量 变量_DB080325, 整数型
    .局部变量 变量_DC080325, 整数型

    变量_D6080325 ＝ 56
    变量_D5080325.成员_C1080335 ＝ 变量_D6080325
    .如果真 (DLL_GetPerformanceInfo (变量_D5080325, 变量_D6080325))
        变量_D7080325 ＝ OpenProcess (位或 (#PROCESS_VM_READ, #PROCESS_QUERY_INFORMATION), 0, 进程ID)
        .如果真 (变量_D7080325 ≠ #NULL)
            DLL_QueryWorkingSet (变量_D7080325, 取指针整数_ (变量_D8080325), 4)
            变量_D6080325 ＝ 4 ＋ 变量_D8080325 × 4
            变量_D9080325 ＝ HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 变量_D6080325)
            .如果真 (变量_D9080325 ≠ #NULL)
                __set (变量_D9080325, 0, 变量_D8080325)
                .如果真 (DLL_QueryWorkingSet (变量_D7080325, 变量_D9080325, 变量_D6080325))
                    变量_D8080325 ＝ __get (变量_D9080325, 0)
                    .计次循环首 (变量_D8080325, 变量_DB080325)
                        变量_DA080325 ＝ __get (变量_D9080325, 变量_DB080325 × 4)
                        .如果真 (位与 (变量_DA080325, 256) ＝ 0)
                            变量_DC080325 ＝ 变量_DC080325 ＋ 1
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果真结束
                DLL_HeapFree (GetProcessHeap (), 0, 变量_D9080325)
            .如果真结束
            CloseHandle (变量_D7080325)
        .如果真结束
        
    .如果真结束
    返回 (到长整数 (变量_DC080325 × 变量_D5080325.成员_CB080335))

.子程序 线程_DLL注入, 逻辑型, 公开, 创建远程线程注入DLL到目标进程
    .参数 目标进程ID, 整数型, , 要注入的进程ID
    .参数 要注入的DLL文件名, 文本型, , DLL名称
    .局部变量 变量_2C030325, 整数型
    .局部变量 变量_2D030325, 整数型
    .局部变量 变量_2E030325, 整数型
    .局部变量 变量_2F030325, 整数型
    .局部变量 变量_30030325, 整数型
    .局部变量 变量_6E060325, 整数型

    变量_2C030325 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 目标进程ID)
    .如果真 (变量_2C030325 ≠ #NULL)
        变量_2D030325 ＝ 取文本长度 (要注入的DLL文件名) ＋ 1
        变量_2E030325 ＝ VirtualAllocEx (变量_2C030325, #NULL, 变量_2D030325, #MEM_COMMIT, #PAGE_READWRITE)
        .如果真 (变量_2E030325 ≠ #NULL)
            WriteProcessMemory_字节集 (变量_2C030325, 变量_2E030325, 到字节集 (要注入的DLL文件名) ＋ { 0 }, 变量_2D030325, #NULL)
            变量_2F030325 ＝ GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “LoadLibraryA”)
            变量_30030325 ＝ CreateRemoteThread (变量_2C030325, #NULL, 0, 变量_2F030325, 变量_2E030325, 0, #NULL)
            .如果真 (变量_30030325 ≠ #NULL)
                WaitForSingleObject (变量_30030325, #INFINITE)
                GetExitCodeThread (变量_30030325, 变量_6E060325)
                CloseHandle (变量_30030325)
            .如果真结束
            VirtualFreeEx (变量_2C030325, 变量_2E030325, 0, #MEM_RELEASE)
        .如果真结束
        CloseHandle (变量_2C030325)
    .如果真结束
    返回 (变量_6E060325 ≠ #NULL)

.子程序 线程_DLL卸载, 逻辑型, 公开, 卸载目标进程中指定的DLL！注意，DLL不能是易语言原生编译的，否则调用该命令可能导致崩溃！
    .参数 目标进程ID, 整数型
    .参数 要注入的卸载文件名, 文本型
    .局部变量 变量_4C060325, 整数型
    .局部变量 变量_55060325, 整数型
    .局部变量 变量_56060325, 整数型
    .局部变量 变量_57060325, 整数型
    .局部变量 变量_58060325, 整数型
    .局部变量 变量_6A060325, 整数型
    .局部变量 变量_5D060325, 整数型

    变量_4C060325 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 目标进程ID)
    .如果真 (变量_4C060325 ≠ #NULL)
        变量_55060325 ＝ 取文本长度 (要注入的卸载文件名) ＋ 1
        变量_56060325 ＝ VirtualAllocEx (变量_4C060325, #NULL, 变量_55060325, #MEM_COMMIT, #PAGE_READWRITE)
        .如果真 (变量_56060325 ≠ #NULL)
            WriteProcessMemory_字节集 (变量_4C060325, 变量_56060325, 到字节集 (要注入的卸载文件名) ＋ { 0 }, 变量_55060325, #NULL)
            变量_57060325 ＝ GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “GetModuleHandleA”)
            变量_58060325 ＝ CreateRemoteThread (变量_4C060325, #NULL, 0, 变量_57060325, 变量_56060325, 0, #NULL)
            .如果真 (变量_58060325 ≠ #NULL)
                WaitForSingleObject (变量_58060325, #INFINITE)
                GetExitCodeThread (变量_58060325, 变量_6A060325)
                CloseHandle (变量_58060325)
            .如果真结束
            VirtualFreeEx (变量_4C060325, 变量_56060325, 0, #MEM_RELEASE)
            .如果真 (变量_6A060325 ≠ #NULL)
                变量_57060325 ＝ GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “FreeLibrary”)
                变量_58060325 ＝ CreateRemoteThread (变量_4C060325, #NULL, 0, 变量_57060325, 变量_6A060325, 0, #NULL)
                .如果真 (变量_58060325 ≠ #NULL)
                    WaitForSingleObject (变量_58060325, #INFINITE)
                    GetExitCodeThread (变量_58060325, 变量_5D060325)
                    CloseHandle (变量_58060325)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        CloseHandle (变量_4C060325)
    .如果真结束
    返回 (变量_5D060325 ＝ 1)

.子程序 线程_远程调用DLL命令, 逻辑型, 公开, 远程创建线程执行DLL命令
    .参数 目标进程ID, 整数型
    .参数 远程DLL文件名, 文本型, , 完整路径
    .参数 函数名, 文本型
    .参数 回调函数, 整数型, 可空, void ThreadProc(hProcess, lParam, dwFlags)
    .局部变量 变量_99060325, 文本型
    .局部变量 变量_7E060325, 整数型
    .局部变量 变量_82060325, 整数型
    .局部变量 变量_7D060325, 整数型
    .局部变量 变量_1A110325, 字节集
    .局部变量 变量_86060325, 整数型
    .局部变量 变量_87060325, 整数型
    .局部变量 变量_88060325, 整数型
    .局部变量 变量_22110325, 整数型, , "0"
    .局部变量 变量_26110325, 整数型
    .局部变量 变量_27110325, 整数型

    变量_99060325 ＝ 文件_取文件名 (远程DLL文件名, 真)
    变量_7E060325 ＝ LoadLibraryA (远程DLL文件名)
    .如果真 (变量_7E060325 ＝ #NULL)
        返回 (假)
    .如果真结束
    变量_82060325 ＝ GetProcAddress (变量_7E060325, 函数名)
    FreeLibrary (变量_7E060325)
    .如果真 (变量_82060325 ＝ #NULL)
        返回 (假)
    .如果真结束
    变量_7D060325 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 目标进程ID)
    .如果真 (变量_7D060325 ≠ #NULL)
        .如果真 (回调函数 ≠ #NULL)
            调用子程序_ (回调函数, 变量_7D060325, 取指针_通用型_数组 (变量_22110325), #DLL_PROCESS_ATTACH, , , , , , , , , , , , )
            变量_26110325 ＝ 取数组成员数 (变量_22110325)
            .变量循环首 (变量_26110325, 1, -1, 变量_27110325)
                变量_1A110325 ＝ 变量_1A110325 ＋ { 104 } ＋ 到字节集 (变量_22110325 [变量_27110325])
            .变量循环尾 ()
        .如果真结束
        变量_1A110325 ＝ 变量_1A110325 ＋ { 184 } ＋ 到字节集 (变量_82060325) ＋ { 255, 208, 195 }
        变量_86060325 ＝ 取字节集长度 (变量_1A110325)
        变量_87060325 ＝ VirtualAllocEx (变量_7D060325, #NULL, 变量_86060325, #MEM_COMMIT, #PAGE_READWRITE)
        .如果真 (变量_87060325 ≠ #NULL)
            WriteProcessMemory_字节集 (变量_7D060325, 变量_87060325, 变量_1A110325, 变量_86060325, #NULL)
            变量_88060325 ＝ CreateRemoteThread (变量_7D060325, #NULL, 0, 变量_87060325, #NULL, 0, #NULL)
            .如果真 (变量_88060325 ≠ #NULL)
                WaitForSingleObject (变量_88060325, #INFINITE)
                .如果真 (回调函数 ≠ #NULL)
                    调用子程序_ (回调函数, 变量_7D060325, 取指针_通用型_数组 (变量_22110325), #DLL_PROCESS_DETACH, , , , , , , , , , , , )
                .如果真结束
                CloseHandle (变量_88060325)
            .如果真结束
            VirtualFreeEx (变量_7D060325, 变量_87060325, 0, #MEM_RELEASE)
        .如果真结束
        CloseHandle (变量_7D060325)
    .如果真结束
    返回 (真)

.子程序 线程_取中止线程退出代码, 整数型, 公开, 返回0表示该线程不存在(或句柄已被关闭),1线程已经执行完毕，2为正在运行,其他不论
    .参数 线程句柄, 整数型
    .局部变量 变量_BCC40125, 整数型

    .判断开始 (GetExitCodeThread (线程句柄, 变量_BCC40125) ＝ 0)
        返回 (0)
    .判断 (变量_BCC40125 ＝ 259)
        返回 (2)
    .默认
        返回 (1)
    .判断结束
    

.子程序 线程_打开, 整数型, 公开, 成功返回线程句柄，失败返回0
    .参数 线程ID, 整数型, 可空, 目标线程ID

    返回 (OpenThread (2032639, 0, 线程ID))

.子程序 线程_取自线程ID, 整数型, 公开, GetCurrentThreadId,获取当前线程一个唯一的线程标识符
    返回 (GetCurrentThreadId ())

.子程序 线程_取自线程句柄, 整数型, 公开, GetCurrentThread,获取当前线程的一个伪句柄
    返回 (GetCurrentThread ())

.子程序 线程_初始化COM库, , 公开, 有时执行线程的时候，会自动关闭，此时，可以在多线程的程序里创建COM对象前先初始化，一个线程只能调用一次
    CoInitialize (0)

.子程序 线程_取消COM库, , 公开, 取消COM库的初始化，如果你在线程头部加入了 线程_初始化COM库 请在尾部加入此命令
    CoUninitialize ()

.子程序 线程_取ID, 整数型, 公开, 成功返回指定窗口的线程ID
    .参数 窗口句柄, 整数型, , 指定窗口句柄
    .局部变量 变量_4F110125, 整数型

    返回 (GetWindowThreadProcessId (窗口句柄, 变量_4F110125))

.子程序 线程_销毁, 逻辑型, 公开, 强制终止正在运行的线程,成功返回真,失败返回假.
    .参数 线程句柄, 整数型, , 创建线程返回的句柄
    .局部变量 变量_B9DC0125, 整数型

    GetExitCodeThread (线程句柄, 变量_B9DC0125)
    返回 (DLL_TerminateThread (线程句柄, 变量_B9DC0125))

.子程序 线程_关闭句柄, 逻辑型, 公开, 关闭一个线程句柄，关闭后线程继续运行，但无法对该句柄进行操作。
    .参数 线程句柄, 整数型

    返回 (CloseHandle (线程句柄))

.子程序 线程_启动, 整数型, 公开, 成功返回线程句柄，失败返回0
    .参数 要启动的子程序, 子程序指针
    .参数 要传去子程序的参数, 整数型, 可空, 往子程序里面传递一个整数型的参数
    .参数 线程ID, 整数型, 参考 可空, 请提供一个整数型的变量，用于存放新创建的线程ID。

    返回 (CreateThread (0, 0, 到整数 (要启动的子程序), 要传去子程序的参数, 0, 取指针_通用型 (线程ID)))

.子程序 线程_启动1, 整数型, 公开, 成功返回线程句柄，失败返回0
    .参数 要启动的子程序, 整数型, , 如果是子程序指针，请直接使用到数值() 命令进行转换后再传入
    .参数 要传去子程序的参数, 整数型, 可空, 往子程序里面传递一个整数型的参数
    .参数 线程ID, 整数型, 参考 可空, 请提供一个整数型的变量，用于存放新创建的线程ID。

    返回 (CreateThread (0, 0, 要启动的子程序, 要传去子程序的参数, 0, 取指针_通用型 (线程ID)))

.子程序 线程_启动2, 逻辑型, 公开, 成功返回真，失败返回假。[Mr.Yang]
    .参数 要启动的子程序, 子程序指针
    .参数 要传去子程序的参数, 整数型, 可空, 往子程序里面传递一个整数型的参数
    .参数 线程句柄, 整数型, 参考 可空, 请提供一个整数型的变量，用于存放新创建的线程句柄
    .参数 线程ID, 整数型, 参考 可空, 请提供一个整数型的变量，用于存放新创建的线程ID。

    线程句柄 ＝ CreateThread (0, 0, 到整数 (要启动的子程序), 要传去子程序的参数, 0, 取指针_通用型 (线程ID))
    .如果真 (是否为空 (线程句柄))
        CloseHandle (线程句柄)
    .如果真结束
    .如果 (线程句柄 ≠ 0)
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    

.子程序 线程_启动多参_整数型, 整数型, 公开, 成功返回线程句柄，失败返回0。
    .参数 子程序指针, 子程序指针
    .参数 参数1, 整数型, 可空, 线程传入参数1
    .参数 参数2, 整数型, 可空, 线程传入参数2
    .参数 参数3, 整数型, 可空, 线程传入参数3
    .参数 参数4, 整数型, 可空, 线程传入参数4
    .参数 参数5, 整数型, 可空, 线程传入参数5
    .参数 线程ID, 整数型, 参考 可空, 请提供一个整数型的变量，用于存放新创建的线程ID。
    .局部变量 变量_3A030325, 整数型
    .局部变量 变量_3B030325, 整数型

    变量_3A030325 ＝ LocalAlloc (#LMEM_ZEROINIT, 24)
    .如果真 (变量_3A030325 ≠ #NULL)
        __set (变量_3A030325, 0, 到整数 (子程序指针))
        __set (变量_3A030325, 4, 参数1)
        __set (变量_3A030325, 8, 参数2)
        __set (变量_3A030325, 12, 参数3)
        __set (变量_3A030325, 16, 参数4)
        __set (变量_3A030325, 20, 参数5)
        变量_3B030325 ＝ CreateThread (#NULL, 0, 到整数 (&ThreadParamFunc), 变量_3A030325, 0, 取指针整数_ (线程ID))
    .如果真结束
    返回 (变量_3B030325)

.子程序 线程_启动多参_文本型, 整数型, 公开, 成功返回线程句柄，失败返回0。
    .参数 子程序指针, 子程序指针
    .参数 整数1, 整数型, 可空, 线程传入参数1
    .参数 文本1, 文本型, 可空, 线程传入参数2
    .参数 文本2, 文本型, 可空, 线程传入参数3
    .参数 文本3, 文本型, 可空, 线程传入参数4
    .参数 文本4, 文本型, 可空, 线程传入参数5
    .参数 线程ID, 整数型, 参考 可空, 请提供一个整数型的变量，用于存放新创建的线程ID。
    .局部变量 变量_33030325, 整数型
    .局部变量 变量_34030325, 整数型
    .局部变量 变量_35030325, 整数型
    .局部变量 变量_36030325, 整数型
    .局部变量 变量_3F030325, 整数型

    变量_33030325 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
    .如果真 (变量_33030325 ≠ #NULL)
        __set (变量_33030325, 0, 取文本长度 (文本1))
        __set (变量_33030325, 4, 取文本长度 (文本2))
        __set (变量_33030325, 8, 取文本长度 (文本3))
        __set (变量_33030325, 12, 取文本长度 (文本4))
        .变量循环首 (0, 3, 1, 变量_3F030325)
            .如果真 (__get (变量_33030325, 变量_3F030325 × 4) ＞ 0)
                变量_34030325 ＝ 变量_34030325 ＋ 1
            .如果真结束
            变量_34030325 ＝ 变量_34030325 ＋ __get (变量_33030325, 变量_3F030325 × 4)
        .变量循环尾 ()
        变量_35030325 ＝ LocalAlloc (#LMEM_ZEROINIT, 24 ＋ 变量_34030325)
        .如果真 (变量_35030325 ≠ #NULL)
            __set (变量_35030325, 0, 到整数 (子程序指针))
            __set (变量_35030325, 4, 整数1)
            变量_34030325 ＝ 24
            .如果真 (__get (变量_33030325, 0) ＞ 0)
                memcpy (变量_35030325 ＋ 变量_34030325, 取指针文本_ (文本1), __get (变量_33030325, 0))
                __set (变量_35030325, 8, 变量_35030325 ＋ 变量_34030325)
                变量_34030325 ＝ 变量_34030325 ＋ __get (变量_33030325, 0) ＋ 1
            .如果真结束
            .如果真 (__get (变量_33030325, 4) ＞ 0)
                memcpy (变量_35030325 ＋ 变量_34030325, 取指针文本_ (文本2), __get (变量_33030325, 4))
                __set (变量_35030325, 12, 变量_35030325 ＋ 变量_34030325)
                变量_34030325 ＝ 变量_34030325 ＋ __get (变量_33030325, 4) ＋ 1
            .如果真结束
            .如果真 (__get (变量_33030325, 8) ＞ 0)
                memcpy (变量_35030325 ＋ 变量_34030325, 取指针文本_ (文本3), __get (变量_33030325, 8))
                __set (变量_35030325, 16, 变量_35030325 ＋ 变量_34030325)
                变量_34030325 ＝ 变量_34030325 ＋ __get (变量_33030325, 8) ＋ 1
            .如果真结束
            .如果真 (__get (变量_33030325, 12) ＞ 0)
                memcpy (变量_35030325 ＋ 变量_34030325, 取指针文本_ (文本4), __get (变量_33030325, 12))
                __set (变量_35030325, 20, 变量_35030325 ＋ 变量_34030325)
                变量_34030325 ＝ 变量_34030325 ＋ __get (变量_33030325, 12) ＋ 1
            .如果真结束
            变量_36030325 ＝ CreateThread (#NULL, 0, 到整数 (&ThreadParamFunc), 变量_35030325, 0, 取指针整数_ (线程ID))
        .如果真结束
        LocalFree (变量_33030325)
    .如果真结束
    返回 (变量_36030325)

.子程序 ThreadParamFunc, 整数型
    .参数 变量_32030325, 整数型

    .如果真 (变量_32030325 ≠ #NULL)
        调用子程序_ (__get (变量_32030325, 0), __get (变量_32030325, 4), __get (变量_32030325, 8), __get (变量_32030325, 12), __get (变量_32030325, 16), __get (变量_32030325, 20), , , , , , , , , , )
        LocalFree (变量_32030325)
    .如果真结束
    返回 (0)

.子程序 内部_处理线程参数, 整数型
    .参数 变量_0CDA0225, 整数型
    .参数 变量_0DDA0225, 整数型
    .参数 变量_0EDA0225, 整数型
    .参数 变量_0FDA0225, 整数型
    .局部变量 变量_10DA0225, 整数型
    .局部变量 变量_11DA0225, 整数型
    .局部变量 变量_12DA0225, 整数型
    .局部变量 变量_13DA0225, 整数型
    .局部变量 变量_14DA0225, 整数型
    .局部变量 变量_15DA0225, 整数型
    .局部变量 变量_16DA0225, 整数型
    .局部变量 变量_17DA0225, 整数型
    .局部变量 变量_18DA0225, 整数型

    .如果真 (变量_0CDA0225 ＝ 0 或 __get (变量_0CDA0225, 8) ＝ 0)
        返回 (0)
    .如果真结束
    
    
    
    .判断开始 (变量_0FDA0225 ＝ #整数型 或 变量_0FDA0225 ＝ #短整数型 或 变量_0FDA0225 ＝ #字节型 或 变量_0FDA0225 ＝ #子程序指针型 或 变量_0FDA0225 ＝ #逻辑型 或 变量_0FDA0225 ＝ #小数型)
        变量_13DA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_0EDA0225 × 2 × 4 ＋ 12)
        __set (变量_13DA0225, 4, 0)
        变量_0FDA0225 ＝ #整数型
    .判断 (变量_0FDA0225 ＝ #双精度小数型 或 变量_0FDA0225 ＝ #日期时间型 或 变量_0FDA0225 ＝ #长整数型)
        变量_13DA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_0EDA0225 × 8 ＋ 12 ＋ 变量_0EDA0225 × 4)
        __set (变量_13DA0225, 4, 0)
        变量_0FDA0225 ＝ #长整数型
    .判断 (变量_0FDA0225 ＝ #文本型 或 变量_0FDA0225 ＝ #字节集型)
        变量_13DA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_0EDA0225 × 4 × 2 ＋ 12)
        __set (变量_13DA0225, 4, 1)
    .默认
        返回 (0)
    .判断结束
    __set (变量_13DA0225, 8, __get (变量_0CDA0225, 8))
    
    .计次循环首 (变量_0EDA0225, 变量_10DA0225)
        
        
        
        
        
        
        
        
        
        变量_11DA0225 ＝ (变量_10DA0225 ＋ 变量_0DDA0225 － 1) × 8 － 4
        .如果真 (指针_到整数 (变量_0CDA0225 ＋ 变量_11DA0225 ＋ 4) ＝ 0)
            跳出循环 ()
        .如果真结束
        
        变量_12DA0225 ＝ __get (变量_0CDA0225, 变量_11DA0225)
        
        
        
        .判断开始 (变量_0FDA0225 ＝ #整数型)
            __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 4, #整数型)
            __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 8, __get (变量_12DA0225, 0))
        .判断 (变量_0FDA0225 ＝ #长整数型)
            变量_18DA0225 ＝ 变量_10DA0225 × 16
            
            __set (变量_13DA0225, 变量_18DA0225 － 4, #长整数型)
            __set (变量_13DA0225, 变量_18DA0225 ＋ 0, __get (变量_12DA0225, 0))
            __set (变量_13DA0225, 变量_18DA0225 ＋ 4, #长整数型)
            __set (变量_13DA0225, 变量_18DA0225 ＋ 8, __get (变量_12DA0225, 4))
        .默认
            
            变量_12DA0225 ＝ __get (变量_12DA0225, 0)
            .如果真 (变量_12DA0225 ＝ 0)
                __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 4, #整数型)
                __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 8, 0)
                到循环尾 ()
            .如果真结束
            .如果真 (__get (变量_12DA0225 － 8, 0) ＝ 1)
                变量_12DA0225 ＝ 变量_12DA0225 － 8
            .如果真结束
            .判断开始 (__get (变量_12DA0225, 0) ＝ 1)
                变量_15DA0225 ＝ __get (变量_12DA0225 ＋ 4, 0)
                变量_14DA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_15DA0225 ＋ 8)
                __set (变量_14DA0225, 0, 1)
                __set (变量_14DA0225, 4, 变量_15DA0225)
                RtlMoveMemory (变量_14DA0225 ＋ 8, 变量_12DA0225 ＋ 8, 变量_15DA0225)
                __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 4, #字节集型)
                __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 8, 变量_14DA0225 ＋ 8)
            .默认
                变量_15DA0225 ＝ lstrlenA (变量_12DA0225)
                变量_14DA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_15DA0225 ＋ 1)
                RtlMoveMemory (变量_14DA0225, 变量_12DA0225, 变量_15DA0225)
                __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 4, #文本型)
                __set (变量_13DA0225, 变量_10DA0225 × 8 ＋ 8, 变量_14DA0225)
            .判断结束
            
        .判断结束
        
    .计次循环尾 ()
    变量_10DA0225 ＝ 变量_10DA0225 － 1
    .如果真 (变量_0FDA0225 ＝ #长整数型)
        
        
        变量_10DA0225 ＝ 变量_10DA0225 × 2
    .如果真结束
    __set (变量_13DA0225, 0, 变量_10DA0225)
    
    .如果真 (__get (变量_0CDA0225, 16) ＝ 1)
        
        .判断开始 (__get (变量_0CDA0225, 12) ＝ 1)
            变量_18DA0225 ＝ #<?未知本地类型?>
        .默认
            变量_18DA0225 ＝ 0
        .判断结束
        
    .如果真结束
    
    变量_17DA0225 ＝ CreateThread (0, 0, 到整数 (&内部_多参线程处理), 变量_13DA0225, 变量_18DA0225, 取指针_通用型 (变量_16DA0225))
    .如果真 (__get (变量_0CDA0225, 24) ＝ 1)
        __set (__get (变量_0CDA0225, 20), 0, 变量_16DA0225)
    .如果真结束
    返回 (变量_17DA0225)

.子程序 内部_多参线程处理, 整数型
    .参数 变量_1CDA0225, 整数型
    .局部变量 变量_1DDA0225, 整数型
    .局部变量 变量_1EDA0225, 整数型, , "0"
    .局部变量 变量_1FDA0225, 整数型
    .局部变量 变量_20DA0225, 整数型
    .局部变量 变量_21DA0225, 整数型

    
    
    变量_20DA0225 ＝ __get (变量_1CDA0225, 4)
    变量_21DA0225 ＝ __get (变量_1CDA0225, 0)
    重定义数组 (变量_1EDA0225, 假, 变量_21DA0225)
    .计次循环首 (变量_21DA0225, 变量_1DDA0225)
        变量_1EDA0225 [变量_1DDA0225] ＝ __get (变量_1CDA0225, 变量_1DDA0225 × 8 ＋ 8)
    .计次循环尾 ()
    变量_1FDA0225 ＝ 调用子程序_数组 (__get (变量_1CDA0225, 8), 变量_1EDA0225, )
    .如果真 (变量_20DA0225 ＞ 0)
        .计次循环首 (变量_21DA0225, 变量_1DDA0225)
            .判断开始 (__get (变量_1CDA0225, 变量_1DDA0225 × 8 ＋ 4) ＝ #字节集型)
                LocalFree (变量_1EDA0225 [变量_1DDA0225] － 8)
            .默认
                LocalFree (变量_1EDA0225 [变量_1DDA0225])
            .判断结束
            
        .计次循环尾 ()
    .如果真结束
    LocalFree (变量_1CDA0225)
    返回 (变量_1FDA0225)

.子程序 线程_启动_文本型, 整数型, 公开, 成功返回线程句柄，失败返回0；只允许传入文本或字节集，堆指针。
    .参数 欲执行的子程序, 整数型, , 到整数 (&欲执行的子程序)
    .参数 创建后是否挂起线程, 逻辑型, 可空, 默认为假
    .参数 线程ID, 整数型, 参考 可空, 接收线程ID
    .参数 参数1, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数2, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数3, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数4, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数5, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数6, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数7, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数8, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数9, 通用型, 参考 可空, 只允许传入文本或字节集
    .参数 参数10, 通用型, 参考 可空, 只允许传入文本或字节集
    .局部变量 变量_01DA0225, 整数型

    置入代码 ({ 137, 109, 252 })
    .如果真 (变量_01DA0225 ＝ 0)
        返回 (0)
    .如果真结束
    返回 (内部_处理线程参数 (变量_01DA0225, 4, 10, #文本型))

.子程序 线程_启动_4字节, 整数型, 公开, 成功返回线程句柄，失败返回0；只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 欲执行的子程序, 整数型, , 到整数 (&欲执行的子程序)
    .参数 创建后是否挂起线程, 逻辑型, 可空, 默认为假
    .参数 线程ID, 整数型, 参考 可空, 接收线程ID
    .参数 参数1, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数2, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数3, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数4, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数5, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数6, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数7, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数8, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数9, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .参数 参数10, 通用型, 参考 可空, 只允许传入整数型、短整数型、字节型、逻辑型、子程序指针、小数型，所有参数必须是4字节。
    .局部变量 变量_49DA0225, 整数型

    置入代码 ({ 137, 109, 252 })
    .如果真 (变量_49DA0225 ＝ 0)
        返回 (0)
    .如果真结束
    返回 (内部_处理线程参数 (变量_49DA0225, 4, 10, #整数型))

.子程序 线程_启动_8字节, 整数型, 公开, 成功返回线程句柄，失败返回0；只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节。
    .参数 欲执行的子程序, 整数型, , 到整数 (&欲执行的子程序)
    .参数 创建后是否挂起线程, 逻辑型, 可空, 默认为假
    .参数 线程ID, 整数型, 参考 可空, 接收线程ID
    .参数 参数1, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数2, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数3, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数4, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数5, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数6, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数7, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数8, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数9, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .参数 参数10, 通用型, 参考 可空, 只允许传入双精度小数型、日期时间型、长整数型，所有参数必须是8字节
    .局部变量 变量_34DA0225, 整数型

    
    置入代码 ({ 137, 109, 252 })
    .如果真 (变量_34DA0225 ＝ 0)
        返回 (0)
    .如果真结束
    返回 (内部_处理线程参数 (变量_34DA0225, 4, 10, #长整数型))

.子程序 线程_创建许可证, 线程许可证, 公开, 创建并返回一个进入许可证数值，此许可证值用作进入程序中的指定许可代码区，以避免多线程冲突
    .局部变量 变量_925B0125, 线程许可证

    InitializeCriticalSection (变量_925B0125)
    加入成员 (类变量_895B0115, 变量_925B0125)
    返回 (变量_925B0125)

.子程序 线程_删除许可证, , 公开, 删除由"创建进入许可证"命令所创建返回的进入许可证(该命令会在本类被销毁时自动被调用)
    .参数 进入许可证, 线程许可证, 可空, 留空则删除所有许可证
    .局部变量 变量_945B0125, 整数型

    .如果 (是否为空 (进入许可证))
        .计次循环首 (取数组成员数 (类变量_895B0115), 变量_945B0125)
            DeleteCriticalSection (类变量_895B0115 [变量_945B0125])
        .计次循环尾 ()
        清除数组 (类变量_895B0115)
    .否则
        DeleteCriticalSection (进入许可证)
    .如果结束
    

.子程序 线程_进入许可区, , 公开, 根据已经创建的许可证进入指定许可代码区，在此线程未退出之前，其它线程如要通过同一个进入许可证进入该许可代码区则必须先等待此线程退出许可代码区，从而保证了指定许可代码区在任何时候都只能有一条线程进入并执行
    .参数 进入许可证, 线程许可证

    EnterCriticalSection (进入许可证)

.子程序 线程_退出许可区, , 公开, 指示当前线程将退出许可代码区，并允许其它使用同一进入许可证的线程进入此许可代码区
    .参数 进入许可证, 线程许可证

    LeaveCriticalSection (进入许可证)

.子程序 线程_等待, 逻辑型, 公开, 等待一个线程，返回真表示线程运行结束，返回假表示已超时。
    .参数 线程句柄, 整数型
    .参数 超时, 整数型, 可空, 留空，则无限等待
    .局部变量 变量_6DC00125, 整数型
    .局部变量 变量_6EC00125, 整数型

    .如果真 (超时 ＝ 0)
        超时 ＝ -1
    .如果真结束
    变量_6EC00125 ＝ 取启动时间 ()
    .循环判断首 ()
        变量_6DC00125 ＝ MsgWaitForMultipleObjects (1, 线程句柄, 假, 超时, 1215)
        .如果真 (超时 ≠ -1)
            .如果真 (取启动时间 () － 变量_6EC00125 ≥ 超时)
                变量_6DC00125 ＝ 258
            .如果真结束
            
        .如果真结束
        处理事件 ()
    .循环判断尾 (变量_6DC00125 ≠ 0 且 变量_6DC00125 ≠ 258)
    返回 (变量_6DC00125 ＝ 0)

.子程序 线程_挂起, 整数型, 公开, 将指定线程的执行挂起,注意，同一个线程可以被挂起多次，如果挂起多次，就要恢复多次。
    .参数 线程句柄, 整数型, , 要等待的线程句柄,用 线程_启动() 返回的;

    返回 (SuspendThread (线程句柄))

.子程序 线程_恢复, 整数型, 公开, 恢复执行挂起的一个线程。
    .参数 线程句柄, 整数型, , 要等待的线程句柄,用 线程_启动() 返回的;

    返回 (ResumeThread (线程句柄))

.子程序 线程_枚举, 整数型, 公开, 枚举指定进程ID中所有线程列表，成功返回线程数量，失败返回零。
    .参数 进程ID, 整数型
    .参数 线程列表, 整数型, 数组, 变量储存返回值。
    .局部变量 变量_FBE70125, 整数型
    .局部变量 变量_FCE70125, 自定义_55150141
    .局部变量 变量_FDE70125, 逻辑型

    变量_FBE70125 ＝ CreateToolhelp32Snapshot (#<?未知本地类型?>, 进程ID)
    .如果真 (变量_FBE70125 ≠ #INVALID_HANDLE_VALUE)
        清除数组 (线程列表)
        变量_FCE70125.成员_56150135 ＝ 28
        变量_FDE70125 ＝ Thread32First (变量_FBE70125, 变量_FCE70125)
        .判断循环首 (变量_FDE70125)
            .如果真 (变量_FCE70125.成员_59150135 ＝ 进程ID)
                加入成员 (线程列表, 变量_FCE70125.成员_58150135)
            .如果真结束
            变量_FDE70125 ＝ Thread32Next (变量_FBE70125, 变量_FCE70125)
        .判断循环尾 ()
    .如果真结束
    CloseHandle (变量_FBE70125)
    返回 (取数组成员数 (线程列表))

.子程序 线程_置CPU, 整数型, 公开, 设置线程在指定CPU上运行
    .参数 参_线程句柄, 整数型
    .参数 参_CPU序号, 整数型, , CPU序号的或运算值：1（0001）代表只运行在CPU1，2（0010）代表只运行在CPU2，3（0011）代表可以运行在CPU1和CPU2，以此类推。

    返回 (DLL_SetThreadAffinityMask (参_线程句柄, 参_CPU序号))

.子程序 线程_取状态, 整数型, 公开, 0=线程已结束  1=线程正在运行  -1=线程句柄已失效或销毁
    .参数 参_线程句柄, 整数型
    .局部变量 变量_7BF10125, 整数型

    变量_7BF10125 ＝ WaitForSingleObject (参_线程句柄, 0)
    .判断开始 (变量_7BF10125 ＝ 258)
        返回 (1)
    .判断 (变量_7BF10125 ＝ -1)
        返回 (-1)
    .默认
        返回 (变量_7BF10125)
    .判断结束
    返回 (0)
    

.子程序 线程_取线程信息, 精易_线程信息, 公开, 获取指定线程的入口地址和映射文件的名称
    .参数 线程ID, 整数型
    .局部变量 变量_670C0325, 整数型
    .局部变量 变量_6E0C0325, 整数型
    .局部变量 变量_6F0C0325, 整数型
    .局部变量 变量_700C0325, 精易_线程信息
    .局部变量 变量_7C0C0325, 整数型

    变量_670C0325 ＝ OpenThread (#<?未知本地类型?>, 0, 线程ID)
    .如果真 (变量_670C0325 ≠ #NULL)
        变量_6E0C0325 ＝ DLL_NtQueryInformationThread (变量_670C0325, #<?未知本地类型?>, 取指针整数_ (变量_700C0325.线程入口), 4, #NULL)
        .如果真 (变量_6E0C0325 ＝ #STATUS_SUCCESS 且 变量_700C0325.线程入口 ≠ 0)
            变量_6F0C0325 ＝ LocalAlloc (#LMEM_ZEROINIT, 28)
            .如果真 (变量_6F0C0325 ≠ #NULL)
                变量_6E0C0325 ＝ DLL_NtQueryInformationThread (变量_670C0325, #<?未知本地类型?>, 变量_6F0C0325, 28, #NULL)
                .如果真 (变量_6E0C0325 ＝ #STATUS_SUCCESS)
                    变量_700C0325.进程ID ＝ __get (变量_6F0C0325, 8)
                    变量_700C0325.线程ID ＝ __get (变量_6F0C0325, 12)
                    变量_7C0C0325 ＝ OpenProcess (#PROCESS_QUERY_INFORMATION, 0, 变量_700C0325.进程ID)
                    .如果真 (变量_7C0C0325 ≠ #NULL)
                        变量_700C0325.模块路径 ＝ 取空白文本 (1024)
                        DLL_GetMappedFileNameA (变量_7C0C0325, 变量_700C0325.线程入口, 变量_700C0325.模块路径, 1024)
                        CloseHandle (变量_7C0C0325)
                    .如果真结束
                    
                .如果真结束
                LocalFree (变量_6F0C0325)
            .如果真结束
            
        .如果真结束
        CloseHandle (变量_670C0325)
    .如果真结束
    返回 (变量_700C0325)

