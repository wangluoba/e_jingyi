.版本 2

.程序集 集_修复堆内存重释放
.程序集变量 类变量_E5C60215, 类_HOOK_EX

.子程序 收录说明
    

.子程序 内存_修复堆内存重释放, 逻辑型, 公开, 由于重释放会产生崩溃，因此修复
    返回 (类变量_E5C60215.安装 (程序_取函数地址_API (“kernel32”, “HeapFree”), 程序_取子程序地址 (&hook), 假))

.子程序 hook, 整数型
    .参数 变量_E6C60225, 整数型
    .参数 变量_E7C60225, 整数型
    .参数 变量_E8C60225, 整数型
    .局部变量 变量_E9C60225, 整数型

    变量_E9C60225 ＝ HeapSize (变量_E6C60225, 0, 变量_E8C60225)
    .判断开始 (变量_E9C60225 ＝ -1)
        返回 (1)
    .默认
        返回 (类变量_E5C60215.回调ex ())
    .判断结束
    

.子程序 程序_取函数地址_API, 整数型, 公开, 取得函数地址，api版
    .参数 参_模块名, 文本型
    .参数 参_命令名, 文本型

    返回 (GetProcAddress (LoadLibraryA (参_模块名), 参_命令名))

.子程序 内存_修改内存, 逻辑型, 公开, 非高段地址可使用 内存_写到内存（） 或 内存_写到内存_dw
    .参数 参_目的地址, 整数型, , 目的地址的缓冲区长度需大于或等于长度
    .参数 参_字节集, 字节集, , 用于写入到目的地址的 数据
    .参数 参_长度, 整数型, , 需要写入的长度
    .局部变量 变量_EFC60225, 整数型
    .局部变量 变量_F0C60225, 精易_内存属性

    变量_EFC60225 ＝ VirtualQueryEx (-1, 参_目的地址, 变量_F0C60225, 28)
    .如果真 (变量_EFC60225 ＝ 0)
        返回 (假)
    .如果真结束
    .如果真 (VirtualProtectEx (-1, 变量_F0C60225.区域地址, 6, 64, 变量_F0C60225.当前属性) ＝ 0)
        返回 (假)
    .如果真结束
    内存_写到内存 (参_目的地址, 取指针_字节集型 (参_字节集), 参_长度)
    返回 (真)

.子程序 内存_写到内存, , 公开, 高段地址可使用 内存_修改内存（）
    .参数 参_目的地址, 整数型, , 目的地址的缓冲区长度需大于或等于长度
    .参数 参_源地址, 整数型, , 用于写入到目的地址的 数据的指针
    .参数 参_长度, 整数型, , 需要写入的长度

    置入代码 ({ 96, 139, 77, 16, 139, 125, 8, 139, 117, 12, 243, 164, 97 })

.子程序 内存_取指令对其长度, 整数型, 公开, 返回大于或等于给定长度的理想值。
    .参数 参_预算长度, 整数型
    .参数 参_被扫描的字节集, 字节集
    .局部变量 变量_F6C60225, 字节集
    .局部变量 变量_F7C60225, 整数型
    .局部变量 变量_F8C60225, 整数型
    .局部变量 变量_F9C60225, 字节型
    .局部变量 变量_FAC60225, 整数型
    .局部变量 变量_FBC60225, 整数型

    变量_F7C60225 ＝ 取字节集长度 (参_被扫描的字节集)
    .如果真 (变量_F7C60225 ≤ 参_预算长度)
        返回 (0)
    .如果真结束
    变量_F6C60225 ＝ { 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 2, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 4, 5, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 0, 1, 1, 2, 5, 3, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 1 }
    变量_FAC60225 ＝ 0
    .计次循环首 (变量_F7C60225, 变量_F8C60225)
        变量_FAC60225 ＝ 变量_FAC60225 － 1
        .如果真 (变量_FAC60225 ＞ -1)
            到循环尾 ()
        .如果真结束
        变量_F9C60225 ＝ 参_被扫描的字节集 [变量_F8C60225]
        变量_FAC60225 ＝ 变量_F6C60225 [变量_F9C60225 ＋ 1]
        变量_FBC60225 ＝ 变量_F8C60225 ＋ 变量_FAC60225
        .如果真 (变量_FBC60225 ≥ 参_预算长度)
            返回 (变量_FBC60225)
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 内存_跳转偏移处理, 字节集, 公开, 返回 偏移call  jmp  转成成绝对call  jmp后的代码集 
    .参数 参_字节集, 字节集
    .参数 参_函数地址, 整数型, , 函数基址
    .局部变量 变量_FEC60225, 整数型
    .局部变量 变量_FFC60225, 字节集
    .局部变量 变量_00C70225, 整数型
    .局部变量 变量_01C70225, 整数型
    .局部变量 变量_02C70225, 字节型
    .局部变量 变量_03C70225, 字节集
    .局部变量 变量_04C70225, 字节集
    .局部变量 变量_05C70225, 字节集
    .局部变量 变量_06C70225, 整数型
    .局部变量 变量_07C70225, 字节集
    .局部变量 变量_08C70225, 整数型
    .局部变量 变量_09C70225, 整数型
    .局部变量 变量_0AC70225, 整数型
    .局部变量 变量_0BC70225, 字节集

    变量_FEC60225 ＝ 取字节集长度 (参_字节集)
    变量_FFC60225 ＝ { 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 2, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 4, 5, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 0, 1, 1, 2, 5, 3, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 1 }
    变量_03C70225 ＝ 参_字节集
    变量_04C70225 ＝ 取空白字节集 (4)
    变量_00C70225 ＝ 0
    .计次循环首 (变量_FEC60225, 变量_01C70225)
        变量_00C70225 ＝ 变量_00C70225 － 1
        .如果真 (变量_00C70225 ＞ -1)
            到循环尾 ()
        .如果真结束
        变量_02C70225 ＝ 参_字节集 [变量_01C70225]
        变量_00C70225 ＝ 变量_FFC60225 [变量_02C70225 ＋ 1]
        
        .判断开始 (变量_02C70225 ＝ 232)
            变量_04C70225 [1] ＝ 参_字节集 [变量_01C70225 ＋ 1]
            变量_04C70225 [2] ＝ 参_字节集 [变量_01C70225 ＋ 2]
            变量_04C70225 [3] ＝ 参_字节集 [变量_01C70225 ＋ 3]
            变量_04C70225 [4] ＝ 参_字节集 [变量_01C70225 ＋ 4]
            变量_06C70225 ＝ 参_函数地址 ＋ 变量_01C70225 ＋ 4 ＋ 取字节集数据 (变量_04C70225, 3, )
            变量_07C70225 ＝ { 255, 208 }
            变量_08C70225 ＝ 5
        .判断 (变量_02C70225 ＝ 233)
            变量_04C70225 [1] ＝ 参_字节集 [变量_01C70225 ＋ 1]
            变量_04C70225 [2] ＝ 参_字节集 [变量_01C70225 ＋ 2]
            变量_04C70225 [3] ＝ 参_字节集 [变量_01C70225 ＋ 3]
            变量_04C70225 [4] ＝ 参_字节集 [变量_01C70225 ＋ 4]
            变量_06C70225 ＝ 参_函数地址 ＋ 变量_01C70225 ＋ 4 ＋ 取字节集数据 (变量_04C70225, 3, )
            变量_07C70225 ＝ { 255, 224 }
            变量_08C70225 ＝ 5
        .判断 (变量_02C70225 ＝ 235)
            变量_04C70225 ＝ 到字节集 (到整数 (参_字节集 [变量_01C70225 ＋ 1] × 1))
            变量_06C70225 ＝ 参_函数地址 ＋ 变量_01C70225 ＋ 1 ＋ 取字节集数据 (变量_04C70225, 3, )
            
            
            
            变量_07C70225 ＝ { 255, 224 }
            变量_08C70225 ＝ 2
        .默认
            到循环尾 ()
        .判断结束
        变量_0BC70225 ＝ { 199, 192 } ＋ 到字节集 (变量_06C70225) ＋ 变量_07C70225
        变量_09C70225 ＝ 变量_0AC70225 ＋ 变量_01C70225
        变量_03C70225 ＝ 字节集替换 (变量_03C70225, 变量_09C70225, 变量_08C70225, 变量_0BC70225)
        变量_0AC70225 ＝ 变量_0AC70225 ＋ 取字节集长度 (变量_0BC70225) － 变量_08C70225
    .计次循环尾 ()
    
    返回 (变量_03C70225)
    

.子程序 内存_拷贝字节集, 整数型, 公开, 拷贝一段字节集并返回内存指针,自动释放（申请内存与写到内存的结合。）
    .参数 参_字节集, 字节集, , 需要拷贝的字节集
    .局部变量 变量_0DC70225, 整数型

    变量_0DC70225 ＝ 内存_申请内存 (取字节集长度 (参_字节集))
    内存_写到内存 (变量_0DC70225, 取指针_字节集型 (参_字节集), 取字节集长度 (参_字节集))
    返回 (变量_0DC70225)

.子程序 内存_申请内存, 整数型, 公开, 返回指针  自动释放，属性：不使用连续加填充0
    .参数 参_长度, 整数型, , 字节

    返回 (HeapAlloc (GetProcessHeap (), 9, 参_长度))

.子程序 程序_取参数个数, 整数型, 公开, 【扫描函数 勿频繁】取得函数参数个数，4字节对齐。特殊情况下，个数不等同于实际个数。仅用于计算栈平衡数值。
    .参数 参_被扫描函数指针, 整数型
    .局部变量 变量_10C70225, 字节集
    .局部变量 变量_11C70225, 字节集
    .局部变量 变量_12C70225, 整数型
    .局部变量 变量_13C70225, 字节型
    .局部变量 变量_14C70225, 整数型

    变量_10C70225 ＝ { 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 2, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 4, 5, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 0, 1, 1, 2, 5, 3, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 1 }
    变量_11C70225 ＝ { 0 }
    变量_14C70225 ＝ 0
    .判断循环首 (变量_12C70225 ＞ -1)
        变量_14C70225 ＝ 变量_14C70225 － 1
        .如果真 (变量_14C70225 ＞ -1)
            变量_12C70225 ＝ 变量_12C70225 ＋ 1
            到循环尾 ()
        .如果真结束
        内存_写到内存 (取指针_字节集型 (变量_11C70225), 参_被扫描函数指针 ＋ 变量_12C70225, 1)
        变量_13C70225 ＝ 变量_11C70225 [1]
        变量_14C70225 ＝ 变量_10C70225 [变量_13C70225 ＋ 1]
        变量_12C70225 ＝ 变量_12C70225 ＋ 1
        .判断开始 (变量_13C70225 ＝ 195)
            返回 (0)
        .默认
            .如果真 (变量_13C70225 ＝ 194)
                变量_11C70225 ＝ { 0, 0, 0, 0 }
                内存_写到内存 (取指针_字节集型 (变量_11C70225), 参_被扫描函数指针 ＋ 变量_12C70225, 2)
                返回 (取字节集数据 (变量_11C70225, 3, ) ÷ 4)
            .如果真结束
            
        .判断结束
        
    .判断循环尾 ()
    返回 (0)

.子程序 程序_取子程序地址, 整数型, 公开, 【扫描函数 勿频繁】动态扫描子程序真实地址，勿频繁调用  失败返回0
    .参数 参_子程序指针, 子程序指针
    .局部变量 变量_16C70225, 字节集
    .局部变量 变量_17C70225, 整数型, , "0"
    .局部变量 变量_18C70225, 整数型, , "0"
    .局部变量 变量_19C70225, 整数型
    .局部变量 变量_1AC70225, 字节集
    .局部变量 变量_1BC70225, 整数型, , "0"

    变量_16C70225 ＝ 取子程序字节集代码 (参_子程序指针)
    内存_取calljmp地址 (变量_16C70225, 到整数 (参_子程序指针), 变量_17C70225)
    .计次循环首 (取数组成员数 (变量_17C70225), 变量_19C70225)
        变量_1AC70225 ＝ 指针到字节集 (变量_17C70225 [变量_19C70225], 3)
        .如果真 (变量_1AC70225 ＝ { 85, 139, 236 })
            加入成员 (变量_18C70225, 变量_17C70225 [变量_19C70225])
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (取数组成员数 (变量_18C70225) ＝ 1)
        返回 (变量_18C70225 [1])
    .如果真结束
    
    .计次循环首 (取数组成员数 (变量_18C70225), 变量_19C70225)
        变量_16C70225 ＝ 取子程序字节集代码 (参_子程序指针)
        内存_取calljmp地址 (变量_16C70225, 到整数 (参_子程序指针), 变量_17C70225)
        .计次循环首 (取数组成员数 (变量_17C70225), 变量_19C70225)
            变量_1AC70225 ＝ 指针到字节集 (变量_17C70225 [变量_19C70225], 3)
            .如果真 (变量_1AC70225 ＝ { 85, 139, 236 })
                加入成员 (变量_1BC70225, 变量_17C70225 [变量_19C70225])
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    .如果真 (取数组成员数 (变量_1BC70225) ＝ 1)
        返回 (变量_1BC70225 [1])
    .如果真结束
    
    返回 (0)
    

.子程序 内存_取calljmp地址, 整数型, 公开, 将代码集中的偏移地址 转成绝对地址保存在数组里  并 返回成员数 
    .参数 参_字节集, 字节集
    .参数 参_函数地址, 整数型, , 函数基址
    .参数 参_存放数组, 整数型, 参考 数组, 存放已经转为绝对地址的偏移地址
    .局部变量 变量_1FC70225, 整数型
    .局部变量 变量_20C70225, 字节集
    .局部变量 变量_21C70225, 整数型
    .局部变量 变量_22C70225, 整数型
    .局部变量 变量_23C70225, 字节型
    .局部变量 变量_24C70225, 字节集
    .局部变量 变量_25C70225, 字节集
    .局部变量 变量_26C70225, 字节集
    .局部变量 变量_27C70225, 整数型
    .局部变量 变量_28C70225, 字节集
    .局部变量 变量_29C70225, 整数型
    .局部变量 变量_2AC70225, 整数型
    .局部变量 变量_2BC70225, 整数型
    .局部变量 变量_2CC70225, 字节集

    清除数组 (参_存放数组)
    变量_1FC70225 ＝ 取字节集长度 (参_字节集)
    变量_20C70225 ＝ { 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 2, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 4, 5, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 0, 1, 1, 2, 5, 3, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 1 }
    变量_24C70225 ＝ 参_字节集
    变量_25C70225 ＝ 取空白字节集 (4)
    变量_21C70225 ＝ 0
    .计次循环首 (变量_1FC70225, 变量_22C70225)
        变量_21C70225 ＝ 变量_21C70225 － 1
        .如果真 (变量_21C70225 ＞ -1)
            到循环尾 ()
        .如果真结束
        变量_23C70225 ＝ 参_字节集 [变量_22C70225]
        变量_21C70225 ＝ 变量_20C70225 [变量_23C70225 ＋ 1]
        
        .判断开始 (变量_23C70225 ＝ 232)
            变量_25C70225 [1] ＝ 参_字节集 [变量_22C70225 ＋ 1]
            变量_25C70225 [2] ＝ 参_字节集 [变量_22C70225 ＋ 2]
            变量_25C70225 [3] ＝ 参_字节集 [变量_22C70225 ＋ 3]
            变量_25C70225 [4] ＝ 参_字节集 [变量_22C70225 ＋ 4]
            变量_27C70225 ＝ 参_函数地址 ＋ 变量_22C70225 ＋ 4 ＋ 取字节集数据 (变量_25C70225, 3, )
            变量_28C70225 ＝ { 255, 208 }
            变量_29C70225 ＝ 5
        .判断 (变量_23C70225 ＝ 233)
            变量_25C70225 [1] ＝ 参_字节集 [变量_22C70225 ＋ 1]
            变量_25C70225 [2] ＝ 参_字节集 [变量_22C70225 ＋ 2]
            变量_25C70225 [3] ＝ 参_字节集 [变量_22C70225 ＋ 3]
            变量_25C70225 [4] ＝ 参_字节集 [变量_22C70225 ＋ 4]
            变量_27C70225 ＝ 参_函数地址 ＋ 变量_22C70225 ＋ 4 ＋ 取字节集数据 (变量_25C70225, 3, )
            变量_28C70225 ＝ { 255, 224 }
            变量_29C70225 ＝ 5
        .判断 (变量_23C70225 ＝ 235)
            变量_25C70225 ＝ 到字节集 (到整数 (参_字节集 [变量_22C70225 ＋ 1] × 1))
            变量_27C70225 ＝ 参_函数地址 ＋ 变量_22C70225 ＋ 1 ＋ 取字节集数据 (变量_25C70225, 3, )
            
            
            
            变量_28C70225 ＝ { 255, 224 }
            变量_29C70225 ＝ 2
        .默认
            到循环尾 ()
        .判断结束
        加入成员 (参_存放数组, 变量_27C70225)
        
        
        
        
    .计次循环尾 ()
    返回 (取数组成员数 (参_存放数组))
    

.子程序 取子程序字节集代码, 字节集, 公开, 返回 子程序头部到第一个返回处的代码集
    .参数 参_子程序指针, 子程序指针
    .局部变量 变量_2EC70225, 字节集
    .局部变量 变量_2FC70225, 字节集
    .局部变量 变量_30C70225, 整数型
    .局部变量 变量_31C70225, 整数型
    .局部变量 变量_32C70225, 整数型
    .局部变量 变量_33C70225, 字节型

    变量_2EC70225 ＝ { 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 2, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 4, 5, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 0, 1, 1, 2, 5, 3, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 1 }
    变量_2FC70225 ＝ { 0 }
    变量_32C70225 ＝ 到整数 (参_子程序指针)
    变量_30C70225 ＝ 0
    .判断循环首 (变量_31C70225 ＞ -1)
        变量_30C70225 ＝ 变量_30C70225 － 1
        .如果真 (变量_30C70225 ＞ -1)
            变量_31C70225 ＝ 变量_31C70225 ＋ 1
            到循环尾 ()
        .如果真结束
        内存_写到内存 (取指针_字节集型 (变量_2FC70225), 变量_32C70225 ＋ 变量_31C70225, 1)
        变量_33C70225 ＝ 变量_2FC70225 [1]
        变量_30C70225 ＝ 变量_2EC70225 [变量_33C70225 ＋ 1]
        变量_31C70225 ＝ 变量_31C70225 ＋ 1
        .判断开始 (变量_33C70225 ＝ 195)
            返回 (指针到字节集 (变量_32C70225, 变量_31C70225))
        .默认
            .如果真 (变量_33C70225 ＝ 194)
                返回 (指针到字节集 (变量_32C70225, 变量_31C70225 ＋ 2))
            .如果真结束
            
        .判断结束
        
    .判断循环尾 ()
    返回 ({ })

