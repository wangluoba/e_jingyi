.版本 2

.程序集 集_程序
.子程序 程序_运行Ex, 逻辑型, 公开
    .参数 命令行, 文本型
    .参数 等待运行完毕, 逻辑型, 可空
    .参数 窗口显示方式, 整数型, 可空, 参数值可以为以下常量之一：1、#隐藏窗口； 2、#普通激活； 3、#最小化激活； 4、#最大化激活； 5、#普通不激活； 6、#最小化不激活。如果省略本参数，默认为“普通激活”方式。
    .参数 标准输入数据, 字节集, 可空
    .参数 运行返回值, 整数型, 参考 可空, 该参数值为返回值，且[等待运行完毕]必须为真。
    .参数 标准输出数据, 字节集, 参考 可空, 该参数值为返回值，且[等待运行完毕]必须为真。
    .参数 标准错误数据, 字节集, 参考 可空, 该参数值为返回值，且[等待运行完毕]必须为真。
    .局部变量 变量_E2B90225, STARTUPINFO
    .局部变量 变量_E3B90225, 自定义_C6C80141
    .局部变量 变量_E4B90225, 精易_进程结构
    .局部变量 变量_E5B90225, 整数型
    .局部变量 变量_E6B90225, 整数型
    .局部变量 变量_E7B90225, 整数型
    .局部变量 变量_E8B90225, 整数型
    .局部变量 变量_E9B90225, 整数型
    .局部变量 变量_EAB90225, 逻辑型

    变量_E2B90225.cb ＝ 68
    变量_E2B90225.dwFlags ＝ #STARTF_USESHOWWINDOW
    .判断开始 (窗口显示方式 ＝ #隐藏窗口)
        变量_E2B90225.wShowWindow ＝ #SW_HIDE
    .判断 (窗口显示方式 ＝ #最小化激活)
        变量_E2B90225.wShowWindow ＝ #SW_SHOWMINIMIZED
    .判断 (窗口显示方式 ＝ #最大化激活)
        变量_E2B90225.wShowWindow ＝ #SW_SHOWMAXIMIZED
    .判断 (窗口显示方式 ＝ #普通不激活)
        变量_E2B90225.wShowWindow ＝ #SW_SHOWNOACTIVATE
    .判断 (窗口显示方式 ＝ #最小化不激活)
        变量_E2B90225.wShowWindow ＝ #SW_SHOWMINNOACTIVE
    .默认
        
        变量_E2B90225.wShowWindow ＝ #SW_SHOWNORMAL
    .判断结束
    .如果真 (是否为空 (标准输入数据) ＝ 假 或 是否为空 (标准输出数据) ＝ 假 或 是否为空 (标准错误数据) ＝ 假)
        变量_E2B90225.dwFlags ＝ 位或 (变量_E2B90225.dwFlags, #STARTF_USESTDHANDLES)
        变量_E3B90225.成员_DAC80135 ＝ #sizeof_SECURITY_ATTRIBUTES
        变量_E3B90225.成员_DCC80135 ＝ 真
        DLL_CreatePipe (变量_E5B90225, 变量_E6B90225, 变量_E3B90225, 0)
        DLL_CreatePipe (变量_E7B90225, 变量_E8B90225, 变量_E3B90225, 0)
        .如果真 (是否为空 (标准输入数据) ＝ 假)
            WriteFile (变量_E6B90225, 标准输入数据, 取字节集长度 (标准输入数据), 0, 0)
            变量_E2B90225.hStdInput ＝ 变量_E5B90225
        .如果真结束
        .如果真 (是否为空 (标准输出数据) ＝ 假)
            变量_E2B90225.hStdOutput ＝ 变量_E6B90225
        .如果真结束
        .如果真 (是否为空 (标准错误数据) ＝ 假)
            变量_E2B90225.hStdError ＝ 变量_E8B90225
        .如果真结束
        
    .如果真结束
    .如果真 (DLL_CreateProcessA (0, 命令行, 0, 0, 真, 0, 0, 0, 变量_E2B90225, 变量_E4B90225))
        变量_EAB90225 ＝ 真
        .如果真 (等待运行完毕)
            WaitForSingleObject (变量_E4B90225.进程句柄, #INFINITE)
            .如果真 (是否为空 (运行返回值) ＝ 假)
                DLL_GetExitCodeProcess (变量_E4B90225.进程句柄, 运行返回值)
            .如果真结束
            .如果真 (是否为空 (标准输出数据) ＝ 假)
                .如果真 (PeekNamedPipe_字节集 (变量_E5B90225, 标准输出数据, 0, 0, 变量_E9B90225, 0))
                    标准输出数据 ＝ 取空白字节集 (变量_E9B90225)
                    .如果真 (变量_E9B90225 ＞ 0)
                        DLL_ReadFile (变量_E5B90225, 标准输出数据, 变量_E9B90225, 0, 0)
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            .如果真 (是否为空 (标准错误数据) ＝ 假)
                .如果真 (PeekNamedPipe_字节集 (变量_E7B90225, 标准错误数据, 0, 0, 变量_E9B90225, 0))
                    标准错误数据 ＝ 取空白字节集 (变量_E9B90225)
                    .如果真 (变量_E9B90225 ＞ 0)
                        DLL_ReadFile (变量_E7B90225, 标准错误数据, 变量_E9B90225, 0, 0)
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        CloseHandle (变量_E4B90225.进程句柄)
        CloseHandle (变量_E4B90225.线程句柄)
    .如果真结束
    .如果真 (是否为空 (标准输入数据) ＝ 假 或 是否为空 (标准输出数据) ＝ 假 或 是否为空 (标准错误数据) ＝ 假)
        CloseHandle (变量_E5B90225)
        CloseHandle (变量_E6B90225)
        CloseHandle (变量_E7B90225)
        CloseHandle (变量_E8B90225)
    .如果真结束
    返回 (变量_EAB90225)

.子程序 程序_标准输入, 逻辑型, 公开
    .参数 数据, 字节集, 参考 可空, 该参数值为返回值
    .局部变量 变量_98B50225, 整数型
    .局部变量 变量_99B50225, 整数型
    .局部变量 变量_9AB50225, 整数型

    变量_98B50225 ＝ DLL_GetStdHandle (#STD_INPUT_HANDLE)
    .如果真 (变量_98B50225 ≠ 0)
        .如果真 (PeekNamedPipe_字节集 (变量_98B50225, 数据, 0, 0, 变量_9AB50225, 0))
            数据 ＝ 取空白字节集 (变量_9AB50225)
            .如果真 (变量_9AB50225 ＞ 0)
                ReadFile_字节集 (变量_98B50225, 数据, 变量_9AB50225, 0, 0)
            .如果真结束
            返回 (真)
        .如果真结束
        
    .如果真结束
    返回 (假)

.子程序 程序_标准输出, 逻辑型, 公开
    .参数 数据, 字节集
    .局部变量 变量_9CB50225, 整数型

    变量_9CB50225 ＝ DLL_GetStdHandle (#STD_OUTPUT_HANDLE)
    .如果真 (变量_9CB50225 ≠ 0)
        返回 (WriteFile (变量_9CB50225, 数据, 取字节集长度 (数据), 0, 0))
    .如果真结束
    返回 (假)

.子程序 程序_锁定到任务栏, 逻辑型, 公开, 将指定的文件锁定到任务栏
    .参数 文件路径, 文本型

    返回 (程序_锁定到任务栏W (编码_Ansi到Unicode (文件路径, )))

.子程序 程序_锁定到任务栏W, 逻辑型, 公开, 将指定的文件锁定到任务栏
    .参数 文件路径, 字节集
    .局部变量 变量_76FD0225, 字节集

    .如果真 (程序_伪装资源管理器 ())
        变量_76FD0225 ＝ 进程_取资源字符串W (编码_Ansi到Unicode (“shell32.dll”, ), 5386)
        返回 (系统_遍历右键菜单并执行W (文件路径, 变量_76FD0225))
    .如果真结束
    返回 (假)

.子程序 程序_从任务栏解锁, 逻辑型, 公开, 将指定的文件从任务栏取消固定
    .参数 文件路径, 文本型

    返回 (程序_从任务栏解锁W (编码_Ansi到Unicode (文件路径, )))

.子程序 程序_从任务栏解锁W, 逻辑型, 公开, 将指定的文件从任务栏取消固定
    .参数 文件路径, 字节集
    .局部变量 变量_7FFD0225, 字节集

    .如果真 (程序_伪装资源管理器 ())
        变量_7FFD0225 ＝ 进程_取资源字符串W (编码_Ansi到Unicode (“shell32.dll”, ), 5387)
        返回 (系统_遍历右键菜单并执行W (文件路径, 变量_7FFD0225))
    .如果真结束
    返回 (假)

.子程序 程序_内存中运行EXE, 逻辑型, 公开, 可以直接运行资源中的程序，不必释放。成功返回真，失败返回假。
    .参数 欲执行的程序, 字节集, , 欲执行的程序，不支持某些加了壳的程序，请自行测试。
    .参数 命令行, 文本型, 可空, 为程序提供的命令行参数，不需要请留空。
    .参数 外壳程序路径, 文本型, 可空, 外壳程序的路径(如果用系统程序做外壳，如cmd.exe、svchost.exe，可以实现穿防火墙，呵呵)，不支持某些程序，请自行测试；不在当前目录下要提供绝对路径；留空默认为cmd.exe，如果无法运行，请换用不同的程序尝试。
    .参数 等待程序运行完毕, 逻辑型, 可空, 默认为假，即不等待。
    .参数 窗口显示方式, 整数型, 可空, 1#隐藏窗口； 2#普通激活； 3#最小化激活； 4#最大化激活； 5#普通不激活； 6#最小化不激活。如果省略本参数，默认为“普通激活”方式。
    .参数 运行信息, 精易_进程结构, 参考 可空, 用来接收在内存中执行的exe的运行信息(进程、主线程的句柄和ID)。不需要可留空。
    .局部变量 变量_577F0225, 自定义_ED7E0241
    .局部变量 变量_587F0225, 自定义_2F7F0241
    .局部变量 变量_597F0225, 自定义_D07F0241
    .局部变量 变量_5A7F0225, STARTUPINFO
    .局部变量 变量_5B7F0225, 自定义_9B7F0241
    .局部变量 变量_5C7F0225, 整数型
    .局部变量 变量_5D7F0225, 整数型
    .局部变量 变量_5E7F0225, 整数型
    .局部变量 变量_5F7F0225, 整数型

    连续赋值 (0, 运行信息.进程标识符, 运行信息.进程句柄, 运行信息.线程标识符, 运行信息.线程句柄)
    .如果真 (欲执行的程序 ＝ { })
        返回 (假)
    .如果真结束
    RtlMoveMemory_IMAGE_DOS_HEADER (变量_577F0225, 欲执行的程序 [1], DLL_LocalSize3 (变量_577F0225))
    .如果真 (变量_577F0225.成员_EE7E0235 ≠ 23117)
        返回 (假)
    .如果真结束
    DLL_RtlMoveMemory14 (变量_587F0225, 欲执行的程序 [变量_577F0225.成员_007F0235 ＋ 1], DLL_LocalSize2 (变量_587F0225))
    .如果真 (变量_587F0225.成员_307F0235 ≠ 17744)
        返回 (假)
    .如果真结束
    变量_5A7F0225.cb ＝ 68
    .如果真 (是否为空 (窗口显示方式) ＝ 假 且 窗口显示方式 ≠ 2 且 窗口显示方式 ＞ 0 且 窗口显示方式 ≤ 6)
        变量_5A7F0225.dwFlags ＝ 1
        变量_5A7F0225.wShowWindow ＝ 多项选择 (窗口显示方式, 0, 5, 2, 3, 8, 7)
    .如果真结束
    .如果真 (DLL_CreateProcessA (0, 选择 (是否为空 (外壳程序路径), 取cmd路径 (), 外壳程序路径) ＋ 选择 (是否为空 (命令行) 或 命令行 ＝ “”, “”, “ ” ＋ 命令行), 0, 0, 假, 4, 0, 0, 变量_5A7F0225, 运行信息) ＝ 假)
        返回 (假)
    .如果真结束
    变量_5B7F0225.成员_9C7F0235 ＝ 65538
    .如果真 (DLL_GetThreadContext (运行信息.线程句柄, 变量_5B7F0225) ＝ 0)
        ClearProcess (运行信息)
        返回 (假)
    .如果真结束
    DLL_ReadProcessMemory4 (运行信息.进程句柄, 变量_5B7F0225.成员_AA7F0235 ＋ 8, 变量_5E7F0225, 4, 0)
    .如果真 (变量_5E7F0225 ＝ 0)
        ClearProcess (运行信息)
        返回 (假)
    .如果真结束
    .如果真 (DLL_ZwUnmapViewOfSection (运行信息.进程句柄, 变量_5E7F0225) ＝ 0)
        ClearProcess (运行信息)
        返回 (假)
    .如果真结束
    变量_5C7F0225 ＝ VirtualAllocEx (运行信息.进程句柄, 变量_587F0225.成员_327F0235.成员_FE7F0235, 变量_587F0225.成员_327F0235.成员_08800235, 12288, 4)
    .如果真 (变量_5C7F0225 ＝ 0)
        变量_5C7F0225 ＝ VirtualAllocEx (运行信息.进程句柄, 0, 变量_587F0225.成员_327F0235.成员_08800235, 12288, 4)
    .如果真结束
    .如果真 (变量_5C7F0225 ＝ 0)
        ClearProcess (运行信息)
        返回 (假)
    .如果真结束
    DLL_WriteProcessMemory2 (运行信息.进程句柄, 变量_5C7F0225, 欲执行的程序 [1], 变量_587F0225.成员_327F0235.成员_09800235, 0)
    变量_5F7F0225 ＝ 变量_577F0225.成员_007F0235 ＋ DLL_LocalSize2 (变量_587F0225)
    .计次循环首 (变量_587F0225.成员_317F0235.成员_E57F0235, 变量_5D7F0225)
        DLL_RtlMoveMemory13 (变量_597F0225, 欲执行的程序 [变量_5F7F0225 ＋ (变量_5D7F0225 － 1) × 40 ＋ 1], DLL_LocalSize (变量_597F0225))
        .如果真 (变量_597F0225.成员_D57F0235 ＋ 1 ＞ 字节集_取长度 (欲执行的程序))
            ClearProcess (运行信息)
            返回 (假)
        .如果真结束
        DLL_WriteProcessMemory2 (运行信息.进程句柄, 变量_5C7F0225 ＋ 变量_597F0225.成员_D37F0235, 欲执行的程序 [变量_597F0225.成员_D57F0235 ＋ 1], 变量_597F0225.成员_D47F0235, 0)
        VirtualProtectEx (运行信息.进程句柄, 变量_5C7F0225 ＋ 变量_597F0225.成员_D37F0235, 变量_597F0225.成员_D27F0235, Protect (变量_597F0225.成员_DA7F0235), 变量_5E7F0225)
    .计次循环尾 ()
    DLL_WriteProcessMemory (运行信息.进程句柄, 变量_5B7F0225.成员_AA7F0235 ＋ 8, 变量_5C7F0225, 4, 0)
    变量_5B7F0225.成员_AD7F0235 ＝ 变量_5C7F0225 ＋ 变量_587F0225.成员_327F0235.成员_FB7F0235
    DLL_SetThreadContext (运行信息.线程句柄, 变量_5B7F0225)
    ResumeThread (运行信息.线程句柄)
    .如果真 (等待程序运行完毕)
        WaitForSingleObject (运行信息.进程句柄, -1)
    .如果真结束
    .如果真 (是否为空 (运行信息))
        CloseHandle (运行信息.线程句柄)
        CloseHandle (运行信息.进程句柄)
    .如果真结束
    返回 (真)

.子程序 取cmd路径, 文本型
    .局部变量 变量_4D7F0225, 整数型
    .局部变量 变量_4E7F0225, 文本型

    变量_4D7F0225 ＝ GetEnvironmentVariable (“ComSpec”, “”, 0)
    .计次循环首 (变量_4D7F0225, )
        变量_4E7F0225 ＝ 变量_4E7F0225 ＋ “ ”
    .计次循环尾 ()
    GetEnvironmentVariable (“ComSpec”, 变量_4E7F0225, 变量_4D7F0225)
    返回 (变量_4E7F0225)

.子程序 ClearProcess
    .参数 变量_BA7F0225, 精易_进程结构, 参考

    TerminateProcess (变量_BA7F0225.进程句柄, 0)
    CloseHandle (变量_BA7F0225.线程句柄)
    CloseHandle (变量_BA7F0225.进程句柄)
    连续赋值 (0, 变量_BA7F0225.进程标识符, 变量_BA7F0225.进程句柄, 变量_BA7F0225.线程标识符, 变量_BA7F0225.线程句柄)

.子程序 Protect, 整数型
    .参数 变量_DC7F0225, 整数型

    返回 (多项选择 (RShift (变量_DC7F0225, 29) ＋ 1, 1, 16, 2, 32, 4, 64, 4, 64))

.子程序 RShift, 整数型
    .参数 变量_DF7F0225, 整数型
    .参数 变量_E07F0225, 整数型

    返回 (vbLongToULong (变量_DF7F0225) ÷ 数值_求次方 (2, 变量_E07F0225))

.子程序 vbLongToULong, 双精度小数型
    .参数 变量_22800225, 双精度小数型

    .如果真 (变量_22800225 ＜ 0)
        返回 (变量_22800225 ＋ 4294967296)
    .如果真结束
    返回 (变量_22800225)

.子程序 数值_求次方, 双精度小数型
    .参数 变量_31800225, 双精度小数型
    .参数 变量_32800225, 双精度小数型

    置入代码 ({ 221, 69, 16, 221, 69, 8, 217, 241, 217, 192, 217, 252, 220, 225, 217, 201, 217, 224, 217, 240, 217, 232, 222, 193, 217, 253, 221, 217, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 16, 0 })
    返回 (0)

.子程序 程序_生成GUID, 文本型, 公开, 生成标准的GUID格式：635897F8-2A48-4882-B3E1-823B8E5B6DF8
    .局部变量 变量_B4040325, 字节集
    .局部变量 变量_B5040325, 文本型
    .局部变量 变量_C1040325, 整数型
    .局部变量 变量_B9040325, 文本型
    .局部变量 变量_BD040325, 整数型

    变量_B4040325 ＝ 取空白字节集 (16)
    CoCreateGuid (变量_B4040325)
    变量_B5040325 ＝ 字节集_字节集到十六进制2 (变量_B4040325)
    变量_C1040325 ＝ 取指针文本_ (变量_B5040325)
    
    变量_B9040325 ＝ 取空白文本 (37)
    变量_BD040325 ＝ 取指针文本_ (变量_B9040325)
    memcpy (变量_BD040325 ＋ 6, 变量_C1040325 ＋ 0, 2)
    memcpy (变量_BD040325 ＋ 4, 变量_C1040325 ＋ 2, 2)
    memcpy (变量_BD040325 ＋ 2, 变量_C1040325 ＋ 4, 2)
    memcpy (变量_BD040325 ＋ 0, 变量_C1040325 ＋ 6, 2)
    __set_byte (变量_BD040325, 8, 45)
    memcpy (变量_BD040325 ＋ 11, 变量_C1040325 ＋ 8, 2)
    memcpy (变量_BD040325 ＋ 9, 变量_C1040325 ＋ 10, 2)
    __set_byte (变量_BD040325, 13, 45)
    memcpy (变量_BD040325 ＋ 16, 变量_C1040325 ＋ 12, 2)
    memcpy (变量_BD040325 ＋ 14, 变量_C1040325 ＋ 14, 2)
    __set_byte (变量_BD040325, 18, 45)
    memcpy (变量_BD040325 ＋ 19, 变量_C1040325 ＋ 16, 2)
    memcpy (变量_BD040325 ＋ 21, 变量_C1040325 ＋ 18, 2)
    __set_byte (变量_BD040325, 23, 45)
    memcpy (变量_BD040325 ＋ 24, 变量_C1040325 ＋ 20, 12)
    __set_byte (变量_BD040325, 36, 0)
    返回 (变量_B9040325)

.子程序 程序_COM生成GUID, 文本型, 公开, 生成返回一个新的全球唯一的随机GUID文本值
    .参数 GUID, GUID, 参考 可空, 保存生成的GUID到此参数变量中
    .局部变量 变量_037E0225, 字节集

    变量_037E0225 ＝ 取空白字节集 (128)
    DLL_CoCreateGuid (GUID)
    DLL_StringFromGUID22 (GUID, 变量_037E0225, 128)
    返回 (编码_Unicode到Ansi (变量_037E0225))

.子程序 程序_取文件版本号, 文本型, 公开, 取某程序的版本号信息，若为易语言程序，该版本号可以在配置里修改，如果在调试中，则返回空文本。一个易语言程序会获取到版本号和创建号，比如1.1.0.0，如果只需要1.1的部分，第三个参数设置为真即可。如果第一个参数不为空，则获取其他文件的版本号信息。源码由雪山凌狐提供
    .参数 程序路径, 文本型, 可空, 取出指定程序的版本号信息，如果留空，则取当前执行文件的版本号
    .参数 错误信息, 文本型, 参考 可空, 用于返回错误信息的
    .参数 忽略创建号, 逻辑型, 可空, 默认为真，忽略创建号，比如获取到的版本号为1.1.0.0，会返回1.1
    .局部变量 变量_875A0225, 文本型
    .局部变量 变量_885A0225, 文本型
    .局部变量 变量_895A0225, 文本型, , "0"

    变量_885A0225 ＝ 程序路径
    
    .如果真 (是否为空 (忽略创建号))
        忽略创建号 ＝ 真
    .如果真结束
    
    .如果真 (目录_是否符合规范 (变量_885A0225) ＝ 假 且 变量_885A0225 ≠ “”)
        错误信息 ＝ “当前文件名不符合规范”
        返回 (“”)
    .如果真结束
    .如果真 (变量_885A0225 ＝ “”)
        变量_885A0225 ＝ 取运行目录 () ＋ “\” ＋ 取执行文件名 ()
    .如果真结束
    
    变量_875A0225 ＝ 文件_取文件版本号 (变量_885A0225, 错误信息)
    
    .如果真 (忽略创建号)
        变量_895A0225 ＝ 分割文本 (变量_875A0225, “.”, )
        .如果真 (取数组成员数 (变量_895A0225) ＝ 4)
            变量_875A0225 ＝ 变量_895A0225 [1] ＋ “.” ＋ 变量_895A0225 [2]
        .如果真结束
        
    .如果真结束
    
    返回 (变量_875A0225)

.子程序 程序_是否关闭, 逻辑型, 公开, 弹出一个信息框，返回操作信息框的结果
    返回 (信息框 (“确定要关闭本窗口吗？”, 位或 (#确认取消钮, #询问图标), “友情提醒”) ＝ #确认钮)

.子程序 程序_调用DLL命令, 整数型, 公开, 调用失败返回-1，调用成功返回命令自身的值。 注意：被调用的命令必须有4个参数（前2个整数型,后2个文本型），否则会调用失败。
    .参数 DLL路径, 文本型, , DLL完整路径
    .参数 函数名称, 文本型, , 要调用的子程序命令名称
    .参数 参数1, 整数型, 可空, 参数如果非整数可用指针传递
    .参数 参数2, 整数型, 可空
    .参数 参数3, 整数型, 可空
    .参数 参数4, 整数型, 可空
    .参数 参数5, 整数型, 可空
    .参数 参数6, 整数型, 可空
    .参数 参数7, 整数型, 可空
    .参数 参数8, 整数型, 可空
    .参数 参数9, 整数型, 可空
    .参数 参数10, 整数型, 可空
    .参数 参数11, 整数型, 可空
    .参数 参数12, 整数型, 可空
    .参数 参数13, 整数型, 可空
    .参数 参数14, 整数型, 可空
    .参数 参数15, 整数型, 可空
    .局部变量 变量_FFAA0125, 整数型
    .局部变量 变量_00AB0125, 整数型
    .局部变量 变量_75DB0225, 整数型

    变量_FFAA0125 ＝ LoadLibraryA (DLL路径)
    .如果真 (变量_FFAA0125 ＝ 0)
        返回 (-1)
    .如果真结束
    变量_00AB0125 ＝ GetProcAddress (变量_FFAA0125, 函数名称)
    .如果 (变量_00AB0125 ≠ 0)
        变量_75DB0225 ＝ 调用子程序_ (变量_00AB0125, 参数1, 参数2, 参数3, 参数4, 参数5, 参数6, 参数7, 参数8, 参数9, 参数10, 参数11, 参数12, 参数13, 参数14, 参数15)
    .否则
        变量_75DB0225 ＝ -1
    .如果结束
    FreeLibrary (变量_FFAA0125)
    返回 (变量_75DB0225)

.子程序 程序_延时, 逻辑型, 公开, 不占用cpu，窗口不卡死，不影响其它代码执行
    .参数 延时间隔, 长整数型, 可空, 1000毫秒 = 1秒  留空为无限等待
    .参数 延时单位, 整数型, 可空, 默认为毫秒  0=毫秒  1=秒  2=分钟  3=小时
    .局部变量 变量_916F0125, 整数型
    .局部变量 变量_926F0125, 自定义_8B6F0141

    .判断开始 (延时单位 ＝ 0 且 是否为空 (延时间隔))
        延时间隔 ＝ 5000 × 60 × 60
        延时单位 ＝ 5000 × 60 × 60
    .判断 (延时单位 ＝ 0)
        延时单位 ＝ 1
    .判断 (延时单位 ＝ 1)
        延时单位 ＝ 1000
    .判断 (延时单位 ＝ 2)
        延时单位 ＝ 1000 × 60
    .判断 (延时单位 ＝ 3)
        延时单位 ＝ 1000 × 60 × 60
    .默认
        
    .判断结束
    变量_926F0125.成员_8C6F0135 ＝ -10 × 延时间隔 × 1000 × 延时单位
    变量_916F0125 ＝ CreateWaitableTimerA (0, 假, 0)
    SetWaitableTimer (变量_916F0125, 变量_926F0125, 0, 0, 0, 假)
    .判断循环首 (MsgWaitForMultipleObjects (1, 变量_916F0125, 假, -1, 255) ≠ 0)
        处理事件 ()
    .判断循环尾 ()
    CloseHandle (变量_916F0125)
    返回 (真)

.子程序 程序_延时1, 逻辑型, 公开, 通过创建一个 I/O 完成端口并等待操作完成来实现延迟执行的效果
    .参数 延时间隔, 整数型, , 毫秒
    .局部变量 变量_36020325, 整数型

    变量_36020325 ＝ CreateIoCompletionPort (GetCurrentProcess (), #NULL, 0, 0)
    .如果真 (变量_36020325 ≠ #NULL)
        GetQueuedCompletionStatus (变量_36020325, #NULL, #NULL, #NULL, 延时间隔)
        CloseHandle (变量_36020325)
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 程序_条件判断, 逻辑型, 公开
    .参数 条件文本, 文本型
    .参数 条件内存地址, 整数型, 可空
    .局部变量 变量_E16F0125, 整数型
    .局部变量 变量_E26F0125, 自定义_8B6F0141
    .局部变量 变量_E36F0125, 整数型
    .局部变量 变量_F16F0125, 内存共享

    变量_E26F0125.成员_8C6F0135 ＝ -10 × 5000 × 1000 × 1000
    变量_E16F0125 ＝ CreateWaitableTimerA (0, 假, 0)
    SetWaitableTimer (变量_E16F0125, 变量_E26F0125, 0, 0, 0, 假)
    .判断循环首 (MsgWaitForMultipleObjects (1, 变量_E16F0125, 假, -1, 255) ≠ 0)
        .如果真 (条件文本 ＝ 到文本 (变量_F16F0125.读取 (条件内存地址)))
            变量_F16F0125.释放 (条件内存地址)
            CloseHandle (变量_E16F0125)
            返回 (真)
        .如果真结束
        处理事件 ()
    .判断循环尾 ()
    .如果真 (变量_E16F0125 ≠ 0)
        CloseHandle (变量_E16F0125)
    .如果真结束
    返回 (假)

.子程序 程序_等待窗口出现, 整数型, 公开, 如果目标窗口出现则返回窗口句柄，否则将一直等待，超时返回 -1 。
    .参数 父句柄, 整数型, 可空, 父窗口句柄
    .参数 窗口标题, 文本型, 可空, 指定窗口标题。二选一
    .参数 窗口类名, 文本型, 可空, 指定窗口类名。二选一
    .参数 超时返回, 整数型, 可空, 单位为毫秒，超过此时间等待还没结果则返回假，留空则一直等待
    .参数 是否顶端, 逻辑型, 可空, 默认为假。如果为真，顶端窗口的标题或类名和指定的相同才返回窗口句柄。
    .局部变量 变量_1BD60225, 整数型
    .局部变量 变量_1CD60225, 整数型
    .局部变量 变量_1DD60225, 整数型

    .如果真 (是否为空 (窗口标题) 且 是否为空 (窗口类名))
        输出调试文本 (“需指定一个窗口标题或窗口类名！”)
        返回 (-1)
    .如果真结束
    .如果 (超时返回 ＞ 0)
        变量_1BD60225 ＝ 超时返回
    .否则
        变量_1BD60225 ＝ 1000 × 10000
    .如果结束
    变量_1CD60225 ＝ 取启动时间 ()
    .判断循环首 (取启动时间 () － 变量_1CD60225 ＜ 变量_1BD60225)
        .如果 (是否顶端)
            变量_1DD60225 ＝ 窗口_取顶端窗口句柄 ()
            .如果真 (是否为空 (窗口标题) ＝ 假 且 窗口_取标题 (变量_1DD60225) ＝ 窗口标题)
                返回 (变量_1DD60225)
            .如果真结束
            .如果真 (是否为空 (窗口类名) ＝ 假 且 窗口_取类名 (变量_1DD60225) ＝ 窗口类名)
                返回 (变量_1DD60225)
            .如果真结束
            
        .否则
            变量_1DD60225 ＝ 窗口_取句柄 (父句柄, , 窗口类名, 窗口标题)
            .如果真 (窗口_句柄是否有效 (变量_1DD60225))
                返回 (变量_1DD60225)
            .如果真结束
            
        .如果结束
        程序_延时 (50, )
    .判断循环尾 ()
    返回 (-1)

.子程序 程序_等待窗口消失, 逻辑型, 公开, 如果目标窗口不存在返回真 否则将一直等待，可以在第三个参数中设置超时返回
    .参数 窗口标题, 文本型, 可空, 窗口标题
    .参数 窗口类名, 文本型, 可空, 窗口类名
    .参数 超时返回, 整数型, 可空, 单位为毫秒,超过此时间等待还没结果则返回假,留空则一直等待
    .局部变量 变量_1F720125, 整数型
    .局部变量 变量_20720125, 整数型
    .局部变量 变量_23B70125, 整数型

    .如果 (超时返回 ＞ 0)
        变量_23B70125 ＝ 超时返回
    .否则
        变量_23B70125 ＝ 1000 × 10000
    .如果结束
    变量_1F720125 ＝ 取启动时间 ()
    .判断循环首 (取启动时间 () － 变量_1F720125 ＜ 变量_23B70125)
        变量_20720125 ＝ 窗口_取句柄 (, , 窗口类名, 窗口标题)
        .如果真 (窗口_句柄是否有效 (变量_20720125) ＝ 假)
            返回 (真)
        .如果真结束
        程序_延时 (50)
    .判断循环尾 ()
    返回 (假)

.子程序 程序_等待句柄消失, 逻辑型, 公开, 如果目标句柄存在返回真 否则将一直等待，可以在第二个参数中设置超时返回
    .参数 窗口句柄, 整数型, , 目标窗口句柄
    .参数 超时返回, 整数型, 可空, 单位为毫秒,超过此时间等待还没结果则返回假,留空则一直等待
    .局部变量 变量_2F720125, 整数型
    .局部变量 变量_22B70125, 整数型

    .如果 (超时返回 ＞ 0)
        变量_22B70125 ＝ 超时返回
    .否则
        变量_22B70125 ＝ 1000 × 10000
    .如果结束
    变量_2F720125 ＝ 取启动时间 ()
    .判断循环首 (取启动时间 () － 变量_2F720125 ＜ 变量_22B70125)
        .如果真 (窗口_句柄是否有效 (窗口句柄) ＝ 假)
            返回 (真)
        .如果真结束
        程序_延时 (50)
    .判断循环尾 ()
    返回 (假)

.子程序 程序_等待控件内容改变, 逻辑型, 公开, 等待一个控件的内容被改变，如果该控件的内容和第2个参数的文本一样，则返回真
    .参数 控件句柄, 整数型, , 目标窗口句柄
    .参数 控件内容, 文本型, , 控件的内容
    .参数 超时返回, 整数型, 可空, 单位为毫秒,超过此时间等待还没结果则返回假,留空则一直等待
    .局部变量 变量_6A720125, 整数型
    .局部变量 变量_21B70125, 整数型

    .如果 (超时返回 ＞ 0)
        变量_21B70125 ＝ 超时返回
    .否则
        变量_21B70125 ＝ 1000 × 10000
    .如果结束
    变量_6A720125 ＝ 取启动时间 ()
    .判断循环首 (取启动时间 () － 变量_6A720125 ＜ 变量_21B70125)
        .如果真 (窗口_取控件内容 (控件句柄) ＝ 控件内容)
            返回 (真)
        .如果真结束
        程序_延时 (50)
    .判断循环尾 ()
    返回 (假)

.子程序 程序_重启, , 公开, 重启当前程序
    .参数 窗口显示方式, 整数型, 可空, 可空：默认为正常。说明：重启后，窗口的显示方式。1、#隐藏窗口； 2、#普通激活； 3、#最小化激活； 4、#最大化激活； 5、#普通不激活； 6、#最小化不激活
    .参数 重启延时, 整数型, 可空, 可空。默认为1秒，最快。
    .局部变量 变量_4B880125, 文本型
    .局部变量 变量_4C880125, 文本型

    .如果真 (是否为调试版 ())
        提示框 (“你好，在调试状态下不能重启程序”)
        返回 ()
    .如果真结束
    .如果真 (是否为空 (重启延时) 或 重启延时 ＜ 1)
        重启延时 ＝ 2
    .如果真结束
    变量_4C880125 ＝ 取运行目录 () ＋ “\” ＋ 取执行文件名 ()
    .如果真 (文件是否存在 (变量_4C880125) ＝ 假)
        返回 ()
    .如果真结束
    变量_4B880125 ＝ 子文本替换 (#<?未知本地类型?>, “<文件名>”, 文件_到短文件名 (变量_4C880125), , 1, 真)
    变量_4B880125 ＝ 子文本替换 (变量_4B880125, “秒数”, 到文本 (重启延时), , 1, 真)
    写到文件 (取运行目录 () ＋ “\Restart.bat”, 到字节集 (变量_4B880125))
    运行 (取运行目录 () ＋ “\Restart.bat”, 假, 1)
    进程_结束 ()

.子程序 程序_更新, 文本型, 公开, 返回要运行命令行 万能更新程序 下载和例程使用说明地址: http://bbs.125.la/thread-20780-1-1.html
    .参数 万能更新程序地址, 文本型, , 万能更新程序地址
    .参数 启动窗口标题, 文本型, , 更新程序的启动窗口标题
    .参数 超级链接标题, 文本型, , 更新进度条下方的超级链接标题
    .参数 超级链接地址, 文本型, , 更新进度条下方的超级链接地址
    .参数 本地程序地址, 文本型, , 要更新的文件路径地址
    .参数 网络程序地址, 文本型, , 只支持zip和exe格式的下载文件
    .参数 信息框提示文本, 文本型, , 程序更新完成后的信息框提示文本,如果填入 不提示 三个汉字,将不会弹出信息框提示
    .参数 是否运行程序, 逻辑型, , 更新完成是否运行程序,一般为软件的主程序才设置为真
    .局部变量 变量_D36A0125, 文本型
    .局部变量 变量_D46A0125, 文本型

    变量_D46A0125 ＝ “<#>”
    变量_D36A0125 ＝ 启动窗口标题 ＋ 变量_D46A0125 ＋ 超级链接标题 ＋ 变量_D46A0125 ＋ 超级链接地址 ＋ 变量_D46A0125 ＋ 本地程序地址 ＋ 变量_D46A0125 ＋ 网络程序地址 ＋ 变量_D46A0125 ＋ 信息框提示文本 ＋ 变量_D46A0125 ＋ 到文本 (是否运行程序)
    变量_D36A0125 ＝ “ ” ＋ 子文本替换 (变量_D36A0125, “ ”, “<?>”, , , 真)
    ShellExecuteA (DLL_GetActiveWindow (), “”, 万能更新程序地址, 变量_D36A0125, “”, 5)
    返回 (变量_D36A0125)

.子程序 程序_删除自身, , 公开, 删除程序自身EXE文件
    .局部变量 变量_7D210125, 文本型
    .局部变量 变量_7E210125, 文本型

    变量_7D210125 ＝ 取运行目录 () ＋ “\”
    变量_7E210125 ＝ #引号 ＋ “)”
    写到文件 (变量_7D210125 ＋ “tem.vbs”, 到字节集 (#<?未知本地类型?> ＋ 变量_7D210125 ＋ 取执行文件名 () ＋ 变量_7E210125 ＋ #换行符 ＋ #<?未知本地类型?> ＋ 变量_7D210125 ＋ “tem.vbs” ＋ 变量_7E210125))
    置文件属性 (变量_7D210125 ＋ “tem.vbs”, 2)
    文件_执行 (变量_7D210125 ＋ “tem.vbs”)
    结束 ()

.子程序 程序_删除自身1, , 公开, 删除程序自身EXE文件
    .局部变量 变量_5FE20225, 整数型
    .局部变量 变量_60E20225, 字节集
    .局部变量 变量_61E20225, 字节集
    .局部变量 变量_62E20225, 字节集
    .局部变量 变量_63E20225, 自定义_2CE20241
    .局部变量 变量_64E20225, 整数型

    变量_5FE20225 ＝ #MAX_PATH × 2
    变量_60E20225 ＝ 取空白字节集 (变量_5FE20225)
    变量_61E20225 ＝ 取空白字节集 (变量_5FE20225)
    
    DLL_GetModuleFileNameW (0, 变量_60E20225, #MAX_PATH)
    变量_64E20225 ＝ DLL_GetShortPathNameW (变量_60E20225, 变量_60E20225, #MAX_PATH)
    .如果真 (变量_64E20225 ≠ 0 且 DLL_GetEnvironmentVariableW (编码_Ansi到Unicode (“COMSPEC”, ), 变量_61E20225, #MAX_PATH) ≠ 0)
        
        
        变量_62E20225 ＝ { 47, 0, 99, 0, 32, 0, 100, 0, 101, 0, 108, 0, 32, 0 } ＋ 取字节集左边 (变量_60E20225, 变量_64E20225 × 2) ＋ { 32, 0, 62, 0, 32, 0, 110, 0, 117, 0, 108, 0, 0, 0 }
        变量_63E20225.成员_2DE20235 ＝ 60
        
        
        变量_63E20225.成员_2FE20235 ＝ 0
        变量_63E20225.成员_30E20235 ＝ 编码_Ansi到Unicode (“Open”, )
        变量_63E20225.成员_31E20235 ＝ 变量_61E20225
        变量_63E20225.成员_32E20235 ＝ 变量_62E20225
        变量_63E20225.成员_33E20235 ＝ { }
        变量_63E20225.成员_34E20235 ＝ #SW_HIDE
        
        
        变量_63E20225.成员_2EE20235 ＝ #<?未知本地类型?>
        
        
        .如果真 (DLL_ShellExecuteExW (变量_63E20225))
            
            DLL_SetPriorityClass (变量_63E20225.成员_3BE20235, #<?未知本地类型?>)
            
            
            DLL_SetPriorityClass (GetCurrentProcess (), #<?未知本地类型?>)
            DLL_SetThreadPriority (GetCurrentThread (), #<?未知本地类型?>)
            
            
            SHChangeNotify (#<?未知本地类型?>, #<?未知本地类型?>, 取指针字节集_ (变量_60E20225), 0)
            DLL_ExitProcess (0)
        .如果真结束
        
    .如果真结束
    

.子程序 程序_出错退出, , 公开, 让程序内部崩溃方式结束运行。感谢goomoo提供提示
    .局部变量 变量_A90B0125, 字节集

    .判断循环首 (变量_A90B0125 ＝ { })
        变量_A90B0125 ＝ 变量_A90B0125 ＋ 取空白字节集 (1024 × 1024 × 1024)
    .判断循环尾 ()

.子程序 程序_是否被调试, 逻辑型, 公开, 判断自己的软件是否被调试；返回真，正在被调试，返回假，没有被调试；
    返回 (IsDebuggerPresent ())

.子程序 程序_禁止重复运行, , 公开, 禁止当前程序多开运行
    .参数 标识文本, 文本型, 可空, 尽量输复杂一点的文本！反斜杠字符除外
    .参数 是否弹出信息框提示, 逻辑型, 可空, 默认为假,不弹出提示;
    .参数 消息框提示文本, 文本型, 可空, 第二个参数设置为假,该参数则无效
    .参数 消息框提示图标, 整数型, 可空, 默认为信息图标，如：#信息图标
    .参数 是否前端显示程序, 逻辑型, 可空, 如果已重复运行,是否将程序在前端显示
    .参数 挂接事件, 子程序指针, 可空, 本参数不为空时优先执行
    .局部变量 变量_92C80225, 整数型
    .局部变量 变量_F8EC0225, 整数型

    .如果真 (标识文本 ＝ “”)
        标识文本 ＝ 校验_取md5 (到字节集 (“你懒得输入，我就写死，略略”))
    .如果真结束
    变量_F8EC0225 ＝ OpenEventA (#<?未知本地类型?>, 假, 标识文本)
    .如果真 (变量_F8EC0225 ≠ #NULL)
        .如果真 (是否为空 (挂接事件) ＝ 假)
            调用子程序_ (到整数 (挂接事件), , , , , , , , , , , , , , , )
        .如果真结束
        .如果真 (是否弹出信息框提示)
            .如果真 (是否为空 (消息框提示文本))
                消息框提示文本 ＝ “对不起,该进程已打开!”
            .如果真结束
            信息框 (消息框提示文本, 消息框提示图标, “友情提醒:”)
        .如果真结束
        .如果真 (是否前端显示程序)
            变量_92C80225 ＝ 进程_名取句柄 (取执行文件名 ())
            .如果真 (IsWindowVisible (变量_92C80225) ＝ 假)
                窗口_强制显示 (变量_92C80225, 假)
            .如果真结束
            .如果真 (窗口_是否最小化 (变量_92C80225))
                窗口_还原 (变量_92C80225)
            .如果真结束
            窗口_激活 (变量_92C80225)
        .如果真结束
        结束 ()
    .如果真结束
    CreateEvent (#NULL, 假, 假, 标识文本)

.子程序 程序_添加到IE工具栏, , 公开, 在IE的工具栏上添加自己的软件快捷方式
    .参数 主程序路径, 文本型, , 主程序路径
    .参数 提示内容, 文本型, , 如:精易编程助手
    .参数 程序图标路径, 文本型, , 在工具栏上显示的图标,格式为 ico
    .参数 程序图标点燃图标路径, 文本型, , 在工具栏上显示的图标,格式为 ico

    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\ButtonText”, 提示内容)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\CLSID”, “{1FBA04EE-3024-11D2-8F1F-0000F87ABD16}”)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Default visible”, “Yes”)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Exec”, 主程序路径)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\HotIcon”, 程序图标点燃图标路径)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Icon”, 程序图标路径)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\MenuText”, 提示内容)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\MenuStatusBar”, 提示内容)

.子程序 程序_加入右键菜单, 逻辑型, 公开, 把目标程序加入到右键菜单中,成功=真
    .参数 菜单显示名, 文本型, , 不能有符号，如“\”等
    .参数 目标程序名称, 文本型, 可空, 填空为程序本身
    .参数 是否删除, 逻辑型, 可空, 真=删除，假=不删除，默认为假，添加右键菜单
    .参数 命令行, 文本型, 可空
    .局部变量 变量_17EF0125, 文本型

    .如果真 (是否删除 ＝ 真)
        .如果真 (删除注册项 (#根类, “*\shell\” ＋ 菜单显示名 ＋ “\command”) ＝ 真)
            删除注册项 (#根类, “*\shell\” ＋ 菜单显示名)
            返回 (真)
        .如果真结束
        返回 (假)
    .如果真结束
    .如果真 (取文本长度 (命令行) ＞ 0)
        变量_17EF0125 ＝ “ ” ＋ 命令行
    .如果真结束
    .如果真 (寻找文本 (菜单显示名, “\”, , 假) ＝ -1)
        .如果真 (是否为空 (目标程序名称) ＝ 真)
            目标程序名称 ＝ 取运行目录 () ＋ “\” ＋ 取执行文件名 ()
        .如果真结束
        .如果真 (写注册项 (#根类, “*\shell\” ＋ 菜单显示名 ＋ “\command\”, 目标程序名称 ＋ 变量_17EF0125 ＋ “ ” ＋ #引号 ＋ “%1” ＋ #引号) ＝ 真)
            返回 (真)
        .如果真结束
        
    .如果真结束
    返回 (假)
    
    

.子程序 系统_关联右键菜单带图标, , 公开, 在win7系统中的右键菜单最上方添加一个带图标的菜单
    .参数 右键名称, 文本型
    .参数 程序路径, 文本型, 可空, 可空，留空为程序自身
    .参数 图标路径, 文本型, 可空, 留空为程序的图标
    .参数 是否删除, 逻辑型, 可空, 真为删除指定右键名称
    .局部变量 变量_F4D30125, 注册表操作

    .如果真 (是否删除 ＝ 真)
        变量_F4D30125.删除项 (“HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\” ＋ 右键名称)
        返回 ()
    .如果真结束
    变量_F4D30125.写字符串值 (“HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\”, 右键名称, “”)
    变量_F4D30125.写多字符串值 (“HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\” ＋ 右键名称, “”, 右键名称)
    .如果真 (是否为空 (程序路径) ＝ 真)
        程序路径 ＝ 取运行目录 () ＋ “\” ＋ 取执行文件名 ()
    .如果真结束
    .如果 (是否为空 (图标路径) ＝ 真)
        变量_F4D30125.写字符串值 (“HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\” ＋ 右键名称, “Icon”, 程序路径 ＋ “,0”)
    .否则
        变量_F4D30125.写字符串值 (“HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\” ＋ 右键名称, “Icon”, 图标路径 ＋ “,0”)
    .如果结束
    变量_F4D30125.写字符串值 (“HKEY_LOCAL_MACHINE\SOFTWARE\Classes\*\shell\” ＋ 右键名称 ＋ “\command”, “”, 程序路径 ＋ “ ” ＋ #引号 ＋ “%1” ＋ #引号)

.子程序 程序_写日志, , 公开, 在程序根目录建立一个txt文件用于记录相关日志内容
    .参数 日志内容, 文本型
    .参数 日志文件路径, 文本型, 可空, 写日记文件的路径，可空，默认在运行目录下写出
    .局部变量 变量_81C40125, 整数型

    .如果真 (是否为空 (日志文件路径))
        日志文件路径 ＝ 取运行目录 () ＋ “\运行日志.txt”
    .如果真结束
    
    .如果真 (文件是否存在 (日志文件路径) ＝ 假)
        写到文件 (日志文件路径, { })
    .如果真结束
    变量_81C40125 ＝ 打开文件 (日志文件路径, , )
    插入文本行 (变量_81C40125, 到文本 (取现行时间 ()) ＋ “   ” ＋ 日志内容)
    关闭文件 (变量_81C40125)

.子程序 程序_加入IE工具栏, , 公开, 把程序加入到IE工具栏,重启IE生效
    .参数 程序名称, 文本型
    .参数 程序路径, 文本型, 可空, 留空为自身程序路径
    .参数 显示图标, 文本型, 可空, 留空为系统默认程序图标
    .参数 是否删除, 逻辑型, 可空, 真=删除

    .如果真 (是否删除 ＝ 真)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\ButtonText”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\CLSID”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Default visible”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Exec”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\HotIcon”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Icon”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\MenuText”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\MenuStatusBar”)
        删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}”)
        返回 ()
    .如果真结束
    .如果真 (是否为空 (程序路径))
        程序路径 ＝ 取运行目录 () ＋ “\” ＋ 取执行文件名 ()
    .如果真结束
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\ButtonText”, 程序名称)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\CLSID”, “{1FBA04EE-3024-11D2-8F1F-0000F87ABD16}”)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Default visible”, “Yes”)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Exec”, 程序路径)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\HotIcon”, 显示图标)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\Icon”, 显示图标)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\MenuText”, 程序名称)
    写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\Extensions\{BF5DC4AE-258C-43d5-9D80-1F7ACD734DD8}\MenuStatusBar”, 程序名称)
    
    
    
    
    

.子程序 内部_Call, 整数型
    .参数 变量_35C70125, 整数型
    .参数 变量_36C70125, 整数型
    .参数 变量_37C70125, 整数型
    .参数 变量_38C70125, 整数型
    .参数 变量_39C70125, 整数型
    .参数 变量_3AC70125, 整数型

    置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
    返回 (0)

.子程序 程序_Call, 整数型, 公开, 少在计次循环里使用
    .参数 子程序指针, 整数型
    .参数 参数1, 整数型, 可空
    .参数 参数2, 整数型, 可空
    .参数 参数3, 整数型, 可空
    .参数 参数4, 整数型, 可空
    .参数 参数5, 整数型, 可空

    返回 (内部_Call (子程序指针, 参数1, 参数2, 参数3, 参数4, 参数5))

.子程序 程序_执行文本子程序, 文本型, 公开, 执行子程序参数为文本的；并返回文本；
    .参数 欲执行的子程序, 子程序指针
    .参数 参数一, 文本型, 可空
    .参数 参数二, 文本型, 可空
    .参数 参数三, 整数型, 可空
    .局部变量 变量_3EAD0225, 字节集
    .局部变量 变量_3FAD0225, 整数型

    变量_3EAD0225 ＝ { 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }
    变量_3FAD0225 ＝ CallWindowProcA (取指针_字节集型 (变量_3EAD0225), 到整数 (欲执行的子程序), 取指针_文本型 (参数一), 取指针_文本型 (参数二), 参数三)
    返回 (指针到文本 (变量_3FAD0225))
    

.子程序 程序_执行整数子程序, 整数型, 公开, 执行子程序参数为整数的；并返回整数；
    .参数 子程序, 子程序指针
    .参数 参数一, 整数型, 可空
    .参数 参数二, 整数型, 可空
    .参数 参数三, 整数型, 可空
    .局部变量 变量_AEAC0225, 字节集

    变量_AEAC0225 ＝ { 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }
    返回 (CallWindowProcA (取指针_字节集型 (变量_AEAC0225), 到整数 (子程序), 参数一, 参数二, 参数三))

.子程序 程序_执行整数子程序1, 整数型, 公开, 执行子程序参数为整数的；并返回整数；
    .参数 子程序, 整数型
    .参数 参数一, 整数型, 可空
    .参数 参数二, 整数型, 可空
    .参数 参数三, 整数型, 可空
    .局部变量 变量_A7AC0225, 字节集

    变量_A7AC0225 ＝ { 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }
    返回 (CallWindowProcA (取指针_字节集型 (变量_A7AC0225), 子程序, 参数一, 参数二, 参数三))
    

.子程序 程序_取命令行, 整数型, 公开, 本命令可以取出在启动易程序时附加在其可执行文件名后面的所有以空格分隔的命令行文本段
    .参数 命令行数组, 文本型, 数组, 存放被取回命令行文本的数组变量,本变量数组内被顺序填入在启动易程序时附加在其可执行文件名后面的以空格分隔的命令行文本段
    .局部变量 变量_BAD20125, 整数型
    .局部变量 变量_BBD20125, 整数型
    .局部变量 变量_BCD20125, 整数型, , "0"
    .局部变量 变量_BDD20125, 整数型
    .局部变量 变量_BED20125, 整数型

    清除数组 (命令行数组)
    变量_BAD20125 ＝ DLL_CommandLineToArgvW (DLL_GetCommandLineW (), 变量_BBD20125)
    .如果真 (变量_BBD20125 ＝ 1)
        返回 (0)
    .如果真结束
    重定义数组 (变量_BCD20125, 假, 变量_BBD20125)
    变量_BDD20125 ＝ lstrlen (变量_BAD20125) × 2
    RtlMoveMemory (取数据_通用型_数组 (变量_BCD20125), 变量_BAD20125, 变量_BDD20125)
    .变量循环首 (2, 变量_BBD20125, 1, 变量_BED20125)
        加入成员 (命令行数组, 编码_Unicode到Ansi (指针到字节集 (变量_BCD20125 [变量_BED20125], lstrlen (变量_BCD20125 [变量_BED20125]) × 2)))
    .变量循环尾 ()
    LocalFree (变量_BAD20125)
    返回 (取数组成员数 (命令行数组))

.子程序 程序_隐藏托盘图标, , 公开, 隐藏托盘上指定按钮,和 程序_显示托盘图标 配合使用
    .参数 任务栏按钮标题, 文本型
    .局部变量 变量_947B0125, 整数型
    .局部变量 变量_957B0125, 整数型

    变量_957B0125 ＝ 功能_取托盘区句柄 ()
    变量_947B0125 ＝ 托盘_取按钮位置 (任务栏按钮标题, 变量_957B0125)
    SendMessageA (变量_957B0125, 1028, 变量_947B0125, 1)

.子程序 程序_显示托盘图标, , 公开, 显示托盘上指定按钮,和 程序_隐藏托盘图标 配合使用
    .参数 任务栏按钮标题, 文本型
    .局部变量 变量_977B0125, 整数型
    .局部变量 变量_987B0125, 整数型

    变量_987B0125 ＝ 功能_取托盘区句柄 ()
    变量_977B0125 ＝ 托盘_取按钮位置 (任务栏按钮标题, 变量_987B0125)
    SendMessageA (变量_987B0125, 1028, 变量_977B0125, 0)

.子程序 程序_隐藏任务栏图标, , 公开, 隐藏任务栏上指定按钮,和 程序_显示任务栏图标 配合使用（本命令不兼容Win7或以上系统）
    .参数 任务栏按钮标题, 文本型
    .局部变量 变量_9A7B0125, 整数型
    .局部变量 变量_9B7B0125, 整数型

    变量_9B7B0125 ＝ 功能_取任务栏句柄 ()
    变量_9A7B0125 ＝ 托盘_取按钮位置 (任务栏按钮标题, 变量_9B7B0125)
    SendMessageA (变量_9B7B0125, 1028, 变量_9A7B0125, 1)

.子程序 程序_显示任务栏图标, , 公开, 显示任务栏上指定按钮,和 程序_隐藏任务栏图标 配合使用（本命令不兼容Win7或以上系统）
    .参数 任务栏按钮标题, 文本型
    .局部变量 变量_9D7B0125, 整数型
    .局部变量 变量_9E7B0125, 整数型

    变量_9E7B0125 ＝ 功能_取任务栏句柄 ()
    变量_9D7B0125 ＝ 托盘_取按钮位置 (任务栏按钮标题, 变量_9E7B0125)
    SendMessageA (变量_9E7B0125, 1028, 变量_9D7B0125, 0)

.子程序 程序_取安装目录, 文本型, 公开, 成功返回目录，以“\”结尾。失败返回空文本。
    .参数 程序名称, 文本型, , 如：e.exe
    .局部变量 变量_E3D30225, 文本型

    变量_E3D30225 ＝ 取文本注册项 (#本地机器, “SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\App Paths\” ＋ 程序名称 ＋ “\Path”, )
    .如果 (变量_E3D30225 ≠ “”)
        .如果真 (取文本右边 (变量_E3D30225, 1) ≠ “\”)
            变量_E3D30225 ＝ 变量_E3D30225 ＋ “\”
        .如果真结束
        
    .否则
        变量_E3D30225 ＝ 取文本注册项 (#根类, “Applications\” ＋ 程序名称 ＋ “\shell\open\command\”, )
        .如果真 (变量_E3D30225 ≠ “”)
            .如果 (变量_E3D30225 ≈ #引号)
                变量_E3D30225 ＝ 文本_取出中间文本 (变量_E3D30225, #引号, #引号, , )
                变量_E3D30225 ＝ 文件_取目录 (变量_E3D30225)
            .否则
                
                变量_E3D30225 ＝ 文本_取左边 (变量_E3D30225, 取空白文本 (1), -1, )
            .如果结束
            
        .如果真结束
        
    .如果结束
    返回 (变量_E3D30225)

.子程序 功能_取托盘区句柄, 整数型
    .局部变量 变量_9F7B0125, 整数型
    .局部变量 变量_A07B0125, 整数型
    .局部变量 变量_A17B0125, 整数型

    变量_A07B0125 ＝ FindWindowA (“Shell_TrayWnd”, 字符 (0))
    变量_A07B0125 ＝ 窗口_取句柄 (变量_A07B0125, 0, “TrayNotifyWnd”)
    变量_9F7B0125 ＝ 窗口_取句柄 (变量_A07B0125, 0, “SysPager”)
    .如果真 (变量_9F7B0125 ≠ 0)
        变量_A07B0125 ＝ 变量_9F7B0125
    .如果真结束
    变量_A17B0125 ＝ 窗口_取句柄 (变量_A07B0125, 0, “ToolbarWindow32”)
    .如果真 (变量_A17B0125 ＝ 0)
        变量_A17B0125 ＝ 变量_A07B0125
    .如果真结束
    返回 (变量_A17B0125)

.子程序 功能_取任务栏句柄, 整数型
    .局部变量 变量_A27B0125, 整数型
    .局部变量 变量_A37B0125, 整数型
    .局部变量 变量_A47B0125, 整数型
    .局部变量 变量_A57B0125, 整数型

    变量_A27B0125 ＝ 窗口_取句柄 (, , “Shell_TrayWnd”, “”)
    .如果真 (变量_A27B0125 ＝ -1)
        返回 (0)
    .如果真结束
    变量_A37B0125 ＝ 窗口_取句柄 (变量_A27B0125, , “ReBarWindow32”, “”)
    .如果真 (变量_A37B0125 ＝ -1)
        返回 (0)
    .如果真结束
    变量_A47B0125 ＝ 窗口_取句柄 (变量_A37B0125, , “MSTaskSwWClass”, “运行应用程序”)
    .如果真 (变量_A47B0125 ＝ -1)
        返回 (0)
    .如果真结束
    变量_A57B0125 ＝ 窗口_取句柄 (变量_A47B0125, , “ToolbarWindow32”, “运行应用程序”)
    .如果真 (变量_A57B0125 ＝ -1)
        返回 (0)
    .如果真结束
    返回 (变量_A57B0125)

.子程序 托盘_取按钮位置, 整数型
    .参数 变量_A67B0125, 文本型
    .参数 变量_A77B0125, 整数型, 可空
    .局部变量 变量_A87B0125, 整数型
    .局部变量 变量_A97B0125, 整数型
    .局部变量 变量_AA7B0125, 整数型
    .局部变量 变量_AB7B0125, 整数型
    .局部变量 变量_AC7B0125, 整数型
    .局部变量 变量_AD7B0125, 整数型
    .局部变量 变量_AE7B0125, 整数型
    .局部变量 变量_AF7B0125, 整数型
    .局部变量 变量_B07B0125, 整数型
    .局部变量 变量_B17B0125, 整数型
    .局部变量 变量_B27B0125, 整数型
    .局部变量 变量_B37B0125, 整数型
    .局部变量 变量_B47B0125, 字节型, , "254"
    .局部变量 变量_B57B0125, 整数型
    .局部变量 变量_B67B0125, 整数型
    .局部变量 变量_B77B0125, 自定义_D47B0141

    变量_B27B0125 ＝ 255
    变量_B37B0125 ＝ 32
    GetWindowThreadProcessId (变量_A77B0125, 变量_A87B0125)
    变量_A97B0125 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 变量_A87B0125)
    .如果真 (变量_A97B0125 ＝ 0)
        返回 (-1)
    .如果真结束
    变量_B67B0125 ＝ GetCurrentProcess ()
    变量_AC7B0125 ＝ DuplicateHandle (变量_B67B0125, 变量_A97B0125, 变量_B67B0125, 变量_AA7B0125, #PROCESS_ALL_ACCESS, 0, 0)
    .如果真 (变量_AC7B0125 ＝ 0)
        CloseHandle (变量_A97B0125)
        返回 (-1)
    .如果真结束
    变量_AB7B0125 ＝ VirtualAllocEx (变量_AA7B0125, 0, 变量_B37B0125, 4096, 4)
    变量_AD7B0125 ＝ VirtualAllocEx (变量_AA7B0125, 0, 变量_B27B0125, 4096, 4)
    .如果真 (变量_AB7B0125 ＝ 0 或 变量_AD7B0125 ＝ 0)
        CloseHandle (变量_AA7B0125)
        返回 (-1)
    .如果真结束
    变量_B57B0125 ＝ SendMessageA (变量_A77B0125, 1048, 0, 0)
    .变量循环首 (1, 变量_B57B0125, 1, 变量_B17B0125)
        变量_B77B0125.成员_D57B0135 ＝ 变量_B37B0125
        变量_B77B0125.成员_D67B0135 ＝ 位或 (2147483648, 32, 4, 8, 1, 16, 64)
        WriteProcessMemory_整数3 (变量_AA7B0125, 变量_AB7B0125, SetHandleCount_字节型 (变量_B77B0125.成员_D57B0135), 变量_B37B0125, 变量_AE7B0125)
        SendMessageA (变量_A77B0125, 1089, 变量_B17B0125 － 1, 变量_AB7B0125)
        ReadProcessMemory_整数型 (变量_AA7B0125, 变量_AB7B0125, SetHandleCount_字节型 (变量_B77B0125.成员_D57B0135), 变量_B37B0125, 变量_AF7B0125)
        重定义数组 (变量_B47B0125, 假, 变量_B27B0125)
        WriteProcessMemory_整数3 (变量_AA7B0125, 变量_AD7B0125, SetHandleCount_字节型 (变量_B47B0125 [1]), 变量_B27B0125, 变量_AE7B0125)
        变量_B07B0125 ＝ SendMessageA (变量_A77B0125, 1069, 变量_B77B0125.成员_D77B0135, 变量_AD7B0125)
        ReadProcessMemory_整数型 (变量_AA7B0125, 变量_AD7B0125, SetHandleCount_字节型 (变量_B47B0125 [1]), 变量_B27B0125, 变量_AF7B0125)
        .如果真 (变量_B07B0125 ＞ 0)
            重定义数组 (变量_B47B0125, 真, 变量_B07B0125)
            .如果真 (寻找文本 (到文本 (变量_B47B0125), 变量_A67B0125, , 假) ≠ -1)
                跳出循环 ()
            .如果真结束
            
        .如果真结束
        
    .变量循环尾 ()
    VirtualFreeEx (变量_AA7B0125, 变量_AB7B0125, 变量_B37B0125, 16384)
    VirtualFreeEx (变量_AA7B0125, 变量_AD7B0125, 变量_B27B0125, 16384)
    返回 (变量_B77B0125.成员_D77B0135)

.子程序 程序_任务栏窗口图标状态, 逻辑型, 公开, 设置或获取指定窗口的任务栏图标状态
    .参数 窗口句柄, 整数型
    .参数 参数, 整数型, , 1、隐藏图标；2、显示图标；3、取得当前显示状态
    .局部变量 变量_6AD70225, 整数型
    .局部变量 变量_6BD70225, 逻辑型
    .局部变量 变量_6CD70225, 逻辑型

    
    
    .如果真 (IsWindow (窗口句柄) ＝ 0)
        返回 (假)
    .如果真结束
    
    .如果真 (参数 ＝ 3)
        变量_6AD70225 ＝ GetWindowLongA (窗口句柄, #GWL_HWNDPARENT)
        .如果真 (变量_6AD70225 ＝ 0)
            .如果真 (GetWindowLongA (变量_6AD70225, #GWL_EXSTYLE) ≠ 384 或 GetWindowLongA (变量_6AD70225, #GWL_STYLE) ≠ 79691776)
                返回 (真)
            .如果真结束
            
        .如果真结束
        返回 (假)
    .如果真结束
    
    .如果真 (参数 ＝ 2)
        .如果真 (程序_任务栏窗口图标状态 (窗口句柄, 3))
            返回 (真)
        .如果真结束
        变量_6CD70225 ＝ IsIconic (窗口句柄)
        变量_6BD70225 ＝ IsWindowVisible (窗口句柄)
        变量_6AD70225 ＝ GetWindowLongA (窗口句柄, #GWL_HWNDPARENT)
        SetWindowLongA (窗口句柄, #GWL_HWNDPARENT, 0)
        DLL_PostThreadMessageA (GetWindowThreadProcessId (变量_6AD70225, 0), #<?未知本地类型?>, 0, 0)
        SendMessageA (变量_6AD70225, #<?未知本地类型?>, 0, 0)
        SendMessageA (窗口句柄, #<?未知本地类型?>, 0, 0)
        ShowWindow (窗口句柄, #SW_SHOWMINNOACTIVE)
        .如果真 (变量_6CD70225 ＝ 假)
            ShowWindow (窗口句柄, #SW_SHOWNOACTIVATE)
        .如果真结束
        SendMessageA (窗口句柄, #<?未知本地类型?>, 1, 0)
        .如果真 (变量_6BD70225 ＝ 假)
            ShowWindow (窗口句柄, #SW_HIDE)
        .如果真结束
        返回 (真)
    .如果真结束
    
    .如果真 (程序_任务栏窗口图标状态 (窗口句柄, 3) ＝ 假)
        返回 (真)
    .如果真结束
    
    SetWindowLongA (窗口句柄, #GWL_HWNDPARENT, GetDesktopWindow ())
    返回 (真)

.子程序 程序_是否在虚拟机中运行, 逻辑型, 公开, 通过BIOS信息检测程序是否在虚拟机中运行（不支持XP）
    .局部变量 变量_F6E00225, 整数型
    .局部变量 变量_F7E00225, 整数型
    .局部变量 变量_F8E00225, 整数型
    .局部变量 变量_F9E00225, 字节集
    .局部变量 变量_FAE00225, 整数型

    变量_F6E00225 ＝ 取代码 (“R”, )
    变量_F6E00225 ＝ 位或 (左移 (变量_F6E00225, 8), 取代码 (“S”, ))
    变量_F6E00225 ＝ 位或 (左移 (变量_F6E00225, 8), 取代码 (“M”, ))
    变量_F6E00225 ＝ 位或 (左移 (变量_F6E00225, 8), 取代码 (“B”, ))
    变量_F7E00225 ＝ DLL_GetSystemFirmwareTable (变量_F6E00225, 0, 0, 0)
    变量_F9E00225 ＝ 取空白字节集 (变量_F7E00225)
    变量_F8E00225 ＝ DLL_GetSystemFirmwareTable (变量_F6E00225, 0, 取指针_字节集型 (变量_F9E00225), 变量_F7E00225)
    .如果真 (变量_F8E00225 ≤ 变量_F7E00225)
        .变量循环首 (9, 变量_F7E00225 － 8, 1, 变量_FAE00225)
            .如果真 (变量_F9E00225 [变量_FAE00225] ＝ 取代码 (“V”, ))
                .如果真 (取字节集数据 (变量_F9E00225, #文本型, 变量_FAE00225) ≈ “VMware”)
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .变量循环尾 ()
    .如果真结束
    返回 (假)

.子程序 程序_伪装资源管理器, 逻辑型, 公开, 修改指定PEB中的路径实现进程伪装
    .参数 进程ID, 整数型, 可空
    .参数 伪装程序的路径, 文本型, 可空, 资源管理器

    返回 (程序_伪装资源管理器W (进程ID, 编码_Ansi到Unicode (伪装程序的路径, )))

.子程序 程序_伪装资源管理器W, 逻辑型, 公开, 修改指定PEB中的路径实现进程伪装
    .参数 进程ID, 整数型, 可空
    .参数 伪装程序的路径, 字节集, 可空, 资源管理器
    .局部变量 变量_70000325, 整数型
    .局部变量 变量_71000325, 整数型
    .局部变量 变量_72000325, 整数型
    .局部变量 变量_73000325, 字节集
    .局部变量 变量_74000325, 整数型
    .局部变量 变量_75000325, 整数型
    .局部变量 变量_76000325, 整数型
    .局部变量 变量_77000325, 短整数型
    .局部变量 变量_78000325, 短整数型
    .局部变量 变量_79000325, 整数型

    .如果真 (进程ID ≤ 0)
        进程ID ＝ GetCurrentProcessId ()
    .如果真结束
    变量_70000325 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID)
    .如果真 (变量_70000325 ≠ #NULL)
        变量_71000325 ＝ LocalAlloc (#LMEM_ZEROINIT, #MAX_PATH × 2)
        .如果 (伪装程序的路径 ＝ { })
            变量_72000325 ＝ DLL_GetWindowsDirectoryW (变量_71000325, #MAX_PATH)
            变量_73000325 ＝ 编码_Ansi到Unicode (“\explorer.exe”, )
            memcpy (变量_71000325 ＋ 变量_72000325 × 2, 取指针_字节集型 (变量_73000325), 取字节集长度 (变量_73000325))
        .否则
            memcpy (变量_71000325, 取指针_字节集型 (伪装程序的路径), 取字节集长度 (伪装程序的路径))
        .如果结束
        变量_74000325 ＝ LocalAlloc (#LMEM_ZEROINIT, 24)
        .如果真 (DLL_NtQueryInformationProcess (变量_70000325, #<?未知本地类型?>, 变量_74000325, 24, #NULL) ＝ #ERROR_SUCCESS)
            变量_75000325 ＝ LocalAlloc (#LMEM_ZEROINIT, 472)
            ReadProcessMemory_整数型1 (变量_70000325, __get (变量_74000325, 4), 变量_75000325, 472, #NULL)
            变量_76000325 ＝ LocalAlloc (#LMEM_ZEROINIT, 72)
            ReadProcessMemory_整数型1 (变量_70000325, __get (变量_75000325, 16), 变量_76000325, 72, #NULL)
            变量_77000325 ＝ 指针_到短整数型_汇编 (变量_76000325 ＋ 56)
            变量_78000325 ＝ 指针_到短整数型_汇编 (变量_76000325 ＋ 58)
            变量_72000325 ＝ DLL_lstrlenW (变量_71000325)
            .如果真 (到整数 (变量_78000325 ÷ 2) ＞ 变量_72000325)
                __set_short (变量_76000325, 56, 变量_72000325 × 2)
                DLL_WriteProcessMemory4 (变量_70000325, __get (变量_75000325, 16), 变量_76000325, 72, #NULL)
                变量_79000325 ＝ DLL_WriteProcessMemory4 (变量_70000325, __get (变量_76000325, 60), 变量_71000325, 变量_78000325, #NULL)
            .如果真结束
            LocalFree (变量_76000325)
            LocalFree (变量_75000325)
        .如果真结束
        LocalFree (变量_74000325)
        LocalFree (变量_71000325)
        CloseHandle (变量_70000325)
    .如果真结束
    返回 (变量_79000325 ≠ 0)

.子程序 程序_自定义列表项目W, 逻辑型, 公开, 指定要包含在自定义跳转列表的任务类别中的项目
    .参数 任务列表项目, 精易_任务列表项目, 数组
    .局部变量 变量_A0FD0225, 整数型
    .局部变量 变量_A1FD0225, 整数型
    .局部变量 变量_A2FD0225, 整数型
    .局部变量 变量_A3FD0225, 整数型
    .局部变量 变量_A4FD0225, 整数型
    .局部变量 变量_A5FD0225, 整数型
    .局部变量 变量_A6FD0225, 字节集
    .局部变量 变量_A7FD0225, 字节集
    .局部变量 变量_A8FD0225, 整数型
    .局部变量 变量_A9FD0225, 字节集
    .局部变量 变量_B3FD0225, 整数型
    .局部变量 变量_AAFD0225, 整数型
    .局部变量 变量_BAFD0225, 整数型

    变量_B3FD0225 ＝ 取数组成员数 (任务列表项目)
    .如果真 (变量_B3FD0225 ＝ 0)
        返回 (假)
    .如果真结束
    
    CoInitialize (#NULL)
    变量_AAFD0225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_9AFD0228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_9BFD0228), 变量_A0FD0225)
    .如果真 (变量_AAFD0225 ＝ #<?未知本地类型?> 且 变量_A0FD0225 ≠ #NULL)
        变量_AAFD0225 ＝ CallObject (变量_A0FD0225, #<?未知本地类型?>, 取指针整数_ (变量_A1FD0225), 取指针_字节集型 (#图片资源_9CFD0228), 取指针整数_ (变量_A2FD0225), , , , , , )
        .如果真 (变量_AAFD0225 ＝ #<?未知本地类型?> 且 变量_A2FD0225 ≠ #NULL)
            变量_AAFD0225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_9DFD0228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_9EFD0228), 变量_A3FD0225)
            .如果真 (变量_AAFD0225 ＝ #<?未知本地类型?> 且 变量_A3FD0225 ≠ #NULL)
                变量_A8FD0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
                __set_short (变量_A8FD0225, 0, 8)
                变量_A9FD0225 ＝ #FMTID_SummaryInformation ＋ 到字节集 (2)
                .计次循环首 (变量_B3FD0225, 变量_BAFD0225)
                    变量_AAFD0225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_24FB0228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_25FB0228), 变量_A4FD0225)
                    .如果真 (变量_AAFD0225 ＝ #<?未知本地类型?> 且 变量_A4FD0225 ≠ #NULL)
                        变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (任务列表项目 [变量_BAFD0225].目标), , , , , , , , )
                        .如果 (任务列表项目 [变量_BAFD0225].起始位置 ＝ { })
                            变量_A6FD0225 ＝ 字节集_寻找取左 (任务列表项目 [变量_BAFD0225].目标, { 92, 0 }, -1) ＋ { 0, 0 }
                            变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (变量_A6FD0225), , , , , , , , )
                        .否则
                            变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (任务列表项目 [变量_BAFD0225].起始位置), , , , , , , , )
                        .如果结束
                        .如果 (任务列表项目 [变量_BAFD0225].图标路径 ＝ { })
                            变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (任务列表项目 [变量_BAFD0225].目标), 0, , , , , , , )
                        .否则
                            变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (任务列表项目 [变量_BAFD0225].图标路径), 0, , , , , , , )
                        .如果结束
                        .如果真 (任务列表项目 [变量_BAFD0225].描述 ≠ { })
                            变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (任务列表项目 [变量_BAFD0225].描述), , , , , , , , )
                        .如果真结束
                        变量_AAFD0225 ＝ CallObject (变量_A4FD0225, #<?未知本地类型?>, 取指针_字节集型 (#图片资源_54FB0228), 取指针整数_ (变量_A5FD0225), , , , , , , )
                        .如果真 (变量_AAFD0225 ＝ #<?未知本地类型?> 且 变量_A5FD0225 ≠ #NULL)
                            .如果 (任务列表项目 [变量_BAFD0225].标题 ＝ { })
                                变量_A7FD0225 ＝ 文件_取文件版本信息W (任务列表项目 [变量_BAFD0225].目标, 2)
                                __set (变量_A8FD0225, 8, 取指针_字节集型 (变量_A7FD0225))
                            .否则
                                __set (变量_A8FD0225, 8, 取指针_字节集型 (任务列表项目 [变量_BAFD0225].标题))
                            .如果结束
                            变量_AAFD0225 ＝ CallObject (变量_A5FD0225, #<?未知本地类型?>, 取指针_字节集型 (变量_A9FD0225), 变量_A8FD0225, , , , , , , )
                            .如果真 (变量_AAFD0225 ＝ #<?未知本地类型?>)
                                变量_AAFD0225 ＝ CallObject (变量_A5FD0225, #<?未知本地类型?>, , , , , , , , , )
                            .如果真结束
                            SafeRelease (变量_A5FD0225)
                            变量_AAFD0225 ＝ CallObject (变量_A3FD0225, #<?未知本地类型?>, 变量_A4FD0225, , , , , , , , )
                        .如果真结束
                        SafeRelease (变量_A4FD0225)
                    .如果真结束
                    
                .计次循环尾 ()
                LocalFree (变量_A8FD0225)
                变量_AAFD0225 ＝ CallObject (变量_A0FD0225, #<?未知本地类型?>, 变量_A3FD0225, , , , , , , , )
                变量_AAFD0225 ＝ CallObject (变量_A0FD0225, #<?未知本地类型?>, , , , , , , , , )
                SafeRelease (变量_A3FD0225)
            .如果真结束
            SafeRelease (变量_A2FD0225)
        .如果真结束
        SafeRelease (变量_A0FD0225)
    .如果真结束
    CoUninitialize ()
    返回 (真)

.子程序 程序_禁用固定设置, 逻辑型, 公开, 禁用将快捷方式或窗口固定到任务栏或开始菜单的功能
    .参数 窗口句柄, 整数型
    .局部变量 变量_CBFD0225, 整数型
    .局部变量 变量_D8FD0225, 字节集
    .局部变量 变量_D1FD0225, 整数型
    .局部变量 变量_D0FD0225, 整数型

    CoInitialize (#NULL)
    变量_D0FD0225 ＝ DLL_SHGetPropertyStoreForWindow (窗口句柄, 取指针_字节集型 (#图片资源_54FB0228), 变量_CBFD0225)
    .如果真 (变量_D0FD0225 ＝ #<?未知本地类型?> 且 变量_CBFD0225 ≠ #NULL)
        变量_D1FD0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
        __set_short (变量_D1FD0225, 0, 11)
        __set (变量_D1FD0225, 8, #<?未知本地类型?>)
        变量_D8FD0225 ＝ #System_AppUserModel ＋ 到字节集 (9)
        变量_D0FD0225 ＝ CallObject (变量_CBFD0225, #<?未知本地类型?>, 取指针_字节集型 (变量_D8FD0225), 变量_D1FD0225, , , , , , , )
        LocalFree (变量_D1FD0225)
        SafeRelease (变量_CBFD0225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_D0FD0225 ＝ #<?未知本地类型?>)

.子程序 程序_禁止运行, , 公开, 把指定的程序添加到不允许运行的应用程序列表中。
    .参数 参_文件名, 文本型
    .局部变量 变量_270B0325, 字节集, , "0"
    .局部变量 变量_280B0325, 注册表操作
    .局部变量 变量_290B0325, 整数型

    .如果 (变量_280B0325.取DWORD值 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer”, “DisallowRun”) ＝ 1)
        变量_280B0325.枚举键名 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun\”, , 变量_270B0325, )
        .计次循环首 (取数组成员数 (变量_270B0325), 变量_290B0325)
            .如果真 (到文本 (变量_270B0325 [变量_290B0325]) ＝ 参_文件名)
                返回 ()
            .如果真结束
            
        .计次循环尾 ()
    .否则
        变量_280B0325.写注册项Ex (#现行用户, “SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\”, “DisallowRun”, 到字节集 (1), #REG_DWORD_LITTLE_ENDIAN)
    .如果结束
    加入成员 (变量_270B0325, 到字节集 (参_文件名))
    .计次循环首 (取数组成员数 (变量_270B0325), 变量_290B0325)
        变量_280B0325.写注册项Ex (#现行用户, “SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun\”, 到文本 (变量_290B0325), 到字节集 (变量_270B0325 [变量_290B0325]), #REG_SZ)
    .计次循环尾 ()

.子程序 程序_允许运行, , 公开, 把指定的程序从不允许运行的应用程序列表中删除。
    .参数 参_文件名, 文本型
    .局部变量 变量_2B0B0325, 注册表操作
    .局部变量 变量_2C0B0325, 字节集, , "0"
    .局部变量 变量_2D0B0325, 整数型
    .局部变量 变量_2E0B0325, 文本型, , "0"
    .局部变量 变量_2F0B0325, 逻辑型

    .如果真 (变量_2B0B0325.取DWORD值 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer”, “DisallowRun”) ≠ 1)
        返回 ()
    .如果真结束
    变量_2B0B0325.枚举键名 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun\”, 变量_2E0B0325, 变量_2C0B0325, )
    .计次循环首 (取数组成员数 (变量_2C0B0325), 变量_2D0B0325)
        .如果真 (到文本 (变量_2C0B0325 [变量_2D0B0325]) ＝ 参_文件名)
            变量_2B0B0325.删除键名 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun\”, 变量_2E0B0325 [变量_2D0B0325])
            变量_2F0B0325 ＝ 真
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (取数组成员数 (变量_2C0B0325) ＝ 1 且 变量_2F0B0325 ＝ 真)
        变量_2B0B0325.删除键名 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\”, “DisallowRun”)
        变量_2B0B0325.删除项 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\DisallowRun”)
    .如果真结束
    

