.版本 2

.程序集 集_杂合________
.程序集变量 类变量_D2840115, 自定义_7F850141, , "0"

.子程序 ADD__, 整数型
    .参数 变量_B9D20225, 整数型
    .参数 变量_BAD20225, 整数型
    .参数 变量_BBD20225, 整数型, 可空

    
    
    
    
    置入代码 ({ 139, 69, 12, 3, 69, 16, 1, 69, 8 })
    返回 (变量_B9D20225)

.子程序 取字节集指针, 整数型
    .参数 变量_F6D20225, 字节集, 参考

    置入代码 ({ 139, 69, 8, 139, 0, 131, 248, 0, 116, 3, 131, 192, 8, 201, 194, 4, 0 })
    返回 (0)

.子程序 SUB__, 整数型
    .参数 变量_C9D20225, 整数型
    .参数 变量_CAD20225, 整数型
    .参数 变量_CBD20225, 整数型, 可空

    
    
    
    
    置入代码 ({ 139, 69, 12, 3, 69, 16, 41, 69, 8 })
    返回 (变量_C9D20225)

.子程序 递增, 整数型
    .参数 变量_BED20225, 整数型, 参考

    
    
    
    
    
    
    
    
    
    置入代码 ({ 81, 184, 1, 0, 0, 0, 139, 77, 8, 240, 15, 193, 1, 64, 89, 201, 194, 4, 0 })
    返回 (0)
    

.子程序 递减, 整数型
    .参数 变量_BFD20225, 整数型, 参考

    
    
    
    
    
    
    
    
    
    置入代码 ({ 81, 184, 255, 255, 255, 255, 139, 77, 8, 240, 15, 193, 1, 72, 89, 201, 194, 4, 0 })
    返回 (0)
    

.子程序 转换_转数据大小为标准显示, 文本型, 公开, '最高支持pb位 以科学的方式显示文件大小 不清楚在32位下的反应 注意返回虽然是kbtb什么的 但实际是kib mib 进制为1024 1000是标准的kb mb的进制位 KiB  一共四种 1Kb表示1000个bit 1Kib表示1024个bit 1KB表示1000个Byte字节 KiB表示1024个Byte字节
    .参数 b, 文本型, , ‘文本型的b大小 不是bit比特 是Byte字节 如取文件大小返回的就是byte
    .局部变量 变量_63B70225, 双精度小数型
    .局部变量 变量_64B70225, 双精度小数型

    
    
    
    
    
    
    
    
    
    
    
    
    
    .如果真 (取文本长度 (b) ＞ 19 或 到整数 (取文本左边 (b, 10)) ＞ 9223372036 或 到整数 (取文本右边 (b, 9)) ＞ 854775807)
        .如果 (取文本长度 (b) ＝ 19)
            变量_63B70225 ＝ 到数值 (取文本左边 (b, 18) ＋ “.” ＋ 取文本右边 (b, 1))
            变量_64B70225 ＝ 变量_63B70225 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024
            返回 (到文本 (四舍五入 (变量_64B70225 × 10, 2)) ＋ “eb”)
        .否则
            变量_63B70225 ＝ 到数值 (取文本左边 (b, 19) ＋ “.” ＋ 取文本右边 (b, 取文本长度 (b) － 19))
            变量_64B70225 ＝ 变量_63B70225 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024
            .计次循环首 (取文本长度 (b) － 19, )
                变量_64B70225 ＝ 变量_64B70225 × 10
            .计次循环尾 ()
            返回 (到文本 (四舍五入 (变量_64B70225, 2)) ＋ “eb”)
        .如果结束
        
    .如果真结束
    
    .如果真 (到长整数 (b) ＜ 1024)
        返回 (b ＋ “b”)
    .如果真结束
    .如果真 (到长整数 (b) ＜ 1048576)
        返回 (到文本 (四舍五入 (到长整数 (b) ÷ 1024, 2)) ＋ “kb”)
    .如果真结束
    .如果真 (到长整数 (b) ＜ 1073741824)
        返回 (到文本 (四舍五入 (到长整数 (b) ÷ 1024 ÷ 1024, 2)) ＋ “mb”)
    .如果真结束
    .如果真 (到长整数 (b) ＜ 1099511627776)
        返回 (到文本 (四舍五入 (到长整数 (b) ÷ 1024 ÷ 1024 ÷ 1024, 2)) ＋ “gb”)
    .如果真结束
    .如果真 (到长整数 (b) ＜ 1.1259e+015)
        返回 (到文本 (四舍五入 (到长整数 (b) ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024, 2)) ＋ “tb”)
    .如果真结束
    .如果真 (到长整数 (b) ＜ 1.1529e+018)
        返回 (到文本 (四舍五入 (到长整数 (b) ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024, 2)) ＋ “pb”)
    .如果真结束
    返回 (到文本 (四舍五入 (到长整数 (b) ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024 ÷ 1024, 2)) ＋ “eb”)

.子程序 控制台_快速编辑模式, , 公开, 禁用快速编辑模式可以防止鼠标点击暂停控制台程序
    .参数 参_是否禁止, 逻辑型, 可空, 默认禁止
    .局部变量 变量_C8B50225, 整数型
    .局部变量 变量_C9B50225, 整数型

    变量_C8B50225 ＝ DLL_GetStdHandle (-10)
    GetConsoleMode (变量_C8B50225, 取变量地址_整数 (变量_C9B50225))
    .如果真 (是否为空 (参_是否禁止))
        参_是否禁止 ＝ 真
    .如果真结束
    .如果 (参_是否禁止)
        变量_C9B50225 ＝ 位与 (变量_C9B50225, 位取反 (位与 (2147483647, 96)))
    .否则
        变量_C9B50225 ＝ 位或 (变量_C9B50225, 96)
    .如果结束
    SetConsoleMode (变量_C8B50225, 变量_C9B50225)
    

.子程序 控制台_添加回调函数, 逻辑型, 公开, 控制台进程使用此函数来处理进程接收的控制信号
    .参数 接收信号的处理函数, 子程序指针, , BOOL CtrlTypeProc(DWORD CtrlType);

    返回 (SetConsoleCtrlHandler (到整数 (接收信号的处理函数), 真))

.子程序 CtrlTypeProc, 逻辑型
    .参数 变量_DB0E0325, 整数型

    .如果真 (变量_DB0E0325 ＝ #CTRL_CLOSE_EVENT)
        输出调试文本 (“控制台程序关闭”)
    .如果真结束
    返回 (假)

.子程序 取错误信息文本_API, 文本型, 公开, GetLastError
    .参数 错误码, 整数型, 可空
    .参数 模块名, 文本型, 可空
    .局部变量 变量_DFE30225, 整数型
    .局部变量 变量_E0E30225, 文本型
    .局部变量 变量_E1E30225, 整数型
    .局部变量 变量_E2E30225, 整数型
    .局部变量 变量_90E50225, 整数型
    .局部变量 变量_91E50225, 逻辑型
    .局部变量 变量_92E50225, 整数型

    .如果 (是否为空 (错误码))
        变量_E2E30225 ＝ _GetLastError ()
    .否则
        变量_E2E30225 ＝ 错误码
    .如果结束
    .如果真 (模块名 ≠ “”)
        变量_90E50225 ＝ GetModuleHandleA (模块名)
        .如果真 (变量_90E50225 ＝ 0)
            变量_90E50225 ＝ LoadLibraryA (模块名)
            变量_91E50225 ＝ 变量_90E50225 ≠ 0
        .如果真结束
        变量_92E50225 ＝ 选择 (变量_90E50225 ≠ 0, #<?未知本地类型?>, 0)
    .如果真结束
    变量_DFE30225 ＝ DLL_FormatMessageA (位或 (#FORMAT_MESSAGE_FROM_SYSTEM, #FORMAT_MESSAGE_IGNORE_INSERTS, #<?未知本地类型?>, 变量_92E50225), 变量_90E50225, 变量_E2E30225, #NULL, 取指针整数_ (变量_E1E30225), 0, #NULL)
    .如果真 (变量_91E50225)
        FreeLibrary (变量_90E50225)
    .如果真结束
    .如果真 (变量_DFE30225 ＞ 0)
        变量_E0E30225 ＝ 取空白文本 (变量_DFE30225)
        RtlMoveMemory (取指针_文本型 (变量_E0E30225), 变量_E1E30225, 变量_DFE30225)
        LocalFree (变量_E1E30225)
        返回 (“错误码：” ＋ 到文本 (变量_E2E30225) ＋ “│” ＋ 删首尾空 (变量_E0E30225))
    .如果真结束
    返回 (“找不到信息！”)

.子程序 类_取内部方法地址, 整数型, 公开, 返回方法地址，只能类内部使用
    .参数 方法序号, 整数型, , 方法序号,从1开始,_初始化是1,_销毁是2
    .局部变量 变量_DFAB0225, 整数型

    
    变量_DFAB0225 ＝ VirtualAlloc (0, 4096, #MEM_COMMIT, #PAGE_EXECUTE_READWRITE)
    置入代码 ({ 139, 69, 0, 139, 64, 8, 139, 200, 139, 93, 8, 75, 107, 219, 4, 139, 0, 139, 0, 3, 195, 139, 24, 139, 69, 252, 102, 199, 0, 91, 184, 137, 88, 2, 198, 64, 6, 104, 137, 72, 7, 102, 199, 64, 11, 83, 255, 198, 64, 13, 224 })
    返回 (变量_DFAB0225)

.子程序 类_释放内部方法地址, 逻辑型, 公开
    .参数 方法地址, 整数型, , 取类内部方法地址（）的返回值

    
    返回 (DLL_VirtualFree (方法地址, 0, #MEM_RELEASE) ≠ 0)

.子程序 整数转浮点数, 文本型, 公开, 整数数值转为十六进制浮点数文本带空格
    .参数 局_整数参数, 整数型, , 整数参数
    .局部变量 变量_F8A50225, 双精度小数型
    .局部变量 变量_F9A50225, 整数型
    .局部变量 变量_FAA50225, 汇编类
    .局部变量 变量_FBA50225, 字节集

    变量_F8A50225 ＝ 到数值 (局_整数参数)
    变量_F9A50225 ＝ 取变量地址_整数 (变量_F8A50225)
    变量_FBA50225 ＝ 指针到字节集 (变量_F9A50225, 8)
    返回 (变量_FAA50225.转为十六进制 (变量_FBA50225))

.子程序 __set, 整数型, 公开, 请确保指针的合法性,写到内存
    .参数 lpAddr, 整数型, , 内存地址
    .参数 offset, 整数型, , 偏移
    .参数 value, 整数型, , 写入值

    置入代码 ({ 139, 93, 8, 139, 77, 12, 139, 4, 25, 139, 85, 16, 137, 20, 25, 201, 194, 12, 0 })
    
    
    
    
    
    
    
    返回 (0)

.子程序 __get, 整数型, 公开, 请确保指针的合法性,读取内存
    .参数 lpAddr, 整数型, , 内存地址
    .参数 offset, 整数型, , 偏移

    置入代码 ({ 139, 69, 8, 139, 93, 12, 139, 4, 24, 201, 194, 8, 0 })
    
    
    
    
    
    返回 (0)

.子程序 __query_bit, 逻辑型, 公开, 查询一个整数 32位中的某一位是否为 1  @福仔
    .参数 num, 整数型
    .参数 bit, 字节型, , 只支持 0 - 31, 越界返回假

    置入代码 ({ 138, 77, 12, 51, 192, 128, 249, 32, 115, 14, 139, 69, 8, 133, 192, 116, 7, 51, 219, 67, 211, 227, 35, 195, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (假)

.子程序 __set_bit_on, 整数型, 公开, 设置一个整数 32位中的某一位为1, 返回设置后的值  @福仔
    .参数 num, 整数型
    .参数 bit, 字节型, , 只支持 0 - 31, 越界返回0

    置入代码 ({ 138, 77, 12, 51, 192, 128, 249, 32, 115, 10, 139, 69, 8, 51, 219, 67, 211, 227, 11, 195, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 __set_bit_off, 整数型, 公开, 设置一个整数 32位中的某一位为0, 返回设置后的值  @福仔
    .参数 num, 整数型
    .参数 bit, 字节型, , 只支持 0 - 31, 越界返回0

    置入代码 ({ 138, 77, 12, 51, 192, 128, 249, 32, 115, 12, 139, 69, 8, 51, 219, 67, 211, 227, 247, 211, 35, 195, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 __make_list, 整数型
    .局部变量 变量_97DF0225, 整数型
    .局部变量 变量_98DF0225, 整数型
    .局部变量 变量_99DF0225, 整数型
    .局部变量 变量_9ADF0225, 整数型
    .局部变量 变量_9BDF0225, 整数型
    .局部变量 变量_9CDF0225, 整数型
    .局部变量 变量_9DDF0225, 整数型
    .局部变量 变量_9EDF0225, 整数型

    变量_97DF0225 ＝ 0
    置入代码 ({ 62, 139, 69, 0, 62, 137, 69, 252 })
    
    
    .如果真 (变量_97DF0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_97DF0225 ＝ 变量_97DF0225 ＋ 12
    变量_98DF0225 ＝ DLL__malloc (200)
    .计次循环首 (20, 变量_99DF0225)
        
        
        
        
        变量_9ADF0225 ＝ (变量_99DF0225 － 1) × 8
        .如果真 (__get (变量_97DF0225, 变量_9ADF0225 ＋ 4) ＝ 0)
            跳出循环 ()
        .如果真结束
        
        变量_9BDF0225 ＝ __get (变量_97DF0225, 变量_9ADF0225)
        变量_9CDF0225 ＝ __get (变量_9BDF0225, 0)
        ' .如果真 (DLL_IsBadCodePtr (变量_9CDF0225) ＝ 假)
            
            
            
            
            
            
        ' .如果真结束
        __set (变量_98DF0225, (变量_99DF0225 － 1) × 4, 变量_9CDF0225)
    .计次循环尾 ()
    返回 (变量_98DF0225)

.子程序 __set_byte, 整数型, 公开, 请确保指针的合法性,写到内存
    .参数 lpAddr, 整数型, , 内存地址
    .参数 offset, 整数型, , 偏移
    .参数 value, 字节型, , 写入值

    置入代码 ({ 139, 93, 8, 139, 77, 12, 139, 4, 11, 138, 85, 16, 136, 20, 11, 201, 194, 12, 0 })
    
    
    
    
    
    
    
    返回 (0)

.子程序 __get_byte, 字节型, 公开, 请确保指针的合法性,读取内存
    .参数 lpAddr, 整数型, , 内存地址
    .参数 offset, 整数型, , 偏移

    置入代码 ({ 139, 69, 8, 139, 93, 12, 139, 4, 24, 201, 194, 8, 0 })
    
    
    
    
    
    返回 (0)

.子程序 __get_bytes, 字节集, 公开, 请确保指针的合法性,读取内存
    .参数 lpAddr, 整数型, , 内存地址

    置入代码 ({ 139, 69, 8, 139, 88, 252, 131, 232, 8, 201, 194, 4, 0 })
    
    
    
    
    
    返回 ({ })

.子程序 CallObject, 整数型, 公开, 调用对象
    .参数 对象指针, 整数型
    .参数 方法索引, 整数型
    .参数 附加参数1, 整数型, 可空
    .参数 附加参数2, 整数型, 可空
    .参数 附加参数3, 整数型, 可空
    .参数 附加参数4, 整数型, 可空
    .参数 附加参数5, 整数型, 可空
    .参数 附加参数6, 整数型, 可空
    .参数 附加参数7, 整数型, 可空
    .参数 附加参数8, 整数型, 可空
    .参数 附加参数9, 整数型, 可空
    .局部变量 变量_C5A10225, 整数型

    .如果真 (取反 (DLL_IsBadReadPtr (对象指针, 4)))
        指针到变量 (对象指针, 变量_C5A10225)
        .如果真 (取反 (DLL_IsBadCodePtr (变量_C5A10225)))
            返回 (调用子程序_ (__get (变量_C5A10225, 方法索引 × 4), 对象指针, 附加参数1, 附加参数2, 附加参数3, 附加参数4, 附加参数5, 附加参数6, 附加参数7, 附加参数8, 附加参数9))
        .如果真结束
        
    .如果真结束
    返回 (0)

.子程序 SafeRelease, 整数型, 公开, 释放对象,调用对象的第二个方法
    .参数 pObj, 整数型, 参考, 释放后把原来的对象清0
    .局部变量 变量_C7A10225, 整数型
    .局部变量 变量_C8A10225, 整数型
    .局部变量 变量_C9A10225, 整数型

    .如果真 (pObj ≠ 0)
        变量_C9A10225 ＝ CallObject (pObj, 2, , , , , , , , , )
        pObj ＝ 0
    .如果真结束
    返回 (变量_C9A10225)
    
    
    

.子程序 调用子程序_, 整数型, 公开, call
    .参数 调用地址, 整数型
    .参数 参数1, 整数型, 可空
    .参数 参数2, 整数型, 可空
    .参数 参数3, 整数型, 可空
    .参数 参数4, 整数型, 可空
    .参数 参数5, 整数型, 可空
    .参数 参数6, 整数型, 可空
    .参数 参数7, 整数型, 可空
    .参数 参数8, 整数型, 可空
    .参数 参数9, 整数型, 可空
    .参数 参数10, 整数型, 可空
    .参数 参数11, 整数型, 可空
    .参数 参数12, 整数型, 可空
    .参数 参数13, 整数型, 可空
    .参数 参数14, 整数型, 可空
    .参数 参数15, 整数型, 可空

    .如果真 (DLL_IsBadCodePtr (调用地址))
        返回 (0)
    .如果真结束
    置入代码 ({ 86, 190, 15, 0, 0, 0, 141, 77, 8, 141, 76, 241, 252, 139, 65, 4, 133, 192, 116, 2, 255, 49, 78, 131, 233, 8, 133, 246, 117, 239, 255, 85, 8, 94, 201, 194, 124, 0 })
    返回 (0)

.子程序 取数据_通用型, 整数型, 公开, 取到的是变量在堆中的地址,和 取变量数据地址() 一样,注意: 字节集数据需要+8,前8位是标准,字节集型数据建议使用 取指针_字节集型()
    .参数 数据, 通用型, 参考, 不建议传递字节集型变量

    置入代码 ({ 139, 69, 8, 139, 0, 201, 194, 4, 0 })
    返回 (0)

.子程序 取指针_通用型, 整数型, 公开, 取到的是变量在栈中的地址,和 取变量地址() 一样
    .参数 变量, 通用型, 参考, 基本支持所有类型

    置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
    返回 (0)

.子程序 取指针_通用型_数组, 整数型, 公开, 取到的是变量在栈中的地址,和 取变量地址() 一样
    .参数 变量, 通用型, 参考 数组

    置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
    返回 (0)

.子程序 取指针_文本型, 整数型, 公开, 取到的是变量在堆中的地址,和 取变量数据地址() 一样
    .参数 文本, 文本型, 参考

    置入代码 ({ 139, 69, 8, 139, 0, 201, 194, 4, 0 })
    返回 (0)

.子程序 取指针_字节集型, 整数型, 公开, 取到的是变量堆地址,和 取变量数据地址() 一样
    .参数 字节集, 字节集, 参考

    置入代码 ({ 139, 69, 8, 139, 0, 133, 192, 15, 132, 3, 0, 0, 0, 131, 192, 8, 201, 194, 4, 0 })
    返回 (0)
    

.子程序 取数据_通用型_数组, 整数型, 公开, 取到的是变量在堆中的地址,和 取变量数据地址() 一样
    .参数 数据, 通用型, 参考 数组, 基本支持所有类型

    置入代码 ({ 139, 69, 8, 139, 0, 133, 192, 116, 10, 139, 24, 193, 227, 2, 131, 192, 4, 1, 216, 201, 194, 4, 0 })
    返回 (0)

.子程序 指针到变量, , 公开, 本函数用于指针转基本数据类型.(字节,短整数,整数,小数,逻辑,子程序指针).请确保指针的合法性
    .参数 指针, 整数型
    .参数 变量, 通用型, 参考

    置入代码 ({ 139, 93, 8, 139, 69, 12, 255, 51, 143, 0, 201, 194, 8, 0 })

.子程序 指针转移, 整数型, 公开, 设置将第一个参数转移到第二个同类型的变量去处理,此时操作第二个变量相当于操作第一个变量,功能类似于核心库的 事件转移(),成功返回还原指针时需要的地址,调用此函数后在必须调用 指针还原() 来还原指针,否则90%以上的几率会崩溃,调用后在没有还原指针之前不能操作第一个变量
    .参数 源指针, 整数型, , 被操作的指针,一般是exe传给dll的,这里不能传递变量数据地址,使用特殊库的 取变量地址() 获取的值
    .参数 转移到, 整数型, , 把源指针转移到这里,这样操作这个变量相当于操作源变量,这里不能传递变量数据地址,使用特殊库的 取变量地址() 获取的值
    .局部变量 变量_77B50225, 整数型

    变量_77B50225 ＝ 指针_到整数 (转移到)
    __set (转移到, 0, 指针_到整数 (源指针))
    返回 (变量_77B50225)
    

.子程序 指针还原, , 公开, 调用此函数前必须先调用 指针转移() 
    .参数 源指针, 整数型, , 被操作的指针,一般是exe传给dll的,这里不能传递变量数据地址,使用特殊库的 取变量地址() 获取的值
    .参数 转移到, 整数型, , 把源指针转移到这里,这样操作这个变量相当于操作源变量,这里不能传递变量数据地址,使用特殊库的 取变量地址() 获取的值
    .参数 还原指针, 整数型, , 指针转移() 函数返回的指针

    __set (源指针, 0, 指针_到整数 (转移到))
    __set (转移到, 0, 还原指针)

.子程序 A2W_指针, 整数型
    .参数 变量_EEBA0225, 整数型
    .参数 变量_EFBA0225, 整数型
    .参数 变量_F0BA0225, 整数型
    .参数 变量_F1BA0225, 整数型, 参考
    .局部变量 变量_F2BA0225, 整数型

    连续赋值 (0, 变量_F1BA0225)
    变量_F1BA0225 ＝ MultiByteToWideChar (变量_F0BA0225, 0, 变量_EEBA0225, 变量_EFBA0225, 变量_F2BA0225, 0)
    变量_F2BA0225 ＝ HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 变量_F1BA0225 × 2)
    .如果真 (变量_F2BA0225 ＝ 0)
        返回 (0)
    .如果真结束
    MultiByteToWideChar (变量_F0BA0225, 0, 变量_EEBA0225, 变量_EFBA0225, 变量_F2BA0225, 变量_F1BA0225)
    返回 (变量_F2BA0225)

.子程序 W2A_指针, 整数型
    .参数 变量_0CBB0225, 整数型
    .参数 变量_0DBB0225, 整数型
    .参数 变量_0EBB0225, 整数型
    .参数 变量_0FBB0225, 整数型, 参考
    .局部变量 变量_10BB0225, 整数型

    连续赋值 (0, 变量_0FBB0225)
    变量_0FBB0225 ＝ WideCharToMultiByte (变量_0EBB0225, 0, 变量_0CBB0225, 变量_0DBB0225, 0, 0, 0, 0)
    变量_10BB0225 ＝ HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, 变量_0FBB0225)
    .如果真 (变量_10BB0225 ＝ 0)
        返回 (0)
    .如果真结束
    WideCharToMultiByte (变量_0EBB0225, 0, 变量_0CBB0225, 变量_0DBB0225, 变量_10BB0225, 变量_0FBB0225, 0, 0)
    返回 (变量_10BB0225)

.子程序 SEH_安装简单SEH, 逻辑型, 公开, 如果真(SEH_简单SEH())   配对函数 SEH_删除SEH()
    .参数 保留参数, 子程序指针, 可空

    保留参数 ＝ &SEH_简单SEH接口
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    置入代码 ({ 139, 69, 8, 201, 131, 236, 96, 156, 96, 255, 180, 36, 132, 0, 0, 0, 106, 0, 80, 221, 116, 36, 48, 155, 100, 255, 53, 0, 0, 0, 0, 100, 137, 37, 0, 0, 0, 0, 184, 1, 0, 0, 0, 255, 100, 36, 12 })
    返回 (真)

.子程序 SEH_简单SEH接口, 整数型, 公开, 该子程序供  如果真(SEH_安装简单SEH(&SEH_SEH简单处理))  使用
    .参数 异常代码, 整数型
    .参数 堆栈结构, 整数型
    .参数 线程环境, 整数型
    .参数 调度环境, 整数型, , DispatcherContext

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    置入代码 ({ 139, 69, 8, 129, 56, 37, 0, 0, 192, 116, 70, 131, 120, 4, 0, 117, 64, 232, 0, 0, 0, 0, 88, 131, 192, 6, 235, 29, 100, 137, 37, 0, 0, 0, 0, 131, 196, 16, 97, 157, 221, 36, 36, 155, 100, 139, 37, 0, 0, 0, 0, 51, 192, 255, 100, 36, 12, 81, 139, 77, 16, 137, 129, 184, 0, 0, 0, 139, 69, 12, 137, 129, 196, 0, 0, 0, 89, 51, 192, 235, 5, 184, 1, 0, 0, 0, 137, 69, 8 })
    返回 (异常代码)

.子程序 SEH_删除简单SEH, , 公开, 与 SEH_安装简单SEH() 配对使用
    .参数 保留参数, 子程序指针, 可空

    保留参数 ＝ &SEH_简单SEH接口
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    置入代码 ({ 81, 100, 139, 13, 0, 0, 0, 0, 129, 249, 255, 255, 0, 0, 126, 42, 139, 65, 4, 59, 69, 8, 116, 4, 139, 9, 235, 236, 139, 69, 4, 139, 225, 100, 143, 5, 0, 0, 0, 0, 131, 196, 12, 137, 68, 36, 28, 97, 157, 221, 36, 36, 155, 131, 196, 108, 255, 224, 89, 144 })

.子程序 提示框, 整数型, 公开, 跟系统自带的信息框()一样，不同的是 窗口“总在最前”属性设置为真也能显示出来；
    .参数 提示信息, 文本型, 可空
    .参数 按钮, 整数型, 可空, 可空：默认为 #确认钮；0、#确认钮； 1、#确认取消钮； 2、#放弃重试忽略钮； 3、#取消是否钮； 4、#是否钮； 5、#重试取消钮；16、#错误图标； 32、#询问图标； 48、#警告图标； 64、#信息图标；524288、#文本右对齐
    .参数 窗口标题, 文本型, 可空, 可空：默认为“友情提醒”；
    .参数 父窗口句柄, 整数型, 可空, 可空:默认为自动程序
    .参数 超时时间, 整数型, 可空, 超过指定的时间后，信息框将自动关闭。可空：默认为5秒超时，单位为毫秒。
    .局部变量 变量_30BF0125, 整数型

    
    
    
    
    .如果真 (是否为空 (父窗口句柄))
        父窗口句柄 ＝ 进程_ID取窗口句柄 (GetCurrentProcessId (), , , 1000, )
    .如果真结束
    .如果真 (是否为空 (窗口标题))
        窗口标题 ＝ “友情提醒”
    .如果真结束
    .如果真 (是否为空 (按钮))
        按钮 ＝ #确认钮
    .如果真结束
    .如果真 (是否为空 (超时时间))
        超时时间 ＝ 5000
    .如果真结束
    变量_30BF0125 ＝ MessageBoxTimeoutA (父窗口句柄, 提示信息, 窗口标题, 按钮, 0, 超时时间)
    返回 (变量_30BF0125 － 1)

.子程序 E数据库_快速查询, , 公开, 在易数据库已打开的情况下,对某字段进行快速查询,勤快的人可把记录分成两个数组，用多线程分开查询，应该更快。把记录添加完了在显示控件，这样就快多了
    .参数 查询的字段名, 文本型, , 必须为文本型字段
    .参数 查询内容, 文本型, 可空, 可以为空,为空即为查询空记录
    .参数 返回记录号数组名, 整数型, 数组, 本数据内容将直接返回结果
    .局部变量 变量_32B60125, 整数型
    .局部变量 变量_33B60125, 文本型, , "3"
    .局部变量 变量_34B60125, 整数型, , "3"

    到首记录 ()
    .计次循环首 (取记录数 (), )
        加入成员 (变量_33B60125, 读 (查询的字段名))
        加入成员 (变量_34B60125, 取记录号 ())
        跳过 ()
    .计次循环尾 ()
    变量_32B60125 ＝ 1
    .计次循环首 (取数组成员数 (变量_33B60125), 变量_32B60125)
        .如果真 (变量_33B60125 [变量_32B60125] ＝ 查询内容)
            输出调试文本 (变量_33B60125 [变量_32B60125])
            加入成员 (返回记录号数组名, 变量_34B60125 [变量_32B60125])
        .如果真结束
        
    .计次循环尾 ()

.子程序 E数据库_修复易数据库, 逻辑型, 公开, 修复一个被破坏的易语言数据库
    .参数 易数据库名, 文本型, , 易数据库全路径文件名
    .参数 错误信息, 文本型, 可空, 如果修复失败，返回对应的错误文本。如果本参数为空，则不记录错误信息。
    .局部变量 变量_37B60125, 文本型
    .局部变量 变量_38B60125, 长整数型
    .局部变量 变量_39B60125, 长整数型
    .局部变量 变量_3AB60125, 整数型
    .局部变量 变量_3BB60125, 逻辑型
    .局部变量 变量_3CB60125, 文本型

    
    
    
    变量_3CB60125 ＝ 取当前库 ()
    变量_3BB60125 ＝ 打开 (易数据库名, “要用模块修复的数据库”, , , , , )
    .如果真 (变量_3BB60125)
        关闭 (“要用模块修复的数据库”)
        置当前库 (变量_3CB60125)
        返回 (真)
    .如果真结束
    .如果真 (取错误码 () ≠ -48)
        .如果真 (是否为空 (错误信息) ＝ 假)
            错误信息 ＝ “指定文件非数据库，或数据库损坏类型不是数据库文件尺寸错误，不能用本模块修复。”
        .如果真结束
        返回 (假)
    .如果真结束
    变量_37B60125 ＝ 取临时文件名 ()
    复制文件 (易数据库名, 变量_37B60125)
    .判断循环首 (变量_3BB60125 ＝ 假)
        变量_3AB60125 ＝ 打开文件 (易数据库名, , )
        .如果真 (变量_3AB60125 ＝ 0)
            .如果真 (是否为空 (错误信息) ＝ 假)
                错误信息 ＝ “读取数据库文件失败。”
                复制文件 (变量_37B60125, 易数据库名)
            .如果真结束
            返回 (假)
        .如果真结束
        移动读写位置 (变量_3AB60125, #文件首, 16)
        变量_38B60125 ＝ 取字节集数据 (读入字节集 (变量_3AB60125, 4), #长整数型)
        .如果真 (变量_38B60125 ＝ 0)
            .如果真 (是否为空 (错误信息) ＝ 假)
                错误信息 ＝ “修复数据库未成功，原因未知。”
                复制文件 (变量_37B60125, 易数据库名)
            .如果真结束
            返回 (假)
        .如果真结束
        移动读写位置 (变量_3AB60125, #文件首, 20)
        变量_39B60125 ＝ 取字节集数据 (读入字节集 (变量_3AB60125, 4), #长整数型)
        变量_38B60125 ＝ 变量_38B60125 － 1
        变量_39B60125 ＝ 变量_39B60125 － 1
        移动读写位置 (变量_3AB60125, #文件首, 16)
        写出字节集 (变量_3AB60125, 取字节集左边 (到字节集 (变量_38B60125) ＋ { 0, 0, 0, 0 }, 4))
        移动读写位置 (变量_3AB60125, #文件首, 20)
        写出字节集 (变量_3AB60125, 取字节集左边 (到字节集 (变量_39B60125) ＋ { 0, 0, 0, 0 }, 4))
        关闭文件 (变量_3AB60125)
        变量_3BB60125 ＝ 打开 (易数据库名, “要用模块修复的数据库”, , , , , )
    .判断循环尾 ()
    关闭 (“要用模块修复的数据库”)
    置当前库 (变量_3CB60125)
    .如果真 (是否为空 (错误信息) ＝ 假)
        错误信息 ＝ “”
    .如果真结束
    返回 (真)
    

.子程序 取默认目录, 文本型
    .如果真 (目录_是否存在 (取运行目录 () ＋ “\data”) ＝ 假)
        目录_创建 (取运行目录 () ＋ “\data”)
    .如果真结束
    返回 (取运行目录 () ＋ “\data\setsoft.ini”)

.子程序 内部_对比, 逻辑型
    .参数 变量_2F610225, 文本型
    .参数 变量_2E610225, 文本型
    .局部变量 变量_33610225, 文本型, , "0"
    .局部变量 变量_34610225, 整数型

    清除数组 (变量_33610225)
    变量_33610225 ＝ 分割文本 (变量_2F610225, “|”, )
    .计次循环首 (取数组成员数 (变量_33610225), 变量_34610225)
        .如果真 (文本比较 (变量_33610225 [变量_34610225], 变量_2E610225, 真) ＝ 0)
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
    返回 (真)

.子程序 批量_单选框_保存配置, 整数型, 公开, 保存窗口上所有选择框的选中状态!与"批量_单选框_读取配置()"命令一起用的!  返回被操作的单选框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .参数 不保存的控件名称, 文本型, 可空, 不需要自动保存数据的控件名称,以|分开;
    .局部变量 变量_81610125, 整数型
    .局部变量 变量_82610125, 整数型
    .局部变量 变量_83610125, 单选框
    .局部变量 变量_84610125, 整数型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_81610125 ＝ 寻找组件 (组件的父窗口, , “单选框”, , )
    变量_84610125 ＝ 取找到组件数目 (变量_81610125)
    
    
    .计次循环首 (变量_84610125, 变量_82610125)
        变量_83610125 ＝ 取所找到组件 (变量_81610125, 变量_82610125 － 1)
        .如果真 (内部_对比 (不保存的控件名称, 取组件名称 (变量_83610125)))
            写配置项 (配置文件名, “单选框”, 取组件名称 (变量_83610125), 到文本 (变量_83610125.选中))
        .如果真结束
        
    .计次循环尾 ()
    清除组件寻找句柄 (变量_81610125)
    返回 (变量_84610125)

.子程序 批量_单选框_读取配置, 整数型, 公开, 与"批量_单选框_保存配置()"命令一起用的!  返回被操作的单选框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .局部变量 变量_87610125, 整数型
    .局部变量 变量_88610125, 整数型
    .局部变量 变量_89610125, 单选框
    .局部变量 变量_8A610125, 整数型
    .局部变量 变量_CE690125, 文本型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_87610125 ＝ 寻找组件 (组件的父窗口, , “单选框”, , )
    变量_8A610125 ＝ 取找到组件数目 (变量_87610125)
    .计次循环首 (变量_8A610125, 变量_88610125)
        变量_89610125 ＝ 取所找到组件 (变量_87610125, 变量_88610125 － 1)
        变量_CE690125 ＝ 读配置项 (配置文件名, “单选框”, 取组件名称 (变量_89610125), )
        .如果真 (变量_CE690125 ＝ “”)
            到循环尾 ()
        .如果真结束
        变量_89610125.选中 ＝ 选择 (变量_CE690125 ＝ “假”, 假, 真)
    .计次循环尾 ()
    清除组件寻找句柄 (变量_87610125)
    返回 (变量_8A610125)

.子程序 批量_选择框_保存配置, 整数型, 公开, 保存窗口上所有选择框的选中状态!与"批量_选择框_读取配置()"命令一起用的!  返回被操作的选择框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .参数 不保存的控件名称, 文本型, 可空, 不需要自动保存数据的控件名称,以|分开;
    .局部变量 变量_8D610125, 整数型
    .局部变量 变量_8E610125, 整数型
    .局部变量 变量_8F610125, 选择框
    .局部变量 变量_90610125, 整数型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_8D610125 ＝ 寻找组件 (组件的父窗口, , “选择框”, , )
    变量_90610125 ＝ 取找到组件数目 (变量_8D610125)
    .计次循环首 (变量_90610125, 变量_8E610125)
        变量_8F610125 ＝ 取所找到组件 (变量_8D610125, 变量_8E610125 － 1)
        .如果真 (内部_对比 (不保存的控件名称, 取组件名称 (变量_8F610125)))
            写配置项 (配置文件名, “选择框”, 取组件名称 (变量_8F610125), 到文本 (变量_8F610125.选中))
        .如果真结束
        
    .计次循环尾 ()
    清除组件寻找句柄 (变量_8D610125)
    返回 (变量_90610125)

.子程序 批量_选择框_读取配置, 整数型, 公开, 与"批量_选择框_保存配置()"命令一起用的!  返回被操作的选择框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .局部变量 变量_93610125, 整数型
    .局部变量 变量_94610125, 整数型
    .局部变量 变量_95610125, 选择框
    .局部变量 变量_96610125, 整数型
    .局部变量 变量_D0690125, 文本型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_93610125 ＝ 寻找组件 (组件的父窗口, , “选择框”, , )
    变量_96610125 ＝ 取找到组件数目 (变量_93610125)
    .计次循环首 (变量_96610125, 变量_94610125)
        变量_95610125 ＝ 取所找到组件 (变量_93610125, 变量_94610125 － 1)
        变量_D0690125 ＝ 读配置项 (配置文件名, “选择框”, 取组件名称 (变量_95610125), )
        .如果真 (变量_D0690125 ＝ “”)
            到循环尾 ()
        .如果真结束
        变量_95610125.选中 ＝ 选择 (变量_D0690125 ＝ “假”, 假, 真)
    .计次循环尾 ()
    清除组件寻找句柄 (变量_93610125)
    返回 (变量_96610125)

.子程序 批量_编辑框_保存配置, 整数型, 公开, 保存窗口上所有编辑框的内容!与"批量_编辑框_读取配置()"命令一起用的!  返回被操作的编辑框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .参数 不保存的控件名称, 文本型, 可空, 不需要自动保存数据的控件名称,以|分开;
    .局部变量 变量_99610125, 整数型
    .局部变量 变量_9A610125, 整数型
    .局部变量 变量_9B610125, 编辑框
    .局部变量 变量_9C610125, 文本型
    .局部变量 变量_9D610125, 整数型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_99610125 ＝ 寻找组件 (组件的父窗口, , “编辑框”, , )
    变量_9D610125 ＝ 取找到组件数目 (变量_99610125)
    .计次循环首 (变量_9D610125, 变量_9A610125)
        变量_9B610125 ＝ 取所找到组件 (变量_99610125, 变量_9A610125 － 1)
        .如果真 (内部_对比 (不保存的控件名称, 取组件名称 (变量_9B610125)))
            变量_9C610125 ＝ 子文本替换 (变量_9B610125.内容, #换行符, “><br><”, , , 真)
            变量_9C610125 ＝ 子文本替换 (变量_9C610125, #引号, “#引号”, , , 真)
            写配置项 (配置文件名, “编辑框”, 取组件名称 (变量_9B610125), 变量_9C610125)
        .如果真结束
        
    .计次循环尾 ()
    清除组件寻找句柄 (变量_99610125)
    返回 (变量_9D610125)

.子程序 批量_编辑框_读取配置, 整数型, 公开, 与"批量_编辑框_保存配置()"命令一起用的!  返回被操作的编辑框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .局部变量 变量_A0610125, 整数型
    .局部变量 变量_A1610125, 整数型
    .局部变量 变量_A2610125, 编辑框
    .局部变量 变量_A3610125, 整数型
    .局部变量 变量_D2690125, 文本型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_A0610125 ＝ 寻找组件 (组件的父窗口, , “编辑框”, , )
    变量_A3610125 ＝ 取找到组件数目 (变量_A0610125)
    .计次循环首 (变量_A3610125, 变量_A1610125)
        变量_A2610125 ＝ 取所找到组件 (变量_A0610125, 变量_A1610125 － 1)
        变量_D2690125 ＝ 读配置项 (配置文件名, “编辑框”, 取组件名称 (变量_A2610125), )
        .如果真 (变量_D2690125 ＝ “”)
            到循环尾 ()
        .如果真结束
        变量_D2690125 ＝ 子文本替换 (变量_D2690125, “><br><”, #换行符, , , 真)
        变量_A2610125.内容 ＝ 子文本替换 (变量_D2690125, “#引号”, #引号, , , 真)
    .计次循环尾 ()
    清除组件寻找句柄 (变量_A0610125)
    返回 (变量_A3610125)

.子程序 批量_组合框_保存配置, 整数型, 公开, 保存窗口上所有组合框的内容!与"批量_组合框_读取配置()"命令一起用的!  返回被操作的组合框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .参数 不保存的控件名称, 文本型, 可空, 不需要自动保存数据的控件名称,以|分开;
    .局部变量 变量_A6610125, 整数型
    .局部变量 变量_A7610125, 整数型
    .局部变量 变量_A8610125, 组合框
    .局部变量 变量_A9610125, 文本型
    .局部变量 变量_AA610125, 整数型
    .局部变量 变量_AB610125, 整数型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_A6610125 ＝ 寻找组件 (组件的父窗口, , “组合框”, , )
    变量_AA610125 ＝ 取找到组件数目 (变量_A6610125)
    .计次循环首 (变量_AA610125, 变量_A7610125)
        变量_A9610125 ＝ “”
        变量_A8610125 ＝ 取所找到组件 (变量_A6610125, 变量_A7610125 － 1)
        .如果真 (内部_对比 (不保存的控件名称, 取组件名称 (变量_A8610125)))
            .计次循环首 (变量_A8610125.取项目数 (), 变量_AB610125)
                变量_A9610125 ＝ 变量_A9610125 ＋ 变量_A8610125.取项目文本 (变量_AB610125 － 1) ＋ “<|>” ＋ 到文本 (变量_A8610125.取项目数值 (变量_AB610125 － 1)) ＋ “<||>”
            .计次循环尾 ()
            变量_A9610125 ＝ 变量_A9610125 ＋ 到文本 (变量_A8610125.现行选中项) ＋ “<|>” ＋ 变量_A8610125.内容
            变量_A9610125 ＝ 子文本替换 (变量_A9610125, #引号, “#引号”, , , 真)
            写配置项 (配置文件名, “组合框”, 取组件名称 (变量_A8610125), 变量_A9610125)
        .如果真结束
        
    .计次循环尾 ()
    清除组件寻找句柄 (变量_A6610125)
    返回 (变量_AA610125)

.子程序 批量_组合框_读取配置, 整数型, 公开, 与"批量_组合框_保存配置()"命令一起用的!  返回被操作的编辑框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .局部变量 变量_AE610125, 整数型
    .局部变量 变量_AF610125, 整数型
    .局部变量 变量_B0610125, 组合框
    .局部变量 变量_B1610125, 文本型
    .局部变量 变量_B2610125, 整数型
    .局部变量 变量_B3610125, 整数型
    .局部变量 变量_B4610125, 文本型, , "0"

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_AE610125 ＝ 寻找组件 (组件的父窗口, , “组合框”, , )
    变量_B2610125 ＝ 取找到组件数目 (变量_AE610125)
    .计次循环首 (变量_B2610125, 变量_AF610125)
        变量_B0610125 ＝ 取所找到组件 (变量_AE610125, 变量_AF610125 － 1)
        变量_B1610125 ＝ 读配置项 (配置文件名, “组合框”, 取组件名称 (变量_B0610125), “”)
        变量_B1610125 ＝ 子文本替换 (变量_B1610125, “#引号”, #引号, , , 真)
        .如果真 (变量_B1610125 ＝ “”)
            到循环尾 ()
        .如果真结束
        变量_B0610125.清空 ()
        变量_B4610125 ＝ 分割文本 (变量_B1610125, “<||>”, )
        .计次循环首 (取数组成员数 (变量_B4610125) － 1, 变量_B3610125)
            变量_B0610125.加入项目 (文本_取左边 (变量_B4610125 [变量_B3610125], “<|>”), 到数值 (文本_取右边 (变量_B4610125 [变量_B3610125], “<|>”)))
        .计次循环尾 ()
        .如果真 (取数组成员数 (变量_B4610125) ＞ 0)
            变量_B0610125.现行选中项 ＝ 到数值 (文本_取左边 (变量_B4610125 [取数组成员数 (变量_B4610125)], “<|>”))
            变量_B0610125.内容 ＝ 文本_取右边 (变量_B4610125 [取数组成员数 (变量_B4610125)], “<|>”)
        .如果真结束
        清除数组 (变量_B4610125)
    .计次循环尾 ()
    清除组件寻找句柄 (变量_AE610125)
    返回 (变量_B2610125)

.子程序 批量_日期框_保存配置, 整数型, 公开, 保存窗口上所有日期框的内容!与"批量_日期框_读取配置()"命令一起用的!  返回被操作的日期框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .参数 不保存的控件名称, 文本型, 可空, 不需要自动保存数据的控件名称,以|分开;
    .局部变量 变量_E5640125, 整数型
    .局部变量 变量_E6640125, 整数型
    .局部变量 变量_E7640125, 日期框
    .局部变量 变量_E8640125, 文本型
    .局部变量 变量_E9640125, 整数型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_E5640125 ＝ 寻找组件 (组件的父窗口, , “日期框”, , )
    变量_E9640125 ＝ 取找到组件数目 (变量_E5640125)
    .计次循环首 (变量_E9640125, 变量_E6640125)
        变量_E8640125 ＝ “”
        变量_E7640125 ＝ 取所找到组件 (变量_E5640125, 变量_E6640125 － 1)
        .如果真 (内部_对比 (不保存的控件名称, 取组件名称 (变量_E7640125)))
            变量_E8640125 ＝ 时间到文本 (变量_E7640125.今天, )
            写配置项 (配置文件名, “日期框”, 取组件名称 (变量_E7640125), 变量_E8640125)
        .如果真结束
        
    .计次循环尾 ()
    清除组件寻找句柄 (变量_E5640125)
    返回 (变量_E9640125)

.子程序 批量_日期框_读取配置, 整数型, 公开, 与"批量_日期框_保存配置()"命令一起用的!  返回被操作的编辑框数量!
    .参数 组件的父窗口, 窗口, , 直接填写顶级窗口就行了,如:_启动窗口
    .参数 配置文件名, 文本型, 可空, 可空:默认保存在根目录\data目录下,名为setsoft.ini
    .局部变量 变量_ED640125, 整数型
    .局部变量 变量_EE640125, 整数型
    .局部变量 变量_EF640125, 日期框
    .局部变量 变量_F0640125, 文本型
    .局部变量 变量_F1640125, 整数型

    .如果真 (配置文件名 ＝ “”)
        配置文件名 ＝ 取默认目录 ()
    .如果真结束
    变量_ED640125 ＝ 寻找组件 (组件的父窗口, , “日期框”, , )
    变量_F1640125 ＝ 取找到组件数目 (变量_ED640125)
    .计次循环首 (变量_F1640125, 变量_EE640125)
        变量_EF640125 ＝ 取所找到组件 (变量_ED640125, 变量_EE640125 － 1)
        变量_F0640125 ＝ 读配置项 (配置文件名, “日期框”, 取组件名称 (变量_EF640125), “”)
        变量_EF640125.今天 ＝ 到时间 (变量_F0640125)
    .计次循环尾 ()
    清除组件寻找句柄 (变量_ED640125)
    返回 (变量_F1640125)

.子程序 OCX_注册, , 公开, 注册OCX组件
    .参数 OCX文件路径, 文本型

    运行 (“regsvr32 ” ＋ OCX文件路径 ＋ “ /s”, 假, 1)

.子程序 OCX_卸载, , 公开, 卸载OCX组件
    .参数 OCX文件路径, 文本型

    运行 (“regsvr32 ” ＋ OCX文件路径 ＋ “ /u”, 假, 1)

.子程序 文件拖放_回调函数, 整数型
    .参数 变量_176B0125, 整数型
    .参数 变量_186B0125, 整数型
    .参数 变量_196B0125, 整数型
    .参数 变量_1A6B0125, 整数型
    .局部变量 变量_1BCF0125, 文本型
    .局部变量 变量_1CCF0125, 整数型
    .局部变量 变量_1DCF0125, 整数型
    .局部变量 变量_1ECF0125, 整数型
    .局部变量 变量_1FCF0125, 整数型
    .局部变量 变量_20CF0125, 文本型
    .局部变量 变量_B9F00125, 整数型
    .局部变量 变量_BAF00125, 整数型

    变量_B9F00125 ＝ GetPropA (变量_176B0125, “NewWindowsProc”)
    变量_BAF00125 ＝ GetPropA (变量_176B0125, “Subaddress”)
    .判断开始 (变量_186B0125 ＝ 563)
        变量_1DCF0125 ＝ DragQueryFileA (变量_196B0125, -1, #NULL, 0)
        .计次循环首 (变量_1DCF0125, 变量_1ECF0125)
            变量_1BCF0125 ＝ 取空白文本 (260)
            变量_1CCF0125 ＝ DragQueryFileA (变量_196B0125, 变量_1ECF0125 － 1, 取指针文本_ (变量_1BCF0125), 260)
            .如果真 (变量_1CCF0125 ＞ 0)
                变量_20CF0125 ＝ 取文本右边 (变量_1BCF0125, 取文本长度 (变量_1BCF0125) － 倒找文本 (变量_1BCF0125, “.”, , 假))
                CallWindowProcA (变量_BAF00125, 变量_1DCF0125, 变量_1ECF0125, 取指针_文本型 (变量_1BCF0125), 取指针_文本型 (变量_20CF0125))
            .如果真结束
            
        .计次循环尾 ()
        DragFinish (变量_196B0125)
        返回 (1)
    .默认
        
    .判断结束
    返回 (CallWindowProcA (变量_B9F00125, 变量_176B0125, 变量_186B0125, 变量_196B0125, 变量_1A6B0125))

.子程序 子_字节型数组到文本, 文本型
    .参数 变量_DD840125, 字节型, 数组
    .局部变量 变量_DE840125, 整数型
    .局部变量 变量_DF840125, 文本型

    变量_DF840125 ＝ “”
    .计次循环首 (取数组成员数 (变量_DD840125), 变量_DE840125)
        .如果 (变量_DD840125 [变量_DE840125] ≠ 0)
            变量_DF840125 ＝ 变量_DF840125 ＋ 字符 (变量_DD840125 [变量_DE840125])
        .否则
            跳出循环 ()
        .如果结束
        
    .计次循环尾 ()
    返回 (变量_DF840125)

.子程序 子_文本到字节型数组
    .参数 变量_E0840125, 字节型, 参考 数组
    .参数 变量_E1840125, 文本型
    .局部变量 变量_E2840125, 整数型

    变量_E2840125 ＝ 取文本长度 (变量_E1840125)
    重定义数组 (变量_E0840125, 假, 变量_E2840125 ＋ 2)
    .计次循环首 (取数组成员数 (变量_E0840125), 变量_E2840125)
        变量_E0840125 [变量_E2840125] ＝ 取代码 (取文本中间 (变量_E1840125, 变量_E2840125, 1), )
    .计次循环尾 ()

.子程序 子_GetRasEntryCount, 整数型
    .局部变量 变量_E3840125, 整数型
    .局部变量 变量_E4840125, 整数型
    .局部变量 变量_E5840125, 整数型
    .局部变量 变量_E6840125, 自定义_8D700141

    变量_E3840125 ＝ GlobalSize_取连接信息用结构 (变量_E6840125)
    变量_E6840125.成员_99700135 ＝ 变量_E3840125
    变量_E4840125 ＝ RasEnumEntrie (0, 0, 变量_E6840125, 变量_E3840125, 变量_E5840125)
    .如果 (变量_E4840125 ＝ 603 或 变量_E4840125 ＝ 0)
        重定义数组 (类变量_D2840115, 假, 变量_E5840125)
        变量_E4840125 ＝ 变量_E5840125
    .否则
        变量_E4840125 ＝ 0
    .如果结束
    返回 (变量_E4840125)

.子程序 子_GetLSAPasswords
    .局部变量 变量_E7840125, 自定义_48850141

    .如果真 (子_GetLsaData (4, “RasDialParams!” ＋ 子_GetLocalSid () ＋ “#0”, 变量_E7840125))
        子_ProcessLSABuffer (变量_E7840125.成员_4B850135, 变量_E7840125.成员_49850135)
        LsaFreeMemory (变量_E7840125.成员_4B850135)
    .如果真结束
    .如果真 (子_GetLsaData (4, “L$_RasDefaultCredentials#0”, 变量_E7840125))
        子_ProcessLSABuffer (变量_E7840125.成员_4B850135, 变量_E7840125.成员_49850135)
        LsaFreeMemory (变量_E7840125.成员_4B850135)
    .如果真结束
    

.子程序 子_GetLocalSid, 文本型
    .局部变量 变量_E8840125, 文本型
    .局部变量 变量_E9840125, 整数型
    .局部变量 变量_EA840125, 字节集
    .局部变量 变量_EB840125, 整数型
    .局部变量 变量_EC840125, 文本型
    .局部变量 变量_ED840125, 整数型
    .局部变量 变量_EE840125, 整数型
    .局部变量 变量_EF840125, 文本型
    .局部变量 变量_F0840125, 整数型

    变量_E8840125 ＝ 取空白文本 (256)
    GetUserNameA (变量_E8840125, 255)
    变量_EA840125 ＝ 取空白字节集 (255)
    变量_E9840125 ＝ LookupAccountName (取空白文本 (0), 变量_E8840125, 变量_EA840125, 变量_EB840125, 变量_EC840125, 变量_ED840125, 变量_EE840125)
    变量_EC840125 ＝ 取空白文本 (变量_ED840125)
    变量_EA840125 ＝ 取空白字节集 (变量_EB840125)
    变量_E9840125 ＝ LookupAccountName (取空白文本 (0), 变量_E8840125, 变量_EA840125, 变量_EB840125, 变量_EC840125, 变量_ED840125, 变量_EE840125)
    .如果真 (IsValidSid (取指针地址_字节集型 (变量_EA840125)) ＝ 0)
        返回 (“”)
    .如果真结束
    变量_E9840125 ＝ ConvertSidToStringSid (变量_EA840125, 变量_F0840125)
    .如果真 (变量_E9840125 ≠ 0)
        变量_E9840125 ＝ lstrlen (变量_F0840125)
        .如果真 (变量_E9840125 ＞ 0)
            变量_EF840125 ＝ 取空白文本 (变量_E9840125 × 2)
            变量_EA840125 ＝ 取空白字节集 (变量_E9840125 × 2)
            RtlMoveMemory (取指针地址_字节集型 (变量_EA840125), 变量_F0840125, 变量_E9840125 × 2)
            变量_EF840125 ＝ 编码_Unicode到Ansi (变量_EA840125)
        .如果真结束
        
    .如果真结束
    返回 (变量_EF840125)

.子程序 子_GetLsaData, 逻辑型
    .参数 变量_F1840125, 整数型
    .参数 变量_F2840125, 文本型
    .参数 变量_F3840125, 自定义_48850141, 参考
    .局部变量 变量_F4840125, 自定义_4C850141
    .局部变量 变量_F5840125, 整数型
    .局部变量 变量_F6840125, 自定义_48850141
    .局部变量 变量_F7840125, 整数型
    .局部变量 变量_F8840125, 整数型
    .局部变量 变量_F9840125, 字节集
    .局部变量 变量_FA840125, 整数型

    .如果真 (LsaOpenPolicy (0, 变量_F4840125, 变量_F1840125, 变量_F5840125) ＞ 0)
        返回 (假)
    .如果真结束
    子_AnsiStringToLsaStr (变量_F2840125, 变量_F6840125)
    变量_F8840125 ＝ LsaRetrievePrivateData (变量_F5840125, 变量_F6840125, 变量_F7840125)
    .如果真 (变量_F8840125 ＝ 0)
        变量_F9840125 ＝ 指针到字节集 (变量_F7840125, 8)
        DLL_RtlMoveMemory23 (变量_F3840125, 变量_F9840125, 8)
        变量_F9840125 ＝ 取字节集右边 (变量_F9840125, 4)
        变量_FA840125 ＝ 取字节集数据 (变量_F9840125, #整数型, )
        变量_F3840125.成员_4B850135 ＝ 指针到字节集 (变量_FA840125, 变量_F3840125.成员_49850135)
        LsaClose (变量_F5840125)
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 子_AnsiStringToLsaStr
    .参数 变量_FB840125, 文本型
    .参数 变量_FC840125, 自定义_48850141, 参考

    变量_FC840125.成员_49850135 ＝ 取文本长度 (变量_FB840125) × 2
    变量_FC840125.成员_4A850135 ＝ 变量_FC840125.成员_49850135 ＋ 2
    变量_FC840125.成员_4B850135 ＝ 编码_Ansi到Unicode (变量_FB840125)

.子程序 子_ProcessLSABuffer
    .参数 变量_FD840125, 字节集
    .参数 变量_FE840125, 整数型
    .局部变量 变量_FF840125, 字节集
    .局部变量 变量_00850125, 整数型
    .局部变量 变量_01850125, 整数型
    .局部变量 变量_02850125, 整数型
    .局部变量 变量_03850125, 字节集
    .局部变量 变量_04850125, 文本型
    .局部变量 变量_05850125, 文本型
    .局部变量 变量_06850125, 文本型

    变量_00850125 ＝ 1
    .变量循环首 (1, 变量_FE840125, 2, 变量_01850125)
        变量_FF840125 ＝ 取字节集中间 (变量_FD840125, 变量_01850125, 2)
        .如果 (变量_FF840125 ＝ { 0, 0 })
            变量_02850125 ＝ 变量_02850125 ＋ 1
            .判断开始 (变量_02850125 ＝ 1)
                变量_04850125 ＝ 编码_Unicode到Ansi (变量_03850125)
            .判断 (变量_02850125 ＝ 6)
                变量_05850125 ＝ 编码_Unicode到Ansi (变量_03850125)
            .判断 (变量_02850125 ＝ 7)
                变量_06850125 ＝ 编码_Unicode到Ansi (变量_03850125)
                .如果真 (取数组成员数 (类变量_D2840115) ＜ 变量_00850125)
                    重定义数组 (类变量_D2840115, 真, 变量_00850125)
                .如果真结束
                类变量_D2840115 [变量_00850125].成员_80850135 ＝ 变量_04850125
                类变量_D2840115 [变量_00850125].成员_83850135 ＝ 变量_06850125
                类变量_D2840115 [变量_00850125].成员_82850135 ＝ 变量_05850125
            .默认
                
            .判断结束
            变量_03850125 ＝ { }
        .否则
            变量_03850125 ＝ 变量_03850125 ＋ 变量_FF840125
        .如果结束
        .如果真 (变量_02850125 ＝ 9)
            变量_00850125 ＝ 变量_00850125 ＋ 1
            变量_04850125 ＝ “”
            变量_02850125 ＝ 0
        .如果真结束
        
    .变量循环尾 ()

.子程序 内部_线程
    .参数 变量_D3AB0125, 整数型
    .局部变量 变量_C8AB0125, 整数型
    .局部变量 变量_05390225, 整数型
    .局部变量 变量_08390225, 逻辑型
    .局部变量 变量_0B390225, 整数型
    .局部变量 变量_10390225, 整数型
    .局部变量 变量_23390225, 整数型

    
    
    
    
    
    
    变量_05390225 ＝ 指针_到整数 (变量_D3AB0125)
    
    变量_08390225 ＝ 真
    变量_0B390225 ＝ 指针_到整数 (变量_D3AB0125 ＋ 8)
    变量_10390225 ＝ 指针_到整数 (变量_D3AB0125 ＋ 12)
    DLL_HeapFree (GetProcessHeap (), 0, 变量_D3AB0125)
    
    .判断循环首 (变量_08390225)
        .如果 (GetQueuedCompletionStatus (变量_05390225, 变量_C8AB0125, 变量_23390225, 0, -1) ＝ 1)
            .判断开始 (变量_23390225 ＝ 0)
                
                call (变量_0B390225, 变量_C8AB0125)
            .判断 (变量_23390225 ＝ -999)
                返回 ()
            .默认
                
            .判断结束
            
        .否则
            
            
            跳出循环 ()
        .如果结束
        
        
    .判断循环尾 ()
    输出调试文本 (“线程退出”)

.子程序 call, 整数型
    .参数 变量_C9AB0125, 整数型
    .参数 变量_CAAB0125, 整数型

    置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
    返回 (0)

.子程序 ___RAR解压_测试
    

.子程序 RAR_解压文件, 逻辑型, 公开, 解压 RAR 档案的所有文件或指定文件，成功返回真，失败返回假。本命令需要unrar.dll的支持,下载地址:http://www.rarlab.com/rar_add.htm
    .参数 待解压文件, 文本型, , 欲解压文件的压缩档案全路径名称
    .参数 解压密码, 文本型, 可空, 欲解压文件的压缩档案密码，无密码时为空
    .参数 解压路径, 文本型, 可空, 指定解压文件的路径，为空表示解压到压缩档案所在目录

    .如果真 (是否为空 (解压路径) 或 解压路径 ＝ “”)
        解压路径 ＝ 文件_取目录 (待解压文件)
    .如果真结束
    返回 (RAR_操作档案文件 (2, 待解压文件, 解压密码, 解压路径))

.子程序 RAR_测试压缩文件, 逻辑型, 公开, 测试RAR压缩文件是否无误，如：压缩包损坏将返回假，否则返回真。
    .参数 待测试压缩文件, 文本型, , 欲解压文件的压缩档案全路径名称
    .参数 解压密码, 文本型, 可空, 欲解压文件的压缩档案密码，无密码时为空

    返回 (RAR_操作档案文件 (0, 待测试压缩文件, 解压密码))

.子程序 RAR_操作档案文件, 逻辑型
    .参数 变量_00AC0125, 整数型
    .参数 变量_01AC0125, 文本型
    .参数 变量_02AC0125, 文本型, 可空
    .参数 变量_03AC0125, 文本型, 可空
    .局部变量 变量_04AC0125, 自定义_27AC0141
    .局部变量 变量_05AC0125, 整数型
    .局部变量 变量_06AC0125, 整数型
    .局部变量 变量_07AC0125, 整数型
    .局部变量 变量_08AC0125, 自定义_26AC0141
    .局部变量 变量_09AC0125, 文本型
    .局部变量 变量_0AAC0125, 逻辑型
    .局部变量 变量_0BAC0125, 短整数型

    变量_04AC0125.成员_37AC0135 ＝ 变量_01AC0125
    变量_04AC0125.成员_39AC0135 ＝ 选择 (变量_00AC0125 ＝ 0, 2, 1)
    变量_05AC0125 ＝ DLL_RAROpenArchiveEx (变量_04AC0125)
    .如果真 (变量_04AC0125.成员_3AAC0135 ≠ 0)
        返回 (假)
    .如果真结束
    .如果真 (是否为空 (变量_02AC0125) ＝ 假 且 变量_02AC0125 ≠ “”)
        DLL_RARSetPassword (变量_05AC0125, 变量_02AC0125)
    .如果真结束
    .判断循环首 (真)
        变量_06AC0125 ＝ DLL_RARReadHeader (变量_05AC0125, 变量_08AC0125)
        .判断开始 (变量_06AC0125 ＝ 0)
            变量_09AC0125 ＝ 到文本 (变量_08AC0125.成员_29AC0135)
            DLL_RARSetCallback (变量_05AC0125, &RAR_档案回调函数, 取指针地址_文本型 (变量_09AC0125))
            .如果 (变量_00AC0125 ＝ 0)
                变量_0AAC0125 ＝ 真
            .否则
                变量_0AAC0125 ＝ 是否匹配文件 (变量_09AC0125, “*.*”)
            .如果结束
            变量_07AC0125 ＝ DLL_RARProcessFile (变量_05AC0125, 选择 (变量_0AAC0125, 变量_00AC0125, 0), 选择 (变量_00AC0125 ＝ 2, 变量_03AC0125, “”), “”)
            .如果 (变量_07AC0125 ＝ 0)
                .如果真 (变量_0AAC0125)
                    变量_0BAC0125 ＝ 变量_0BAC0125 ＋ 1
                .如果真结束
                
            .否则
                DLL_RARCloseArchive (变量_05AC0125)
                返回 (假)
            .如果结束
            
        .判断 (变量_06AC0125 ＝ 10)
            跳出循环 ()
        .默认
            DLL_RARCloseArchive (变量_05AC0125)
            返回 (假)
        .判断结束
        
    .判断循环尾 ()
    DLL_RARCloseArchive (变量_05AC0125)
    返回 (变量_0BAC0125 ＞ 0)

.子程序 RAR_档案回调函数, 整数型
    .参数 变量_0CAC0125, 整数型
    .参数 变量_0DAC0125, 整数型
    .参数 变量_0EAC0125, 整数型
    .参数 变量_0FAC0125, 整数型

    返回 (0)

.子程序 是否匹配文件, 逻辑型
    .参数 变量_11AC0125, 文本型
    .参数 变量_12AC0125, 文本型
    .参数 变量_13AC0125, 逻辑型, 可空
    .局部变量 变量_14AC0125, 文本型, , "0"
    .局部变量 变量_15AC0125, 整数型
    .局部变量 变量_16AC0125, 文本型

    .如果真 (变量_12AC0125 ＝ “”)
        返回 (假)
    .如果真结束
    .如果真 (变量_12AC0125 ＝ “*.*”)
        返回 (真)
    .如果真结束
    变量_11AC0125 ＝ PathFindFileNameA (变量_11AC0125)
    .如果真 (变量_13AC0125)
        .变量循环首 (65, 122, 1, 变量_15AC0125)
            .如果真 (变量_15AC0125 ≥ 91 且 变量_15AC0125 ≤ 96)
                到循环尾 ()
            .如果真结束
            变量_16AC0125 ＝ 字符 (变量_15AC0125)
            变量_11AC0125 ＝ 子文本替换 (变量_11AC0125, 变量_16AC0125, 到全角 (变量_16AC0125), , , 真)
            变量_12AC0125 ＝ 子文本替换 (变量_12AC0125, 变量_16AC0125, 到全角 (变量_16AC0125), , , 真)
        .变量循环尾 ()
    .如果真结束
    变量_14AC0125 ＝ 分割文本 (变量_12AC0125, “;”, )
    .计次循环首 (取数组成员数 (变量_14AC0125), 变量_15AC0125)
        .如果真 (PathMatchSpec (变量_11AC0125, 变量_14AC0125 [变量_15AC0125]))
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
    返回 (假)

.子程序 取指针文本_, 整数型, 公开
    .参数 参数_文本, 文本型

    置入代码 ({ 139, 69, 8, 139, 0, 201, 194, 4, 0 })
    
    
    
    
    返回 (0)

.子程序 取指针整数_, 整数型, 公开
    .参数 参数_整数, 整数型, 参考

    置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
    
    
    
    返回 (0)

.子程序 取指针小数_, 整数型, 公开
    .参数 参数_小数, 小数型, 参考

    置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
    
    
    
    返回 (0)

.子程序 取指针双精度_, 整数型, 公开
    .参数 参数_双精度小数, 双精度小数型, 参考

    置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
    
    
    
    返回 (0)

.子程序 取指针字节集_, 整数型, 公开
    .参数 参数_字节集, 字节集

    置入代码 ({ 139, 69, 8, 139, 0, 5, 8, 0, 0, 0, 201, 194, 4, 0 })
    
    
    
    
    
    返回 (0)

.子程序 MyGetOpenFileNameA, 整数型
    .参数 变量_27BF0125, 整数型
    .局部变量 变量_28BF0125, 整数型

    变量_28BF0125 ＝ 取字节集数据 (指针到字节集 (变量_27BF0125 ＋ 28, 4), #整数型, 1)
    写到内存 (编码_Ansi到Unicode (全局变量_FC930105), 变量_28BF0125, )
    返回 (1)

.子程序 系统_取宽带用户名密码, 逻辑型, 公开, 成功返回真,失败返回假  注：只有ADSL拨号上网的才能取
    .参数 连接名称, 文本型, 可空, 请提供一个文本变量,用于存放 连接名称
    .参数 宽带用户名, 文本型, 可空, 请提供一个文本变量,用于存放 宽带用户名
    .参数 宽带密码, 文本型, 可空, 请提供一个文本变量,用于存放 宽带密码
    .局部变量 变量_C2C60125, 整数型
    .局部变量 变量_C3C60125, 整数型
    .局部变量 变量_C4C60125, 整数型
    .局部变量 变量_C5C60125, 自定义_8D700141, , "0"
    .局部变量 变量_C6C60125, 文本型
    .局部变量 变量_C7C60125, 文本型
    .局部变量 变量_C8C60125, 自定义_54850141
    .局部变量 变量_C9C60125, 整数型
    .局部变量 变量_CAC60125, 自定义_8C700141
    .局部变量 变量_CBC60125, 自定义_5B850141
    .局部变量 变量_CCC60125, 字节集
    .局部变量 变量_CDC60125, 字节集
    .局部变量 变量_CEC60125, 整数型

    变量_C4C60125 ＝ 子_GetRasEntryCount ()
    .如果真 (变量_C4C60125 ＝ 0)
        返回 (假)
    .如果真结束
    重定义数组 (变量_C5C60125, 假, 变量_C4C60125)
    .如果真 (取数组成员数 (变量_C5C60125) ≥ 1)
        变量_C5C60125 [1].成员_99700135 ＝ GlobalSize_取连接信息用结构 (变量_C5C60125 [1])
        变量_C2C60125 ＝ 变量_C4C60125 × 变量_C5C60125 [1].成员_99700135
    .如果真结束
    .如果真 (RasEnumEntries (0, 0, 变量_C5C60125, 变量_C2C60125, 变量_C4C60125) ≠ 0)
        返回 (假)
    .如果真结束
    
    
    
    ' .如果真 (变量_C8C60125.成员_59850135 ＝ 2 且 变量_C8C60125.成员_56850135 ≥ 5)
        变量_C6C60125 ＝ 取空白文本 (255)
        变量_C7C60125 ＝ 取空白文本 (255)
        .如果真 (SHGetSpecialFolderPathA (0, 变量_C6C60125, 26, 假))
            变量_C6C60125 ＝ 变量_C6C60125 ＋ “\Microsoft\Network\Connections\pbk\rasphone.pbk”
        .如果真结束
        .如果真 (SHGetSpecialFolderPathA (0, 变量_C7C60125, 35, 假))
            变量_C7C60125 ＝ 变量_C7C60125 ＋ “\Microsoft\Network\Connections\pbk\rasphone.pbk”
        .如果真结束
        子_GetLSAPasswords ()
    ' .如果真结束
    .计次循环首 (取数组成员数 (变量_C5C60125), 变量_C9C60125)
        变量_CAC60125.成员_92700135 ＝ DLL_GlobalSize (变量_CAC60125)
        RtlMoveMemory_字节型_数组 (变量_CAC60125.成员_93700135, 变量_C5C60125 [变量_C9C60125].成员_9A700135, 255)
        RasGetEntryDialParams (“”, 变量_CAC60125, 真)
        变量_C2C60125 ＝ GlobalSize_RASENTRY (变量_CBC60125)
        变量_CBC60125.成员_5C850135 ＝ 变量_C2C60125
        DLL_RasGetEntryPropertiesA (“”, 变量_C5C60125 [变量_C9C60125].成员_9A700135, 变量_CBC60125, 变量_C2C60125, “”, 变量_C3C60125)
        .如果真 (变量_C6C60125 ≠ “” 或 变量_C7C60125 ≠ “”)
            变量_CCC60125 ＝ 到字节集 (子_字节型数组到文本 (变量_CAC60125.成员_93700135)) ＋ { 0 }
            变量_CDC60125 ＝ 编码_Ansi到Utf8 (子_字节型数组到文本 (变量_CAC60125.成员_93700135)) ＋ { 0 }
            变量_CEC60125 ＝ GetPrivateProfileInt (变量_CCC60125, “DialParamsUID”, 0, 变量_C6C60125)
            .如果真 (变量_CEC60125 ＝ 0)
                变量_CEC60125 ＝ GetPrivateProfileInt (变量_CCC60125, “DialParamsUID”, 0, 变量_C7C60125)
            .如果真结束
            .如果真 (变量_CEC60125 ＝ 0)
                变量_CEC60125 ＝ GetPrivateProfileInt (变量_CDC60125, “DialParamsUID”, 0, 变量_C6C60125)
            .如果真结束
            .如果真 (变量_CEC60125 ＝ 0)
                变量_CEC60125 ＝ GetPrivateProfileInt (变量_CDC60125, “DialParamsUID”, 0, 变量_C7C60125)
            .如果真结束
            .如果真 (变量_CEC60125 ＞ 0)
                .计次循环首 (取数组成员数 (类变量_D2840115), 变量_C9C60125)
                    .如果真 (类变量_D2840115 [变量_C9C60125].成员_80850135 ＝ 到文本 (变量_CEC60125) 且 类变量_D2840115 [变量_C9C60125].成员_83850135 ≠ “”)
                        子_文本到字节型数组 (变量_CAC60125.成员_96700135, 类变量_D2840115 [变量_C9C60125].成员_82850135)
                        子_文本到字节型数组 (变量_CAC60125.成员_97700135, 类变量_D2840115 [变量_C9C60125].成员_83850135)
                    .如果真结束
                    
                .计次循环尾 ()
            .如果真结束
            
        .如果真结束
        连接名称 ＝ 子_字节型数组到文本 (变量_CAC60125.成员_93700135)
        宽带用户名 ＝ 子_字节型数组到文本 (变量_CAC60125.成员_96700135)
        宽带密码 ＝ 子_字节型数组到文本 (变量_CAC60125.成员_97700135)
    .计次循环尾 ()
    返回 (删首尾空 (宽带用户名) ≠ “”)

.子程序 取_类_函数地址, 整数型
    .参数 变量_5DDE0125, 整数型
    .参数 变量_5EDE0125, 整数型
    .局部变量 变量_5FDE0125, 整数型

    变量_5EDE0125 ＝ 变量_5EDE0125 － 1
    变量_5FDE0125 ＝ 取指针内容_整数 (变量_5DDE0125)
    返回 (取指针内容_整数 (变量_5FDE0125 ＋ 变量_5EDE0125 × 4))

.子程序 到数值_从子程序指针, 整数型
    .参数 变量_60DE0125, 子程序指针
    .局部变量 变量_61DE0125, 整数型

    置入代码 ({ 139, 69, 8, 137, 69, 252 })
    
    返回 (变量_61DE0125)

.子程序 到子程序指针_从数值, 子程序指针
    .参数 变量_62DE0125, 整数型
    .局部变量 变量_63DE0125, 子程序指针

    置入代码 ({ 139, 69, 8, 137, 69, 252 })
    
    返回 (变量_63DE0125)

.子程序 取上层函数首参, 整数型
    .局部变量 变量_64DE0125, 整数型

    置入代码 ({ 139, 69, 0, 139, 0, 139, 64, 8, 137, 69, 252 })
    
    返回 (变量_64DE0125)

.子程序 get_retn_code, 整数型
    .局部变量 变量_66DE0125, 字节集

    .如果真 (全局变量_65DE0105 ≠ 0)
        返回 (全局变量_65DE0105)
    .如果真结束
    
    
    
    
    
    
    
    
    
    
    变量_66DE0125 ＝ { 139, 77, 252, 139, 93, 248, 139, 117, 244, 139, 125, 240, 217, 109, 236, 139, 229, 93, 141, 100, 12, 4, 247, 217, 139, 76, 12, 252, 255, 225 }
    全局变量_65DE0105 ＝ DumpCode (变量_66DE0125)
    返回 (全局变量_65DE0105)

.子程序 辅_生成_方法回调, 整数型
    .参数 变量_67DE0125, 整数型
    .参数 变量_68DE0125, 整数型, 可空
    .参数 变量_69DE0125, 逻辑型, 可空
    .参数 变量_6ADE0125, 逻辑型, 可空
    .参数 变量_6BDE0125, 整数型, 可空
    .局部变量 变量_6CDE0125, 字节集
    .局部变量 变量_6EDE0125, 整数型
    .局部变量 变量_6FDE0125, 短整数型

    .如果真 (变量_67DE0125 ＝ 0)
        输出调试文本 (“[辅_生成_方法回调][失败]：回调地址错误”)
        返回 (0)
    .如果真结束
    .如果 (变量_6ADE0125)
        变量_6FDE0125 ＝ 0
    .否则
        变量_6FDE0125 ＝ 变量_68DE0125 × 4
    .如果结束
    变量_6EDE0125 ＝ 变量_68DE0125 × 4
    .如果真 (变量_6EDE0125 ＞ 512 或 变量_6EDE0125 ＜ 0)
        输出调试文本 (“[辅_生成_方法回调]局部变量长度错误”)
        返回 (0)
    .如果真结束
    变量_6CDE0125 ＝ { }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 85 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 139, 236 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 106 } ＋ 到字节集_从字节 (变量_6FDE0125)
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 83 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 86 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 87 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 106 } ＋ { 0 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 217, 60, 36 }
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 219, 227 }
    
    .如果真 (变量_68DE0125 ≠ 0)
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 185 } ＋ 到字节集_从整数_ (变量_6EDE0125)
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 43, 225 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 141, 117, 8 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 141, 60, 36 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 252 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 243, 164 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 139, 77, 248 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 139, 117, 244 }
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 139, 125, 240 }
    .如果真结束
    .如果真 (变量_69DE0125)
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 81 }
    .如果真结束
    .如果真 (变量_6BDE0125 ≠ 0)
        变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 104 } ＋ 到字节集_从整数_ (变量_6BDE0125)
    .如果真结束
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 184 } ＋ 到字节集_从整数_ (变量_67DE0125)
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 104 } ＋ 到字节集_从整数_ (get_retn_code ())
    变量_6CDE0125 ＝ 变量_6CDE0125 ＋ { 255, 224 }
    返回 (DumpCode (变量_6CDE0125))

.子程序 类回调_取类地址, 整数型, 公开, [只能在类里调用]
    .参数 函数序号, 整数型, , 从1开始,[_初始化][_销毁],[xx]
    .参数 参数个数, 整数型, 可空
    .参数 push_ecx, 逻辑型, 可空, 附加到第一个参数;默认为假
    .参数 cdecl方式, 逻辑型, 可空, 默认为假
    .局部变量 变量_74DE0125, 整数型
    .局部变量 变量_76DE0125, 整数型
    .局部变量 变量_77DE0125, 字节集
    .局部变量 变量_79DE0125, 整数型
    .局部变量 变量_7ADE0125, 整数型
    .局部变量 变量_7BDE0125, 短整数型

    变量_74DE0125 ＝ 取指针内容_整数 (取上层函数首参 ())
    变量_76DE0125 ＝ 取_类_函数地址 (变量_74DE0125, 函数序号)
    
    .如果真 (变量_76DE0125 ≤ 0)
        输出调试文本 (“[辅_生成_类回调_易][失败]：回调地址错误”)
        返回 (0)
    .如果真结束
    变量_7ADE0125 ＝ 4
    .如果 (cdecl方式)
        变量_7BDE0125 ＝ 0
    .否则
        变量_7BDE0125 ＝ 参数个数 × 变量_7ADE0125
    .如果结束
    变量_79DE0125 ＝ 参数个数 × 变量_7ADE0125
    .如果真 (变量_79DE0125 ＞ 512 或 变量_79DE0125 ＜ 0)
        输出调试文本 (“[辅_生成_类回调_易]局部变量长度错误”)
        返回 (0)
    .如果真结束
    变量_77DE0125 ＝ { }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 85 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 139, 236 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 106 } ＋ 到字节集_从字节 (变量_7BDE0125)
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 83 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 86 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 87 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 106 } ＋ { 0 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 217, 60, 36 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 219, 227 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 104 } ＋ 到字节集_从整数_ (变量_74DE0125)
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 139, 196 }
    .如果真 (参数个数 ≠ 0)
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 185 } ＋ 到字节集_从整数_ (变量_79DE0125)
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 43, 225 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 141, 117, 8 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 141, 60, 36 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 252 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 243, 164 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 139, 77, 248 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 139, 117, 244 }
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 139, 125, 240 }
    .如果真结束
    .如果真 (push_ecx)
        变量_77DE0125 ＝ 变量_77DE0125 ＋ { 81 }
    .如果真结束
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 80 }
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 184 } ＋ 到字节集_从整数_ (变量_76DE0125)
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 104 } ＋ 到字节集_从整数_ (get_retn_code ())
    变量_77DE0125 ＝ 变量_77DE0125 ＋ { 255, 224 }
    返回 (DumpCode (变量_77DE0125))
    

.子程序 类回调_释放回调, , 公开, 用于释放生成代码后的返回指针，若你确定你的回调已经停用了才能释放
    .参数 ptr, 整数型

    VirtualFreeEx (GetCurrentProcess (), ptr, 0, 32768)

.子程序 DumpCode, 整数型
    .参数 变量_7CDE0125, 字节集
    .局部变量 变量_7DDE0125, 整数型
    .局部变量 变量_7EDE0125, 整数型
    .局部变量 变量_7FDE0125, 整数型

    变量_7FDE0125 ＝ 取字节集长度 (变量_7CDE0125)
    变量_7DDE0125 ＝ VirtualAlloc (0, 变量_7FDE0125, 4096, 64)
    CopyMemory_Bytes2int (变量_7DDE0125, 变量_7CDE0125, 变量_7FDE0125)
    返回 (变量_7DDE0125)

.子程序 取指针内容_整数, 整数型
    .参数 变量_94DE0125, 整数型
    .局部变量 变量_95DE0125, 整数型

    置入代码 ({ 139, 69, 8, 139, 0, 137, 69, 252 })
    
    返回 (变量_95DE0125)

.子程序 到字节集_从整数_, 字节集
    .参数 变量_96DE0125, 整数型, 参考
    .局部变量 变量_97DE0125, 整数型

    变量_97DE0125 ＝ 取变量地址_整数 (变量_96DE0125)
    返回 (指针到字节集 (变量_97DE0125, 4))

.子程序 到字节集_从短整数_, 字节集
    .参数 变量_98DE0125, 短整数型, 参考
    .局部变量 变量_99DE0125, 整数型

    变量_99DE0125 ＝ 取变量地址_短整数 (变量_98DE0125)
    返回 (指针到字节集 (变量_99DE0125, 2))

.子程序 到字节集_从字节, 字节集
    .参数 变量_9ADE0125, 短整数型, 参考
    .局部变量 变量_9BDE0125, 整数型

    变量_9BDE0125 ＝ 取变量地址_短整数 (变量_9ADE0125)
    返回 (指针到字节集 (变量_9BDE0125, 1))

.子程序 取变量地址_字节, 整数型
    .参数 变量_9CDE0125, 字节型, 参考
    .局部变量 变量_9DDE0125, 整数型

    置入代码 ({ 139, 69, 8, 137, 69, 252 })
    
    返回 (变量_9DDE0125)

.子程序 取变量堆栈地址_字节集, 整数型, 公开
    .参数 字节集变量, 字节集

    置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
    返回 (0)

.子程序 取变量地址_整数, 整数型
    .参数 变量_9EDE0125, 整数型, 参考
    .局部变量 变量_9FDE0125, 整数型

    置入代码 ({ 139, 69, 8, 137, 69, 252 })
    
    返回 (变量_9FDE0125)

.子程序 取变量地址_短整数, 整数型
    .参数 变量_A0DE0125, 短整数型, 参考
    .局部变量 变量_A1DE0125, 整数型

    置入代码 ({ 139, 69, 8, 137, 69, 252 })
    
    返回 (变量_A1DE0125)

.子程序 辅_取字节集长度, 整数型
    .参数 变量_A2DE0125, 字节集
    .局部变量 变量_A3DE0125, 整数型

    .如果真 (变量_A2DE0125 ＝ { })
        返回 (0)
    .如果真结束
    置入代码 ({ 139, 69, 8, 139, 0, 139, 64, 4, 137, 69, 252 })
    
    返回 (变量_A3DE0125)

.子程序 托盘消息回调, 整数型
    .参数 变量_B0E40125, 整数型
    .参数 变量_B1E40125, 整数型
    .参数 变量_B2E40125, 整数型
    .参数 变量_B3E40125, 整数型
    .局部变量 变量_B4E40125, 整数型
    .局部变量 变量_F1E40125, 整数型
    .局部变量 变量_F2E40125, 整数型
    .局部变量 变量_F3E40125, 整数型

    变量_B4E40125 ＝ GetPropA (变量_B0E40125, “WinProc”)
    变量_F1E40125 ＝ GetPropA (变量_B0E40125, “CallbackMessage”)
    变量_F2E40125 ＝ GetPropA (变量_B0E40125, “TaskbarCreatedMessage”)
    变量_F3E40125 ＝ GetPropA (变量_B0E40125, “Exec Event”)
    .判断开始 (变量_B1E40125 ＝ 变量_F1E40125)
        .如果真 (变量_F3E40125 ≠ 0)
            程序_Call (变量_F3E40125, 变量_B3E40125)
            返回 (0)
        .如果真结束
        
    .判断 (变量_B1E40125 ＝ 变量_F2E40125)
        .如果真 (变量_F3E40125 ≠ 0)
            程序_Call (变量_F3E40125, 1120)
            返回 (0)
        .如果真结束
        
    .判断 (变量_B1E40125 ＝ 2)
        .如果真 (变量_F3E40125 ≠ 0)
            程序_Call (变量_F3E40125, 1130)
        .如果真结束
        
    .默认
        
    .判断结束
    返回 (CallWindowProcA (变量_B4E40125, 变量_B0E40125, 变量_B1E40125, 变量_B2E40125, 变量_B3E40125))
    

.子程序 逻辑左移, 整数型
    .参数 变量_8DF00125, 整数型
    .参数 变量_8EF00125, 字节型

    置入代码 ({ 81, 139, 69, 8, 138, 77, 12, 211, 224, 89, 139, 229, 93, 194, 8, 0 })
    返回 (-1)

.子程序 逻辑右移, 整数型
    .参数 变量_8FF00125, 整数型
    .参数 变量_90F00125, 字节型

    置入代码 ({ 81, 139, 69, 8, 138, 77, 12, 211, 232, 89, 139, 229, 93, 194, 8, 0 })
    返回 (-1)
    

.子程序 地址_取API地址, 整数型, 公开, 返回API地址
    .参数 动态链接库名, 文本型
    .参数 函数名, 文本型
    .局部变量 变量_EED70225, 整数型
    .局部变量 变量_EFD70225, 逻辑型
    .局部变量 变量_F0D70225, 整数型

    变量_EED70225 ＝ GetModuleHandleA (动态链接库名)
    .如果真 (变量_EED70225 ＝ 0)
        变量_EFD70225 ＝ 真
        变量_EED70225 ＝ LoadLibraryA (动态链接库名)
    .如果真结束
    .如果真 (变量_EED70225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_F0D70225 ＝ GetProcAddress (变量_EED70225, 函数名)
    .如果真 (变量_EFD70225 ＝ 真)
        FreeLibrary (变量_EED70225)
    .如果真结束
    返回 (变量_F0D70225)

.子程序 调用子程序_数组, 整数型, 公开
    .参数 调用地址, 整数型
    .参数 参数数组, 整数型, 可空 数组
    .参数 是否为C调用, 逻辑型, 可空

    .如果真 (DLL_IsBadCodePtr (调用地址))
        返回 (0)
    .如果真结束
    置入代码 ({ 131, 236, 8, 86, 62, 139, 117, 12, 139, 54, 139, 118, 4, 141, 78, 255, 133, 201, 124, 18, 139, 69, 12, 139, 0, 141, 68, 136, 8, 65, 255, 48, 131, 232, 4, 73, 117, 248, 255, 85, 8, 137, 69, 252, 139, 69, 20, 133, 192, 116, 10, 62, 141, 4, 181, 0, 0, 0, 0, 3, 224, 139, 69, 252, 94, 139, 229, 93, 194, 20, 0 })
    返回 (0)

.子程序 整数_有符号转无符号, 长整数型, 公开
    .参数 arglist, 整数型

    置入代码 ({ 51, 210, 139, 69, 8, 201, 194, 4, 0 })
    
    
    
    
    返回 (0)

.子程序 短整数_有符号转无符号, 整数型, 公开
    .参数 arglist, 短整数型

    置入代码 ({ 51, 192, 102, 139, 69, 8, 201, 194, 4, 0 })
    
    
    
    
    返回 (0)

.子程序 长整数_有符号转无符号, 文本型, 公开
    .参数 arglist, 长整数型
    .局部变量 变量_C3F50225, 文本型

    变量_C3F50225 ＝ 取空白文本 (32)
    DLL__sprintf2 (取指针文本_ (变量_C3F50225), “%I64u”, arglist)
    返回 (变量_C3F50225)

.子程序 生成键盘消息lParam, 整数型
    .参数 变量_A5E70225, 短整数型
    .参数 变量_A6E70225, 字节型
    .参数 变量_A7E70225, 逻辑型
    .参数 变量_A8E70225, 逻辑型
    .参数 变量_A9E70225, 逻辑型
    .参数 变量_AAE70225, 逻辑型
    .局部变量 变量_ABE70225, 整数型

    变量_ABE70225 ＝ 左移 (变量_A6E70225, 16)
    变量_ABE70225 ＝ 位或 (变量_ABE70225, 变量_A5E70225)
    .如果真 (变量_A7E70225)
        变量_ABE70225 ＝ 位或 (变量_ABE70225, 左移 (1, 24))
    .如果真结束
    .如果真 (变量_A8E70225)
        变量_ABE70225 ＝ 位或 (变量_ABE70225, 左移 (1, 29))
    .如果真结束
    .如果真 (变量_A9E70225)
        变量_ABE70225 ＝ 位或 (变量_ABE70225, 左移 (1, 30))
    .如果真结束
    .如果真 (变量_AAE70225)
        变量_ABE70225 ＝ 位或 (变量_ABE70225, 左移 (1, 31))
    .如果真结束
    返回 (变量_ABE70225)

.子程序 取键盘消息lParam
    .参数 变量_ACE70225, 整数型
    .参数 变量_ADE70225, 短整数型, 参考 可空
    .参数 变量_AEE70225, 字节型, 参考 可空
    .参数 变量_AFE70225, 逻辑型, 参考 可空
    .参数 变量_B0E70225, 逻辑型, 参考 可空
    .参数 变量_B1E70225, 逻辑型, 参考 可空
    .参数 变量_B2E70225, 逻辑型, 参考 可空

    变量_AEE70225 ＝ 位与 (右移 (变量_ACE70225, 16), 255)
    变量_ADE70225 ＝ 位与 (变量_ACE70225, 65535)
    变量_AFE70225 ＝ 位与 (变量_ACE70225, 左移 (1, 24)) ≠ 0
    变量_B0E70225 ＝ 位与 (变量_ACE70225, 左移 (1, 29)) ≠ 0
    变量_B1E70225 ＝ 位与 (变量_ACE70225, 左移 (1, 30)) ≠ 0
    变量_B2E70225 ＝ 位与 (变量_ACE70225, 左移 (1, 31)) ≠ 0

.子程序 Asm_idiv64, 长整数型
    .参数 变量_1DF90225, 长整数型
    .参数 变量_1EF90225, 长整数型

    置入代码 ({ 139, 69, 20, 139, 77, 16, 139, 85, 12, 80, 139, 69, 8, 81, 82, 80, 232, 4, 0, 0, 0, 93, 194, 16, 0, 83, 86, 139, 68, 36, 24, 11, 192, 117, 24, 139, 76, 36, 20, 139, 68, 36, 16, 51, 210, 247, 241, 139, 216, 139, 68, 36, 12, 247, 241, 139, 211, 235, 65, 139, 200, 139, 92, 36, 20, 139, 84, 36, 16, 139, 68, 36, 12, 209, 233, 209, 219, 209, 234, 209, 216, 11, 201, 117, 244, 247, 243, 139, 240, 247, 100, 36, 24, 139, 200, 139, 68, 36, 20, 247, 230, 3, 209, 114, 14, 59, 84, 36, 16, 119, 8, 114, 7, 59, 68, 36, 12, 118, 1, 78, 51, 210, 139, 198, 94, 91, 194, 16, 0 })
    返回 (0)

.子程序 InterlockedAddNoFence64, 长整数型, 公开, InterlockedAddNoFence64, 返回操作的结果
    .参数 Addend, 长整数型, 参考, 把这个参数累加, 结果保存到这个参数里
    .参数 Value, 长整数型, , 累加的值, 写负数就是减

    
    
    置入代码 ({ 131, 236, 16, 83, 86, 87, 139, 69, 8, 139, 8, 139, 80, 4, 137, 77, 248, 137, 85, 252, 139, 69, 248, 139, 85, 252, 139, 77, 248, 3, 77, 12, 139, 117, 252, 19, 117, 16, 139, 125, 8, 139, 217, 139, 206, 240, 15, 199, 15, 137, 69, 240, 137, 85, 244, 139, 85, 240, 59, 85, 248, 117, 199, 139, 69, 244, 59, 69, 252, 117, 191, 139, 69, 248, 3, 69, 12, 139, 85, 252, 19, 85, 16, 95, 94, 91, 139, 229, 93, 194, 12, 0 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 某舍某入, 整数型
    .参数 变量_E8020325, 小数型
    .参数 变量_E9020325, 整数型
    .参数 变量_EA020325, 整数型
    .局部变量 变量_EB020325, 小数型
    .局部变量 变量_EC020325, 小数型

    变量_E9020325 ＝ 选择 (变量_E9020325 ＜ 0, 0, 变量_E9020325)
    变量_EA020325 ＝ 选择 (变量_EA020325 ＞ 9, 9, 变量_EA020325)
    .如果真 (取整 (变量_E8020325 × 10) ％ 10 ≤ 变量_E9020325)
        返回 (取整 (变量_E8020325))
    .如果真结束
    .如果真 (取整 (变量_E8020325 × 10) ％ 10 ≥ 变量_EA020325)
        返回 (取整 (变量_E8020325) ＋ 1)
    .如果真结束
    返回 (-1)

.子程序 字号转换毫米, 小数型
    .参数 变量_ED020325, 小数型

    返回 (变量_ED020325 × 0.35)

.子程序 毫米转换字号, 小数型
    .参数 变量_EE020325, 小数型

    返回 (变量_EE020325 ÷ 0.35)

.子程序 毫米转像素, 小数型
    .参数 变量_EF020325, 小数型

    返回 (变量_EF020325 × 系统_取系统DPI_注册表版 () ÷ 25.4)

.子程序 像素转毫米, 小数型
    .参数 变量_F0020325, 小数型

    返回 (变量_F0020325 × 25.4 ÷ 系统_取系统DPI_注册表版 ())

.子程序 取整加一, 整数型
    .参数 变量_F1020325, 小数型

    .判断开始 (变量_F1020325 ＝ 到整数 (变量_F1020325))
        返回 (到整数 (变量_F1020325))
    .默认
        返回 (到整数 (变量_F1020325) ＋ 1)
    .判断结束
    

.子程序 inet_ntop1, 整数型
    .参数 变量_DE030325, 整数型
    .参数 变量_DF030325, 整数型
    .参数 变量_E0030325, 整数型
    .参数 变量_E1030325, 整数型

    .如果 (_WIN32_WINNT ＜ #_WIN32_WINNT_VISTA)
        .如果真 (变量_E0030325 ＝ #NULL 或 变量_E1030325 ＝ 0)
            DLL_WSASetLastError (#<?未知本地类型?>)
            返回 (#NULL)
        .如果真结束
        .判断开始 (变量_DE030325 ＝ #<?未知本地类型?>)
            .如果真 (DLL_WSAAddressToStringA (变量_DF030325, 4, #NULL, 变量_E0030325, 变量_E1030325) ≠ 0)
                返回 (#NULL)
            .如果真结束
            
        .判断 (变量_DE030325 ＝ #<?未知本地类型?>)
            变量_E0030325 ＝ inet_ntoa (变量_DF030325)
        .默认
            DLL_WSASetLastError (#<?未知本地类型?>)
            返回 (#NULL)
        .判断结束
        返回 (变量_E0030325)
    .否则
        返回 (DLL_inet_ntop (变量_DE030325, 变量_DF030325, 变量_E0030325, 变量_E1030325))
    .如果结束
    

.子程序 GetWinver
    .局部变量 变量_DA030325, 整数型
    .局部变量 变量_DB030325, 整数型
    .局部变量 变量_A60C0325, 短整数型

    进程_取系统版本 (, 变量_DA030325, 变量_DB030325, 变量_A60C0325)
    _WIN32_WINNT ＝ MAKEWORD (变量_DB030325, 变量_DA030325)
    .如果真 (是否为调试版 ())
        .判断开始 (变量_DA030325 ＝ HIBYTE (#_WIN32_WINNT_WINXP) 且 变量_DB030325 ＝ LOBYTE (#_WIN32_WINNT_WINXP))
            输出调试文本 (“Windows XP”)
        .判断 (变量_DA030325 ＝ HIBYTE (#_WIN32_WINNT_WIN7) 且 变量_DB030325 ＝ LOBYTE (#_WIN32_WINNT_WIN7))
            输出调试文本 (“Windows 7”)
        .判断 (变量_DA030325 ＝ HIBYTE (#_WIN32_WINNT_WIN8) 且 变量_DB030325 ＝ LOBYTE (#_WIN32_WINNT_WIN8))
            输出调试文本 (“Windows 8”)
        .判断 (变量_DA030325 ＝ HIBYTE (#_WIN32_WINNT_WIN10) 且 变量_DB030325 ＝ LOBYTE (#_WIN32_WINNT_WIN10))
            .如果真 (变量_A60C0325 ≥ 22000)
                输出调试文本 (“Windows 11”)
                返回 ()
            .如果真结束
            输出调试文本 (“Windows 10”)
        .默认
            
        .判断结束
        
    .如果真结束
    

.子程序 VariantToSize
    .参数 变量_E4070325, 整数型
    .局部变量 变量_05080325, 短整数型
    .局部变量 变量_06080325, 整数型
    .局部变量 变量_07080325, 整数型

    .如果真 (变量_E4070325 ≠ #NULL)
        变量_05080325 ＝ __get_short (变量_E4070325, 0)
        .如果真 (位与 (变量_05080325, 8) ≠ 0)
            变量_06080325 ＝ __get (变量_E4070325, 8)
            .如果真 (变量_06080325 ≠ #NULL)
                变量_07080325 ＝ __get (变量_06080325, -4)
                .如果真 (变量_07080325 ＞ 0)
                    __set (变量_06080325, -4, 变量_07080325 ＋ 2)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    

.子程序 合并长整数, 长整数型, 公开, 将第一个整数放置到结果长整数的低32位，将第二个整数放置到结果长整数的高32位，以此合并成一个长整数，并返回合并后的结果。
    .参数 低32位, 整数型
    .参数 高32位, 整数型

    置入代码 ({ 139, 69, 8, 139, 85, 12, 201, 194, 8, 0 })
    
    
    
    
    返回 (0)

.子程序 MAKEWORD, 整数型, 公开, 合并短整数
    .参数 l, 整数型
    .参数 h, 整数型

    置入代码 ({ 51, 192, 138, 69, 8, 138, 101, 12, 201, 194, 8, 0 })
    
    
    
    
    
    返回 (0)

.子程序 MAKELONG, 长整数型, 公开, 合并整数
    .参数 l, 整数型
    .参数 h, 整数型

    置入代码 ({ 51, 210, 102, 139, 69, 12, 193, 192, 16, 102, 139, 69, 8, 201, 194, 8, 0 })
    
    
    
    
    
    
    返回 (0)

.子程序 assignZero, 整数型, 公开, 赋值为零
    .参数 arg1, 通用型, 参考, !const
    .参数 arg2, 整数型
    .参数 arg3, 逻辑型, 可空, BYTE*

    置入代码 ({ 139, 93, 8, 139, 3, 139, 77, 12, 131, 125, 16, 1, 116, 8, 198, 4, 8, 0, 201, 194, 12, 0, 131, 192, 4, 59, 8, 127, 245, 137, 8, 235, 241 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 _GetLastError, 整数型, 公开
    置入代码 ({ 100, 161, 52, 0, 0, 0, 201, 195 })
    
    
    
    返回 (0)

.子程序 incShl, 整数型, 公开
    .参数 arg1, 整数型
    .参数 arg2, 逻辑型, 可空

    置入代码 ({ 139, 69, 8, 139, 77, 12, 131, 249, 1, 116, 1, 64, 209, 224, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 decSar, 整数型, 公开
    .参数 arg1, 整数型
    .参数 arg2, 逻辑型, 可空

    置入代码 ({ 139, 69, 8, 139, 77, 12, 209, 248, 131, 249, 1, 116, 1, 72, 201, 194, 8, 0 })
    
    
    
    
    
    
    
    
    
    返回 (0)

