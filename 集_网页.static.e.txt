.版本 2

.程序集 集_网页
.程序集变量 类变量_D8500115, 整数型
.程序集变量 类变量_FD500115, 文本型
.程序集变量 类变量_10510115, 文本型

.子程序 网页_取IP地址, 精易_IP归属地, 公开
    .局部变量 变量_94A60225, 文本型
    .局部变量 变量_95A60225, 文本型
    .局部变量 变量_96A60225, 类_json
    .局部变量 变量_97A60225, 精易_IP归属地

    变量_94A60225 ＝ “https://ip.taobao.com/outGetIpInfo?ip=myip&accessKey=alibaba-inc”
    变量_95A60225 ＝ 编码_Utf8到Ansi (网页_访问 (变量_94A60225))
    变量_95A60225 ＝ 子文本替换 (变量_95A60225, 字符 (10), , , , 真)
    变量_96A60225.解析 (变量_95A60225)
    变量_97A60225.IP ＝ 变量_96A60225.取通用属性 (“data.ip”)
    变量_97A60225.国家 ＝ 变量_96A60225.取通用属性 (“data.country”)
    变量_97A60225.省份 ＝ 变量_96A60225.取通用属性 (“data.region”)
    变量_97A60225.城市 ＝ 变量_96A60225.取通用属性 (“data.city”)
    变量_97A60225.运营商 ＝ 变量_96A60225.取通用属性 (“data.isp”)
    返回 (变量_97A60225)

.子程序 网页_IE浏览器网页跳转静音, , 公开, 默认为真  真=静音
    .参数 参_是否静音, 逻辑型, 可空

    .如果真 (是否为空 (参_是否静音))
        参_是否静音 ＝ 真
    .如果真结束
    CoInternetSetFeatureEnabled (#FEATURE_DISABLE_NAVIGATION_SOUNDS, #SET_FEATURE_ON_PROCESS, 参_是否静音)

.子程序 网页_协议头_取信息, 文本型, 公开, 取出协议头中的某个值 例如302跳转协议头中的 Location
    .参数 参_源协议头, 文本型
    .参数 参_键名, 文本型, , 例如：Location
    .局部变量 变量_38A20225, 文本型, , "0"
    .局部变量 变量_39A20225, 整数型
    .局部变量 变量_3AA20225, 文本型
    .局部变量 变量_3BA20225, 整数型

    变量_38A20225 ＝ 分割文本 (参_源协议头, #换行符, )
    变量_3BA20225 ＝ 取文本长度 (参_键名)
    .计次循环首 (取数组成员数 (变量_38A20225), 变量_39A20225)
        .如果真 (取文本左边 (变量_38A20225 [变量_39A20225], 变量_3BA20225) ＝ 参_键名)
            变量_3AA20225 ＝ 文本_取右边 (变量_38A20225 [变量_39A20225], 参_键名 ＋ “: ”)
            返回 (变量_3AA20225)
        .如果真结束
        
    .计次循环尾 ()
    返回 (“”)
    
    

.子程序 网页_JS格式化_EX, 文本型, 公开
    .参数 参数1, 文本型
    .局部变量 变量_889E0225, 类_脚本组件
    .局部变量 变量_899E0225, 文本型

    变量_889E0225.执行 (#<?未知本地类型?>)
    变量_899E0225 ＝ 变量_889E0225.运行 (“FJsDecoder”, 参数1)
    返回 (变量_899E0225)

.子程序 网页_文字翻译, 文本型, 公开, 调用 有道翻译  支持中翻英  或  多语翻中
    .参数 参_待翻译, 文本型
    .局部变量 变量_4E9D0225, 文本型
    .局部变量 变量_4F9D0225, 整数型
    .局部变量 变量_509D0225, 类_POST数据类
    .局部变量 变量_519D0225, 文本型
    .局部变量 变量_529D0225, 字节集
    .局部变量 变量_539D0225, 文本型
    .局部变量 变量_549D0225, 文本型

    
    变量_549D0225 ＝ 编码_URL编码 (参_待翻译, , 真)
    变量_4E9D0225 ＝ “http://fanyi.youdao.com//translate?i=” ＋ 变量_549D0225 ＋ “&type=AUTO&doctype=text&xmlVersion=1.1&keyfrom=360se”
    变量_4F9D0225 ＝ 0
    变量_509D0225.添加 (“Connection”, “ keep-alive”)
    变量_509D0225.添加 (“Referer”, “ http://fanyi.youdao.com/translate”)
    变量_509D0225.添加 (“User-Agent”, “ Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36”)
    变量_509D0225.添加 (“Accept-Language”, “ zh-CN,zh;q=0.8”)
    变量_519D0225 ＝ 变量_509D0225.获取协议头数据 ()
    变量_529D0225 ＝ 网页_访问_对象 (变量_4E9D0225, 变量_4F9D0225, , , , 变量_519D0225, , , , , , , , , , , )
    变量_539D0225 ＝ 到文本 (编码_编码转换对象 (变量_529D0225))
    变量_539D0225 ＝ 文本_取右边 (变量_539D0225, “result=”)
    返回 (变量_539D0225)
    

.子程序 网页_更改IE版本, 逻辑型, 公开, 需要XP以上系统支持，且IE版本不低于8，写入后永久生效。多数情况需获取管理员权限，详情参阅：https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/general-info/ee330730(v=vs.85)#browser-emulation
    .参数 类型, 整数型, 可空, 为空或0移除写入的版本  1=ie7  2=ie8   3=ie9   4=ie10   5=ie11
    .参数 是否使用所有用户, 逻辑型, 可空, 默认为假！使用当前用户，为真则使用所有用户。
    .局部变量 变量_8EDB0225, 文本型
    .局部变量 变量_8FDB0225, 整数型

    
    
    变量_8EDB0225 ＝ 读环境变量 (“PROCESSOR_ARCHITECTURE”)
    
    .如果真 (类型 ≤ 0 或 类型 ＞ 5)
        .如果真 (是否使用所有用户)
            .判断开始 (变量_8EDB0225 ＝ “x86”)
                返回 (删除注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION\” ＋ 取执行文件名 ()))
            .判断 (变量_8EDB0225 ＝ “AMD64”)
                返回 (删除注册项 (#本地机器, “SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION\” ＋ 取执行文件名 ()))
            .默认
                
            .判断结束
            返回 (假)
        .如果真结束
        返回 (删除注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION\” ＋ 取执行文件名 ()))
    .如果真结束
    
    .判断开始 (类型 ＝ 1)
        变量_8FDB0225 ＝ 7000
    .判断 (类型 ＝ 2)
        变量_8FDB0225 ＝ 8000
    .判断 (类型 ＝ 3)
        变量_8FDB0225 ＝ 9000
    .判断 (类型 ＝ 4)
        变量_8FDB0225 ＝ 10000
    .判断 (类型 ＝ 5)
        变量_8FDB0225 ＝ 11000
    .默认
        
    .判断结束
    
    .如果真 (是否使用所有用户)
        .判断开始 (变量_8EDB0225 ＝ “x86”)
            返回 (写注册项 (#本地机器, “SOFTWARE\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION\” ＋ 取执行文件名 (), 变量_8FDB0225))
        .判断 (变量_8EDB0225 ＝ “AMD64”)
            返回 (写注册项 (#本地机器, “SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION\” ＋ 取执行文件名 (), 变量_8FDB0225))
        .默认
            
        .判断结束
        返回 (假)
    .如果真结束
    
    返回 (写注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION\” ＋ 取执行文件名 (), 变量_8FDB0225))
    

.子程序 网页_eval解密, 文本型, 公开
    .参数 原JS文本, 文本型, , 需要加密\解密的JS源文本
    .局部变量 变量_F37D0225, 类_脚本组件
    .局部变量 变量_F87D0225, 文本型

    变量_F87D0225 ＝ 变量_F37D0225.计算表达式 (子文本替换 (原JS文本, “eval”, “”, , , 真))
    返回 (变量_F87D0225)

.子程序 网页_eval加密, 文本型, 公开
    .参数 原JS文本, 文本型, , 需要加密\解密的JS源文本
    .局部变量 变量_FB7D0225, 类_脚本组件
    .局部变量 变量_007E0225, 文本型

    变量_FB7D0225.执行 (#<?未知本地类型?>)
    变量_007E0225 ＝ 变量_FB7D0225.运行 (“encode”, 原JS文本)
    返回 (变量_007E0225)

.子程序 内部_协议头取值, 文本型
    .参数 变量_74BC0125, 文本型
    .局部变量 变量_75BC0125, 整数型
    .局部变量 变量_76BC0125, 文本型

    变量_75BC0125 ＝ 寻找文本 (变量_74BC0125, “:”, , 假)
    .如果真 (变量_75BC0125 ≠ -1)
        变量_76BC0125 ＝ 取文本右边 (变量_74BC0125, 取文本长度 (变量_74BC0125) － 变量_75BC0125)
    .如果真结束
    返回 (删首尾空 (变量_76BC0125))

.子程序 内部_协议头取名, 文本型
    .参数 变量_77BC0125, 文本型
    .局部变量 变量_78BC0125, 整数型
    .局部变量 变量_79BC0125, 文本型

    变量_78BC0125 ＝ 寻找文本 (变量_77BC0125, “:”, , 假)
    .如果真 (变量_78BC0125 ≠ -1)
        变量_79BC0125 ＝ 取文本左边 (变量_77BC0125, 变量_78BC0125 － 1)
    .如果真结束
    返回 (删首尾空 (变量_79BC0125))

.子程序 内部_设Cookie
    .参数 变量_B6BF0125, 文本型
    .参数 变量_B7BF0125, 文本型
    .局部变量 变量_B8BF0125, 文本型
    .局部变量 变量_B9BF0125, 整数型
    .局部变量 变量_BABF0125, 文本型, , "0"

    变量_B8BF0125 ＝ “http://” ＋ 变量_B6BF0125
    变量_BABF0125 ＝ 分割文本 (变量_B7BF0125, “;”, )
    .计次循环首 (取数组成员数 (变量_BABF0125), 变量_B9BF0125)
        InternetSetCookieA (变量_B8BF0125, 内部_Cookie取名 (变量_BABF0125 [变量_B9BF0125]), 内部_Cookie取值 (变量_BABF0125 [变量_B9BF0125]))
    .计次循环尾 ()

.子程序 网页_Cookie合并更新ex, 文本型, 公开, 返回更新后的Cookie 感谢【小小n】提供
    .参数 旧Cookie, 文本型, 参考, a=1; b=2
    .参数 新Cookie, 文本型, , a=1; b=2
    .局部变量 变量_E29D0225, 文本型, , "0"
    .局部变量 变量_E39D0225, 文本型, , "0"
    .局部变量 变量_E49D0225, 整数型
    .局部变量 变量_E59D0225, 文本型
    .局部变量 变量_E69D0225, 文本型, , "0"
    .局部变量 变量_E79D0225, 整数型
    .局部变量 变量_E89D0225, 整数型
    .局部变量 变量_E99D0225, 整数型
    .局部变量 变量_EA9D0225, 逻辑型
    .局部变量 变量_EB9D0225, 文本型
    .局部变量 变量_EC9D0225, 文本型
    .局部变量 变量_02A00225, 文本型

    
    
    
    变量_E59D0225 ＝ 旧Cookie ＋ 选择 (旧Cookie ≠ “” 且 新Cookie ≠ “”, “; ”, “”) ＋ 新Cookie
    
    
    变量_E39D0225 ＝ 分割文本 (变量_E59D0225, “; ”, )
    变量_E79D0225 ＝ 取数组成员数 (变量_E39D0225)
    .计次循环首 (变量_E79D0225, 变量_E49D0225)
        
        变量_E89D0225 ＝ 变量_E79D0225 ＋ 1 － 变量_E49D0225
        变量_EB9D0225 ＝ 内部_Cookie取名ex (删首尾空 (变量_E39D0225 [变量_E89D0225]))
        变量_EC9D0225 ＝ 内部_Cookie取值 (删首尾空 (变量_E39D0225 [变量_E89D0225]))
        .如果 (变量_EB9D0225 ≠ “”)
            变量_EA9D0225 ＝ 假
            .计次循环首 (取数组成员数 (变量_E69D0225), 变量_E99D0225)
                .如果真 (变量_E69D0225 [变量_E99D0225] ＝ 变量_EB9D0225)
                    变量_EA9D0225 ＝ 真
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果 (变量_EA9D0225 ＝ 假)
                .如果 (变量_EC9D0225 ≠ “” 且 到小写 (变量_EC9D0225) ≠ “deleted”)
                    
                    加入成员 (变量_E29D0225, 变量_E39D0225 [变量_E89D0225])
                .否则
                    
                .如果结束
                加入成员 (变量_E69D0225, 变量_EB9D0225)
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        
    .计次循环尾 ()
    变量_02A00225 ＝ “”
    .计次循环首 (取数组成员数 (变量_E29D0225), 变量_E99D0225)
        .如果真 (变量_02A00225 ≠ “”)
            变量_02A00225 ＝ “; ” ＋ 变量_02A00225
        .如果真结束
        变量_02A00225 ＝ 变量_E29D0225 [变量_E99D0225] ＋ 变量_02A00225
    .计次循环尾 ()
    旧Cookie ＝ 变量_02A00225
    返回 (变量_02A00225)

.子程序 内部_Cookie取名ex, 文本型
    .参数 变量_EE9D0225, 文本型
    .局部变量 变量_EF9D0225, 整数型
    .局部变量 变量_F09D0225, 文本型

    变量_EF9D0225 ＝ 寻找文本 (变量_EE9D0225, “=”, , 假)
    .判断开始 (变量_EF9D0225 ≠ -1)
        
        变量_F09D0225 ＝ 取文本左边 (变量_EE9D0225, 变量_EF9D0225 － 1)
    .默认
        变量_F09D0225 ＝ “”
    .判断结束
    返回 (删首尾空 (变量_F09D0225))

.子程序 网页_Cookie合并更新, 文本型, 公开, 返回更新后的Cookie
    .参数 旧Cookie, 文本型, 参考
    .参数 新Cookie, 文本型
    .局部变量 变量_505A0225, 文本型, , "0"
    .局部变量 变量_515A0225, 文本型, , "0"
    .局部变量 变量_525A0225, 整数型

    
    旧Cookie ＝ 删首尾空 (旧Cookie)
    .如果真 (取文本右边 (旧Cookie, 1) ＝ “;”)
        旧Cookie ＝ 旧Cookie ＋ 字符 (#空格键)
    .如果真结束
    
    新Cookie ＝ 删首尾空 (新Cookie)
    .如果真 (取文本右边 (新Cookie, 1) ＝ “;”)
        新Cookie ＝ 新Cookie ＋ 字符 (#空格键)
    .如果真结束
    
    
    变量_505A0225 ＝ 分割文本 (旧Cookie, “; ”, )
    变量_515A0225 ＝ 分割文本 (新Cookie, “; ”, )
    .计次循环首 (取数组成员数 (变量_505A0225), 变量_525A0225)
        .如果真 (内部_数组成员是否存在1 (变量_515A0225, 内部_Cookie取名 (变量_505A0225 [变量_525A0225])) ＝ 假)
            加入成员 (变量_515A0225, 变量_505A0225 [变量_525A0225])
        .如果真结束
        
    .计次循环尾 ()
    
    旧Cookie ＝ “”
    .计次循环首 (取数组成员数 (变量_515A0225), 变量_525A0225)
        .如果真 (取文本右边 (变量_515A0225 [变量_525A0225], 8) ≠ “=deleted”)
            旧Cookie ＝ 旧Cookie ＋ 变量_515A0225 [变量_525A0225] ＋ “; ”
        .如果真结束
        
    .计次循环尾 ()
    旧Cookie ＝ 取文本左边 (旧Cookie, 取文本长度 (旧Cookie) － 2)
    
    旧Cookie ＝ 文本_去重复文本 (旧Cookie, “; ”)
    返回 (旧Cookie)

.子程序 内部_数组成员是否存在1, 逻辑型
    .参数 变量_76C10125, 文本型, 数组
    .参数 变量_77C10125, 文本型
    .局部变量 变量_78C10125, 整数型

    .计次循环首 (取数组成员数 (变量_76C10125), 变量_78C10125)
        .如果真 (内部_Cookie取名 (变量_76C10125 [变量_78C10125]) ＝ 变量_77C10125)
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
    返回 (假)

.子程序 内部_Cookie取值, 文本型
    .参数 变量_66BC0125, 文本型
    .局部变量 变量_67BC0125, 整数型
    .局部变量 变量_68BC0125, 文本型

    变量_67BC0125 ＝ 寻找文本 (变量_66BC0125, “=”, , 假)
    .如果真 (变量_67BC0125 ≠ -1)
        变量_68BC0125 ＝ 取文本右边 (变量_66BC0125, 取文本长度 (变量_66BC0125) － 变量_67BC0125)
    .如果真结束
    返回 (变量_68BC0125)

.子程序 内部_Cookie取名, 文本型
    .参数 变量_81C10125, 文本型
    .局部变量 变量_82C10125, 整数型
    .局部变量 变量_83C10125, 文本型

    变量_82C10125 ＝ 寻找文本 (变量_81C10125, “=”, , 假)
    .判断开始 (变量_82C10125 ≠ -1)
        变量_83C10125 ＝ 取文本左边 (变量_81C10125, 变量_82C10125 － 1)
    .默认
        变量_83C10125 ＝ 变量_81C10125
    .判断结束
    返回 (删首尾空 (变量_83C10125))

.子程序 网页_处理协议头, 文本型, 公开, 将协议头中的键名首字母处理为大写
    .参数 参_原始协议头, 文本型
    .局部变量 变量_30B50225, 文本型, , "0"
    .局部变量 变量_31B50225, 整数型
    .局部变量 变量_33B50225, 文本型
    .局部变量 变量_34B50225, 文本型
    .局部变量 变量_35B50225, 文本型
    .局部变量 变量_36B50225, 文本型
    .局部变量 变量_FDB50225, 文本型
    .局部变量 变量_FEB50225, 文本型, , "0"
    .局部变量 变量_FFB50225, 整数型
    .局部变量 变量_00B60225, 整数型
    .局部变量 变量_E9C20225, 文本型
    .局部变量 变量_65C30225, 整数型

    变量_30B50225 ＝ 分割文本 (参_原始协议头, #换行符, )
    .计次循环首 (取数组成员数 (变量_30B50225), 变量_31B50225)
        变量_65C30225 ＝ 寻找文本 (变量_30B50225 [变量_31B50225], “:”, , 假)
        .如果真 (变量_65C30225 ＝ -1)
            到循环尾 ()
        .如果真结束
        
        变量_33B50225 ＝ 取文本中间 (变量_30B50225 [变量_31B50225], 1, 变量_65C30225 － 1)
        .如果 (寻找文本 (变量_33B50225, “-”, , 假) ≠ -1)
            变量_FDB50225 ＝ “”
            变量_FEB50225 ＝ 分割文本 (变量_33B50225, “-”, )
            变量_FFB50225 ＝ 取数组成员数 (变量_FEB50225)
            .计次循环首 (变量_FFB50225, 变量_00B60225)
                .如果 (变量_00B60225 ＝ 变量_FFB50225)
                    变量_FDB50225 ＝ 变量_FDB50225 ＋ 文本_首字母改大写 (变量_FEB50225 [变量_00B60225])
                .否则
                    变量_FDB50225 ＝ 变量_FDB50225 ＋ 文本_首字母改大写 (变量_FEB50225 [变量_00B60225]) ＋ “-”
                .如果结束
                
            .计次循环尾 ()
            
            变量_33B50225 ＝ 变量_FDB50225
        .否则
            变量_33B50225 ＝ 文本_首字母改大写 (变量_33B50225)
        .如果结束
        
        变量_E9C20225 ＝ 取文本右边 (变量_30B50225 [变量_31B50225], 取文本长度 (变量_30B50225 [变量_31B50225]) － 取文本长度 (变量_33B50225))
        .如果真 (取代码 (取文本左边 (变量_E9C20225, 1), ) ＝ 32)
            变量_E9C20225 ＝ 取文本右边 (变量_E9C20225, 取文本长度 (变量_E9C20225) － 1)
        .如果真结束
        
        变量_36B50225 ＝ 变量_36B50225 ＋ 变量_33B50225 ＋ 变量_E9C20225 ＋ #换行符
        
        
    .计次循环尾 ()
    变量_36B50225 ＝ 取文本左边 (变量_36B50225, 取文本长度 (变量_36B50225) － 取文本长度 (#换行符))
    返回 (变量_36B50225)

.子程序 网页_处理协议头ex, 文本型, 公开, 将协议头中的键名首字母处理为大写
    .参数 参_原始协yi头, 文本型
    .局部变量 变量_E1C20225, 文本型, , "0"
    .局部变量 变量_E2C20225, 文本型, , "0"
    .局部变量 变量_E3C20225, 整数型
    .局部变量 变量_E4C20225, 整数型
    .局部变量 变量_E5C20225, 文本型
    .局部变量 变量_E6C20225, 整数型
    .局部变量 变量_E7C20225, 整数型

    
    变量_E6C20225 ＝ 打开内存文件 ()
    变量_E1C20225 ＝ 分割文本 (参_原始协yi头, #换行符, )
    .计次循环首 (取数组成员数 (变量_E1C20225), 变量_E7C20225)
        变量_E2C20225 ＝ 分割文本 (变量_E1C20225 [变量_E7C20225], “:”, )
        .如果真 (取数组成员数 (变量_E2C20225) ≥ 2)
            变量_E3C20225 ＝ 取代码 (变量_E2C20225 [1], 1)
            .如果真 (变量_E3C20225 ≥ 97 且 变量_E3C20225 ≤ 122)
                变量_E2C20225 [1] ＝ 文本替换 (变量_E2C20225 [1], 1, 1, 字符 (变量_E3C20225 － 32))
                变量_E4C20225 ＝ 寻找文本 (变量_E2C20225 [1], “-”, , 假)
                .判断循环首 (变量_E4C20225 ≠ -1)
                    变量_E4C20225 ＝ 变量_E4C20225 ＋ 1
                    变量_E3C20225 ＝ 取代码 (变量_E2C20225 [1], 变量_E4C20225)
                    .如果真 (变量_E3C20225 ≥ 97 且 变量_E3C20225 ≤ 122)
                        变量_E2C20225 [1] ＝ 文本替换 (变量_E2C20225 [1], 变量_E4C20225, 1, 字符 (变量_E3C20225 － 32))
                    .如果真结束
                    变量_E4C20225 ＝ 寻找文本 (变量_E2C20225 [1], “-”, 变量_E4C20225, 假)
                .判断循环尾 ()
                变量_E1C20225 [变量_E7C20225] ＝ 文本替换 (变量_E1C20225 [变量_E7C20225], 1, 取文本长度 (变量_E2C20225 [1]), 变量_E2C20225 [1])
            .如果真结束
            变量_E3C20225 ＝ 取代码 (变量_E2C20225 [2], 1)
            .如果真 (变量_E3C20225 ≠ 32)
                变量_E1C20225 [变量_E7C20225] ＝ 文本替换 (变量_E1C20225 [变量_E7C20225], 取文本长度 (变量_E2C20225 [1]) ＋ 1, 1, “: ”)
            .如果真结束
            
        .如果真结束
        写文本行 (变量_E6C20225, 变量_E1C20225 [变量_E7C20225])
    .计次循环尾 ()
    移到文件首 (变量_E6C20225)
    变量_E5C20225 ＝ 读入文本 (变量_E6C20225, )
    关闭文件 (变量_E6C20225)
    返回 (变量_E5C20225)

.子程序 网页_访问_对象, 字节集, 公开, 使用WinHttp的对象方式访问网页
    .参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
    .参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD 3=PUT  4=OPTIONS  5=DELETE  6=TRACE  7=CONNECT
    .参数 提交信息, 文本型, 可空, "POST"专用   自动UTF8编码
    .参数 提交Cookies, 文本型, 参考 可空, 设置提交时的cookie
    .参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
    .参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开
    .参数 返回协议头, 文本型, 参考 可空, 返回的协议头
    .参数 返回状态代码, 整数型, 参考 可空, 网页返回的状态代码，例如：200；302；404等
    .参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
    .参数 字节集提交, 字节集, 可空, 提交字节集数据
    .参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
    .参数 超时, 整数型, 可空, 秒|默认为15秒,-1为无限等待
    .参数 代理用户名, 文本型, 可空, 用户名
    .参数 代理密码, 文本型, 可空, 密码
    .参数 代理标识, 整数型, 可空, 代理标识，默认为1，0为路由器
    .参数 对象继承, 对象, 可空, 此处可自行提供对象，不再主动创建
    .参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新
    .参数 是否补全必要协议头, 逻辑型, 可空, 当附件协议头为空时自动添加必要的UA协议头 默认为真，假将不再添加非传入协议头
    .参数 是否处理协议头大小写, 逻辑型, 可空, 将协议头中的键名首字母处理为大写  默认为真
    .局部变量 变量_7E5B0225, 文本型
    .局部变量 变量_7F5B0225, 对象
    .局部变量 变量_805B0225, 文本型, , "0"
    .局部变量 变量_815B0225, 文本型, , "0"
    .局部变量 变量_825B0225, 整数型
    .局部变量 变量_835B0225, 字节集
    .局部变量 变量_845B0225, 变体型
    .局部变量 变量_7FE00225, 文本型

    .如果真 (是否为空 (是否自动合并更新Cookie))
        是否自动合并更新Cookie ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否补全必要协议头))
        是否补全必要协议头 ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否处理协议头大小写))
        是否处理协议头大小写 ＝ 真
    .如果真结束
    
    线程_初始化COM库 ()
    
    .如果真 (访问方式 ＜ 0 或 访问方式 ＞ 7)
        访问方式 ＝ 0
    .如果真结束
    变量_7E5B0225 ＝ 多项选择 (访问方式 ＋ 1, “GET”, “POST”, “HEAD”, “PUT”, “OPTIONS”, “DELETE”, “TRACE”, “CONNECT”)
    
    .判断开始 (是否为空 (对象继承))
        .如果真 (变量_7F5B0225.创建 (“WinHttp.WinHttpRequest.5.1”, ) ＝ 假)
            返回 ({ })
        .如果真结束
        
    .默认
        变量_7F5B0225 ＝ 对象继承
    .判断结束
    
    .如果真 (超时 ≠ -1)
        .如果 (超时 ＜ 1)
            超时 ＝ 15000
        .否则
            超时 ＝ 超时 × 1000
        .如果结束
        变量_7F5B0225.方法 (“SetTimeouts”, 超时, 超时, 超时, 超时)
    .如果真结束
    
    .如果真 (代理地址 ≠ “”)
        变量_7F5B0225.方法 (“SetProxy”, 2, 代理地址)
    .如果真结束
    变量_7F5B0225.方法 (“Open”, 变量_7E5B0225, 网址, 假)
    .如果真 (禁止重定向)
        变量_7F5B0225.写属性 (“Option”, 6, 0)
    .如果真结束
    
    变量_7F5B0225.写属性 (“Option”, 4, 13056)
    
    变量_7FE00225 ＝ 附加协议头
    .如果真 (是否补全必要协议头)
        .如果真 (寻找文本 (变量_7FE00225, “Accept:”, , 真) ＝ -1)
            变量_7FE00225 ＝ 变量_7FE00225 ＋ #换行符 ＋ “Accept: */*”
        .如果真结束
        
        .如果真 (寻找文本 (变量_7FE00225, “Referer:”, , 真) ＝ -1)
            变量_7FE00225 ＝ 变量_7FE00225 ＋ #换行符 ＋ “Referer: ” ＋ 网址
        .如果真结束
        
        .如果真 (寻找文本 (变量_7FE00225, “Accept-Language:”, , 真) ＝ -1)
            变量_7FE00225 ＝ 变量_7FE00225 ＋ #换行符 ＋ “Accept-Language: zh-cn”
        .如果真结束
        
        .如果真 (寻找文本 (变量_7FE00225, “User-Agent:”, , 真) ＝ -1)
            变量_7FE00225 ＝ 变量_7FE00225 ＋ #换行符 ＋ “User-Agent: Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)”
        .如果真结束
        
        .如果真 (访问方式 ＝ 1)
            .如果真 (寻找文本 (变量_7FE00225, “Content-Type:”, , 真) ＝ -1)
                变量_7FE00225 ＝ 变量_7FE00225 ＋ #换行符 ＋ “Content-Type: application/x-www-form-urlencoded”
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
    .如果真 (是否处理协议头大小写)
        变量_7FE00225 ＝ 网页_处理协议头 (变量_7FE00225)
    .如果真结束
    
    .如果真 (代理地址 ≠ “” 且 代理用户名 ≠ “”)
        .如果真 (是否为空 (代理标识))
            代理标识 ＝ 1
        .如果真结束
        
        变量_7F5B0225.方法 (“SetCredentials”, 代理用户名, 代理密码, 代理标识)
        .如果真 (代理标识 ＝ 1)
            变量_7F5B0225.方法 (“SetRequestHeader”, “Proxy-Authorization”, “Basic ” ＋ 编码_BASE64编码 (到字节集 (代理用户名 ＋ “:” ＋ 代理密码)))
        .如果真结束
        
    .如果真结束
    
    .如果真 (取反 (是否为空 (提交Cookies)))
        .如果真 (取文本长度 (提交Cookies) ＞ 0)
            .如果真 (寻找文本 (提交Cookies, “Cookie:”, , 真) ≠ -1)
                提交Cookies ＝ 子文本替换 (提交Cookies, “Cookie:”, “”, , , 假)
            .如果真结束
            
        .如果真结束
        变量_7F5B0225.方法 (“SetRequestHeader”, “Cookie”, 提交Cookies)
    .如果真结束
    
    
    .判断开始 (寻找文本 (变量_7FE00225, #换行符, , 假) ＝ -1)
        变量_7F5B0225.方法 (“SetRequestHeader”, 内部_协议头取名 (变量_7FE00225), 内部_协议头取值 (变量_7FE00225))
    .默认
        变量_805B0225 ＝ 分割文本 (变量_7FE00225, #换行符, )
        .计次循环首 (取数组成员数 (变量_805B0225), 变量_825B0225)
            .如果真 (变量_805B0225 [变量_825B0225] ≠ “”)
                .如果真 (内部_协议头取名 (变量_805B0225 [变量_825B0225]) ＝ “Connection”)
                    .如果真 (内部_协议头取值 (变量_805B0225 [变量_825B0225]) ＝ “keep-alive”)
                        到循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
                变量_7F5B0225.方法 (“SetRequestHeader”, 内部_协议头取名 (变量_805B0225 [变量_825B0225]), 内部_协议头取值 (变量_805B0225 [变量_825B0225]))
            .如果真结束
            
        .计次循环尾 ()
    .判断结束
    
    .判断开始 (字节集提交 ＝ { })
        变量_7F5B0225.方法 (“Send”, 提交信息)
    .默认
        变量_845B0225.赋值 (字节集提交, )
        变量_7F5B0225.方法 (“Send”, 变量_845B0225)
    .判断结束
    变量_835B0225 ＝ 变量_7F5B0225.读属性 (“ResponseBody”, ).取字节集 ()
    返回协议头 ＝ 变量_7F5B0225.读文本属性 (“GetAllResponseHeaders”, )
    返回状态代码 ＝ 变量_7F5B0225.读数值属性 (“Status”, )
    变量_7F5B0225.读文本属性 (“StatusText”, )
    变量_815B0225 ＝ 分割文本 (返回协议头, #换行符, )
    返回Cookies ＝ HeadersToCookie (变量_815B0225)
    .如果真 (是否自动合并更新Cookie)
        .如果真 (取反 (是否为空 (提交Cookies)))
            返回Cookies ＝ 网页_Cookie合并更新 (提交Cookies, 返回Cookies)
        .如果真结束
        
    .如果真结束
    变量_7F5B0225.清除 ()
    线程_取消COM库 ()
    返回 (变量_835B0225)

.子程序 网页_访问, 字节集, 公开, 使用WinInet的API方式访问网页
    .参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
    .参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD 3=PUT  4=OPTIONS  5=DELETE  6=TRACE  7=CONNECT
    .参数 提交信息, 文本型, 可空, POST专用
    .参数 提交Cookies, 文本型, 参考 可空, 设置提交时的cookie
    .参数 返回Cookies, 文本型, 可空, 返回的Cookie
    .参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
    .参数 返回协议头, 文本型, 参考 可空, 返回的协议头
    .参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
    .参数 字节集提交, 字节集, 可空, 提交字节集数据
    .参数 代理地址, 文本型, 可空, 代理地址，格式为:ip:port,例如:8.8.8.8:88
    .参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新
    .参数 是否补全必要协议头, 逻辑型, 可空, 当附件协议头为空时自动添加必要的UA协议头 默认为真，假将不再添加非传入协议头
    .参数 是否处理协议头大小写, 逻辑型, 可空, 将协议头中的键名首字母处理为大写  默认为真
    .参数 是否使用socks4代理, 逻辑型, 可空, 设置代理类型，假为http(s)代理，真为socks4代理
    .局部变量 变量_905B0225, 整数型
    .局部变量 变量_915B0225, 整数型
    .局部变量 变量_925B0225, 整数型
    .局部变量 变量_935B0225, 整数型
    .局部变量 变量_945B0225, 字节集
    .局部变量 变量_955B0225, 文本型
    .局部变量 变量_965B0225, 文本型
    .局部变量 变量_975B0225, 文本型, , "0"
    .局部变量 变量_985B0225, 字节集
    .局部变量 变量_995B0225, 整数型
    .局部变量 变量_9A5B0225, 文本型
    .局部变量 变量_9B5B0225, 逻辑型
    .局部变量 变量_EEB50225, 整数型
    .局部变量 变量_82E00225, 文本型

    
    .如果真 (是否为空 (是否自动合并更新Cookie))
        是否自动合并更新Cookie ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否补全必要协议头))
        是否补全必要协议头 ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否处理协议头大小写))
        是否处理协议头大小写 ＝ 真
    .如果真结束
    
    变量_82E00225 ＝ 附加协议头
    .如果真 (是否处理协议头大小写)
        变量_82E00225 ＝ 网页_处理协议头 (变量_82E00225)
    .如果真结束
    
    
    .如果真 (访问方式 ＜ 0 或 访问方式 ＞ 7)
        访问方式 ＝ 0
    .如果真结束
    变量_955B0225 ＝ 多项选择 (访问方式 ＋ 1, “GET”, “POST”, “HEAD”, “PUT”, “OPTIONS”, “DELETE”, “TRACE”, “CONNECT”)
    
    .如果真 (到小写 (取文本左边 (网址, 8)) ＝ “https://”)
        变量_9B5B0225 ＝ 真
    .如果真结束
    
    .判断开始 (寻找文本 (变量_82E00225, “User-Agent:”, , 真) ≠ -1)
        变量_965B0225 ＝ 删首尾空 (文本_取出中间文本 (变量_82E00225 ＋ #换行符, “User-Agent:”, #换行符, , ))
        .如果真 (变量_965B0225 ＝ “”)
            变量_965B0225 ＝ 内部_协议头取值 (变量_82E00225)
        .如果真结束
        
    .默认
        变量_965B0225 ＝ “Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)”
    .判断结束
    
    .判断开始 (代理地址 ＝ “”)
        变量_905B0225 ＝ InternetOpenA (变量_965B0225, 1, 字符 (0), 字符 (0), 0)
    .默认
        .判断开始 (是否使用socks4代理)
            变量_905B0225 ＝ InternetOpenA (变量_965B0225, 3, “SOCKS=” ＋ 代理地址, “”, 0)
        .默认
            .判断开始 (变量_9B5B0225)
                变量_905B0225 ＝ InternetOpenA (变量_965B0225, 3, 代理地址, “”, 0)
            .默认
                变量_905B0225 ＝ InternetOpenA (变量_965B0225, 3, “http=” ＋ 代理地址, “”, 0)
            .判断结束
            
        .判断结束
        
    .判断结束
    
    .如果真 (变量_905B0225 ＝ 0)
        
        返回 ({ })
    .如果真结束
    变量_915B0225 ＝ InternetConnectA (变量_905B0225, 网页_取域名 (网址), 网页_取端口 (网址), 字符 (0), 字符 (0), 3, 0, 0)
    .如果真 (变量_915B0225 ＝ 0)
        
        InternetCloseHandle (变量_905B0225)
        返回 ({ })
    .如果真结束
    
    变量_995B0225 ＝ 位或 (#INTERNET_FLAG_RELOAD, #INTERNET_COOKIE_THIRD_PARTY)
    .如果真 (取反 (是否为空 (提交Cookies)))
        变量_995B0225 ＝ 位或 (变量_995B0225, #INTERNET_FLAG_NO_COOKIES)
    .如果真结束
    
    .如果真 (禁止重定向)
        变量_995B0225 ＝ 位或 (变量_995B0225, #INTERNET_FLAG_NO_AUTO_REDIRECT)
    .如果真结束
    
    .判断开始 (变量_9B5B0225)
        变量_995B0225 ＝ 位或 (变量_995B0225, #INTERNET_FLAG_SECURE)
    .默认
        变量_995B0225 ＝ 位或 (变量_995B0225, #INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS)
    .判断结束
    
    变量_925B0225 ＝ HttpOpenRequestA (变量_915B0225, 变量_955B0225, 网页_取页面地址 (网址), “HTTP/1.1”, 字符 (0), 字符 (0), 变量_995B0225, 0)
    .如果真 (变量_925B0225 ＝ 0)
        
        InternetCloseHandle (变量_915B0225)
        InternetCloseHandle (变量_905B0225)
        返回 ({ })
    .如果真结束
    
    InternetSetOption (变量_925B0225, #<?未知本地类型?>, 127872, 4)
    
    .如果真 (是否补全必要协议头)
        .如果真 (变量_82E00225 ＝ “”)
            变量_82E00225 ＝ “Accept: */*”
        .如果真结束
        
        .如果真 (寻找文本 (变量_82E00225, “Accept:”, , 真) ＝ -1)
            变量_82E00225 ＝ 变量_82E00225 ＋ #换行符 ＋ “Accept: */*”
        .如果真结束
        
        
        .如果真 (寻找文本 (变量_82E00225, “Referer:”, , 真) ＝ -1)
            变量_82E00225 ＝ 变量_82E00225 ＋ #换行符 ＋ “Referer: ” ＋ 网址
        .如果真结束
        
        .如果真 (寻找文本 (变量_82E00225, “Accept-Language:”, , 真) ＝ -1)
            变量_82E00225 ＝ 变量_82E00225 ＋ #换行符 ＋ “Accept-Language: zh-cn”
        .如果真结束
        
        .如果真 (访问方式 ＝ 1)
            .如果真 (寻找文本 (变量_82E00225, “Content-Type:”, , 真) ＝ -1)
                变量_82E00225 ＝ 变量_82E00225 ＋ #换行符 ＋ “Content-Type: application/x-www-form-urlencoded”
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
    .如果真 (提交Cookies ≠ “”)
        .判断开始 (寻找文本 (提交Cookies, “Cookie:”, , 假) ＝ -1)
            变量_82E00225 ＝ 变量_82E00225 ＋ #换行符 ＋ “Cookie: ” ＋ 提交Cookies
        .默认
            变量_82E00225 ＝ 变量_82E00225 ＋ #换行符 ＋ 提交Cookies
        .判断结束
        
    .如果真结束
    
    
    
    
    
    
    .判断开始 (访问方式 ＝ 0)
        HttpSendRequestA (变量_925B0225, 变量_82E00225, 取文本长度 (变量_82E00225), 0, 0)
    .默认
        .如果真 (字节集提交 ＝ { })
            字节集提交 ＝ 到字节集 (提交信息)
        .如果真结束
        HttpSendRequestA (变量_925B0225, 变量_82E00225, 取文本长度 (变量_82E00225), 取指针字节集_ (字节集提交), 取字节集长度 (字节集提交))
    .判断结束
    
    变量_935B0225 ＝ 0
    变量_945B0225 ＝ 取空白字节集 (1024)
    .循环判断首 ()
        InternetReadFile (变量_925B0225, 变量_945B0225, 1024, 变量_935B0225)
        变量_985B0225 ＝ 变量_985B0225 ＋ 取字节集左边 (变量_945B0225, 变量_935B0225)
    .循环判断尾 (变量_935B0225 ≠ 0)
    返回协议头 ＝ 取空白文本 (5000)
    HttpQueryInfoA (变量_925B0225, 22, 返回协议头, 5000, 0)
    
    InternetCloseHandle (变量_925B0225)
    InternetCloseHandle (变量_915B0225)
    InternetCloseHandle (变量_905B0225)
    变量_975B0225 ＝ 分割文本 (返回协议头, #换行符, )
    返回Cookies ＝ HeadersToCookie (变量_975B0225)
    .如果真 (是否自动合并更新Cookie)
        .如果真 (取反 (是否为空 (提交Cookies)))
            返回Cookies ＝ 网页_Cookie合并更新 (提交Cookies, 返回Cookies)
        .如果真结束
        
    .如果真结束
    返回 (变量_985B0225)

.子程序 网页_访问S, 文本型, 公开, 源码由[洫蜘蛛]提供,使用WinHttp的 API方式访问网页,如果返回是“?”请查询返回协议头是否有“Content-Encoding: gzip“表示gzip压缩过网页，可用 网页_GZIP解压()命令解压，如果返回是乱码，则返回原始文本，请自行转换编码，失败返回空文本，请取出状态文本。
    .参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
    .参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD  3=PUT  4=OPTIONS  5=DELETE  6=TRACE  7=CONNECT
    .参数 提交信息, 文本型, 可空, POST专用
    .参数 提交Cookies, 文本型, 参考 可空, 设置提交时的cookie
    .参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
    .参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
    .参数 返回协议头, 文本型, 参考 可空, 返回的协议头
    .参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
    .参数 网站登录用户名, 文本型, 可空, 自动登录网页用户名 如路由器
    .参数 网站登录密码, 文本型, 可空
    .参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
    .参数 代理帐号, 文本型, 可空
    .参数 代理密码, 文本型, 可空
    .参数 超时时间, 整数型, 可空, 可以被省略，单位：秒，默认30秒，如果提供大于0的数值，则修改操作超时时间。
    .参数 返回重定向, 文本型, 参考 可空, 可以被省略，提供参数时只能提供文本型变量，用于当发生重定向时取回页面重定向的地址。
    .参数 返回状态文本, 文本型, 参考 可空
    .参数 返回原始数据, 字节集, 参考 可空, 可以被省略，返回原始网页编码
    .参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新
    .参数 是否补全必要协议头, 逻辑型, 可空, 当附件协议头为空时自动添加必要的UA协议头 默认为真，假将不再添加非传入协议头
    .参数 字节集提交, 字节集, 可空, 提交字节集数据
    .参数 是否处理协议头大小写, 逻辑型, 可空, 将协议头中的键名首字母处理为大写  默认为真
    .局部变量 变量_55AF0225, URL_COMPONENTS
    .局部变量 变量_56AF0225, 字节集
    .局部变量 变量_57AF0225, 文本型
    .局部变量 变量_58AF0225, 整数型
    .局部变量 变量_59AF0225, 文本型
    .局部变量 变量_5AAF0225, 逻辑型
    .局部变量 变量_5BAF0225, 整数型
    .局部变量 变量_5CAF0225, 文本型
    .局部变量 变量_5DAF0225, 字节集
    .局部变量 变量_5EAF0225, 整数型
    .局部变量 变量_5FAF0225, 整数型
    .局部变量 变量_60AF0225, 整数型
    .局部变量 变量_61AF0225, 文本型
    .局部变量 变量_62AF0225, 字节集
    .局部变量 变量_63AF0225, 整数型
    .局部变量 变量_64AF0225, 整数型
    .局部变量 变量_65AF0225, 文本型
    .局部变量 变量_66AF0225, 字节集
    .局部变量 变量_67AF0225, 整数型
    .局部变量 变量_68AF0225, 字节集
    .局部变量 变量_69AF0225, 整数型
    .局部变量 变量_6AAF0225, 字节集
    .局部变量 变量_6BAF0225, 字节集
    .局部变量 变量_6CAF0225, 文本型
    .局部变量 变量_6DAF0225, 文本型, , "0"
    .局部变量 变量_6EAF0225, 文本型
    .局部变量 变量_6FAF0225, 对象
    .局部变量 变量_70AF0225, 变体型
    .局部变量 变量_71AF0225, 整数型
    .局部变量 变量_72AF0225, 正则表达式类
    .局部变量 变量_B1040325, 文本型, , "0"
    .局部变量 变量_B2040325, 整数型

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN8 且 IsDebuggerPresent ())
        变量_B2040325 ＝ 系统_遍历修复补丁ID (变量_B1040325, “KB3140245”)
        .如果真 (变量_B2040325 ＝ 0)
            输出调试文本 (“缺少修复补丁(KB3140245) 可能导致该功能无效”)
            输出调试文本 (“https://bbs.125.la/thread-14086625-1-1.html”)
        .如果真结束
        
    .如果真结束
    
    .如果真 (是否为空 (是否自动合并更新Cookie))
        是否自动合并更新Cookie ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否补全必要协议头))
        是否补全必要协议头 ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否处理协议头大小写))
        是否处理协议头大小写 ＝ 真
    .如果真结束
    
    .如果 (WinHttpCheckPlatform ())
        变量_55AF0225.dwStructSize ＝ 60
        连续赋值 (-1, 变量_55AF0225.dwSchemeLength, 变量_55AF0225.dwHostNameLength, 变量_55AF0225.dwUrlPathLength, 变量_55AF0225.dwExtraInfoLength)
        变量_56AF0225 ＝ 编码_Ansi到Unicode (网址)
        .如果 (WinHttpCrackUrl (变量_56AF0225, 取字节集长度 (变量_56AF0225), 0, 变量_55AF0225))
            变量_57AF0225 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_55AF0225.lpszHostName, 变量_55AF0225.dwHostNameLength × 2))
            变量_62AF0225 ＝ 选择 (变量_55AF0225.dwUrlPathLength ＜ 1, 编码_Ansi到Unicode (“/”), 指针到字节集 (变量_55AF0225.lpszUrlPath, 变量_55AF0225.dwUrlPathLength × 2) ＋ 指针到字节集 (变量_55AF0225.lpszExtraInfo, 变量_55AF0225.dwExtraInfoLength × 2) ＋ { 0, 0 })
            变量_58AF0225 ＝ 变量_55AF0225.nPort
            变量_5AAF0225 ＝ #INTERNET_SCHEME_HTTPS ＝ 变量_55AF0225.nScheme
            变量_5EAF0225 ＝ 选择 (取文本长度 (代理地址) ＞ 0, #WINHTTP_ACCESS_TYPE_NAMED_PROXY, #WINHTTP_ACCESS_TYPE_NO_PROXY)
            变量_5DAF0225 ＝ 选择 (取文本长度 (代理地址) ＝ 0, { 0, 0 }, 选择 (变量_5AAF0225, 编码_Ansi到Unicode (代理地址), 编码_Ansi到Unicode (“http=” ＋ 代理地址)))
            变量_5BAF0225 ＝ WinHttpOpen (0, 变量_5EAF0225, 变量_5DAF0225, 0, 0)
            .如果 (变量_5BAF0225 ≠ 0)
                变量_63AF0225 ＝ 选择 (超时时间 ＞ 0, 超时时间 × 1000, 30000)
                .如果 (WinHttpSetTimeouts (变量_5BAF0225, 变量_63AF0225, 变量_63AF0225, 变量_63AF0225, 变量_63AF0225))
                    变量_5FAF0225 ＝ WinHttpConnect (变量_5BAF0225, 编码_Ansi到Unicode (变量_57AF0225, ), 变量_58AF0225, 0)
                    .如果 (变量_5FAF0225 ≠ 0)
                        变量_61AF0225 ＝ 选择 (访问方式 ＜ 0 或 访问方式 ＞ 7, “GET”, 多项选择 (访问方式 ＋ 1, “GET”, “POST”, “HEAD”, “PUT”, “OPTIONS”, “DELETE”, “TRACE”, “CONNECT”))
                        变量_60AF0225 ＝ WinHttpOpenRequest (变量_5FAF0225, 编码_Ansi到Unicode (变量_61AF0225, ), 变量_62AF0225, 0, #WINHTTP_NO_REFERER, #WINHTTP_DEFAULT_ACCEPT_TYPES, 选择 (变量_5AAF0225, #WINHTTP_FLAG_SECURE, 0))
                        .如果 (变量_60AF0225 ≠ 0)
                            .如果真 (取文本长度 (网站登录用户名) ＞ 0 且 取文本长度 (网站登录密码) ＞ 0)
                                .如果真 (DLL_WinHttpSetCredentials (变量_60AF0225, #WINHTTP_AUTH_TARGET_SERVER, #WINHTTP_AUTH_SCHEME_BASIC, 编码_Ansi到Unicode (网站登录用户名, ), 编码_Ansi到Unicode (网站登录密码, ), 0) ＝ 假)
                                    返回状态文本 ＝ “707 设置代理凭证失败!”
                                    WinHttpCloseHandle (变量_60AF0225)
                                    WinHttpCloseHandle (变量_5FAF0225)
                                    WinHttpCloseHandle (变量_5BAF0225)
                                    返回 (“”)
                                .如果真结束
                                
                            .如果真结束
                            .如果真 (取文本长度 (代理帐号) ＞ 0 且 取文本长度 (代理密码) ＞ 0)
                                .如果真 (DLL_WinHttpSetCredentials (变量_60AF0225, #WINHTTP_AUTH_TARGET_PROXY, #WINHTTP_AUTH_SCHEME_BASIC, 编码_Ansi到Unicode (代理帐号, ), 编码_Ansi到Unicode (代理密码, ), 0) ＝ 假)
                                    WinHttpCloseHandle (变量_60AF0225)
                                    WinHttpCloseHandle (变量_5FAF0225)
                                    WinHttpCloseHandle (变量_5BAF0225)
                                    返回状态文本 ＝ “707 设置代理凭证失败!”
                                    返回 (“”)
                                .如果真结束
                                
                            .如果真结束
                            
                            
                            .如果真 (WinHttpSetOption (变量_60AF0225, #WINHTTP_OPTION_SECURITY_FLAGS, 13056, 4) ＝ 假)
                                返回状态文本 ＝ “忽略错误/证书错误  失败！”
                                WinHttpCloseHandle (变量_60AF0225)
                                WinHttpCloseHandle (变量_5FAF0225)
                                WinHttpCloseHandle (变量_5BAF0225)
                                返回 (“”)
                                
                            .如果真结束
                            
                            .判断开始 (提交Cookies ＝ “”)
                                变量_64AF0225 ＝ #WINHTTP_OPTION_DISABLE_FEATURE
                            .默认
                                变量_64AF0225 ＝ #WINHTTP_OPTION_ENABLE_FEATURE
                            .判断结束
                            
                            .如果真 (WinHttpSetOption (变量_60AF0225, 变量_64AF0225, #WINHTTP_DISABLE_COOKIES, 4) ＝ 假)
                                返回状态文本 ＝ “708 禁止自动设置Cookies失败!”
                                WinHttpCloseHandle (变量_60AF0225)
                                WinHttpCloseHandle (变量_5FAF0225)
                                WinHttpCloseHandle (变量_5BAF0225)
                                返回 (“”)
                            .如果真结束
                            .如果真 (禁止重定向)
                                .如果真 (WinHttpSetOption (变量_60AF0225, #WINHTTP_OPTION_DISABLE_FEATURE, #WINHTTP_DISABLE_REDIRECTS, 4) ＝ 假)
                                    返回状态文本 ＝ “709 重定向设置失败!”
                                    WinHttpCloseHandle (变量_60AF0225)
                                    WinHttpCloseHandle (变量_5FAF0225)
                                    WinHttpCloseHandle (变量_5BAF0225)
                                    返回 (“”)
                                .如果真结束
                                
                            .如果真结束
                            
                            .如果真 (取文本长度 (附加协议头) ＞ 0)
                                变量_65AF0225 ＝ 附加协议头 ＋ #换行符
                            .如果真结束
                            
                            
                            .如果真 (是否补全必要协议头)
                                .如果真 (寻找文本 (变量_65AF0225, “User-Agent: ”, 1, 真) ＝ -1)
                                    变量_65AF0225 ＝ 变量_65AF0225 ＋ “User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)” ＋ #换行符
                                .如果真结束
                                .如果真 (寻找文本 (变量_65AF0225, “Accept: ”, 1, 真) ＝ -1)
                                    变量_65AF0225 ＝ 变量_65AF0225 ＋ “Accept: text/html, application/xhtml+xml, */*” ＋ #换行符
                                .如果真结束
                                .如果真 (寻找文本 (变量_65AF0225, “Accept-Encoding: ”, 1, 真) ＝ -1)
                                    变量_65AF0225 ＝ 变量_65AF0225 ＋ “Accept-Encoding: identity” ＋ #换行符
                                .如果真结束
                                .如果真 (寻找文本 (变量_65AF0225, “Accept-Language: ”, 1, 真) ＝ -1)
                                    变量_65AF0225 ＝ 变量_65AF0225 ＋ “Accept-Language: zh-cn” ＋ #换行符
                                .如果真结束
                                
                                .如果真 (访问方式 ＝ 1)
                                    .如果真 (寻找文本 (变量_65AF0225, “Content-Type:”, , 真) ＝ -1)
                                        变量_65AF0225 ＝ 变量_65AF0225 ＋ “Content-Type: application/x-www-form-urlencoded” ＋ #换行符
                                    .如果真结束
                                    
                                .如果真结束
                                .如果真 (寻找文本 (变量_65AF0225, “Cache-Control: ”, , 真) ＝ -1)
                                    变量_65AF0225 ＝ 变量_65AF0225 ＋ “Cache-Control: no-cache” ＋ #换行符
                                .如果真结束
                                
                            .如果真结束
                            
                            .如果真 (是否处理协议头大小写)
                                变量_65AF0225 ＝ 网页_处理协议头 (变量_65AF0225)
                            .如果真结束
                            
                            
                            .如果真 (寻找文本 (变量_65AF0225, “Connection”, , 假) ≠ -1)
                                .如果真 (网页_协议头_取信息 (变量_65AF0225, “Connection”) ＝ “keep-alive”)
                                    变量_65AF0225 ＝ 子文本替换 (变量_65AF0225, “Connection: keep-alive” ＋ #换行符, “”, , , 真)
                                .如果真结束
                                
                            .如果真结束
                            
                            .如果真 (寻找文本 (变量_65AF0225, “Cookie:”, , 真) ＝ -1)
                                .如果真 (取文本长度 (提交Cookies) ＞ 0)
                                    .判断开始 (寻找文本 (提交Cookies, “Cookie:”, , 真) ＝ -1)
                                        变量_65AF0225 ＝ 变量_65AF0225 ＋ #换行符 ＋ “Cookie: ” ＋ 提交Cookies ＋ #换行符
                                    .默认
                                        变量_65AF0225 ＝ 变量_65AF0225 ＋ #换行符 ＋ 提交Cookies ＋ #换行符
                                    .判断结束
                                    
                                .如果真结束
                                
                            .如果真结束
                            
                            变量_66AF0225 ＝ 编码_Ansi到Unicode (变量_65AF0225, )
                            变量_67AF0225 ＝ 取字节集长度 (变量_66AF0225) ÷ 2 － 1
                            .如果 (WinHttpAddRequestHeaders (变量_60AF0225, 变量_66AF0225, 变量_67AF0225, #WINHTTP_ADDREQ_FLAG_ADD))
                                .如果 (字节集提交 ＝ { })
                                    变量_68AF0225 ＝ 到字节集 (提交信息)
                                .否则
                                    变量_68AF0225 ＝ 字节集提交
                                .如果结束
                                
                                变量_67AF0225 ＝ 取字节集长度 (变量_68AF0225)
                                .如果 (WinHttpSendRequest (变量_60AF0225, 0, 0, 变量_68AF0225, 变量_67AF0225, 变量_67AF0225, 0))
                                    .如果 (WinHttpReceiveResponse (变量_60AF0225, 0))
                                        变量_6AAF0225 ＝ { }
                                        变量_6BAF0225 ＝ { }
                                        .判断循环首 (WinHttpQueryDataAvailable (变量_60AF0225, 变量_69AF0225))
                                            .如果真 (变量_69AF0225 ＜ 1)
                                                跳出循环 ()
                                            .如果真结束
                                            变量_6AAF0225 ＝ 取空白字节集 (变量_69AF0225)
                                            .如果真 (WinHttpReadData (变量_60AF0225, 变量_6AAF0225, 变量_69AF0225, 变量_67AF0225) ＝ 假)
                                                返回状态文本 ＝ “713 读取数据失败!”
                                                跳出循环 ()
                                            .如果真结束
                                            变量_6BAF0225 ＝ 变量_6BAF0225 ＋ 取字节集左边 (变量_6AAF0225, 变量_67AF0225)
                                        .判断循环尾 ()
                                        变量_6AAF0225 ＝ { }
                                        变量_67AF0225 ＝ 0
                                        WinHttpQueryHeaders (变量_60AF0225, #WINHTTP_QUERY_RAW_HEADERS_CRLF, 0, 变量_6AAF0225, 变量_67AF0225, #WINHTTP_NO_HEADER_INDEX)
                                        变量_6AAF0225 ＝ 取空白字节集 (变量_67AF0225)
                                        .如果真 (WinHttpQueryHeaders (变量_60AF0225, #WINHTTP_QUERY_RAW_HEADERS_CRLF, 0, 变量_6AAF0225, 变量_67AF0225, #WINHTTP_NO_HEADER_INDEX))
                                            返回协议头 ＝ 编码_Unicode到Ansi (变量_6AAF0225)
                                            返回状态文本 ＝ 取文本中间 (返回协议头, 10, 寻找文本 (返回协议头, #换行符, 10, 假) － 10)
                                            
                                            变量_6DAF0225 ＝ 分割文本 (返回协议头, #换行符, )
                                            返回Cookies ＝ HeadersToCookie (变量_6DAF0225)
                                            .计次循环首 (取数组成员数 (变量_6DAF0225), 变量_71AF0225)
                                                .如果真 (文本比较 (取文本左边 (变量_6DAF0225 [变量_71AF0225], 10), “Location: ”, 假) ＝ 0)
                                                    返回重定向 ＝ 取文本中间 (变量_6DAF0225 [变量_71AF0225], 11, 取文本长度 (变量_6DAF0225 [变量_71AF0225]) － 10)
                                                .如果真结束
                                                
                                            .计次循环尾 ()
                                            
                                            .如果真 (是否自动合并更新Cookie)
                                                .如果真 (取反 (提交Cookies ＝ “”))
                                                    返回Cookies ＝ 网页_Cookie合并更新 (提交Cookies, 返回Cookies)
                                                .如果真结束
                                                
                                            .如果真结束
                                            
                                            返回原始数据 ＝ 变量_6BAF0225
                                            变量_6CAF0225 ＝ 到文本 (返回原始数据)
                                            CoInitialize (0)
                                            .如果真 (变量_72AF0225.创建 (“<meta.+?charset=[^\w]?([-\w]+)”, 取文本左边 (变量_6CAF0225, 1024), , , , ))
                                                变量_6EAF0225 ＝ 变量_72AF0225.取子匹配文本 (1, 1, )
                                                .如果真 (取文本长度 (变量_6EAF0225) ＞ 0)
                                                    .如果真 (变量_6EAF0225 ≠ “gbk” 或 变量_6EAF0225 ≠ “gb2312”)
                                                        .如果真 (变量_6FAF0225.创建 (“Adodb.Stream”, ))
                                                            变量_70AF0225.赋值 (变量_6BAF0225, )
                                                            变量_6FAF0225.写属性 (“Type”, 1)
                                                            变量_6FAF0225.写属性 (“Mode”, 3)
                                                            变量_6FAF0225.方法 (“Open”, )
                                                            变量_6FAF0225.方法 (“Write”, 变量_70AF0225)
                                                            变量_6FAF0225.写属性 (“Position”, 0)
                                                            变量_6FAF0225.写属性 (“Type”, 2)
                                                            变量_6FAF0225.写属性 (“Charset”, 变量_6EAF0225)
                                                            变量_6CAF0225 ＝ 变量_6FAF0225.文本方法 (“ReadText”, )
                                                            变量_6FAF0225.方法 (“Close”, )
                                                            变量_6FAF0225.清除 ()
                                                            变量_70AF0225.清除 ()
                                                        .如果真结束
                                                        
                                                    .如果真结束
                                                    
                                                .如果真结束
                                                处理事件 ()
                                            .如果真结束
                                            CoUninitialize ()
                                        .如果真结束
                                        处理事件 ()
                                    .否则
                                        返回状态文本 ＝ “712 服务器未响应!”
                                    .如果结束
                                    处理事件 ()
                                .否则
                                    返回状态文本 ＝ “711 发送请求失败!”
                                .如果结束
                                处理事件 ()
                            .否则
                                返回状态文本 ＝ “710 设置协议头失败!”
                            .如果结束
                            处理事件 ()
                        .否则
                            返回状态文本 ＝ “704 创建WinHttp请求失败!”
                        .如果结束
                        处理事件 ()
                    .否则
                        返回状态文本 ＝ “703 创建WinHttp连接失败!”
                    .如果结束
                    处理事件 ()
                    
                .否则
                    返回状态文本 ＝ “705 设置超时时间失败!”
                .如果结束
                处理事件 ()
                
            .否则
                返回状态文本 ＝ “702 创建WinHttp会话失败!”
            .如果结束
            处理事件 ()
        .否则
            返回状态文本 ＝ “701 解析URL地址失败!”
        .如果结束
        处理事件 ()
    .否则
        返回状态文本 ＝ “700 当前系统不支持WinHttp服务!”
    .如果结束
    WinHttpCloseHandle (变量_60AF0225)
    WinHttpCloseHandle (变量_5FAF0225)
    WinHttpCloseHandle (变量_5BAF0225)
    返回 (变量_6CAF0225)

.子程序 网页_URL取本地地址, 文本型, 公开, 通过文件的URL地址，获取缓存在本地的文件地址，成功返回本地文件地址，失败或不存在返回空文本。目前知道不支持搜狗浏览器。
    .参数 文件地址, 文本型, , 如：http://bbs.125.la/static/image/common/logo.png
    .局部变量 变量_09B80125, 自定义_EFB70141
    .局部变量 变量_0AB80125, 整数型
    .局部变量 变量_0BB80125, 整数型

    GetUrlCacheEntryInfo (文件地址, 0, 变量_0AB80125)
    .判断开始 (_GetLastError () ＝ 2)
        输出调试文本 (“指定的缓存条目在缓存中没有找到。”)
        返回 (“”)
        
    .判断 (_GetLastError () ＝ 122)
        变量_0BB80125 ＝ LocalAlloc (0, 变量_0AB80125)
        GetUrlCacheEntryInfo (文件地址, 变量_0BB80125, 变量_0AB80125)
        DLL_RtlMoveMemory22 (变量_09B80125, 变量_0BB80125, 80)
        LocalFree (变量_0BB80125)
        返回 (变量_09B80125.成员_F2B70135)
    .默认
        
    .判断结束
    返回 (“”)

.子程序 网页_GZIP压缩_文本, 文本型, 公开, 返回 Base64编码 感谢【@surplus 】提供源码
    .参数 Text, 文本型
    .参数 是否线程, 逻辑型, 可空
    .局部变量 变量_ACAF0225, 对象
    .局部变量 变量_ADAF0225, 变体型
    .局部变量 变量_AEAF0225, 文本型

    .如果真 (是否线程)
        线程_初始化COM库 ()
    .如果真结束
    Text ＝ 编码_URL编码 (Text, 真, 真)
    变量_ACAF0225.创建 (“ScriptControl”, )
    变量_ACAF0225.写属性 (“Language”, “JScript”)
    变量_ACAF0225.逻辑方法 (“AddCode”, #<?未知本地类型?>)
    变量_ADAF0225 ＝ 变量_ACAF0225.通用方法 (“Eval”, “Gzip_Encrypt('” ＋ Text ＋ “')”)
    变量_AEAF0225 ＝ 变量_ADAF0225.取文本 ()
    变量_ACAF0225.清除 ()
    .如果真 (是否线程)
        线程_取消COM库 ()
    .如果真结束
    返回 (到文本 (编码_BASE64编码A (字节集_文本转字节集 (“{” ＋ 变量_AEAF0225 ＋ “}”))))

.子程序 网页_GZIP解压_文本, 文本型, 公开, 传递 Base64编码 感谢【@surplus 】提供源码
    .参数 Text, 文本型
    .参数 是否线程, 逻辑型, 可空
    .局部变量 变量_B1AF0225, 对象
    .局部变量 变量_B2AF0225, 变体型
    .局部变量 变量_B3AF0225, 文本型
    .局部变量 变量_CEC20225, 字节集

    .如果真 (是否线程)
        线程_初始化COM库 ()
    .如果真结束
    Text ＝ 字节集_字节集转文本ex (编码_BASE64解码A (到字节集 (Text)))
    Text ＝ 取文本左边 (取文本右边 (Text, 取文本长度 (Text) － 1), 取文本长度 (Text) － 2)
    变量_B1AF0225.创建 (“ScriptControl”, )
    变量_B1AF0225.写属性 (“Language”, “JScript”)
    变量_B1AF0225.逻辑方法 (“AddCode”, #<?未知本地类型?>)
    变量_B2AF0225 ＝ 变量_B1AF0225.通用方法 (“Eval”, “Gzip_Decrypt('” ＋ Text ＋ “')”)
    变量_B3AF0225 ＝ 变量_B2AF0225.取文本 ()
    变量_B1AF0225.清除 ()
    .如果真 (是否线程)
        线程_取消COM库 ()
    .如果真结束
    变量_CEC20225 ＝ 字节集_文本转字节集ex (“{” ＋ 变量_B3AF0225 ＋ “}”)
    返回 (编码_URL解码_快速 (编码_Utf8到Ansi (变量_CEC20225), ))

.子程序 网页_GZIP压缩, 字节集, 公开, 感谢小磊提供，gzip.dll文件请自行到这里来下载并放到程序根目录下即可。http://pan.baidu.com/share/link?shareid=222122&uk=2013335237
    .参数 inData, 字节集
    .局部变量 变量_A5AE0125, 整数型
    .局部变量 变量_A6AE0125, 字节集
    .局部变量 变量_A7AE0125, 整数型
    .局部变量 变量_A8AE0125, 字节集
    .局部变量 变量_A9AE0125, 整数型
    .局部变量 变量_AAAE0125, 整数型
    .局部变量 变量_ABAE0125, 整数型
    .局部变量 变量_ACAE0125, 字节集
    .局部变量 变量_ADAE0125, 字节集
    .局部变量 变量_AEAE0125, 整数型

    变量_A8AE0125 ＝ 取空白字节集 (8192)
    InitCompression ()
    CreateCompression (变量_A5AE0125, 3)
    .循环判断首 ()
        变量_A6AE0125 ＝ 取字节集中间 (inData, 变量_AEAE0125 ＋ 1, 8192)
        变量_A7AE0125 ＝ 取字节集长度 (变量_A6AE0125)
        变量_ABAE0125 ＝ Compress (变量_A5AE0125, 变量_A6AE0125, 变量_A7AE0125, 变量_A8AE0125, 8192, 变量_A9AE0125, 变量_AAAE0125, 3)
        .如果真 (0 ≠ 变量_AAAE0125)
            变量_ADAE0125 ＝ 变量_ADAE0125 ＋ 取字节集左边 (变量_A8AE0125, 变量_AAAE0125)
            变量_AEAE0125 ＝ 变量_AEAE0125 ＋ 变量_A9AE0125
        .如果真结束
        
    .循环判断尾 (变量_ABAE0125 ＝ 0)
    DestroyCompression (变量_A5AE0125)
    返回 (变量_ADAE0125)

.子程序 网页_GZIP解压, 字节集, 公开, 感谢小磊提供，gzip.dll文件请自行到这里来下载并放到程序根目录下即可。http://pan.baidu.com/share/link?shareid=222122&uk=2013335237
    .参数 inData, 字节集
    .局部变量 变量_B0AE0125, 整数型
    .局部变量 变量_B1AE0125, 字节集
    .局部变量 变量_B2AE0125, 整数型
    .局部变量 变量_B3AE0125, 字节集
    .局部变量 变量_B4AE0125, 整数型
    .局部变量 变量_B5AE0125, 整数型
    .局部变量 变量_B6AE0125, 整数型
    .局部变量 变量_B7AE0125, 字节集
    .局部变量 变量_B8AE0125, 字节集
    .局部变量 变量_B9AE0125, 整数型

    变量_B3AE0125 ＝ 取空白字节集 (8192)
    InitDecompression ()
    CreateDecompression (变量_B0AE0125, 3)
    .循环判断首 ()
        变量_B1AE0125 ＝ 取字节集中间 (inData, 变量_B9AE0125 ＋ 1, 8192)
        变量_B2AE0125 ＝ 取字节集长度 (变量_B1AE0125)
        变量_B6AE0125 ＝ DLL_Decompress (变量_B0AE0125, 变量_B1AE0125, 变量_B2AE0125, 变量_B3AE0125, 8192, 变量_B4AE0125, 变量_B5AE0125)
        .如果真 (0 ≠ 变量_B5AE0125)
            变量_B8AE0125 ＝ 变量_B8AE0125 ＋ 取字节集左边 (变量_B3AE0125, 变量_B5AE0125)
            变量_B9AE0125 ＝ 变量_B9AE0125 ＋ 变量_B4AE0125
        .如果真结束
        
    .循环判断尾 (变量_B6AE0125 ＝ 0)
    DestroyDecompression (变量_B0AE0125)
    返回 (变量_B8AE0125)

.子程序 网页_JS格式化, 文本型, 公开, 感谢小磊提供，格式化未处理的JS文本
    .参数 js代码, 文本型, , 需要加密\解密的源码
    .参数 压缩模式, 逻辑型, 可空, 假为格式化代码,真为压缩代码
    .局部变量 变量_D3BF0125, 类_脚本组件
    .局部变量 变量_D4BF0125, 文本型

    变量_D3BF0125.执行 (#<?未知本地类型?>)
    .判断开始 (压缩模式)
        返回 (变量_D3BF0125.运行 (“ysjs”, js代码))
    .默认
        返回 (变量_D3BF0125.运行 (“js_beautify”, js代码))
    .判断结束
    

.子程序 网页_置浏览器代理, , 公开, 设置当前程序中浏览器的代理,不影响外部浏览器使用
    .参数 代理IP, 文本型, 可空, 格式ip地址+端口，例如【192.168.1.10:80】,留空为取消代理
    .局部变量 变量_75AE0125, 自定义_5AAE0141

    .如果 (是否为空 (代理IP) ＝ 假)
        变量_75AE0125.成员_5BAE0135 ＝ #<?未知本地类型?>
        变量_75AE0125.成员_5CAE0135 ＝ “ftp= ” ＋ 代理IP ＋ “;http= ” ＋ 代理IP ＋ “;socks= ” ＋ 代理IP
        变量_75AE0125.成员_5DAE0135 ＝ “”
        DLL_InternetSetOptionA (0, #INTERNET_OPTION_PROXY, 变量_75AE0125, 12)
        InternetSetOptionA_传址 (0, #INTERNET_OPTION_SETTINGS_CHANGED, 0, 0)
    .否则
        
        变量_75AE0125.成员_5BAE0135 ＝ #<?未知本地类型?>
        变量_75AE0125.成员_5CAE0135 ＝ “”
        变量_75AE0125.成员_5DAE0135 ＝ “”
        DLL_InternetSetOptionA (0, #INTERNET_OPTION_PROXY, 变量_75AE0125, 12)
        InternetSetOptionA_传址 (0, #INTERNET_OPTION_SETTINGS_CHANGED, 0, 0)
    .如果结束
    

.子程序 网页_置浏览器UA, 逻辑型, 公开, 设置当前程序中浏览器的UserAgent,不影响外部浏览器使用
    .参数 UserAgent, 文本型

    返回 (DLL_UrlMkSetSessionOption (#URLMON_OPTION_USERAGENT, UserAgent, 取文本长度 (UserAgent), 0) ＝ 0)

.子程序 网页_取网页源码, 文本型, 公开, 获取指定网址的网页源码文本
    .参数 网址, 文本型, , 请提供要取源码的网址

    返回 (到文本 (网页_访问 (网址)))

.子程序 网页_取文本_reg, 文本型, 公开, 去掉网页源码中的HTML标签，保留纯文本(正则方式)
    .参数 网页源码, 文本型, , 网页源码如果含中文且乱码的,请先解码
    .局部变量 变量_5EC60125, 正则表达式类
    .局部变量 变量_C39E0225, 文本型

    变量_C39E0225 ＝ 网页源码
    变量_5EC60125.创建 (“<script[\s\S]*?</script>|<style[\s\S]*?</style>|<[^>]+>|&.{1,8};”, 变量_C39E0225)
    变量_C39E0225 ＝ 变量_5EC60125.替换 ()
    返回 (变量_C39E0225)

.子程序 网页_取文本_dom, 文本型, 公开, 去掉网页源码中的HTML标签，保留纯文本(DOM方式)
    .参数 网页源码, 文本型, , 网页源码如果含中文且乱码的,请先解码
    .局部变量 变量_51C90125, 对象
    .局部变量 变量_C29E0225, 文本型

    变量_C29E0225 ＝ 网页源码
    CoInitialize (0)
    变量_51C90125.创建 (“{25336920-03F9-11CF-8FD0-00AA00686F13}”, )
    变量_51C90125.方法 (“write”, “<HTML><BODY><div></div></BODY></HTML>”)
    变量_51C90125.对象型方法 (“body”, ).写属性 (“innerHTML”, 变量_C29E0225)
    变量_51C90125.方法 (“close”, )
    变量_C29E0225 ＝ 变量_51C90125.对象型方法 (“body”, ).读文本属性 (“outerText”, )
    CoUninitialize ()
    返回 (变量_C29E0225)

.子程序 网页_取端口, 整数型, 公开, 取出网站服务器的默认端口
    .参数 网址, 文本型
    .局部变量 变量_34BF0125, 文本型
    .局部变量 变量_35BF0125, 整数型

    变量_34BF0125 ＝ 网页_取域名 (网址, , 真)
    变量_35BF0125 ＝ 倒找文本 (变量_34BF0125, “:”, , 假)
    .判断开始 (变量_35BF0125 ≠ -1)
        返回 (到整数 (取文本右边 (变量_34BF0125, 取文本长度 (变量_34BF0125) － 变量_35BF0125)))
    .判断 (取文本左边 (到小写 (网址), 5) ＝ “https”)
        返回 (443)
    .默认
        返回 (80)
    .判断结束
    

.子程序 网页_取域名, 文本型, 公开, 通过“/”或者“.”来获取网址中的域名，默认使用“/”方式
    .参数 网址, 文本型
    .参数 去除二级域名, 逻辑型, 可空
    .参数 不过滤端口, 逻辑型, 可空
    .参数 后缀点数量, 整数型, 可空, 不留空表示通过“.”的方式取域名 。如：.com后缀点数量为1 ,.com.cn后缀点数量为2
    .局部变量 变量_4EC80125, 文本型
    .局部变量 变量_4FC80125, 整数型
    .局部变量 变量_50C80125, 文本型, , "0"
    .局部变量 变量_5EC80125, 整数型
    .局部变量 变量_60C80125, 整数型
    .局部变量 变量_61C80125, 整数型
    .局部变量 变量_62C80125, 整数型

    变量_4EC80125 ＝ 到小写 (网址)
    .判断开始 (是否为空 (后缀点数量))
        .如果真 (取文本右边 (变量_4EC80125, 1) ≠ “/”)
            变量_4EC80125 ＝ 变量_4EC80125 ＋ “/”
        .如果真结束
        
        .判断开始 (取文本左边 (变量_4EC80125, 8) ＝ “https://”)
            变量_4EC80125 ＝ 文本_取出中间文本 (变量_4EC80125, “https://”, “/”)
        .默认
            .如果真 (寻找文本 (变量_4EC80125, “http://”, , 假) ＝ -1)
                变量_4EC80125 ＝ “http://” ＋ 变量_4EC80125
            .如果真结束
            变量_4EC80125 ＝ 文本_取出中间文本 (变量_4EC80125, “http://”, “/”)
        .判断结束
        
        .如果真 (去除二级域名)
            变量_50C80125 ＝ 分割文本 (变量_4EC80125, “.”, )
            变量_4FC80125 ＝ 取数组成员数 (变量_50C80125)
            .如果真 (变量_4FC80125 ＞ 1)
                变量_4EC80125 ＝ 变量_50C80125 [变量_4FC80125 － 1] ＋ “.” ＋ 变量_50C80125 [变量_4FC80125]
            .如果真结束
            
        .如果真结束
        
    .默认
        
        变量_4EC80125 ＝ 子文本替换 (变量_4EC80125, “http://”, “”, , , 真)
        变量_4EC80125 ＝ 子文本替换 (变量_4EC80125, “https://”, “”, , , 真)
        变量_4FC80125 ＝ 寻找文本 (变量_4EC80125, “/”, , 假)
        .如果真 (变量_4FC80125 ≠ -1)
            变量_4EC80125 ＝ 取文本左边 (变量_4EC80125, 变量_4FC80125 － 1)
        .如果真结束
        连续赋值 (取文本长度 (变量_4EC80125), 变量_5EC80125, 变量_62C80125)
        .计次循环首 (后缀点数量, )
            变量_62C80125 ＝ 倒找文本 (变量_4EC80125, “.”, 变量_62C80125, 假)
        .计次循环尾 ()
        变量_61C80125 ＝ 倒找文本 (变量_4EC80125, “.”, 变量_62C80125, 假)
        .判断开始 (去除二级域名)
            变量_4EC80125 ＝ 取文本右边 (变量_4EC80125, 变量_5EC80125 － 变量_61C80125)
        .默认
            
            .如果真 (变量_61C80125 ≠ -1)
                变量_60C80125 ＝ 倒找文本 (变量_4EC80125, “.”, 变量_61C80125, 假)
                .如果真 (变量_60C80125 ≠ -1)
                    变量_4EC80125 ＝ 取文本右边 (变量_4EC80125, 变量_5EC80125 － 变量_60C80125)
                .如果真结束
                
            .如果真结束
            
        .判断结束
        
    .判断结束
    
    .判断开始 (不过滤端口)
        返回 (变量_4EC80125)
    .默认
        变量_4FC80125 ＝ 寻找文本 (变量_4EC80125, “:”, , 假)
        .判断开始 (变量_4FC80125 ≠ -1)
            返回 (取文本左边 (变量_4EC80125, 变量_4FC80125 － 1))
        .默认
            返回 (变量_4EC80125)
        .判断结束
        
    .判断结束
    

.子程序 网页_取外网IP, 文本型, 公开, 取本机的外网IP！注意，本命令调用的是第三方接口，接口随时可能失效。
    .参数 所在省市, 文本型, 可空, 可空。请提供一个文本变量，用于存放您所在的省市，注：有些接口无法取出城市
    .参数 接口, 整数型, 可空, 可空。0、ip138；1、ip-api.com；2、cdid.c-ctrip.com；3、ip.cn；4、whois.pconline.com.cn；5、uc；6、ip.sb；7、ipinfo
    .局部变量 变量_88CA0225, 字节集
    .局部变量 变量_89CA0225, 文本型
    .局部变量 变量_8ACA0225, 文本型
    .局部变量 变量_8BCA0225, 文本型

    .判断开始 (接口 ＝ 1)
        变量_89CA0225 ＝ “http://ip-api.com/json/?lang=zh-CN”
        变量_8ACA0225 ＝ 编码_Utf8到Ansi (网页_访问_对象 (变量_89CA0225, , , , , , , , , , , , , , , , , , ))
        变量_8BCA0225 ＝ 文本_取出中间文本 (变量_8ACA0225, #引号 ＋ “query” ＋ #引号 ＋ “:” ＋ #引号, #引号, , )
        所在省市 ＝ 文本_取出中间文本 (变量_8ACA0225, #引号 ＋ “regionName” ＋ #引号 ＋ “:” ＋ #引号, #引号, , )
    .判断 (接口 ＝ 2)
        变量_89CA0225 ＝ “https://cdid.c-ctrip.com/model-poc2/h”
        变量_8BCA0225 ＝ 编码_Utf8到Ansi (网页_访问_对象 (变量_89CA0225, , , , , , , , , , , , , , , , , , ))
        所在省市 ＝ “”
    .判断 (接口 ＝ 3)
        变量_89CA0225 ＝ “https://ip.cn/api/index?ip=&type=0”
        变量_8ACA0225 ＝ 编码_Utf8到Ansi (网页_访问_对象 (变量_89CA0225, , , , , “User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36 Core/1.47.277.400 QQBrowser/9.4.7658.400”, , , , , , , , , , , , , ))
        变量_8BCA0225 ＝ 文本_取出中间文本 (变量_8ACA0225, #引号 ＋ “ip” ＋ #引号 ＋ “:” ＋ #引号, #引号, , )
        所在省市 ＝ 文本_取出中间文本 (变量_8ACA0225, #引号 ＋ “address” ＋ #引号 ＋ “:” ＋ #引号, #引号, , )
    .判断 (接口 ＝ 4)
        变量_89CA0225 ＝ “http://whois.pconline.com.cn/ipJson.jsp?json=true”
        变量_8ACA0225 ＝ 到文本 (网页_访问_对象 (变量_89CA0225, , , , , , , , , , , , , , , , , , ))
        变量_8BCA0225 ＝ 文本_取出中间文本 (变量_8ACA0225, #引号 ＋ “ip” ＋ #引号 ＋ “:” ＋ #引号, #引号, , )
        所在省市 ＝ 文本_取出中间文本 (变量_8ACA0225, #引号 ＋ “pro” ＋ #引号 ＋ “:” ＋ #引号, #引号, , )
    .判断 (接口 ＝ 5)
        变量_89CA0225 ＝ “https://www.uc.cn/ip”
        变量_8ACA0225 ＝ 编码_Utf8到Ansi (网页_访问_对象 (变量_89CA0225, , , , , , , , , , , , , , , , , , ))
        变量_8BCA0225 ＝ 文本_取右边 (变量_8ACA0225, “IP:”, , )
        所在省市 ＝ “”
    .判断 (接口 ＝ 6)
        变量_89CA0225 ＝ “https://api.ip.sb/ip”
        变量_8ACA0225 ＝ 到文本 (网页_访问_对象 (变量_89CA0225, , , , , , , , , , , , , , , , , , ))
        变量_8BCA0225 ＝ 文本_取左边 (变量_8ACA0225, 字符 (10), , )
        所在省市 ＝ “”
    .判断 (接口 ＝ 7)
        变量_89CA0225 ＝ “https://ipinfo.io/json”
        变量_8ACA0225 ＝ 网页_访问S (变量_89CA0225, , , , , , , , , , , , , , , , , , , , )
        变量_8BCA0225 ＝ 文本_取出中间文本 (变量_8ACA0225, “ip” ＋ #引号 ＋ “: ” ＋ #引号, #引号, , )
        所在省市 ＝ “”
    .默认
        变量_89CA0225 ＝ “http://www.ip138.com”
        变量_88CA0225 ＝ 网页_访问_对象 (变量_89CA0225, , , , , “User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.87 Safari/537.36”, , , , , , , , , , , , , )
        变量_89CA0225 ＝ 到文本 (字节集_取中间 (变量_88CA0225, 到字节集 (“<iframe src=”) ＋ { 34 }, { 34 }, ))
        .如果真 (变量_89CA0225 ≈ “http” ＝ 假)
            变量_89CA0225 ＝ “http:” ＋ 变量_89CA0225
        .如果真结束
        变量_8ACA0225 ＝ 编码_Utf8到Ansi (网页_访问_对象 (变量_89CA0225, , , , , , , , , , , , , , , , , , ))
        变量_8BCA0225 ＝ 文本_取出中间文本 (变量_8ACA0225, “您的IP地址是：”, “</title>”, , )
        所在省市 ＝ 文本_取出中间文本 (变量_8ACA0225, “来自：”, 字符 (10) ＋ “</p>”, , )
    .判断结束
    返回 (变量_8BCA0225)

.子程序 网页_置Cookie, 逻辑型, 公开, 设置本地IE的cookie
    .参数 网址, 文本型
    .参数 Cookie名称, 文本型, 可空, 为空清除所有
    .参数 Cookie内容, 文本型, 可空, 为空清除
    .参数 有效期, 日期时间型, 可空, 为空不保存
    .局部变量 变量_40A50125, 文本型
    .局部变量 变量_41A50125, 文本型
    .局部变量 变量_42A50125, 文本型
    .局部变量 变量_43A50125, 整数型
    .局部变量 变量_44A50125, 文本型
    .局部变量 变量_D4F10125, 文本型

    变量_40A50125 ＝ 网页_取域名 (网址)
    变量_D4F10125 ＝ Cookie内容
    .如果 (Cookie名称 ≠ “”)
        .如果真 (Cookie内容 ＝ “”)
            变量_D4F10125 ＝ “delete”
            有效期 ＝ 指定时间 (1999, 1, 1, 1, 1, 1)
        .如果真结束
        .如果真 (有效期 ≠ 指定时间 (1899, 12, 30, 0, 0, 0))
            变量_41A50125 ＝ 时间_转为GMT格式 (有效期)
            变量_D4F10125 ＝ 变量_D4F10125 ＋ “; expires=” ＋ 变量_41A50125
        .如果真结束
        变量_D4F10125 ＝ 变量_D4F10125 ＋ “; path=/”
        InternetSetCookieA (“http://” ＋ 变量_40A50125, Cookie名称, 变量_D4F10125)
        变量_D4F10125 ＝ 变量_D4F10125 ＋ “; domain=.” ＋ 网页_取域名 (变量_40A50125, 真, )
        返回 (InternetSetCookieA (“http://” ＋ 变量_40A50125, Cookie名称, 变量_D4F10125))
    .否则
        变量_42A50125 ＝ 网页_取Cookie (“http://” ＋ 变量_40A50125)
        .如果真 (变量_42A50125 ≠ “”)
            变量_43A50125 ＝ 寻找文本 (变量_42A50125, “=”, 1, 真)
            .如果真 (变量_43A50125 ＞ 0)
                变量_44A50125 ＝ 取文本左边 (变量_42A50125, 变量_43A50125 － 1)
                网页_置Cookie (“http://” ＋ 变量_40A50125, 变量_44A50125)
                网页_置Cookie (“http://” ＋ 变量_40A50125)
            .如果真结束
            
        .如果真结束
        返回 (真)
    .如果结束
    

.子程序 网页_置Cookie1, , 公开
    .参数 网站域名, 文本型
    .参数 Cookie值, 文本型, , 整个Cookie值
    .参数 有效期, 日期时间型, 可空, 可空。默认为2088年8月8日8时
    .局部变量 变量_48A50125, 文本型, , "0"
    .局部变量 变量_49A50125, 整数型
    .局部变量 变量_4AA50125, 文本型
    .局部变量 变量_4BA50125, 文本型
    .局部变量 变量_9AD30225, 整数型

    .如果真 (是否为空 (有效期))
        有效期 ＝ [2088年8月8日8时]
    .如果真结束
    变量_48A50125 ＝ 分割文本 (Cookie值, “;”, )
    .计次循环首 (取数组成员数 (变量_48A50125), 变量_49A50125)
        变量_9AD30225 ＝ 寻找文本 (变量_48A50125 [变量_49A50125], “=”, , 假)
        .如果真 (变量_9AD30225 ＝ -1)
            到循环尾 ()
        .如果真结束
        变量_4AA50125 ＝ 删首尾空 (取文本左边 (变量_48A50125 [变量_49A50125], 变量_9AD30225 － 1))
        变量_4BA50125 ＝ 删首尾空 (取文本右边 (变量_48A50125 [变量_49A50125], 取文本长度 (变量_48A50125 [变量_49A50125]) － 变量_9AD30225))
        网页_置Cookie (网站域名, 变量_4AA50125, 变量_4BA50125, 有效期)
    .计次循环尾 ()

.子程序 网页_取Cookie, 文本型, 公开, 取出指定域名在本机的cookie
    .参数 域名, 文本型, , 只接受域名
    .参数 Cookie名称, 文本型, 可空, 为空返回全部Cookie
    .局部变量 变量_6EC10125, 文本型
    .局部变量 变量_6FC10125, 文本型
    .局部变量 变量_70C10125, 文本型

    变量_6EC10125 ＝ “http://” ＋ 域名
    连续赋值 (取空白文本 (3000), 变量_6FC10125, 变量_70C10125)
    InternetGetCookieA (变量_6EC10125, 字符 (0), 变量_6FC10125, 3000)
    InternetGetCookieExA (变量_6EC10125, 字符 (0), 变量_70C10125, 3000, 8192, 0)
    变量_6FC10125 ＝ 网页_Cookie合并更新 (变量_6FC10125, 变量_70C10125)
    .如果真 (Cookie名称 ≠ “”)
        变量_6FC10125 ＝ 网页_取单条Cookie (变量_6FC10125, Cookie名称)
    .如果真结束
    返回 (变量_6FC10125)
    

.子程序 网页_取Cookie2, 文本型, 公开, [Mr.Yang]
    .参数 域名, 文本型, , 欲取出cookie域名 例:<a href="http://baidu.com或baidu.com" target="_blank">http://baidu.com或baidu.com</a>
    .参数 Path, 文本型, 可空, 取出存放在path的cookie
    .参数 Cookie名称, 文本型, 可空, 为空返回全部Cookie
    .局部变量 变量_E39E0225, 文本型
    .局部变量 变量_E49E0225, 文本型
    .局部变量 变量_E59E0225, 文本型
    .局部变量 变量_E69E0225, 文本型

    .如果 (寻找文本 (域名, “://”, , 假) ＝ -1)
        变量_E39E0225 ＝ “http://” ＋ 域名
    .否则
        变量_E39E0225 ＝ 域名
    .如果结束
    
    .如果真 (取文本右边 (变量_E39E0225, 1) ＝ “/”)
        变量_E39E0225 ＝ 文本_删右边 (变量_E39E0225, 1)
    .如果真结束
    .如果真 (Path ≠ “”)
        变量_E49E0225 ＝ Path
        .如果真 (取文本左边 (变量_E49E0225, 1) ≠ “/”)
            变量_E49E0225 ＝ “/” ＋ 变量_E49E0225
        .如果真结束
        .如果真 (取文本右边 (变量_E49E0225, 1) ≠ “/”)
            变量_E49E0225 ＝ 变量_E49E0225 ＋ “/”
        .如果真结束
        变量_E39E0225 ＝ 变量_E39E0225 ＋ 变量_E49E0225
    .如果真结束
    连续赋值 (取空白文本 (3000), 变量_E59E0225, 变量_E69E0225)
    InternetGetCookieA (变量_E39E0225, 字符 (0), 变量_E59E0225, 3000)
    InternetGetCookieExA (变量_E39E0225, 字符 (0), 变量_E69E0225, 3000, 8192, 0)
    网页_Cookie合并更新 (变量_E59E0225, 变量_E69E0225)
    .如果真 (Cookie名称 ≠ “”)
        变量_E59E0225 ＝ 网页_取单条Cookie (变量_E59E0225, Cookie名称)
    .如果真结束
    返回 (变量_E59E0225)

.子程序 网页_取单条Cookie, 文本型, 公开, 从左往右获取
    .参数 Cookie, 文本型
    .参数 名称, 文本型
    .参数 不附带名称, 逻辑型, 可空
    .局部变量 变量_7EC10125, 文本型

    Cookie ＝ 删首尾空 (Cookie)
    .如果真 (取文本右边 (Cookie, 1) ≠ “;”)
        Cookie ＝ Cookie ＋ “; ”
    .如果真结束
    变量_7EC10125 ＝ 取单条Cookie (Cookie, 名称)
    .判断开始 (不附带名称 或 变量_7EC10125 ＝ “”)
        返回 (变量_7EC10125)
    .默认
        返回 (名称 ＋ “=” ＋ 变量_7EC10125)
    .判断结束
    

.子程序 取单条Cookie, 文本型
    .参数 变量_25ED0125, 文本型
    .参数 变量_26ED0125, 文本型
    .局部变量 变量_27ED0125, 文本型, , "0"
    .局部变量 变量_28ED0125, 整数型
    .局部变量 变量_29ED0125, 文本型

    变量_27ED0125 ＝ 分割文本 (变量_25ED0125, “;”, )
    .计次循环首 (取数组成员数 (变量_27ED0125), 变量_28ED0125)
        变量_29ED0125 ＝ 文本_取左边 (删首尾空 (变量_27ED0125 [变量_28ED0125]), “=”, , )
        .如果真 (到小写 (变量_29ED0125) ＝ 到小写 (变量_26ED0125))
            .如果真 (寻找文本 (删首尾空 (变量_27ED0125 [变量_28ED0125]), “:”, , 假) ≠ -1)
                返回 (文本_取出中间文本 (删首尾空 (变量_27ED0125 [变量_28ED0125]), “=”, “:”, , ))
            .如果真结束
            返回 (文本_取右边 (删首尾空 (变量_27ED0125 [变量_28ED0125]), “=”, -1, ))
        .如果真结束
        
    .计次循环尾 ()
    返回 (“”)

.子程序 网页_清除Cookie, , 公开, 清除本机IE里的cookie
    .参数 域名, 文本型, , 只接受域名
    .局部变量 变量_86C10125, 文本型
    .局部变量 变量_87C10125, 文本型
    .局部变量 变量_88C10125, 文本型, , "0"
    .局部变量 变量_89C10125, 整数型
    .局部变量 变量_8AC10125, 文本型
    .局部变量 变量_8BC10125, 文本型

    ClearInternetCacheW (编码_Ansi到Unicode (域名, ))
    变量_86C10125 ＝ “deleted; expires=Fri, 1-Jan-1999 1:1:1 GMT; path=/;”
    变量_87C10125 ＝ 变量_86C10125 ＋ “ domain=” ＋ 网页_取域名 (域名, 真)
    变量_8AC10125 ＝ 网页_取Cookie (域名)
    变量_88C10125 ＝ 分割文本 (变量_8AC10125, “;”, )
    .计次循环首 (取数组成员数 (变量_88C10125), 变量_89C10125)
        变量_8BC10125 ＝ 内部_Cookie取名 (变量_88C10125 [变量_89C10125])
        InternetSetCookieA (“http://” ＋ 域名, 变量_8BC10125, 变量_86C10125)
        InternetSetCookieA (“http://” ＋ 域名, 变量_8BC10125, 变量_87C10125)
    .计次循环尾 ()

.子程序 ClearInternetCacheW
    .参数 变量_B9F70225, 字节集
    .局部变量 变量_B4F70225, 整数型
    .局部变量 变量_B5F70225, 整数型
    .局部变量 变量_B6F70225, 整数型
    .局部变量 变量_B7F70225, 字节集
    .局部变量 变量_B8F70225, 字节集

    变量_B8F70225 ＝ 编码_Ansi到Unicode (“Cookie:”, )
    变量_B5F70225 ＝ DLL_FindFirstUrlCacheEntryW (取指针_字节集型 (变量_B8F70225), #NULL, 变量_B4F70225)
    变量_B6F70225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_B4F70225)
    变量_B5F70225 ＝ DLL_FindFirstUrlCacheEntryW (取指针_字节集型 (变量_B8F70225), 变量_B6F70225, 变量_B4F70225)
    .如果真 (变量_B5F70225 ≠ #NULL)
        .循环判断首 ()
            变量_B7F70225 ＝ 指针_到字节集W (指针_到整数 (变量_B6F70225 ＋ 4))
            .如果真 (寻找字节集 (变量_B7F70225, 删除Unicode结尾空白字节 (变量_B9F70225, ), ) ≠ -1)
                DLL_DeleteUrlCacheEntryW (指针_到整数 (变量_B6F70225 ＋ 4))
            .如果真结束
            
        .循环判断尾 (DLL_FindNextUrlCacheEntryW (变量_B5F70225, 变量_B6F70225, 变量_B4F70225))
        FindCloseUrlCache (变量_B5F70225)
    .如果真结束
    LocalFree (变量_B6F70225)

.子程序 网页_清除Cookie文件, 逻辑型, 公开, 【此命令由小磊提供】，删除本地IE缓存的cookie文件
    .参数 关键字, 文本型, 可空, 输入Cookie文件的关键字即可,空则清除全部
    .参数 Cookie路径, 文本型, 参考 可空, 传递Cookie路径
    .局部变量 变量_2EBD0125, 文本型
    .局部变量 变量_2FBD0125, 逻辑型

    Cookie路径 ＝ 取文本注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\Cookies”, )
    变量_2EBD0125 ＝ 寻找文件 (Cookie路径 ＋ “\*.txt”, )
    .判断循环首 (变量_2EBD0125 ≠ “”)
        .如果真 (寻找文本 (变量_2EBD0125, 关键字, 1, 假) ≠ -1 或 关键字 ＝ “”)
            .如果真 (删除文件 (Cookie路径 ＋ “\” ＋ 变量_2EBD0125))
                变量_2FBD0125 ＝ 真
            .如果真结束
            
        .如果真结束
        变量_2EBD0125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    返回 (变量_2FBD0125)

.子程序 网页_删除IE缓存文件, 逻辑型, 公开, 【此命令由小磊提供】，删除本地IE的缓存文件
    .参数 缓存文件路径, 文本型, 参考 可空, 传递缓存文件路径
    .局部变量 变量_23C30125, 文本型
    .局部变量 变量_24C30125, 逻辑型

    缓存文件路径 ＝ 取文本注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\Cache”, )
    变量_23C30125 ＝ 寻找文件 (缓存文件路径 ＋ “\*.*”, )
    .判断循环首 (变量_23C30125 ≠ “”)
        .如果真 (删除文件 (缓存文件路径 ＋ “\” ＋ 变量_23C30125))
            变量_24C30125 ＝ 真
        .如果真结束
        变量_23C30125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    返回 (变量_24C30125)

.子程序 网页_保存, , 公开, 保存网页
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 258)

.子程序 网页_打印, , 公开, 打印
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 260)

.子程序 网页_全选, , 公开, 全选
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 31)

.子程序 网页_打印预览, , 公开, 打印预览
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 93)

.子程序 网页_查找关键字
    .参数 变量_56500125, 整数型

    网页_发送命令 (变量_56500125, 0, 67)

.子程序 网页_保存html文档, , 公开, 保存html文档
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 71)

.子程序 网页_查看网页属性, , 公开, 查看网页属性
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 28)

.子程序 网页_设置网页字体, , 公开, 设置网页字体
    .参数 浏览器句柄, 整数型

    网页_发送命令 (浏览器句柄, 0, 90)

.子程序 网页_发送命令
    .参数 变量_29500125, 整数型
    .参数 变量_2A500125, 整数型
    .参数 变量_2B500125, 整数型
    .局部变量 变量_2C500125, 整数型
    .局部变量 变量_2D500125, 整数型

    窗口_查找网页句柄 (变量_29500125, 变量_2C500125, 变量_2D500125)
    .如果真 (变量_2C500125 ≠ 0 且 变量_2D500125 ≠ 0)
        .判断开始 (变量_2A500125 ＝ 1)
            发送消息整数 (变量_2D500125, 273, 变量_2B500125, 0)
        .默认
            发送消息整数 (变量_2C500125, 273, 变量_2B500125, 0)
        .判断结束
        
    .如果真结束
    

.子程序 窗口_查找网页句柄
    .参数 变量_2E500125, 整数型
    .参数 变量_2F500125, 整数型, 参考
    .参数 变量_30500125, 整数型, 参考
    .局部变量 变量_31500125, 整数型
    .局部变量 变量_32500125, 文本型

    变量_31500125 ＝ FindWindowExA (变量_2E500125, 0, 0, 0)
    .判断循环首 (变量_31500125 ≠ 0)
        变量_32500125 ＝ 窗口_取类名 (变量_31500125)
        .如果 (变量_32500125 ＝ “Shell DocObject View”)
            变量_2F500125 ＝ 变量_31500125
            跳出循环 ()
        .否则
            窗口_查找网页句柄 (变量_31500125, 变量_2F500125, 变量_30500125)
        .如果结束
        变量_31500125 ＝ FindWindowExA (变量_2E500125, 变量_31500125, 0, 0)
    .判断循环尾 ()
    .如果真 (变量_2F500125 ≠ 0)
        变量_32500125 ＝ 窗口_取类名 (变量_31500125)
        .如果真 (变量_32500125 ＝ “Shell DocObject View”)
            变量_30500125 ＝ FindWindowExA (变量_2F500125, 0, 0, 0)
        .如果真结束
        
    .如果真结束
    

.子程序 网页_取网址引用, 文本型, 公开, 返回指定网址的引用信息
    .参数 网址, 文本型
    .局部变量 变量_4BE20125, 字节集
    .局部变量 变量_4CE20125, URL_COMPONENTS
    .局部变量 变量_4DE20125, 逻辑型
    .局部变量 变量_4EE20125, 文本型
    .局部变量 变量_5EE20125, 文本型
    .局部变量 变量_5FE20125, 文本型

    变量_4CE20125.dwStructSize ＝ 60
    变量_4CE20125.dwSchemeLength ＝ -1
    变量_4CE20125.dwHostNameLength ＝ -1
    变量_4CE20125.dwUrlPathLength ＝ -1
    变量_4CE20125.dwExtraInfoLength ＝ -1
    
    变量_5FE20125 ＝ 文本_取左边 (网址, “//”)
    .如果真 (变量_5FE20125 ＝ “mms:”)
        网址 ＝ 子文本替换 (网址, 变量_5FE20125, “http:”, , , 真)
    .如果真结束
    变量_4BE20125 ＝ 编码_Ansi到Unicode (网址)
    变量_4DE20125 ＝ WinHttpCrackUrl (变量_4BE20125, 取字节集长度 (变量_4BE20125), 0, 变量_4CE20125)
    .如果真 (变量_4DE20125)
        变量_4EE20125 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_4CE20125.lpszScheme, 变量_4CE20125.dwSchemeLength × 2))
        变量_5EE20125 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_4CE20125.lpszHostName, 变量_4CE20125.dwHostNameLength × 2))
        .如果真 (变量_5FE20125 ＝ “mms:”)
            返回 (变量_5FE20125 ＋ “//” ＋ 变量_5EE20125)
        .如果真结束
        返回 (变量_4EE20125 ＋ “://” ＋ 变量_5EE20125)
    .如果真结束
    返回 (“”)

.子程序 网页_取页面地址, 文本型, 公开, 返回指定网址的页面地址
    .参数 网址, 文本型
    .局部变量 变量_DF2A0125, 文本型
    .局部变量 变量_E02A0125, 整数型
    .局部变量 变量_E12A0125, 文本型

    变量_E12A0125 ＝ 网页_取域名 (网址)
    变量_E02A0125 ＝ 寻找文本 (网址, “/”, 寻找文本 (网址, 变量_E12A0125, 1, 真), 真)
    .如果 (变量_E02A0125 ＞ 0)
        变量_DF2A0125 ＝ 取文本右边 (网址, 取文本长度 (网址) － 变量_E02A0125 ＋ 1)
    .否则
        变量_DF2A0125 ＝ “/”
    .如果结束
    返回 (变量_DF2A0125)

.子程序 网页_取网址文件名, 文本型, 公开, 取一个网站地址中的文件名
    .参数 网址, 文本型
    .局部变量 变量_E3070125, 文本型, , "0"
    .局部变量 变量_E4070125, 整数型
    .局部变量 变量_E5070125, 文本型

    变量_E3070125 ＝ 分割文本 (网址, “/”, )
    变量_E4070125 ＝ 取数组成员数 (变量_E3070125)
    .如果真 (变量_E4070125 ＝ 0)
        返回 (“”)
    .如果真结束
    返回 (变量_E3070125 [变量_E4070125])

.子程序 网页_取网络文件名, 文本型, 公开, 取特殊网络文件名，如{35419830/13139680144000128.mp3?xcode=91d07544}，取出文件名为“我可以抱你吗.mp3”
    .参数 网址, 文本型
    .局部变量 变量_AFE30125, 文本型
    .局部变量 变量_B0E30125, 整数型
    .局部变量 变量_B1E30125, 整数型
    .局部变量 变量_B2E30125, 整数型
    .局部变量 变量_B3E30125, 逻辑型
    .局部变量 变量_B4E30125, 文本型

    变量_B0E30125 ＝ InternetOpenA (“”, 0, 字符 (0), 字符 (0), 0)
    .如果真 (变量_B0E30125 ≠ 0)
        变量_B1E30125 ＝ InternetOpenUrlA (变量_B0E30125, 网址, 字符 (0), 0, 2147483648, 0)
        .如果真 (变量_B1E30125 ≠ 0)
            变量_B3E30125 ＝ HttpQueryInfoA (变量_B1E30125, 22, “”, 变量_B2E30125, 0)
            变量_B4E30125 ＝ 取空白文本 (变量_B2E30125)
            变量_B3E30125 ＝ HttpQueryInfoA (变量_B1E30125, 22, 变量_B4E30125, 变量_B2E30125, 0)
            .如果真 (变量_B3E30125)
                变量_AFE30125 ＝ 文本_取出中间文本 (变量_B4E30125, “filename=” ＋ #引号, #引号)
            .如果真结束
            InternetCloseHandle (变量_B1E30125)
        .如果真结束
        InternetCloseHandle (变量_B0E30125)
    .如果真结束
    返回 (变量_AFE30125)

.子程序 网页_是否为网页, 逻辑型, 公开, 判断输入的地址是否为URL地址。
    .参数 网页地址, 文本型

    返回 (PathIsURL (网页地址))

.子程序 网页_还原网页颜色, 文本型, 公开, 转换颜色值到网页颜色的代码
    .参数 颜色值, 整数型
    .局部变量 变量_EF070125, 文本型

    变量_EF070125 ＝ 取十六进制文本 (颜色值)
    变量_EF070125 ＝ 取文本中间 (变量_EF070125, 5, 2) ＋ 取文本中间 (变量_EF070125, 3, 2) ＋ 取文本左边 (变量_EF070125, 2)
    .如果 (取文本长度 (变量_EF070125) ＜ 6)
        变量_EF070125 ＝ 取文本左边 (“#” ＋ 变量_EF070125 ＋ “000000”, 7)
    .否则
        变量_EF070125 ＝ “#” ＋ 变量_EF070125
    .如果结束
    返回 (变量_EF070125)

.子程序 网页_转换为HTML色, 文本型, 公开, 将RGB色转换为HTML色
    .参数 RGB颜色值, 整数型
    .局部变量 变量_9A880125, 文本型
    .局部变量 变量_9B880125, 字节集
    .局部变量 变量_9C880125, 文本型

    变量_9B880125 ＝ 到字节集 (RGB颜色值)
    
    变量_9C880125 ＝ 取十六进制文本 (变量_9B880125 [1])
    变量_9A880125 ＝ 变量_9A880125 ＋ 选择 (取文本长度 (变量_9C880125) ＝ 1, 变量_9C880125 ＋ “0”, 变量_9C880125)
    
    变量_9C880125 ＝ 取十六进制文本 (变量_9B880125 [3])
    变量_9A880125 ＝ 变量_9A880125 ＋ 选择 (取文本长度 (变量_9C880125) ＝ 1, 变量_9C880125 ＋ “0”, 变量_9C880125)
    
    变量_9C880125 ＝ 取十六进制文本 (变量_9B880125 [2])
    变量_9A880125 ＝ 变量_9A880125 ＋ 选择 (取文本长度 (变量_9C880125) ＝ 1, 变量_9C880125 ＋ “0”, 变量_9C880125)
    返回 (变量_9A880125)

.子程序 网页_取十进制颜色值, 整数型, 公开, 把十六进制的网页颜色值转换成十进制的颜色值    
    .参数 十六进制的颜色值, 文本型, , 234A97
    .局部变量 变量_64B70125, 字节集
    .局部变量 变量_73B70125, 文本型

    变量_73B70125 ＝ 子文本替换 (十六进制的颜色值, “#”, “”, , , 真)
    变量_64B70125 ＝ 取空白字节集 (4)
    变量_64B70125 [1] ＝ 进制_十六到十 (取文本中间 (变量_73B70125, 1, 2))
    变量_64B70125 [2] ＝ 进制_十六到十 (取文本中间 (变量_73B70125, 3, 2))
    变量_64B70125 [3] ＝ 进制_十六到十 (取文本中间 (变量_73B70125, 5, 2))
    返回 (取字节集数据 (变量_64B70125, #整数型, ))

.子程序 网页_打开指定网址, , 公开, 使用系统默认的浏览器打开一个网址
    .参数 网页地址, 文本型, , 要打开的网页地址

    ShellExecuteA (0, “open”, 网页地址, “”, “”, 1)

.子程序 网页_创建快捷方式, 逻辑型, 公开, 创建网页快捷方式
    .参数 快捷方式文件名, 文本型, , 扩展名为.url全路径
    .参数 网页地址, 文本型
    .参数 ico图标, 文本型, 可空
    .参数 快捷键, 文本型, 可空, 如"CTRL+SHIFT+F"
    .局部变量 变量_75E30125, 对象
    .局部变量 变量_76E30125, 对象

    CoInitialize (0)
    .如果真 (变量_75E30125.创建 (“{F935DC22-1CF0-11d0-ADB9-00C04FD58A0B}”, ))
        快捷方式文件名 ＝ 选择 (文件_取扩展名 (快捷方式文件名) ≠ “.url”, 快捷方式文件名 ＋ “.url”, 快捷方式文件名)
        变量_76E30125 ＝ 变量_75E30125.对象型方法 (“CreateShortcut”, 快捷方式文件名)
        变量_76E30125.写属性 (“TargetPath”, 网页地址)
        变量_76E30125.写属性 (“WindowStyle”, 2)
        变量_76E30125.写属性 (“IconLocation”, ico图标)
        写配置项 (快捷方式文件名, “InternetShortcut”, “IconFile”, ico图标)
        写配置项 (快捷方式文件名, “InternetShortcut”, “IconIndex”, “0”)
        变量_76E30125.写属性 (“Hotkey”, 快捷键)
        变量_76E30125.数值方法 (“Save”, )
        变量_75E30125.清除 ()
    .如果真结束
    CoUninitialize ()
    返回 (文件_是否存在 (快捷方式文件名))

.子程序 网页_取快捷方式地址, 文本型, 公开, 取网页快捷方式的地址；
    .参数 文件路径, 文本型

    返回 (读配置项 (文件路径, “InternetShortcut”, “URL”, ))

.子程序 网页_网络文件是否存在, 逻辑型, 公开, 判断网络上的文件是否存在，存在返回真，否则返回假；
    .参数 网络文件名, 文本型
    .局部变量 变量_88180125, 对象
    .局部变量 变量_7BD70225, 逻辑型

    CoInitialize (0)
    变量_88180125.创建 (“msxml2.XMLHTTP”, )
    变量_88180125.方法 (“open”, “HEAD”, 网络文件名, 假)
    变量_88180125.方法 (“send”, )
    变量_7BD70225 ＝ 变量_88180125.读数值属性 (“Status”, ) ＝ 200
    变量_88180125.清除 ()
    CoUninitialize ()
    返回 (变量_7BD70225)

.子程序 网页_开始屏蔽信息框, 逻辑型, 公开, 屏蔽掉电脑上把有页页信息框，成功开始屏蔽返回真，失败返回假；
    .如果真 (类变量_D8500115 ＝ 0)
        类变量_D8500115 ＝ 线程_启动 (&内部_屏蔽网页信息框)
        返回 (真)
    .如果真结束
    .如果真 (类变量_D8500115 ≠ 0)
        输出调试文本 (“已经开始了屏蔽网页信息框，请不要重复使用！”)
    .如果真结束
    返回 (假)

.子程序 网页_停止屏蔽信息框, , 公开, 停止屏蔽掉电脑上把有页页信息框
    线程_销毁 (类变量_D8500115)
    线程_关闭句柄 (类变量_D8500115)
    类变量_D8500115 ＝ 0

.子程序 内部_屏蔽网页信息框, 整数型
    .参数 变量_BDFA0125, 整数型
    .局部变量 变量_DC500125, 整数型
    .局部变量 变量_DD500125, 文本型
    .局部变量 变量_DE500125, 整数型
    .局部变量 变量_ADFA0125, 整数型, , "0"
    .局部变量 变量_B0FA0125, 整数型

    变量_DE500125 ＝ 1
    .判断循环首 (变量_DE500125 ＝ 1)
        .计次循环首 (窗口_枚举所有子窗口 (, 变量_ADFA0125, “#32770”), 变量_B0FA0125)
            变量_DD500125 ＝ 窗口_取标题 (变量_ADFA0125 [变量_B0FA0125])
            .如果真 (变量_DD500125 ＝ “来自网页的消息”)
                发送消息整数 (变量_ADFA0125 [变量_B0FA0125], 16, 0, 0)
            .如果真结束
            .如果真 (变量_DD500125 ＝ “Microsoft Internet Explorer”)
                发送消息整数 (变量_ADFA0125 [变量_B0FA0125], 16, 0, 0)
            .如果真结束
            
        .计次循环尾 ()
        延时 (500)
    .判断循环尾 ()
    返回 (0)

.子程序 网页_自动点击网页信息框, , 公开, 自动点击网页上弹出的消息框
    .参数 窗口句柄, 整数型, , 程序本身的窗口句柄,直接用 取窗口句柄() 命令即可
    .参数 网页信息框的标题, 文本型, 可空, 可空，网页信息框的标题,默认为【Microsoft Internet Explorer】
    .参数 按钮的标题, 文本型, 可空, 可空，消息框上要点击的按钮标题,默认为【确定】
    .参数 停止, 逻辑型, 可空, 可空，如果将此参数设置为真，将停止自动点击信息框
    .参数 监控间隔, 整数型, 可空, 可空，默认为300毫秒。

    .如果真 (停止)
        时钟_销毁 (窗口句柄, 100)
        返回 ()
    .如果真结束
    
    .如果真 (是否为空 (监控间隔) 或 监控间隔 ＜ 50)
        监控间隔 ＝ 300
    .如果真结束
    .如果真 (是否为空 (网页信息框的标题))
        网页信息框的标题 ＝ “Microsoft Internet Explorer”
    .如果真结束
    .如果真 (是否为空 (按钮的标题))
        按钮的标题 ＝ “确定”
    .如果真结束
    类变量_10510115 ＝ 网页信息框的标题 ＋ “|” ＋ 按钮的标题
    时钟_创建 (窗口句柄, 100, 监控间隔, &开始自动点击网页信息框)

.子程序 开始自动点击网页信息框
    .局部变量 变量_5AB90125, 整数型
    .局部变量 变量_5BB90125, 整数型

    变量_5AB90125 ＝ 窗口_取句柄 (, , “#32770”, 文本_取左边 (类变量_10510115, “|”))
    变量_5BB90125 ＝ 窗口_取句柄 (变量_5AB90125, , “Button”, 文本_取右边 (类变量_10510115, “|”))
    .如果真 (变量_5BB90125 ＞ 0)
        鼠标_消息 (变量_5BB90125, 5, 5)
    .如果真结束
    

.子程序 网页_自动点击网页信息框_带返回值, 逻辑型, 公开, 成功返回真，失败返回假。
    .参数 网页信息框的标题, 文本型, 可空, 网页信息框的标题,默认为【Microsoft Internet Explorer】
    .参数 按钮的标题, 文本型, 可空, 消息框上要点击的按钮标题,默认为【确定】
    .参数 超时返回, 整数型, 可空, 可空，单位为毫秒，默认为5000毫秒。
    .参数 监控间隔, 整数型, 可空, 可空，默认为300毫秒。
    .局部变量 变量_3BB90125, 整数型
    .局部变量 变量_3CB90125, 整数型
    .局部变量 变量_3DB90125, 整数型
    .局部变量 变量_3EB90125, 整数型
    .局部变量 变量_3FB90125, 整数型
    .局部变量 变量_40B90125, 整数型

    .如果真 (是否为空 (网页信息框的标题))
        网页信息框的标题 ＝ “Microsoft Internet Explorer”
    .如果真结束
    .如果真 (是否为空 (按钮的标题))
        按钮的标题 ＝ “确定”
    .如果真结束
    .如果真 (是否为空 (超时返回) 或 超时返回 ＜ 1000)
        超时返回 ＝ 5000
    .如果真结束
    .如果真 (是否为空 (监控间隔) 或 监控间隔 ＜ 50)
        监控间隔 ＝ 300
    .如果真结束
    
    类变量_10510115 ＝ 网页信息框的标题 ＋ “|” ＋ 按钮的标题
    变量_3EB90125 ＝ 线程_启动 (&开始自动点击网页信息框_带返回值, 监控间隔)
    变量_40B90125 ＝ 取启动时间 ()
    .循环判断首 ()
        变量_3FB90125 ＝ MsgWaitForMultipleObjects (1, 变量_3EB90125, 假, 超时返回, 1215)
        .如果真 (取启动时间 () － 变量_40B90125 ≥ 超时返回)
            变量_3FB90125 ＝ 258
        .如果真结束
        程序_延时 (300)
    .循环判断尾 (变量_3FB90125 ≠ 0 且 变量_3FB90125 ≠ 258)
    .如果真 (变量_3FB90125 ＝ 258)
        线程_销毁 (变量_3EB90125)
        CloseHandle (变量_3EB90125)
    .如果真结束
    返回 (变量_3FB90125 ≠ 258)

.子程序 开始自动点击网页信息框_带返回值
    .参数 变量_4EB90125, 整数型
    .局部变量 变量_4FB90125, 整数型
    .局部变量 变量_50B90125, 整数型

    .判断循环首 (真)
        变量_4FB90125 ＝ 窗口_取句柄 (, , “#32770”, 文本_取左边 (类变量_10510115, “|”))
        变量_50B90125 ＝ 窗口_取句柄 (变量_4FB90125, , “Button”, 文本_取右边 (类变量_10510115, “|”))
        .如果真 (变量_50B90125 ＞ 0)
            鼠标_消息 (变量_50B90125, 5, 5)
            鼠标_消息 (变量_50B90125, 5, 5)
            返回 ()
        .如果真结束
        程序_延时 (变量_4EB90125)
    .判断循环尾 ()

.子程序 立即刷新注册表
    发送消息整数 (GetDesktopWindow (), 26, 0, 0)

.子程序 网页_屏蔽网页复制提示, , 公开, 目前只测试了IE8
    .参数 是否屏蔽, 逻辑型, 可空, 默认为真，允许网页复制，假为不允许。
    .局部变量 变量_34B80125, 注册表操作

    .如果 (是否为空 (是否屏蔽) 或 是否屏蔽 ＝ 真)
        变量_34B80125.写DWORD值 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3”, “1407”, 0)
    .否则
        变量_34B80125.写DWORD值 (“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3”, “1407”, 1)
    .如果结束
    立即刷新注册表 ()

.子程序 网页_禁止允许一键操作, , 公开, 一键操作所有设置（写注册项，影响全局，不仅仅是软件的自带浏览器）
    .参数 禁止允许gif图片, 逻辑型, 可空, 禁止或允许 播放GIF动画图片，可以加快网页的显示速度。默认为假，允许。
    .参数 禁止允许显示图片, 逻辑型, 可空, 禁止或允许 显示网页中的图片，可以加快网页的显示速度。默认为假，允许。
    .参数 禁止允许背景声音, 逻辑型, 可空, 禁止或允许 播放网页背景声音，如：mid、mp3等等。默认为假，允许。
    .参数 禁止允许点击声音, 逻辑型, 可空, 禁止或允许 在点击网页链接或网页跳转时,会有一个点击的声音,用此命令可以禁止或恢复它。默认为假，允许。
    .参数 禁止允许播放网页视频, 逻辑型, 可空, 禁止或允许 播放网页中的视频，可以加快网页的显示速度。默认为假，允许。

    网页_禁止允许gif图片 (禁止允许gif图片)
    网页_禁止允许显示图片 (禁止允许显示图片)
    网页_禁止允许背景声音 (禁止允许背景声音)
    网页_禁止允许点击声音 (禁止允许点击声音)
    网页_禁止允许播放网页视频 (禁止允许播放网页视频)

.子程序 网页_禁止允许gif图片, 逻辑型, 公开, 禁止或允许 播放GIF动画图片，可以加快网页的显示速度。默认为假，允许。（写注册项，影响全局，不仅仅是软件的自带浏览器）
    .参数 禁止或允许, 逻辑型, 可空, 可空：默认为假 真=禁止 假=允许
    .局部变量 变量_63870125, 文本型

    变量_63870125 ＝ 选择 (禁止或允许, “no”, “yes”)
    禁止或允许 ＝ 写注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\Play_Animations”, 变量_63870125)
    立即刷新注册表 ()
    返回 (禁止或允许)

.子程序 网页_禁止允许背景声音, 逻辑型, 公开, 禁止或允许 播放网页背景声音，如：mid、mp3等等。默认为假，允许。（写注册项，影响全局，不仅仅是软件的自带浏览器）
    .参数 禁止或允许, 逻辑型, 可空, 可空：默认为假 真=禁止 假=允许
    .局部变量 变量_65870125, 文本型

    变量_65870125 ＝ 选择 (禁止或允许, “no”, “yes”)
    禁止或允许 ＝ 写注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\Play_Background_Sounds”, 变量_65870125)
    立即刷新注册表 ()
    返回 (禁止或允许)

.子程序 网页_禁止允许显示图片, 逻辑型, 公开, 禁止或允许 显示网页中的图片，可以加快网页的显示速度。默认为假，允许。（写注册项，影响全局，不仅仅是软件的自带浏览器）
    .参数 禁止或允许, 逻辑型, 可空, 可空：默认为假 真=禁止 假=允许
    .局部变量 变量_67870125, 文本型

    变量_67870125 ＝ 选择 (禁止或允许, “no”, “yes”)
    禁止或允许 ＝ 写注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\Display Inline Images”, 变量_67870125)
    立即刷新注册表 ()
    返回 (禁止或允许)

.子程序 网页_禁止允许点击声音, 逻辑型, 公开, 禁止或允许 在点击网页链接或网页跳转时,会有一个点击的声音,用此命令可以禁止或恢复它。默认为假，允许。（写注册项，影响全局，不仅仅是软件的自带浏览器）
    .参数 禁止或允许, 逻辑型, 可空, 可空：默认为假 真=禁止 假=允许
    .局部变量 变量_69870125, 文本型
    .局部变量 变量_6A870125, 文本型
    .局部变量 变量_6B870125, 注册表操作

    变量_6A870125 ＝ “HKEY_CURRENT_USER\AppEvents\Schemes\Apps\Explorer\Navigating\.Current”
    变量_69870125 ＝ 到文本 (变量_6B870125.取字节集 (变量_6A870125, “”, 到数值 (文本_取右边 (变量_6B870125.取键名类型 (变量_6A870125), “：”))))
    .如果真 (删首尾空 (变量_69870125) ＝ “”)
        返回 (假)
    .如果真结束
    .判断开始 (禁止或允许)
        .如果真 (取文本右边 (变量_69870125, 1) ＝ “1”)
            返回 (真)
        .如果真结束
        返回 (变量_6B870125.写字节集 (变量_6A870125, “”, 到字节集 (变量_69870125 ＋ “1”), 到数值 (文本_取右边 (变量_6B870125.取键名类型 (变量_6A870125), “：”))))
    .判断 (禁止或允许 ＝ 假)
        .如果真 (取文本右边 (变量_69870125, 1) ≠ “1”)
            返回 (真)
        .如果真结束
        变量_69870125 ＝ 取文本左边 (变量_69870125, 取文本长度 (变量_69870125) － 1)
        返回 (变量_6B870125.写字节集 (变量_6A870125, “”, 到字节集 (变量_69870125), 到数值 (文本_取右边 (变量_6B870125.取键名类型 (变量_6A870125), “：”))))
    .默认
        
    .判断结束
    返回 (假)

.子程序 网页_禁止允许播放网页视频, 逻辑型
    .参数 变量_6C870125, 逻辑型, 可空
    .局部变量 变量_6D870125, 文本型

    变量_6D870125 ＝ 选择 (变量_6C870125, “no”, “yes”)
    变量_6C870125 ＝ 写注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\Display Inline Videos”, 变量_6D870125)
    立即刷新注册表 ()
    返回 (变量_6C870125)

.子程序 网页_取编码, 文本型, 公开, 用于取出指定网页地址的编码
    .参数 网页地址, 文本型
    .局部变量 变量_40ED0125, 文本型
    .局部变量 变量_44ED0125, 正则表达式类
    .局部变量 变量_50ED0125, 文本型

    变量_40ED0125 ＝ 到文本 (网页_访问 (网页地址))
    .如果真 (取文本长度 (变量_40ED0125) ＞ 0)
        .如果真 (变量_44ED0125.创建 (“<meta.+?charset=[^\w]?([-\w]+)”, 取文本左边 (变量_40ED0125, 1024)))
            变量_50ED0125 ＝ 变量_44ED0125.取子匹配文本 (1, 1)
        .如果真结束
        返回 (变量_50ED0125)
    .如果真结束
    返回 (“”)

.子程序 网页_取网络文件尺寸, 长整数型, 公开
    .参数 欲取网络文件地址, 文本型
    .局部变量 变量_D0E30125, 整数型
    .局部变量 变量_D1E30125, 整数型
    .局部变量 变量_D2E30125, 文本型
    .局部变量 变量_D3E30125, 整数型

    变量_D0E30125 ＝ InternetOpenA (“”, 0, 字符 (0), 字符 (0), 0)
    .如果真 (变量_D0E30125 ≠ 0)
        变量_D1E30125 ＝ InternetOpenUrlA (变量_D0E30125, 欲取网络文件地址, 字符 (0), 0, 2147483648, 0)
        .如果真 (变量_D1E30125 ≠ 0)
            HttpQueryInfoA (变量_D1E30125, 5, “”, 变量_D3E30125, 0)
            变量_D2E30125 ＝ 取空白文本 (变量_D3E30125)
            HttpQueryInfoA (变量_D1E30125, 5, 变量_D2E30125, 变量_D3E30125, 0)
            InternetCloseHandle (变量_D1E30125)
        .如果真结束
        InternetCloseHandle (变量_D0E30125)
    .如果真结束
    返回 (到长整数 (变量_D2E30125))

.子程序 网络_取网络文件大小_对象版, 长整数型, 公开
    .参数 url, 文本型
    .参数 代理IP, 文本型, 可空
    .局部变量 变量_2CCA0225, 对象
    .局部变量 变量_2DCA0225, 变体型
    .局部变量 变量_75D70225, 长整数型

    
    CoInitialize (0)
    .如果 (变量_2CCA0225.创建 (“WinHttp.WinHttpRequest.5.1”, ))
        变量_2CCA0225.方法 (“SetTimeouts”, 5000, 5000, 10000, 5000)
        变量_2CCA0225.方法 (“open”, “HEAD”, url, 假)
        变量_2CCA0225.方法 (“setRequestHeader”, “User-Agent”, “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)”)
        变量_2CCA0225.方法 (“setRequestHeader”, “Accept-Language”, “zh-cn”)
        变量_2CCA0225.方法 (“setRequestHeader”, “Connection”, “Keep-Alive”)
        .如果真 (是否为空 (代理IP) ＝ 假)
            变量_2CCA0225.方法 (“SetProxy”, 代理IP)
        .如果真结束
        变量_2CCA0225.方法 (“send”, )
        变量_2DCA0225 ＝ 变量_2CCA0225.读属性 (“status”, )
        .如果 (到整数 (变量_2DCA0225.取数值 ()) ＝ 200)
            变量_2DCA0225 ＝ 变量_2CCA0225.读属性 (“GetResponseHeader”, “Content-Length”)
            变量_75D70225 ＝ 到长整数 (变量_2DCA0225.取数值 ())
            CoUninitialize ()
            返回 (变量_75D70225)
        .否则
            CoUninitialize ()
            返回 (-1)
        .如果结束
        
    .否则
        CoUninitialize ()
        返回 (-2)
    .如果结束
    

.子程序 网址_取所有参数, 整数型, 公开, 取出指定网址中所有的键名和键值，返回取到的数量。
    .参数 参_网址, 文本型
    .参数 参_名称, 文本型, 参考 可空, 返回名称；如：http://www.baidu.com/nihao?id=123456&name=hello，其中nihao就是名称
    .参数 参_键名数组, 文本型, 参考 可空 数组
    .参数 参_键值数组, 文本型, 参考 可空 数组
    .局部变量 变量_59D70225, 文本型
    .局部变量 变量_5AD70225, 整数型
    .局部变量 变量_5BD70225, 文本型
    .局部变量 变量_5CD70225, 整数型
    .局部变量 变量_5DD70225, 整数型
    .局部变量 变量_5ED70225, 整数型
    .局部变量 变量_5FD70225, 文本型
    .局部变量 变量_60D70225, 整数型
    .局部变量 变量_61D70225, 文本型

    
    
    变量_59D70225 ＝ 参_网址
    
    变量_5AD70225 ＝ 寻找文本 (变量_59D70225, “?”, , 假)
    
    .判断开始 (变量_5AD70225 ＝ -1)
        变量_5AD70225 ＝ 倒找文本 (变量_59D70225, “/”, , 假)
    .默认
        变量_5AD70225 ＝ 倒找文本 (变量_59D70225, “/”, 变量_5AD70225, 假)
    .判断结束
    
    变量_5BD70225 ＝ 取文本右边 (变量_59D70225, 取文本长度 (变量_59D70225) － 变量_5AD70225)
    
    变量_5CD70225 ＝ 寻找文本 (变量_5BD70225, “?”, , 假)
    .判断开始 (变量_5CD70225 ≠ -1)
        参_名称 ＝ 取文本左边 (变量_5BD70225, 变量_5CD70225 － 1)
    .默认
        参_名称 ＝ “”
    .判断结束
    
    
    变量_5BD70225 ＝ 子文本替换 (变量_5BD70225, “?”, “&”, , 1, 真)
    清除数组 (参_键名数组)
    清除数组 (参_键值数组)
    .判断循环首 (真)
        
        
        变量_5CD70225 ＝ 寻找文本 (变量_5BD70225, “&”, 变量_5DD70225, 假)
        
        .如果真 (变量_5CD70225 ＝ -1)
            跳出循环 ()
        .如果真结束
        
        变量_5ED70225 ＝ 寻找文本 (变量_5BD70225, “=”, 变量_5CD70225, 假)
        .如果真 (变量_5ED70225 ＝ -1)
            跳出循环 ()
        .如果真结束
        
        
        变量_5FD70225 ＝ 取文本中间 (变量_5BD70225, 变量_5CD70225 ＋ 1, 变量_5ED70225 － 变量_5CD70225 － 1)
        加入成员 (参_键名数组, 变量_5FD70225)
        
        
        变量_60D70225 ＝ 寻找文本 (变量_5BD70225, “&”, 变量_5ED70225, 假)
        .判断开始 (变量_60D70225 ＝ -1)
            变量_61D70225 ＝ 取文本右边 (变量_5BD70225, 取文本长度 (变量_5BD70225) － 变量_5ED70225)
        .默认
            变量_61D70225 ＝ 取文本中间 (变量_5BD70225, 变量_5ED70225 ＋ 1, 变量_60D70225 － 变量_5ED70225 － 1)
        .判断结束
        加入成员 (参_键值数组, 变量_61D70225)
        
        
        变量_5DD70225 ＝ 变量_5ED70225
        
    .判断循环尾 ()
    返回 (取数组成员数 (参_键名数组))

.子程序 网页_参数Ascii排序, 文本型, 公开, 对传入的请求参数按参数名的字典序（ASCII码)排序
    .参数 请求参数, 文本型, , url键值对格式(即key1=value1&key2=value2)
    .参数 排序方式, 整数型, 可空, 0.升序排序 1.降序排序  留空默认 0.升序
    .局部变量 变量_38D80225, 文本型, , "0"
    .局部变量 变量_39D80225, 文本型
    .局部变量 变量_3AD80225, 整数型
    .局部变量 变量_3BD80225, 整数型

    
    .如果真 (排序方式 ＜ 0 或 排序方式 ＞ 1)
        排序方式 ＝ 0
    .如果真结束
    变量_38D80225 ＝ 分割文本 (请求参数, “&”, )
    数组_排序 (变量_38D80225, 排序方式, 真)
    变量_3AD80225 ＝ 取数组成员数 (变量_38D80225)
    .计次循环首 (变量_3AD80225, 变量_3BD80225)
        变量_39D80225 ＝ 变量_39D80225 ＋ 变量_38D80225 [变量_3BD80225]
        .如果真 (变量_3BD80225 ＜ 变量_3AD80225)
            变量_39D80225 ＝ 变量_39D80225 ＋ “&”
        .如果真结束
        
    .计次循环尾 ()
    返回 (变量_39D80225)

.子程序 网址_取指定参数值, 文本型, 公开, 成功返回键值，失败返回空。
    .参数 网址, 文本型
    .参数 参数名, 文本型
    .局部变量 变量_38DB0225, 整数型
    .局部变量 变量_39DB0225, 文本型, , "0"
    .局部变量 变量_3ADB0225, 文本型, , "0"
    .局部变量 变量_3BDB0225, 整数型

    变量_38DB0225 ＝ 网址_取所有参数 (网址, , 变量_39DB0225, 变量_3ADB0225)
    .计次循环首 (变量_38DB0225, 变量_3BDB0225)
        .如果真 (变量_39DB0225 [变量_3BDB0225] ＝ 参数名)
            返回 (变量_3ADB0225 [变量_3BDB0225])
        .如果真结束
        
    .计次循环尾 ()
    返回 (“”)

.子程序 网页_掩码计算, 整数型, 公开, 例：起始IP：121.224.0.0   结束IP：121.239.255.255   返回12
    .参数 起始IP, 文本型
    .参数 结束IP, 文本型
    .局部变量 变量_FEE30225, 文本型, , "0"
    .局部变量 变量_FFE30225, 文本型, , "0"
    .局部变量 变量_00E40225, 文本型
    .局部变量 变量_01E40225, 文本型
    .局部变量 变量_02E40225, 整数型
    .局部变量 变量_03E40225, 文本型, , "0"
    .局部变量 变量_04E40225, 文本型, , "0"

    
    变量_FEE30225 ＝ 分割文本 (起始IP, “.”, )
    变量_FFE30225 ＝ 分割文本 (结束IP, “.”, )
    .计次循环首 (4, 变量_02E40225)
        变量_00E40225 ＝ 变量_00E40225 ＋ 取文本右边 (进制_十到二 (到整数 (变量_FEE30225 [变量_02E40225])), 8)
        变量_01E40225 ＝ 变量_01E40225 ＋ 取文本右边 (进制_十到二 (到整数 (变量_FFE30225 [变量_02E40225])), 8)
    .计次循环尾 ()
    .计次循环首 (32, 变量_02E40225)
        .如果真 (取文本中间 (变量_00E40225, 变量_02E40225, 1) ≠ 取文本中间 (变量_01E40225, 变量_02E40225, 1))
            返回 (变量_02E40225 － 1)
        .如果真结束
        
    .计次循环尾 ()
    返回 (0)

.子程序 网页_掩码取结束IP, 文本型, 公开, 例：121.224.0.0/12   起始IP：121.224.0.0 掩码：12     返回结束IP：121.239.255.255
    .参数 起始IP, 文本型, , 例：121.224.0.0
    .参数 掩码, 整数型, , 例：12
    .局部变量 变量_08E40225, 文本型, , "0"
    .局部变量 变量_09E40225, 文本型
    .局部变量 变量_0AE40225, 文本型
    .局部变量 变量_0BE40225, 文本型
    .局部变量 变量_0CE40225, 整数型
    .局部变量 变量_0DE40225, 整数型

    
    变量_08E40225 ＝ 分割文本 (起始IP, “.”, )
    .计次循环首 (4, 变量_0CE40225)
        变量_0AE40225 ＝ 变量_0AE40225 ＋ 取文本右边 (进制_十到二 (到整数 (变量_08E40225 [变量_0CE40225])), 8)
    .计次循环尾 ()
    变量_0BE40225 ＝ 取文本左边 (变量_0AE40225, 掩码) ＋ 取文本右边 (“11111111111111111111111111111111”, 32 － 掩码)
    .计次循环首 (4, 变量_0DE40225)
        变量_09E40225 ＝ 变量_09E40225 ＋ 到文本 (进制_二到十 (取文本中间 (变量_0BE40225, (变量_0DE40225 － 1) × 8 ＋ 1, 8))) ＋ “.”
    .计次循环尾 ()
    返回 (取文本左边 (变量_09E40225, 取文本长度 (变量_09E40225) － 1))

.子程序 网页_断点续传, , 公开, 文件下载
    .参数 欲下载的Url, 文本型
    .参数 欲写入文件的路径, 文本型
    .参数 交互回调函数, 整数型, 可空, 第一个参数为待下载文件总长度指针，第二个参数为已下载总长度指针。

    网页_断点续传W (编码_Ansi到Unicode (欲下载的Url, ), 编码_Ansi到Unicode (欲写入文件的路径, ), 交互回调函数)

.子程序 网页_断点续传W, , 公开, 文件下载
    .参数 欲下载的Url, 字节集
    .参数 欲写入文件的路径, 字节集
    .参数 交互回调函数, 整数型, 可空, 第一个参数为待下载文件总长度指针，第二个参数为已下载总长度指针。
    .局部变量 变量_2CF70225, 整数型
    .局部变量 变量_2FF70225, 整数型
    .局部变量 变量_32F70225, 长整数型
    .局部变量 变量_35F70225, 字节集
    .局部变量 变量_36F70225, 整数型
    .局部变量 变量_3FF70225, 整数型
    .局部变量 变量_39F70225, 长整数型
    .局部变量 变量_3EF70225, 字节集
    .局部变量 变量_44F70225, 整数型
    .局部变量 变量_48F70225, 整数型

    变量_2CF70225 ＝ DLL_InternetOpenW (#NULL, #<?未知本地类型?>, #NULL, #NULL, 0)
    .如果真 (变量_2CF70225 ＝ #NULL)
        返回 ()
    .如果真结束
    变量_2FF70225 ＝ DLL_CreateFileW (欲写入文件的路径, 位或 (#GENERIC_READ, #GENERIC_WRITE), #FILE_SHARE_READ, #NULL, #OPEN_ALWAYS, #FILE_ATTRIBUTE_NORMAL, #NULL)
    .如果真 (变量_2FF70225 ≠ #INVALID_HANDLE_VALUE)
        DLL_SetFilePointerEx (变量_2FF70225, 0, 变量_32F70225, #<?未知本地类型?>)
        变量_35F70225 ＝ 编码_Ansi到Unicode (#<?未知本地类型?> ＋ “Range: bytes=” ＋ 到文本 (变量_32F70225) ＋ “-” ＋ #换行符, )
        变量_36F70225 ＝ DLL_InternetOpenUrlW (变量_2CF70225, 取指针_字节集型 (欲下载的Url), 取指针_字节集型 (变量_35F70225), -1, #INTERNET_FLAG_NO_CACHE_WRITE, #NULL)
        .如果真 (变量_36F70225 ≠ #NULL)
            
            变量_3FF70225 ＝ 4
            DLL_HttpQueryInfoW (变量_36F70225, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), 取指针整数_ (变量_48F70225), 变量_3FF70225, #NULL)
            变量_39F70225 ＝ 整数_有符号转无符号 (变量_48F70225)
            变量_48F70225 ＝ 0
            .如果真 (变量_39F70225 ＞ 0)
                变量_44F70225 ＝ 1048576
                变量_3EF70225 ＝ 取空白字节集 (变量_44F70225)
                .循环判断首 ()
                    .如果真 (InternetReadFile (变量_36F70225, 变量_3EF70225, 变量_44F70225, 变量_48F70225) ＝ 假)
                        跳出循环 ()
                    .如果真结束
                    .如果真 (变量_48F70225 ＝ 0)
                        跳出循环 ()
                    .如果真结束
                    变量_32F70225 ＝ 变量_32F70225 ＋ 变量_48F70225
                    WriteFile (变量_2FF70225, 变量_3EF70225, 变量_48F70225, #NULL, #NULL)
                    .如果真 (交互回调函数 ≠ #NULL)
                        程序_Call (交互回调函数, 取指针地址_长整数型 (变量_39F70225), 取指针地址_长整数型 (变量_32F70225), , , )
                    .如果真结束
                    
                    
                .循环判断尾 (真)
            .如果真结束
            InternetCloseHandle (变量_36F70225)
        .如果真结束
        
    .如果真结束
    CloseHandle (变量_2FF70225)
    InternetCloseHandle (变量_2CF70225)

.子程序 CreateIWinHttpRequest, 字节集
    .参数 变量_C5000325, 文本型
    .参数 变量_15010325, 文本型
    .参数 变量_CF000325, 字节集, 可空
    .参数 变量_1C010325, 文本型, 可空
    .参数 变量_20010325, 文本型, 可空
    .参数 变量_97000325, 整数型, 可空
    .参数 变量_98000325, 整数型, 可空
    .参数 变量_99000325, 整数型, 可空
    .参数 变量_9A000325, 整数型, 可空
    .参数 变量_E5000325, 整数型, 参考 可空
    .局部变量 变量_95000325, 整数型
    .局部变量 变量_0C010325, 字节集
    .局部变量 变量_11010325, 字节集
    .局部变量 变量_A7000325, 整数型
    .局部变量 变量_E1000325, 整数型
    .局部变量 变量_24010325, 文本型, , "0"
    .局部变量 变量_28010325, 整数型
    .局部变量 变量_6D010325, 文本型
    .局部变量 变量_F4000325, 字节集
    .局部变量 变量_F8000325, 字节集
    .局部变量 变量_D3000325, 整数型
    .局部变量 变量_08010325, 整数型
    .局部变量 变量_EC000325, 整数型
    .局部变量 变量_F0000325, 字节集
    .局部变量 变量_96000325, 整数型
    .局部变量 变量_2C010325, 整数型

    CoInitialize (#NULL)
    变量_96000325 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_93000328), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_94000328), 变量_95000325)
    .如果真 (变量_96000325 ＝ #<?未知本地类型?> 且 变量_95000325 ≠ #NULL)
        .如果真 (是否为空 (变量_97000325))
            变量_97000325 ＝ 0
        .如果真结束
        .如果真 (是否为空 (变量_98000325))
            变量_98000325 ＝ 60000
        .如果真结束
        .如果真 (是否为空 (变量_99000325))
            变量_99000325 ＝ 30000
        .如果真结束
        .如果真 (是否为空 (变量_9A000325))
            变量_9A000325 ＝ 30000
        .如果真结束
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 变量_97000325, 变量_98000325, 变量_99000325, 变量_9A000325, , , , , )
        
        变量_A7000325 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
        __set_short (变量_A7000325, 0, 3)
        __set (变量_A7000325, 8, 13056)
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_A7000325, , , , , , , )
        
        memset (变量_A7000325, 0, 16)
        __set_short (变量_A7000325, 0, 11)
        __set_short (变量_A7000325, 8, #<?未知本地类型?>)
        变量_0C010325 ＝ 编码_Ansi到Unicode (变量_C5000325, )
        变量_11010325 ＝ 编码_Ansi到Unicode (变量_15010325, )
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针_字节集型 (变量_11010325), 取指针_字节集型 (变量_0C010325), 变量_A7000325, , , , , , )
        
        变量_F4000325 ＝ 编码_Ansi到Unicode (“User-Agent”, )
        变量_F8000325 ＝ 编码_Ansi到Unicode (“Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.87 Safari/537.36”, )
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针_字节集型 (变量_F4000325), #NULL, , , , , , , )
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针_字节集型 (变量_F4000325), 取指针_字节集型 (变量_F8000325), , , , , , , )
        
        .如果真 (是否为空 (变量_1C010325) ＝ 假)
            变量_24010325 ＝ 分割文本 (变量_1C010325, #换行符, )
            变量_28010325 ＝ 取数组成员数 (变量_24010325)
            .计次循环首 (变量_28010325, 变量_2C010325)
                变量_6D010325 ＝ 删首尾空 (变量_24010325 [变量_2C010325])
                变量_F4000325 ＝ 编码_Ansi到Unicode (文本_取左边 (变量_6D010325, “:”, -1, ), )
                变量_F8000325 ＝ 编码_Ansi到Unicode (文本_取右边 (变量_6D010325, “:”, -1, ), )
                .如果真 (变量_F4000325 ＝ { })
                    到循环尾 ()
                .如果真结束
                变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针_字节集型 (变量_F4000325), #NULL, , , , , , , )
                .如果真 (变量_F8000325 ＝ { })
                    到循环尾 ()
                .如果真结束
                变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针_字节集型 (变量_F4000325), 取指针_字节集型 (变量_F8000325), , , , , , , )
            .计次循环尾 ()
        .如果真结束
        
        变量_D3000325 ＝ LocalAlloc (#LMEM_ZEROINIT, 24)
        __set_short (变量_D3000325, 0, 1)
        __set_short (变量_D3000325, 2, 128)
        __set (变量_D3000325, 4, 1)
        __set (变量_D3000325, 12, 取指针_字节集型 (变量_CF000325))
        __set (变量_D3000325, 16, 取字节集长度 (变量_CF000325))
        memset (变量_A7000325, 0, 16)
        __set_short (变量_A7000325, 0, 位或 (8192, 17))
        __set (变量_A7000325, 8, 变量_D3000325)
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, __get (变量_A7000325, 0), __get (变量_A7000325, 4), __get (变量_A7000325, 8), __get (变量_A7000325, 12), , , , , )
        LocalFree (变量_D3000325)
        
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针整数_ (变量_E5000325), , , , , , , , )
        
        
        memset (变量_A7000325, 0, 16)
        变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 变量_A7000325, , , , , , , , )
        变量_D3000325 ＝ __get (变量_A7000325, 8)
        .如果真 (变量_96000325 ＝ #<?未知本地类型?> 且 变量_D3000325 ≠ #NULL)
            变量_08010325 ＝ __get (变量_D3000325, 12)
            变量_EC000325 ＝ __get (变量_D3000325, 16)
            .如果真 (变量_08010325 ≠ #NULL 且 变量_EC000325 ＞ 0)
                变量_F0000325 ＝ 指针到字节集 (变量_08010325, 变量_EC000325)
            .如果真结束
            连续赋值 (#NULL, 变量_08010325, 变量_EC000325)
            DLL_SafeArrayDestroy (变量_D3000325)
        .如果真结束
        LocalFree (变量_A7000325)
        
        .如果真 (是否为空 (变量_20010325) ＝ 假)
            变量_96000325 ＝ CallObject (变量_95000325, #<?未知本地类型?>, 取指针整数_ (变量_08010325), , , , , , , , )
            .如果真 (变量_96000325 ＝ #<?未知本地类型?> 且 变量_08010325 ≠ #NULL)
                变量_20010325 ＝ 编码_Unicode到Ansi (指针_到字节集W (变量_08010325))
                DLL_SysFreeString (变量_08010325)
            .如果真结束
            
        .如果真结束
        
        变量_96000325 ＝ SafeRelease (变量_95000325)
    .如果真结束
    CoUninitialize ()
    返回 (变量_F0000325)

.子程序 网页_修补TLS协议, 逻辑型, 公开, 启用 TLS 1.1 和 TLS 1.2 协议
    返回 (系统_写数值注册项 (#HKEY_LOCAL_MACHINE, “SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\WinHttp”, #REG_DWORD, “DefaultSecureProtocols”, 2560, 假))

.子程序 HeadersToCookie, 文本型
    .参数 变量_4E100325, 文本型, 数组
    .局部变量 变量_4F100325, 整数型
    .局部变量 变量_50100325, 整数型
    .局部变量 变量_51100325, 整数型
    .局部变量 变量_52100325, 文本型
    .局部变量 变量_53100325, 整数型

    变量_4F100325 ＝ 取数组成员数 (变量_4E100325)
    .计次循环首 (变量_4F100325, 变量_53100325)
        变量_50100325 ＝ 寻找文本 (变量_4E100325 [变量_53100325], “set-cookie:”, 1, 真)
        .如果真 (变量_50100325 ＝ 1)
            变量_51100325 ＝ 寻找文本 (变量_4E100325 [变量_53100325], “;”, 12, 真)
            .如果真 (变量_51100325 ≠ -1)
                .如果真 (变量_52100325 ≠ “”)
                    变量_52100325 ＝ 变量_52100325 ＋ “; ”
                .如果真结束
                变量_52100325 ＝ 变量_52100325 ＋ 删首尾空 (取文本中间 (变量_4E100325 [变量_53100325], 12, 变量_51100325 － 12))
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    返回 (变量_52100325)

