.版本 2

.程序集 集_进程通信
.程序集变量 类变量_645A0115, 整数型
.程序集变量 类变量_655A0115, 文本型, , "0"
.程序集变量 类变量_665A0115, 整数型, , "0"
.程序集变量 类变量_675A0115, 字节集, , "0"
.程序集变量 类变量_685A0115, 整数型, , "0"
.程序集变量 类变量_695A0115, 整数型

.子程序 进程通信_接收端_初始化, , 公开, 监听前必需调用此子程序，只需使用一次，停止监听前不能再使用此子程序，否则会出错。
    .参数 参数_窗口句柄, 整数型, , 当前窗口句柄，可用 取窗口句柄() 得到。

    类变量_695A0115 ＝ 参数_窗口句柄
    类变量_645A0115 ＝ SetWindowLongA (参数_窗口句柄, -4, 到整数 (&接收端_读数据))

.子程序 进程通信_接收端_开始监听, 逻辑型, 公开, 成功返回真，失败返回假。
    .参数 参数_标志文本, 文本型, , 可以为任意文本(不能为空文本)，但是不要和系统中已有的冲突。设置不同的标志文本，可绑定不同的子程序。
    .参数 参数_回调函数, 子程序指针, 可空, 接收到信息后要触发的子程序，不可多个标志文本绑定同个子程序，不需要可不填。
    .局部变量 变量_385A0125, 整数型

    .如果真 (参数_标志文本 ＝ “”)
        返回 (假)
    .如果真结束
    .计次循环首 (取数组成员数 (类变量_655A0115), 变量_385A0125)
        .如果真 (类变量_655A0115 [变量_385A0125] ＝ 参数_标志文本)
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
    
    加入成员 (类变量_665A0115, RegisterWindowMessageA (参数_标志文本))
    加入成员 (类变量_655A0115, 参数_标志文本)
    
    .如果真 (类变量_665A0115 [取数组成员数 (类变量_665A0115)] ＝ 0)
        删除成员 (类变量_655A0115, 取数组成员数 (类变量_655A0115), )
        删除成员 (类变量_665A0115, 取数组成员数 (类变量_665A0115), )
        返回 (假)
    .如果真结束
    
    .计次循环首 (取数组成员数 (类变量_665A0115) － 1, 变量_385A0125)
        .如果真 (类变量_665A0115 [变量_385A0125] ＝ 类变量_665A0115 [取数组成员数 (类变量_665A0115)])
            删除成员 (类变量_655A0115, 取数组成员数 (类变量_655A0115), )
            删除成员 (类变量_665A0115, 取数组成员数 (类变量_665A0115), )
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
    
    .计次循环首 (取数组成员数 (类变量_685A0115), 变量_385A0125)
        .如果真 (类变量_685A0115 [变量_385A0125] ＝ 到整数 (参数_回调函数))
            删除成员 (类变量_655A0115, 取数组成员数 (类变量_655A0115), )
            删除成员 (类变量_665A0115, 取数组成员数 (类变量_665A0115), )
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
    
    加入成员 (类变量_685A0115, 到整数 (参数_回调函数))
    加入成员 (类变量_675A0115, 到字节集 (“”))
    返回 (真)

.子程序 进程通信_接收端_关闭监听, , 公开, 关闭某监听，要恢复请直接开始(不用重新初始化)。
    .参数 参数_标志文本, 文本型
    .局部变量 变量_3A5A0125, 整数型

    .计次循环首 (取数组成员数 (类变量_655A0115), 变量_3A5A0125)
        .如果真 (类变量_655A0115 [变量_3A5A0125] ＝ 参数_标志文本)
            删除成员 (类变量_665A0115, 变量_3A5A0125, )
            删除成员 (类变量_655A0115, 变量_3A5A0125, )
            删除成员 (类变量_675A0115, 变量_3A5A0125, )
            删除成员 (类变量_685A0115, 变量_3A5A0125, )
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()

.子程序 进程通信_接收端_停止监听, , 公开, 关闭所有监听，要恢复请重新初始化。
    SetWindowLongA (类变量_695A0115, -4, 类变量_645A0115)
    清除数组 (类变量_655A0115)
    清除数组 (类变量_665A0115)
    清除数组 (类变量_675A0115)
    清除数组 (类变量_685A0115)

.子程序 进程通信_接收端_取出数据, 字节集, 公开, 回调函数或其它子程序可用此子程序取出接收到的数据。
    .参数 参数_标识文本, 文本型, , 接收端监听时设置的文本。
    .局部变量 变量_3C5A0125, 整数型

    .计次循环首 (取数组成员数 (类变量_655A0115), 变量_3C5A0125)
        .如果真 (类变量_655A0115 [变量_3C5A0125] ＝ 参数_标识文本)
            返回 (类变量_675A0115 [变量_3C5A0125])
        .如果真结束
        
    .计次循环尾 ()
    返回 ({ })

.子程序 进程通信_接收端_清除数据, , 公开, 清除某监听得到的数据(其它数据不变)，释放该数据所占的内存。
    .参数 参数_标志文本, 文本型
    .局部变量 变量_3E5A0125, 整数型

    .计次循环首 (取数组成员数 (类变量_655A0115), 变量_3E5A0125)
        .如果真 (类变量_655A0115 [变量_3E5A0125] ＝ 参数_标志文本)
            类变量_675A0115 [变量_3E5A0125] ＝ { }
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()

.子程序 进程通信_接收端_清空数据, , 公开, 清空所有监听得到的所有数据，释放内存。
    重定义数组 (类变量_675A0115, 假, 取数组成员数 (类变量_675A0115))

.子程序 进程通信_发送端_发送数据, 逻辑型, 公开, 成功返回真，失败返回假。
    .参数 参数_窗口句柄, 整数型, , 接收端的窗口句柄。
    .参数 参数_标志文本, 文本型, , 接收端监听时设置的文本。
    .参数 参数_欲发送的数据, 字节集, , 要发送的数据。
    .局部变量 变量_425A0125, 字节集
    .局部变量 变量_435A0125, 字节集
    .局部变量 变量_455A0125, 整数型
    .局部变量 变量_465A0125, 文本型

    变量_455A0125 ＝ RegisterWindowMessageA (参数_标志文本)
    .如果真 (全局变量_445A0105 ＝ “” 或 全局变量_445A0105 ＝ “0”)
        全局变量_445A0105 ＝ 到文本 (GetCurrentProcessId ())
    .如果真结束
    .如果真 (IsWindow (参数_窗口句柄) ≠ 0)
        变量_435A0125 ＝ { 1 }
        变量_425A0125 ＝ 到字节集 (到文本 (lstrcpynA_字节集 (变量_435A0125, 变量_435A0125, 0)) ＋ “$” ＋ 到文本 (取字节集长度 (参数_欲发送的数据)) ＋ “&” ＋ 到文本 (lstrcpynA_字节集 (参数_欲发送的数据, 参数_欲发送的数据, 0)))
        变量_465A0125 ＝ 到文本 (取文本长度 (全局变量_445A0105))
        SendMessageA (参数_窗口句柄, 变量_455A0125, 到整数 (变量_465A0125 ＋ 全局变量_445A0105 ＋ 到文本 (取字节集长度 (变量_425A0125))), lstrcpynA_字节集 (变量_425A0125, 变量_425A0125, 0))
        .如果真 (变量_435A0125 ＝ { 2 })
            返回 (真)
        .如果真结束
        返回 (假)
    .如果真结束
    返回 (假)

.子程序 接收端_读数据, 整数型
    .参数 变量_807D0125, 整数型
    .参数 变量_817D0125, 整数型
    .参数 变量_827D0125, 整数型
    .参数 变量_837D0125, 整数型
    .局部变量 变量_847D0125, 文本型
    .局部变量 变量_857D0125, 整数型
    .局部变量 变量_867D0125, 整数型
    .局部变量 变量_877D0125, 整数型
    .局部变量 变量_887D0125, 整数型
    .局部变量 变量_897D0125, 字节集
    .局部变量 变量_8A7D0125, 整数型
    .局部变量 变量_BAAC0225, 字节集

    .计次循环首 (取数组成员数 (类变量_665A0115), 变量_8A7D0125)
        .如果真 (类变量_665A0115 [变量_8A7D0125] ＝ 变量_817D0125)
            变量_847D0125 ＝ 到文本 (变量_827D0125)
            变量_867D0125 ＝ 到整数 (取文本左边 (变量_847D0125, 1))
            变量_847D0125 ＝ 取文本右边 (变量_847D0125, 取文本长度 (变量_847D0125) － 1)
            变量_887D0125 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 到整数 (取文本左边 (变量_847D0125, 变量_867D0125)))
            变量_877D0125 ＝ 到整数 (取文本右边 (变量_847D0125, 取文本长度 (变量_847D0125) － 变量_867D0125))
            变量_897D0125 ＝ 取空白字节集 (变量_877D0125)
            ReadProcessMemory_字节集 (变量_887D0125, 变量_837D0125, 变量_897D0125, 变量_877D0125, 0)
            变量_847D0125 ＝ 到文本 (变量_897D0125)
            变量_857D0125 ＝ 到整数 (取文本左边 (变量_847D0125, 寻找文本 (变量_847D0125, “$”, , 假) － 1))
            WriteProcessMemory_字节集 (变量_887D0125, 变量_857D0125, { 2 }, 1, 0)
            变量_847D0125 ＝ 取文本右边 (变量_847D0125, 取文本长度 (变量_847D0125) － 寻找文本 (变量_847D0125, “$”, , 假))
            变量_877D0125 ＝ 到整数 (取文本左边 (变量_847D0125, 寻找文本 (变量_847D0125, “&”, , 假) － 1))
            变量_867D0125 ＝ 到整数 (取文本右边 (变量_847D0125, 取文本长度 (变量_847D0125) － 寻找文本 (变量_847D0125, “&”, , 假)))
            变量_897D0125 ＝ 取空白字节集 (变量_877D0125)
            ReadProcessMemory_字节集 (变量_887D0125, 变量_867D0125, 变量_897D0125, 变量_877D0125, 0)
            类变量_675A0115 [变量_8A7D0125] ＝ 变量_897D0125
            CloseHandle (变量_887D0125)
            .如果真 (到整数 (类变量_685A0115 [变量_8A7D0125]) ≠ 0)
                
                
                CallWindowProcA (取指针_字节集型 ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }), 类变量_685A0115 [变量_8A7D0125], 0, 0, 0)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    返回 (CallWindowProcA (类变量_645A0115, 变量_807D0125, 变量_817D0125, 变量_827D0125, 变量_837D0125))

.子程序 子程序1
    

.子程序 内存_远程创建内存_文本, 整数型, 公开, 创建成功后返回远程文本内存地址。可用来远程调用
    .参数 进程句柄, 整数型
    .参数 文本内容, 文本型

    返回 (内存_远程创建内存_字节集 (进程句柄, 到字节集 (文本内容) ＋ { 0 }))

.子程序 内存_远程创建内存_字节集, 整数型, 公开, 创建成功后返回远程字节集内存地址。可用来远程调用
    .参数 进程句柄, 整数型
    .参数 字节集内容, 字节集
    .局部变量 变量_4DA20225, 整数型

    变量_4DA20225 ＝ VirtualAllocEx (进程句柄, 0, 取字节集长度 (字节集内容), #MEM_COMMIT, #PAGE_EXECUTE_READWRITE)
    
    .如果真 (变量_4DA20225 ＝ 0)
        输出调试文本 (“内存申请失败”)
        返回 (0)
    .如果真结束
    
    .如果真 (WriteProcessMemory_字节集 (进程句柄, 变量_4DA20225, 字节集内容, 取字节集长度 (字节集内容), 0) ＝ 假)
        输出调试文本 (“写内存失败”)
        返回 (0)
    .如果真结束
    
    返回 (变量_4DA20225)

.子程序 内存_远程调用子程序, 逻辑型, 公开, 在远程进程创建一条线程，成功返回真，失败返回假。会导致少数进程崩溃，暂未找到原因   调用实例：https://bbs.125.la/thread-14193109-1-1.html  
    .参数 进程句柄, 整数型
    .参数 远程子程序地址, 整数型
    .参数 参数, 整数型, 可空 数组, 只接受整数型数据，如需传递文本请自行创建远程文本内存，传入内存地址
    .参数 是否C调用, 逻辑型, 可空, 默认为APICALL(即_stdcall)，如果本函数为真则使用C调用(_cdcel)
    .参数 是否等待远程线程, 逻辑型, 可空, 如果为真，则等待远程线程执行完毕后才会返回。否则创建后立即返回(异步)
    .局部变量 变量_53A20225, 字节集
    .局部变量 变量_54A20225, 整数型
    .局部变量 变量_55A20225, 整数型
    .局部变量 变量_56A20225, 整数型
    .局部变量 变量_57A20225, 整数型

    .如果真 (远程子程序地址 ＝ 0)
        返回 (假)
    .如果真结束
    
    
    
    变量_53A20225 ＝ { }
    变量_54A20225 ＝ 取数组成员数 (参数)
    .如果真 (变量_54A20225 ＞ 63)
        
        返回 (假)
    .如果真结束
    .计次循环首 (变量_54A20225, 变量_55A20225)
        .如果 (参数 [变量_54A20225 － 变量_55A20225 ＋ 1] ＜ 255)
            
            变量_53A20225 ＝ 变量_53A20225 ＋ { 106 } ＋ 到字节集 (到字节 (参数 [变量_54A20225 － 变量_55A20225 ＋ 1]))
        .否则
            
            变量_53A20225 ＝ 变量_53A20225 ＋ { 104 } ＋ 到字节集 (参数 [变量_54A20225 － 变量_55A20225 ＋ 1])
        .如果结束
        
    .计次循环尾 ()
    
    变量_53A20225 ＝ 变量_53A20225 ＋ { 184 } ＋ 到字节集 (远程子程序地址) ＋ { 255, 208 }
    
    .如果真 (是否C调用 ＝ 真)
        
        变量_53A20225 ＝ 变量_53A20225 ＋ { 131, 196 } ＋ 到字节集 (到字节 (变量_54A20225 × 4))
    .如果真结束
    
    变量_53A20225 ＝ 变量_53A20225 ＋ { 195 }
    
    变量_56A20225 ＝ 内存_远程创建内存_字节集 (进程句柄, 变量_53A20225)
    .如果真 (变量_56A20225 ＝ 0)
        返回 (假)
    .如果真结束
    
    变量_57A20225 ＝ CreateRemoteThread (进程句柄, 0, 0, 变量_56A20225, 0, 0, 0)
    .如果真 (变量_57A20225 ＝ 0)
        输出调试文本 (“远程线程创建失败”)
        返回 (假)
    .如果真结束
    .如果 (是否等待远程线程 ＝ 真)
        WaitForSingleObject (变量_57A20225, -1)
        CloseHandle (变量_57A20225)
        内存_释放远程内存 (进程句柄, 变量_56A20225)
        输出调试文本 (“远程资源已自动释放”)
        返回 (真)
    .否则
        
        
        
        
        变量_55A20225 ＝ VirtualAlloc (0, 12, #MEM_COMMIT, #PAGE_READWRITE)
        
        写到内存 (到字节集 (变量_57A20225) ＋ 到字节集 (变量_56A20225) ＋ 到字节集 (进程句柄), 变量_55A20225, 12)
        CloseHandle (CreateThread (0, 0, 到整数 (&内部等待线程), 变量_55A20225, 0, 0))
        
    .如果结束
    返回 (真)

.子程序 内存_释放远程内存, 逻辑型, 公开, 释放在远程创建的内存，可以释放本模块创建的远程文本/字节集内存。
    .参数 进程句柄, 整数型
    .参数 远程内存地址, 整数型

    
    .如果真 (VirtualFreeEx (进程句柄, 远程内存地址, 0, #MEM_RELEASE) ＝ 0)
        输出调试文本 (“释放内存失败”)
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 内部等待线程
    .参数 变量_5AA20225, 整数型
    .局部变量 变量_5BA20225, 字节集
    .局部变量 变量_5CA20225, 整数型
    .局部变量 变量_5DA20225, 整数型
    .局部变量 变量_5EA20225, 整数型

    变量_5BA20225 ＝ 指针到字节集 (变量_5AA20225, 12)
    
    DLL_VirtualFree (变量_5AA20225, 0, #MEM_RELEASE)
    变量_5CA20225 ＝ 取字节集数据 (变量_5BA20225, #整数型, )
    变量_5DA20225 ＝ 取字节集数据 (变量_5BA20225, #整数型, 5)
    变量_5EA20225 ＝ 取字节集数据 (变量_5BA20225, #整数型, 9)
    WaitForSingleObject (变量_5CA20225, -1)
    CloseHandle (变量_5CA20225)
    内存_释放远程内存 (变量_5EA20225, 变量_5DA20225)
    输出调试文本 (“远程资源已自动释放”)

