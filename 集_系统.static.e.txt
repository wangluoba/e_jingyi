.版本 2

.程序集 集_系统
.程序集变量 类变量_C9530115, 整数型
.程序集变量 类变量_B7D30115, 双精度小数型
.程序集变量 类变量_F79B0215, 双精度小数型
.程序集变量 类变量_AB7D0215, 整数型
.程序集变量 类变量_F29B0215, 整数型
.程序集变量 类变量_F39B0215, 逻辑型
.程序集变量 类变量_F49B0215, 整数型
.程序集变量 类变量_F59B0215, 整数型
.程序集变量 类变量_EF9B0215, 整数型, , "0"
.程序集变量 类变量_BEE20215, 整数型

.子程序 系统_取计算机语言, 文本型, 公开, 返回计算机语言相关信息
    .局部变量 变量_59C30225, 整数型
    .局部变量 变量_5BC30225, 文本型, , "0"
    .局部变量 变量_5CC30225, 整数型
    .局部变量 变量_5DC30225, 文本型, , "0"

    
    
    变量_59C30225 ＝ GetOEMCP ()
    变量_5BC30225 ＝ 分割文本 (#常量_代码页标识符, #换行符, )
    .计次循环首 (取数组成员数 (变量_5BC30225), 变量_5CC30225)
        清除数组 (变量_5DC30225)
        变量_5DC30225 ＝ 分割文本 (变量_5BC30225 [变量_5CC30225], “|”, )
        .如果真 (取数组成员数 (变量_5DC30225) ＝ 3)
            .如果真 (到整数 (变量_5DC30225 [1]) ＝ 变量_59C30225)
                返回 (变量_5DC30225 [1] ＋ “：” ＋ 变量_5DC30225 [3])
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    返回 (“失败”)

.子程序 系统_取系统信息, 文本型, 公开
    .局部变量 变量_95AD0225, 文本型

    变量_95AD0225 ＝ 系统_取DOS执行结果 (“systeminfo”)
    返回 (变量_95AD0225)

.子程序 系统_显示器操作, , 公开, -1 打开显示  1低电状态  2关闭显示器
    .参数 参_操作类型, 整数型

    SendMessageA (65535, 274, 61808, 参_操作类型)

.子程序 系统_取系统信息1, 文本型, 公开
    .局部变量 变量_98AD0225, 对象
    .局部变量 变量_9FAD0225, 文本型

    CoInitialize (0)
    变量_98AD0225.创建 (“Scriptcontrol”, )
    变量_98AD0225.写属性 (“Language”, “VBScript”)
    变量_98AD0225.通用方法 (“AddCode”, #<?未知本地类型?>)
    变量_9FAD0225 ＝ 变量_98AD0225.文本方法 (“Run”, “GetSysInfo”)
    变量_98AD0225.清除 ()
    CoUninitialize ()
    返回 (变量_9FAD0225)

.子程序 系统_磁盘是否支持稀疏文件, 逻辑型, 公开
    .参数 参_盘符, 文本型
    .局部变量 变量_7FAD0225, 整数型
    .局部变量 变量_80AD0225, 文本型
    .局部变量 变量_81AD0225, 整数型
    .局部变量 变量_82AD0225, 整数型
    .局部变量 变量_83AD0225, 文本型
    .局部变量 变量_84AD0225, 逻辑型

    变量_84AD0225 ＝ GetVolumeInformationA (取文本左边 (参_盘符, 3), 变量_80AD0225, 取文本长度 (变量_80AD0225), 变量_81AD0225, 变量_82AD0225, 变量_7FAD0225, 变量_83AD0225, 取文本长度 (变量_83AD0225))
    .如果真 (变量_84AD0225 ＝ 假)
        返回 (假)
    .如果真结束
    .如果 (位与 (变量_7FAD0225, #FILE_SUPPORTS_SPARSE_FILES) ＝ 64)
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    

.子程序 系统_取网卡信息_彗星版, 整数型, 公开, 获取网卡的IP地址、MAC等信息。By:邓学彬(泪闯天涯)
    .参数 网卡信息数组, 精易_网卡信息_彗星, 参考 数组
    .局部变量 变量_C7A30225, 自定义_3EA40241, , "0"
    .局部变量 变量_C8A30225, 自定义_43A40241
    .局部变量 变量_C9A30225, 字节集
    .局部变量 变量_CAA30225, 整数型
    .局部变量 变量_CBA30225, 整数型
    .局部变量 变量_CCA30225, 整数型
    .局部变量 变量_CDA30225, 整数型
    .局部变量 变量_CEA30225, 整数型
    .局部变量 变量_CFA30225, 自定义_93800241
    .局部变量 变量_D0A30225, 文本型
    .局部变量 变量_D1A30225, 文本型
    .局部变量 变量_D2A30225, 精易_网卡信息_彗星
    .局部变量 变量_D3A30225, 整数型
    .局部变量 变量_B7A50225, 文本型
    .局部变量 变量_B8A50225, 整数型

    清除数组 (网卡信息数组)
    GetAdapterFriendlyName (变量_C7A30225)
    
    变量_CDA30225 ＝ GetAdaptersInfo (0, 变量_CCA30225)
    .如果真 (变量_CDA30225 ＝ #ERROR_BUFFER_OVERFLOW)
        变量_C9A30225 ＝ 取空白字节集 (变量_CCA30225)
        变量_CAA30225 ＝ GetPtr_Bin (变量_C9A30225, 变量_C9A30225, 0)
        变量_CDA30225 ＝ GetAdaptersInfo (变量_CAA30225, 变量_CCA30225)
        .如果真 (#ERROR_SUCCESS ＝ 变量_CDA30225)
            变量_CBA30225 ＝ LocalSize_IP_ADAPTER_INFO (变量_C8A30225)
            .判断循环首 (变量_CAA30225 ≠ 0)
                DLL_RtlMoveMemory6 (变量_C8A30225, 变量_CAA30225, 变量_CBA30225)
                变量_D2A30225.网卡名称 ＝ 到文本 (变量_C8A30225.成员_46A40235)
                变量_D2A30225.网卡描述 ＝ 到文本 (变量_C8A30225.成员_47A40235)
                变量_D2A30225.网卡类型n ＝ 变量_C8A30225.成员_4BA40235
                变量_D2A30225.网卡类型 ＝ GetAdapterInfoType (变量_C8A30225.成员_4BA40235)
                
                
                变量_D2A30225.MAC地址 ＝ “”
                变量_B8A50225 ＝ 变量_C8A30225.成员_48A40235
                .计次循环首 (变量_B8A50225, 变量_D3A30225)
                    ' .如果真 (变量_D3A30225 ＞ 1)
                        
                    ' .如果真结束
                    ' .如果真 (变量_C8A30225.成员_49A40235 [变量_D3A30225] ≤ 16)
                        
                    ' .如果真结束
                    
                    变量_B7A50225 ＝ 取十六进制文本 (变量_C8A30225.成员_49A40235 [变量_D3A30225])
                    .如果 (变量_D3A30225 ≠ 变量_B8A50225)
                        变量_D2A30225.MAC地址 ＝ 变量_D2A30225.MAC地址 ＋ 选择 (取文本长度 (变量_B7A50225) ＝ 1, “0” ＋ 变量_B7A50225, 变量_B7A50225) ＋ “-”
                    .否则
                        变量_D2A30225.MAC地址 ＝ 变量_D2A30225.MAC地址 ＋ 选择 (取文本长度 (变量_B7A50225) ＝ 1, “0” ＋ 变量_B7A50225, 变量_B7A50225)
                    .如果结束
                    
                .计次循环尾 ()
                
                
                变量_CFA30225 ＝ 变量_C8A30225.成员_4EA40235
                .循环判断首 ()
                    变量_D2A30225.IP地址 ＝ 到文本 (变量_CFA30225.成员_95800235)
                    变量_D2A30225.子网掩码 ＝ 到文本 (变量_CFA30225.成员_96800235)
                    跳出循环 ()
                    
                    变量_CEA30225 ＝ 变量_CFA30225.成员_94800235
                    .如果真 (变量_CEA30225 ≠ 0)
                        CopyMemory_IP_ADDR_STRING (变量_CFA30225, 变量_CEA30225, LocalSize_IP_ADDR_STRING (变量_CFA30225))
                    .如果真结束
                    
                .循环判断尾 (变量_CEA30225 ≠ 0)
                
                
                变量_CFA30225 ＝ 变量_C8A30225.成员_4FA40235
                .循环判断首 ()
                    变量_D2A30225.网关地址 ＝ 到文本 (变量_CFA30225.成员_95800235)
                    跳出循环 ()
                    
                    变量_CEA30225 ＝ 变量_CFA30225.成员_94800235
                    .如果真 (变量_CEA30225 ≠ 0)
                        CopyMemory_IP_ADDR_STRING (变量_CFA30225, 变量_CEA30225, LocalSize_IP_ADDR_STRING (变量_CFA30225))
                        
                    .如果真结束
                    
                .循环判断尾 (变量_CEA30225 ≠ 0)
                
                
                GetDnsServer (变量_C8A30225.成员_4AA40235, 变量_D2A30225.首选DNS服务器, 变量_D2A30225.备用DNS服务器)
                
                .计次循环首 (取数组成员数 (变量_C7A30225), 变量_D3A30225)
                    .如果真 (变量_C7A30225 [变量_D3A30225].成员_42A40235 ＝ 变量_D2A30225.网卡名称)
                        变量_D2A30225.连接名称 ＝ 变量_C7A30225 [变量_D3A30225].成员_41A40235
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
                
                变量_D2A30225.是否启用DHCP ＝ 变量_C8A30225.成员_4CA40235 ＝ 1
                加入成员 (网卡信息数组, 变量_D2A30225)
                变量_CAA30225 ＝ 变量_C8A30225.成员_44A40235
            .判断循环尾 ()
        .如果真结束
        
    .如果真结束
    
    返回 (取数组成员数 (网卡信息数组))

.子程序 GetAdapterFriendlyName
    .参数 变量_D4A30225, 自定义_3EA40241, 数组
    .局部变量 变量_D5A30225, 整数型
    .局部变量 变量_D6A30225, 整数型
    .局部变量 变量_D7A30225, 字节集
    .局部变量 变量_D8A30225, 整数型
    .局部变量 变量_D9A30225, 自定义_7FA40241
    .局部变量 变量_DAA30225, 自定义_87A40241, , "0"
    .局部变量 变量_DCA30225, 字节集
    .局部变量 变量_DDA30225, 字节集
    .局部变量 变量_DEA30225, 整数型
    .局部变量 变量_DFA30225, 整数型
    .局部变量 变量_E0A30225, 整数型
    .局部变量 变量_E1A30225, 整数型

    清除数组 (变量_D4A30225)
    
    变量_DFA30225 ＝ DLL_MprConfigServerConnect (0, 变量_D5A30225)
    变量_DFA30225 ＝ DLL_GetInterfaceInfo (0, 变量_D6A30225)
    
    .如果真 (变量_DFA30225 ＝ #ERROR_INSUFFICIENT_BUFFER)
        变量_D7A30225 ＝ 取空白字节集 (变量_D6A30225)
        变量_D8A30225 ＝ GetPtr_Bin (变量_D7A30225, 变量_D7A30225, 0)
        变量_DFA30225 ＝ DLL_GetInterfaceInfo (变量_D8A30225, 变量_D6A30225)
        
        变量_DEA30225 ＝ DLL_LocalSize4 (变量_D9A30225)
        DLL_RtlMoveMemory38 (变量_D9A30225, 变量_D8A30225, 变量_DEA30225)
        .如果真 (变量_D9A30225.成员_80A40235 ＞ 0)
            重定义数组 (变量_DAA30225, 假, 变量_D9A30225.成员_80A40235)
            变量_DEA30225 ＝ 变量_D9A30225.成员_80A40235 × DLL_LocalSize5 (变量_DAA30225 [1])
            .如果真 (变量_DEA30225 ＞ 变量_D6A30225)
                变量_DEA30225 ＝ 变量_D6A30225
            .如果真结束
            DLL_RtlMoveMemory39 (变量_DAA30225, 变量_D8A30225 ＋ 4, 变量_DEA30225)
            重定义数组 (变量_D4A30225, 假, 变量_D9A30225.成员_80A40235)
            .计次循环首 (变量_D9A30225.成员_80A40235, 变量_E0A30225)
                变量_DCA30225 ＝ 到字节集 (变量_DAA30225 [变量_E0A30225].成员_89A40235)
                变量_DDA30225 ＝ 取空白字节集 (256)
                DLL_MprConfigGetFriendlyName (变量_D5A30225, 变量_DCA30225, 变量_DDA30225, 255)
                变量_D4A30225 [变量_E0A30225].成员_3FA40235 ＝ 变量_DAA30225 [变量_E0A30225].成员_88A40235
                变量_D4A30225 [变量_E0A30225].成员_40A40235 ＝ 编码_Unicode到Ansi (变量_DCA30225)
                变量_D4A30225 [变量_E0A30225].成员_41A40235 ＝ 编码_Unicode到Ansi (变量_DDA30225)
                
                
                变量_D4A30225 [变量_E0A30225].成员_42A40235 ＝ 变量_D4A30225 [变量_E0A30225].成员_40A40235
                变量_E1A30225 ＝ 寻找文本 (变量_D4A30225 [变量_E0A30225].成员_42A40235, “{”, , 假)
                .如果真 (变量_E1A30225 ≠ -1)
                    变量_D4A30225 [变量_E0A30225].成员_42A40235 ＝ 取文本右边 (变量_D4A30225 [变量_E0A30225].成员_42A40235, 取文本长度 (变量_D4A30225 [变量_E0A30225].成员_42A40235) － 变量_E1A30225 ＋ 1)
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .如果真结束
    
    DLL_MprConfigServerDisconnect (变量_D5A30225)

.子程序 GetDnsServer, 逻辑型
    .参数 变量_E2A30225, 整数型
    .参数 变量_E3A30225, 文本型, 参考
    .参数 变量_E4A30225, 文本型, 参考
    .局部变量 变量_E5A30225, 自定义_D1A40241
    .局部变量 变量_E6A30225, 字节集
    .局部变量 变量_E7A30225, 整数型
    .局部变量 变量_E8A30225, 整数型
    .局部变量 变量_E9A30225, 整数型
    .局部变量 变量_EAA30225, 整数型
    .局部变量 变量_EBA30225, 整数型
    .局部变量 变量_ECA30225, 自定义_93800241
    .局部变量 变量_EDA30225, 整数型

    变量_E3A30225 ＝ “”
    变量_E4A30225 ＝ “”
    
    变量_EAA30225 ＝ DLL_GetPerAdapterInfo2 (变量_E2A30225, 0, 变量_E9A30225)
    .如果真 (变量_EAA30225 ＝ #ERROR_BUFFER_OVERFLOW)
        变量_E6A30225 ＝ 取空白字节集 (变量_E9A30225)
        变量_E7A30225 ＝ GetPtr_Bin (变量_E6A30225, 变量_E6A30225, 0)
        变量_EAA30225 ＝ DLL_GetPerAdapterInfo2 (变量_E2A30225, 变量_E7A30225, 变量_E9A30225)
        .如果真 (#ERROR_SUCCESS ＝ 变量_EAA30225)
            变量_E8A30225 ＝ DLL_LocalSize6 (变量_E5A30225)
            DLL_RtlMoveMemory40 (变量_E5A30225, 变量_E7A30225, 变量_E8A30225)
            变量_ECA30225 ＝ 变量_E5A30225.成员_D5A40235
            .循环判断首 ()
                变量_EDA30225 ＝ 变量_EDA30225 ＋ 1
                .判断开始 (变量_EDA30225 ＝ 1)
                    变量_E3A30225 ＝ 到文本 (变量_ECA30225.成员_95800235)
                .判断 (变量_EDA30225 ＝ 2)
                    变量_E4A30225 ＝ 到文本 (变量_ECA30225.成员_95800235)
                .默认
                    
                .判断结束
                
                变量_EBA30225 ＝ 变量_ECA30225.成员_94800235
                .如果真 (变量_EBA30225 ≠ 0)
                    CopyMemory_IP_ADDR_STRING (变量_ECA30225, 变量_EBA30225, LocalSize_IP_ADDR_STRING (变量_ECA30225))
                    
                .如果真结束
                
            .循环判断尾 (变量_EBA30225 ≠ 0)
            
            返回 (真)
        .如果真结束
        
    .如果真结束
    
    返回 (假)

.子程序 GetAdapterInfoType, 文本型
    .参数 变量_EEA30225, 整数型

    .判断开始 (变量_EEA30225 ＝ #MIB_IF_TYPE_OTHER)
        返回 (“OTHER”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_ETHERNET)
        返回 (“ETHERNET”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_TOKENRING)
        返回 (“TOKENRING”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_FDDI)
        返回 (“FDDI”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_PPP)
        返回 (“PPP”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_LOOPBACK)
        返回 (“LOOPBACK”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_SLIP)
        返回 (“SLIP”)
    .判断 (变量_EEA30225 ＝ #MIB_IF_TYPE_IEEE80211)
        返回 (“IEEE80211”)
    .默认
        返回 (到文本 (变量_EEA30225))
    .判断结束
    

.子程序 系统_取屏幕数量, 整数型, 公开
    清除数组 (类变量_EF9B0215)
    EnumDisplayMonitors (0, 0, 到整数 (&MonitorEnumProc), 0)
    返回 (取数组成员数 (类变量_EF9B0215))

.子程序 MonitorEnumProc, 逻辑型
    .参数 变量_FFD20225, 整数型
    .参数 变量_00D30225, 整数型
    .参数 变量_01D30225, 整数型
    .参数 变量_02D30225, 整数型

    加入成员 (类变量_EF9B0215, 变量_FFD20225)
    返回 (真)

.子程序 系统_生成随机mac, 文本型, 公开, 随机返回一个MAC地址 如：F8:1F:CC:C2:AF:14
    .局部变量 变量_67D40225, 整数型
    .局部变量 变量_68D40225, 整数型
    .局部变量 变量_69D40225, 文本型

    
    .计次循环首 (6, 变量_68D40225)
        置随机数种子 ()
        变量_67D40225 ＝ 取随机数 (16, 255)
        .如果真 (变量_68D40225 ＝ 1)
            .如果真 (变量_67D40225 ％ 2 ＝ 1)
                .判断开始 (变量_67D40225 ＝ 255)
                    变量_67D40225 ＝ 变量_67D40225 － 1
                .默认
                    变量_67D40225 ＝ 变量_67D40225 ＋ 1
                .判断结束
                
            .如果真结束
            
        .如果真结束
        .判断开始 (变量_68D40225 ＝ 6)
            变量_69D40225 ＝ 变量_69D40225 ＋ 取十六进制文本 (变量_67D40225)
        .默认
            变量_69D40225 ＝ 变量_69D40225 ＋ 取十六进制文本 (变量_67D40225) ＋ “:”
        .判断结束
        
    .计次循环尾 ()
    返回 (变量_69D40225)

.子程序 系统_取系统DPI, 整数型, 公开, 成功返回缩放比，失败返回0。
    .局部变量 变量_3AD70225, 整数型
    .局部变量 变量_3BD70225, 整数型
    .局部变量 变量_3CD70225, 整数型

    
    变量_3AD70225 ＝ GetDC (#NULL)
    变量_3BD70225 ＝ GetDeviceCaps (变量_3AD70225, 118) ÷ GetDeviceCaps (变量_3AD70225, 8) × 100
    变量_3CD70225 ＝ GetDeviceCaps (变量_3AD70225, 88) ÷ 96 × 100
    ReleaseDC (#NULL, 变量_3AD70225)
    .判断开始 (变量_3BD70225 ＝ 100)
        返回 (变量_3CD70225)
    .判断 (变量_3CD70225 ＝ 100)
        返回 (变量_3BD70225)
    .判断 (变量_3BD70225 ＝ 变量_3CD70225)
        返回 (变量_3BD70225)
    .默认
        返回 (0)
    .判断结束
    

.子程序 系统_取系统DPI_注册表版, 整数型, 公开
    .局部变量 变量_CAA50225, 整数型

    变量_CAA50225 ＝ 取数值注册项 (#现行用户, “Control Panel\Desktop\WindowMetrics\AppliedDPI”, )
    变量_CAA50225 ＝ 变量_CAA50225 ÷ 96 × 100
    返回 (变量_CAA50225)

.子程序 系统_禁用DPI缩放, 逻辑型, 公开
    返回 (SetProcessDPIAware ())

.子程序 系统_主板发声, 逻辑型, 公开, 让主板也疯狂嗨的命令
    .参数 发出的频率, 整数型
    .参数 发音的时长, 整数型

    返回 (Beep (发出的频率, 发音的时长))

.子程序 系统_清除托盘残留, , 公开, 清除因调试或者其他原因进程已退出但托盘未退出的残留图标
    .局部变量 变量_BDE20225, 短整数型

    类变量_F29B0215 ＝ _OsVersion ()
    .如果真 (类变量_F29B0215 ＝ 0)
        RtlGetNtVersionNumbers (类变量_F29B0215, 类变量_BEE20215, 变量_BDE20225)
    .如果真结束
    类变量_F39B0215 ＝ _Isx64 ()
    .判断开始 (类变量_F39B0215)
        类变量_F49B0215 ＝ 16
        类变量_F59B0215 ＝ 24
    .默认
        类变量_F49B0215 ＝ 12
        类变量_F59B0215 ＝ 18
    .判断结束
    _RefreshTaskbarIcon ()
    

.子程序 系统_清除托盘残留1, , 公开, 清除因调试或者其他原因进程已退出但托盘未退出的残留图标,不支持XP
    .局部变量 变量_9AE20225, 整数型
    .局部变量 变量_9BE20225, 整数型
    .局部变量 变量_9CE20225, 整数型
    .局部变量 变量_9DE20225, 整数型
    .局部变量 变量_9EE20225, 精易_矩形
    .局部变量 变量_9FE20225, 整数型
    .局部变量 变量_A0E20225, 整数型
    .局部变量 变量_A1E20225, 整数型

    变量_9AE20225 ＝ FindWindowA (“Shell_TrayWnd”, 字符 (#NULL))
    变量_9BE20225 ＝ FindWindowExA (变量_9AE20225, 0, 取指针_文本型 (“TrayNotifyWnd”), #NULL)
    变量_9CE20225 ＝ FindWindowExA (变量_9BE20225, 0, 取指针_文本型 (“SysPager”), #NULL)
    .如果 (变量_9CE20225 ≠ 0)
        变量_9DE20225 ＝ FindWindowExA (变量_9CE20225, 0, 取指针_文本型 (“ToolbarWindow32”), #NULL)
    .否则
        变量_9DE20225 ＝ FindWindowExA (变量_9BE20225, 0, 取指针_文本型 (“ToolbarWindow32”), #NULL)
    .如果结束
    .如果真 (变量_9DE20225 ≠ 0)
        GetWindowRect (变量_9DE20225, 变量_9EE20225)
        变量_9FE20225 ＝ 变量_9EE20225.右边 － 变量_9EE20225.左边
        变量_A0E20225 ＝ 变量_9EE20225.底边 － 变量_9EE20225.顶边
        .变量循环首 (1, 变量_9FE20225, 1, 变量_A1E20225)
            SendMessageA (变量_9DE20225, #<?未知本地类型?>, 0, 合并整数 (变量_A1E20225, 变量_A0E20225 ÷ 2))
        .变量循环尾 ()
    .如果真结束
    

.子程序 _Isx64, 逻辑型
    .局部变量 变量_AC9B0225, 整数型
    .局部变量 变量_AD9B0225, 整数型

    变量_AC9B0225 ＝ GetProcAddress (GetModuleHandleA (“kernel32”), “IsWow64Process”)
    .如果真 (变量_AC9B0225 ＝ 0)
        返回 (假)
    .如果真结束
    DLL_IsWow64Process (-1, 变量_AD9B0225)
    返回 (变量_AD9B0225 ≠ 0)

.子程序 _RefreshTaskbarIcon
    .局部变量 变量_AE9B0225, 整数型

    .判断开始 (类变量_F29B0215 ＝ 6)
        变量_AE9B0225 ＝ _FindTrayWnd ()
        .如果真 (变量_AE9B0225 ＞ 0)
            _EnumNotifyWindow (变量_AE9B0225)
        .如果真结束
        
    .判断 (类变量_F29B0215 ＞ 6 或 (类变量_F29B0215 ＝ 10 且 类变量_BEE20215 ＝ 0))
        变量_AE9B0225 ＝ _FindTrayWnd ()
        .如果真 (变量_AE9B0225 ＞ 0)
            _EnumNotifyWindow (变量_AE9B0225)
        .如果真结束
        
        变量_AE9B0225 ＝ _FindNotifyIconOverflowWindow ()
        .如果真 (变量_AE9B0225 ＞ 0)
            _EnumNotifyWindow (变量_AE9B0225)
        .如果真结束
        
    .默认
        返回 ()
    .判断结束
    

.子程序 _EnumNotifyWindow
    .参数 变量_AF9B0225, 整数型
    .局部变量 变量_B09B0225, 整数型
    .局部变量 变量_B19B0225, 整数型
    .局部变量 变量_B29B0225, 整数型
    .局部变量 变量_B39B0225, 整数型
    .局部变量 变量_B49B0225, 整数型
    .局部变量 变量_B59B0225, 自定义_009C0241
    .局部变量 变量_B69B0225, 字节集
    .局部变量 变量_B79B0225, 自定义_089C0241
    .局部变量 变量_B89B0225, 自定义_0E9C0241
    .局部变量 变量_8FE20225, 自定义_82E40141

    变量_B39B0225 ＝ SendMessageA (变量_AF9B0225, #TB_BUTTONCOUNT, 0, 0)
    .如果真 (变量_B39B0225 ＞ 0)
        GetWindowThreadProcessId (变量_AF9B0225, 变量_B09B0225)
        .如果真 (变量_B09B0225 ＞ 0)
            变量_B19B0225 ＝ OpenProcess (#PROCESS_ALL_ACCESS, 0, 变量_B09B0225)
            .如果真 (变量_B19B0225 ≠ 0)
                变量_B29B0225 ＝ DLL_VirtualAllocEx (变量_B19B0225, 0, 4096, #MEM_COMMIT, #PAGE_READWRITE)
                变量_B69B0225 ＝ 取空白字节集 (1024)
                .变量循环首 (变量_B39B0225 － 1, 0, -1, 变量_B49B0225)
                    SendMessageA (变量_AF9B0225, #TB_GETBUTTON, 变量_B49B0225, 变量_B29B0225)
                    DLL_ReadProcessMemory3 (变量_B19B0225, 变量_B29B0225, 变量_B59B0225, 24, 0)
                    
                    
                    .如果真 (变量_B59B0225.成员_069C0235 ≠ -1)
                        DLL_ReadProcessMemory2 (变量_B19B0225, 变量_B59B0225.成员_069C0235, 变量_B69B0225, 1024, 0)
                        DLL_ReadProcessMemory (变量_B19B0225, 变量_B59B0225.成员_069C0235, 变量_B79B0225, 24, 0)
                        
                        
                        
                        变量_B89B0225.成员_0F9C0235 ＝ 变量_B79B0225.成员_099C0235
                        .如果真 (IsWindow (变量_B89B0225.成员_0F9C0235) ＝ 0)
                            
                            SendMessageA (变量_AF9B0225, #TB_DELETEBUTTON, 变量_B49B0225, 1)
                        .如果真结束
                        变量_B89B0225.成员_109C0235 ＝ 变量_B59B0225.成员_029C0235
                        变量_B89B0225.成员_119C0235 ＝ 编码_Unicode到Ansi (取字节集中间 (变量_B69B0225, 25 ＋ 类变量_F59B0215, 520))
                        变量_B89B0225.成员_129C0235 ＝ 编码_Unicode到Ansi (取字节集中间 (变量_B69B0225, 25 ＋ 520 ＋ 类变量_F59B0215, 260))
                        
                    .如果真结束
                    
                .变量循环尾 ()
                
                DLL_VirtualFreeEx (变量_B19B0225, 变量_B29B0225, 4096, #MEM_RELEASE)
                CloseHandle (变量_B19B0225)
                
                变量_8FE20225.成员_84E40135 ＝ 488
                Shell_NotifyIcon (#<?未知本地类型?>, 变量_8FE20225)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    

.子程序 _FindTrayWnd, 整数型
    .局部变量 变量_BF9B0225, 整数型

    变量_BF9B0225 ＝ FindWindowA (“Shell_TrayWnd”, 字符 (0))
    .如果真 (变量_BF9B0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_BF9B0225 ＝ FindWindowExA (变量_BF9B0225, 0, 取指针文本_ (“TrayNotifyWnd”), 0)
    .如果真 (变量_BF9B0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_BF9B0225 ＝ FindWindowExA (变量_BF9B0225, 0, 取指针文本_ (“SysPager”), 0)
    .如果真 (变量_BF9B0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_BF9B0225 ＝ FindWindowExA (变量_BF9B0225, 0, 取指针文本_ (“ToolbarWindow32”), 0)
    .如果真 (变量_BF9B0225 ＝ 0)
        返回 (0)
    .如果真结束
    返回 (变量_BF9B0225)

.子程序 _FindNotifyIconOverflowWindow, 整数型
    .局部变量 变量_C09B0225, 整数型

    变量_C09B0225 ＝ FindWindowA (“NotifyIconOverflowWindow”, 字符 (0))
    .如果真 (变量_C09B0225 ＝ 0)
        返回 (0)
    .如果真结束
    变量_C09B0225 ＝ FindWindowExA (变量_C09B0225, 0, 取指针文本_ (“ToolbarWindow32”), 0)
    .如果真 (变量_C09B0225 ＝ 0)
        返回 (0)
    .如果真结束
    返回 (变量_C09B0225)

.子程序 _OsVersion, 整数型
    置入代码 ({ 83, 49, 192, 100, 139, 29, 24, 0, 0, 0, 100, 139, 13, 48, 0, 0, 0, 133, 201, 121, 32, 185, 0, 0, 83, 0, 57, 75, 88, 117, 4, 176, 1, 235, 113, 57, 75, 84, 117, 4, 176, 2, 235, 104, 57, 75, 124, 117, 99, 176, 3, 235, 95, 139, 153, 168, 0, 0, 0, 139, 137, 164, 0, 0, 0, 131, 249, 4, 119, 4, 176, 4, 235, 74, 131, 249, 5, 117, 27, 131, 251, 0, 117, 4, 176, 5, 235, 60, 131, 251, 1, 117, 4, 176, 6, 235, 51, 131, 251, 2, 117, 4, 176, 7, 235, 42, 131, 249, 6, 117, 7, 131, 251, 0, 117, 4, 176, 8, 235, 28, 131, 251, 1, 117, 2, 176, 9, 131, 251, 2, 117, 2, 176, 10, 131, 251, 3, 117, 2, 176, 11, 131, 251, 4, 117, 2, 176, 12, 91, 201, 195 })
    返回 (0)

.子程序 系统_取网卡信息, 整数型, 公开, 本源码由 【剩下我de孩子气】提供
    .参数 网卡信息, 精易_网卡信息, 参考 数组
    .局部变量 变量_5F800225, 整数型
    .局部变量 变量_60800225, 自定义_CA750141
    .局部变量 变量_61800225, 字节集
    .局部变量 变量_62800225, 整数型
    .局部变量 变量_63800225, 整数型
    .局部变量 变量_64800225, 文本型
    .局部变量 变量_65800225, 文本型
    .局部变量 变量_66800225, 自定义_93800241
    .局部变量 变量_67800225, 精易_网卡信息
    .局部变量 变量_68800225, 整数型
    .局部变量 变量_69800225, 自定义_98800241
    .局部变量 变量_6A800225, 字节集
    .局部变量 变量_6B800225, 整数型

    重定义数组 (网卡信息, 假, 0)
    DLL_GetAdaptersInfo ({ 0 }, 变量_5F800225)
    变量_61800225 ＝ 取空白字节集 (变量_5F800225)
    变量_62800225 ＝ DLL_lstrcpynA2 (变量_61800225, 变量_61800225, 0)
    .如果真 (DLL_GetAdaptersInfo (变量_61800225, 变量_5F800225) ＝ 0)
        .循环判断首 ()
            DLL_RtlMoveMemory12 (变量_60800225, 变量_62800225, 640)
            变量_67800225.名称 ＝ 到文本 (变量_60800225.成员_CF750135)
            变量_64800225 ＝ “”
            .计次循环首 (变量_60800225.成员_D0750135, 变量_63800225)
                变量_65800225 ＝ 取十六进制文本 (变量_60800225.成员_D1750135 [变量_63800225])
                变量_64800225 ＝ 变量_64800225 ＋ 选择 (取文本长度 (变量_65800225) ＝ 1, “0” ＋ 变量_65800225, 变量_65800225) ＋ “-”
                
            .计次循环尾 ()
            变量_64800225 ＝ 取文本左边 (变量_64800225, 取文本长度 (变量_64800225) － 1)
            变量_67800225.Mac ＝ 变量_64800225
            CopyMemory_ias (变量_66800225, 变量_60800225.成员_D6750135, 40)
            变量_67800225.Ip ＝ 到文本 (变量_66800225.成员_95800235)
            变量_67800225.掩码 ＝ 到文本 (变量_66800225.成员_96800235)
            CopyMemory_ias (变量_66800225, 变量_60800225.成员_D7750135, 40)
            变量_67800225.网关 ＝ 到文本 (变量_66800225.成员_95800235)
            变量_67800225.连接名称 ＝ 取文本注册项 (4, “SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\” ＋ 到文本 (变量_60800225.成员_CE750135) ＋ “\Connection\Name”, )
            变量_68800225 ＝ DLL_GetPerAdapterInfo (变量_60800225.成员_D2750135, 变量_6A800225, 变量_68800225)
            变量_6A800225 ＝ 取空白字节集 (变量_68800225)
            变量_6B800225 ＝ DLL_lstrcpynA2 (变量_6A800225, 变量_6A800225, 0)
            GetDnsServer (变量_60800225.成员_D2750135, 变量_67800225.DNS1, 变量_67800225.DNS2)
            
            ' .如果 (DLL_GetPerAdapterInfo (变量_60800225.成员_D2750135, 变量_6A800225, 变量_68800225) ＝ 0)
                
                
                
            ' .否则
                
                
            ' .如果结束
            加入成员 (网卡信息, 变量_67800225)
            变量_62800225 ＝ 变量_60800225.成员_CC750135
        .循环判断尾 (变量_62800225 ≠ 0)
        返回 (取数组成员数 (网卡信息))
    .如果真结束
    返回 (0)
    

.子程序 系统_添加计划任务, 文本型, 公开, 向系统中增加一个计划任务，该操作在WIN7上面需要管理员权限
    .参数 计划任务名, 文本型, , 用于显示在系统中的计划任务的名称
    .参数 计划任务执行文件路径, 文本型, , 执行文件的路径，可以EXE也可以BAT
    .参数 计划任务执行方式, 整数型, , 方式有以下几种：6=一次，7=在系统启动时，8=在用户登录时，9=在系统空闲时。
    .参数 执行任务的用户名, 文本型, 可空, 需要执行该任务的用户名。如果不需要可以留空
    .参数 执行任务的密码, 文本型, 可空, 用户名对应的密码。如果不需要可以留空。如果是已解锁电脑则无需输入密码
    .参数 任务执行时间, 日期时间型, 可空, 如果执行方式是一次，则必须有该值。该值为日期时间型
    .参数 是否强制创建, 逻辑型, 可空, 如果为真，则忽略任何错误，强制创建任务
    .局部变量 变量_517E0225, 文本型
    .局部变量 变量_527E0225, 文本型
    .局部变量 变量_537E0225, 文本型
    .局部变量 变量_547E0225, 文本型
    .局部变量 变量_557E0225, 文本型
    .局部变量 变量_577E0225, 文本型
    .局部变量 变量_587E0225, 文本型
    .局部变量 变量_597E0225, 整数型
    .局部变量 变量_A1810225, 文本型

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    .如果真 (计划任务执行方式 ＞ 9 或 计划任务执行方式 ＜ 6)
        返回 (“计划任务执行方式不正确，请重新填写”)
    .如果真结束
    
    变量_527E0225 ＝ 多项选择 (计划任务执行方式 － 5, “ONCE”, “ONSTART”, “ONLOGON”, “ONIDLE”)
    
    .如果真 (执行任务的用户名 ≠ “”)
        变量_537E0225 ＝ “ /RU ” ＋ #引号 ＋ 执行任务的用户名 ＋ #引号
    .如果真结束
    
    .如果真 (执行任务的密码 ≠ “”)
        变量_547E0225 ＝ “ /RP ” ＋ #引号 ＋ 执行任务的密码 ＋ #引号
    .如果真结束
    
    .如果真 (计划任务执行方式 ＝ 6)
        变量_557E0225 ＝ “ /SD ” ＋ 时间_到文本 (任务执行时间, 2, 1) ＋ “ /ST ” ＋ 时间_格式化 (任务执行时间, , “hh:mm”, 真)
    .如果真结束
    
    变量_517E0225 ＝ “SCHTASKS /Create  ” ＋ 变量_537E0225 ＋ 变量_547E0225 ＋ “ /SC ” ＋ 变量_527E0225 ＋ “ /TN ” ＋ #引号 ＋ 计划任务名 ＋ #引号 ＋ “ /TR ” ＋ #引号 ＋ 计划任务执行文件路径 ＋ #引号 ＋ 变量_557E0225 ＋ 选择 (是否强制创建, “ /F”, “”)
    变量_A1810225 ＝ 系统_取DOS执行结果 (“cmd.exe /c ” ＋ 变量_517E0225)
    
    返回 (变量_A1810225)

.子程序 系统_删除计划任务, 文本型, 公开, 删除指定名计划任务
    .参数 计划任务名, 文本型
    .局部变量 变量_5B7E0225, 文本型
    .局部变量 变量_A5810225, 文本型

    变量_5B7E0225 ＝ “SCHTASKS /Delete ” ＋ “ /TN ” ＋ #引号 ＋ 计划任务名 ＋ #引号 ＋ “ /F”
    变量_A5810225 ＝ 系统_取DOS执行结果 (“cmd.exe /c ” ＋ 变量_5B7E0225)
    返回 (变量_A5810225)

.子程序 系统_修改用户名, 逻辑型, 公开, 修改系统用户名
    .参数 新用户名, 文本型
    .局部变量 变量_E87D0225, 逻辑型

    变量_E87D0225 ＝ 运行 (“cmd /c reg add ” ＋ #引号 ＋ “ HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\ComputerName\ActiveComputerName” ＋ #引号 ＋ “ /v ComputerName /t reg_sz /d ” ＋ 删首尾空 (新用户名) ＋ “ /f >nul 2>nul”, 真, 1)
    .如果真 (变量_E87D0225 ＝ 假)
        返回 (假)
    .如果真结束
    变量_E87D0225 ＝ 运行 (“cmd /c reg add ” ＋ #引号 ＋ “HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters” ＋ #引号 ＋ “ /v ” ＋ #引号 ＋ “NV Hostname” ＋ #引号 ＋ “ /t reg_sz /d ” ＋ 删首尾空 (新用户名) ＋ “ /f >nul 2>nul”, 真, 1)
    .如果真 (变量_E87D0225 ＝ 假)
        返回 (假)
    .如果真结束
    
    变量_E87D0225 ＝ 运行 (“cmd /c reg add ” ＋ #引号 ＋ “HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters” ＋ #引号 ＋ “ /v Hostname /t reg_sz /d ” ＋ 删首尾空 (新用户名) ＋ “ /f >nul 2>nul”, 真, 1)
    .如果真 (变量_E87D0225 ＝ 假)
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 系统_创建还原点, 整数型, 公开, 创建系统还原点，成功返回还原点ID，失败返回Null，系统还原服务必须开启或还原服务打开，更新信息请参考[控制面板—>系统属性->系统保护页。
    .参数 描述, 文本型
    .参数 类型, 整数型, 可空, 可为空，默认即程序安装，参数 1＝程序安装；2＝程序卸载；3＝驱动安装；4＝系统。
    .局部变量 变量_B17D0225, 自定义_4DD30141
    .局部变量 变量_B27D0225, 自定义_4ED30141
    .局部变量 变量_B37D0225, 逻辑型

    .判断开始 (类型 ＝ 1)
        类型 ＝ 0
    .判断 (类型 ＝ 2)
        类型 ＝ 1
    .判断 (类型 ＝ 3)
        类型 ＝ 10
    .判断 (类型 ＝ 4)
        类型 ＝ 12
    .默认
        
    .判断结束
    变量_B17D0225.成员_4FD30135 ＝ 100
    变量_B17D0225.成员_50D30135 ＝ 类型
    
    DLL_lstrcpyA4 (变量_B17D0225.成员_52D30135, 描述)
    变量_B37D0225 ＝ DLL_SRSetRestorePointA (变量_B17D0225, 变量_B27D0225)
    .如果真 (变量_B37D0225)
        返回 (变量_B27D0225.成员_54D30135)
    .如果真结束
    返回 (0)

.子程序 系统_删除还原点, 逻辑型, 公开, 删除指定还原点，成功返回真，失败返回假。
    .参数 还原点ID, 长整数型, , 由“创建还原点()”返回。

    返回 (DLL_SRRemoveRestorePoint (还原点ID) ＝ 0)

.子程序 系统_加入域, 逻辑型, 公开, 加入指定系统域，成功返回真，失败返回假，重启后生效。
    .参数 域名称, 文本型
    .参数 用户名, 文本型
    .参数 密码, 文本型

    类变量_AB7D0215 ＝ DLL_NetJoinDomain (0, 编码_Ansi到Unicode (域名称), 0, 编码_Ansi到Unicode (用户名 ＋ “@” ＋ 域名称), 编码_Ansi到Unicode (密码), 位或 (1, 2, 32))
    返回 (类变量_AB7D0215 ＝ 0)

.子程序 系统_退出域, 逻辑型, 公开, 退出指定系统域，成功返回真，失败返回假，重启后生效。
    .参数 域名称, 文本型
    .参数 用户名, 文本型
    .参数 密码, 文本型

    类变量_AB7D0215 ＝ DLL_NetUnjoinDomain (0, 编码_Ansi到Unicode (用户名 ＋ “@” ＋ 域名称), 编码_Ansi到Unicode (密码), 4)
    返回 (类变量_AB7D0215 ＝ 0)

.子程序 系统_是否为默认字体, 逻辑型, 公开, 返回屏幕字体大小，如果字体不是较小默认值，返回假
    .局部变量 变量_025F0225, 整数型
    .局部变量 变量_035F0225, 整数型
    .局部变量 变量_045F0225, 整数型
    .局部变量 变量_055F0225, 自定义_DF5E0241
    .局部变量 变量_065F0225, 逻辑型

    变量_065F0225 ＝ 真
    变量_035F0225 ＝ DLL_GetDesktopWindow ()
    变量_025F0225 ＝ DLL_GetWindowDC (变量_035F0225)
    .如果真 (变量_025F0225 ≠ 0)
        变量_045F0225 ＝ DLL_SetMapMode (变量_025F0225, 1)
        DLL_GetTextMetricsA (变量_025F0225, 变量_055F0225)
        变量_045F0225 ＝ DLL_SetMapMode (变量_025F0225, 变量_045F0225)
        DLL_ReleaseDC (变量_035F0225, 变量_025F0225)
    .如果真结束
    .如果真 (变量_055F0225.成员_E05E0235 ＞ 16)
        变量_065F0225 ＝ 假
    .如果真结束
    返回 (变量_065F0225)

.子程序 系统_临时字体_安装, 整数型, 公开, 失败返回0；如果函数调用成功，则返回值为增加的字体数   安装字体后，请勿删除字体文件，否则不能正常显示文字
    .参数 字体路径, 文本型, , 含有效字体的文件名,字体资源文件(.FON)、未加工位图字体(.FNT)、未加工TrueType(.TTF)或TrueType资源(.FON)
    .局部变量 变量_59C30125, 整数型

    变量_59C30125 ＝ AddFontResourceA (字体路径)
    
    SendMessageTimeoutA (#<?未知本地类型?>, 0, #NULL, #NULL, #<?未知本地类型?>, 5000, #NULL)
    返回 (变量_59C30125)

.子程序 系统_临时字体_卸载, 逻辑型, 公开, 通常情况下，只卸载由“系统_安装字体”安装的字体资源
    .参数 字体路径, 文本型, , 含有效字体资源的文件名
    .局部变量 变量_5BC30125, 逻辑型

    变量_5BC30125 ＝ RemoveFontResourceA (字体路径)
    
    SendMessageTimeoutA (#<?未知本地类型?>, 0, #NULL, #NULL, #<?未知本地类型?>, 5000, #NULL)
    返回 (变量_5BC30125)

.子程序 系统_取字体名, 文本型, 公开, 获取字体名称，如“simsun.ttc”显示字体名称为“宋体”。
    .参数 字体文件名, 文本型, , 可以输入字体文件名，如“STXINWEI.TTF”,默认在系统字体目录下搜索该文件。
    .局部变量 变量_66D30125, 文本型
    .局部变量 变量_67D30125, 文本型
    .局部变量 变量_68D30125, 自定义_75D30141
    .局部变量 变量_69D30125, 整数型
    .局部变量 变量_6AD30125, 文本型
    .局部变量 变量_6CD30125, 逻辑型

    变量_66D30125 ＝ 字体文件名
    变量_6CD30125 ＝ 文件是否存在 (变量_66D30125)
    .如果 (变量_6CD30125)
        AddFontResourceA (变量_66D30125)
    .否则
        变量_67D30125 ＝ 取空白文本 (256)
        SHGetSpecialFolderPathA (0, 变量_67D30125, 20, 假)
        变量_66D30125 ＝ 变量_67D30125 ＋ “\” ＋ 变量_66D30125
    .如果结束
    DLL_GetFontResourceInfoW (编码_Ansi到Unicode (变量_66D30125, ), 变量_69D30125, 变量_68D30125, 2)
    DLL_GetFontResourceInfoW (编码_Ansi到Unicode (变量_66D30125, ), 变量_69D30125, 变量_68D30125, 2)
    变量_6AD30125 ＝ 编码_Unicode到Ansi (到字节集 (变量_68D30125.成员_77D30135))
    .如果真 (变量_6CD30125)
        RemoveFontResourceA (变量_66D30125)
    .如果真结束
    返回 (变量_6AD30125)

.子程序 系统_取宽带线路, 整数型, 公开, 返回电信或网通,1代表电信,2代表其它(如:网通,铁通等等)
    .参数 IP地址, 文本型, 可空, 可空，为空将查询本机的线路。请填入你要查询的IP地址  如：119.147.106.250
    .参数 线路, 文本型, 可空, 请提供一个文本变量,用于存放宽带的线路，如：电信或网通。
    .参数 所在地址, 文本型, 可空, 请提供一个文本变量,用于存放IP所在地的地址，如：中国广东广州。
    .局部变量 变量_E3A80125, 文本型
    .局部变量 变量_E4A80125, 文本型

    变量_E3A80125 ＝ 编码_usc2到ansi (编码_Utf8到Ansi (网页_访问 (“https://api-v3.speedtest.cn/ip?ip=” ＋ IP地址, , , , , , , , , , , , , )))
    .如果真 (是否为空 (线路) ＝ 假)
        线路 ＝ 文本_取出中间文本 (变量_E3A80125, “#引号isp#引号:#引号”, #引号, , )
    .如果真结束
    .如果真 (是否为空 (所在地址) ＝ 假)
        所在地址 ＝ 文本_取出中间文本 (变量_E3A80125, “#引号country#引号:#引号”, #引号, , ) ＋ 文本_取出中间文本 (变量_E3A80125, “#引号province#引号:#引号”, #引号, , ) ＋ 文本_取出中间文本 (变量_E3A80125, “#引号city#引号:#引号”, #引号, , )
    .如果真结束
    .如果真 (寻找文本 (变量_E3A80125, “电信”, , 假) ≠ -1)
        返回 (1)
    .如果真结束
    返回 (2)

.子程序 系统_取空闲时间, 整数型, 公开, 返回单位为毫秒
    .局部变量 变量_0B760125, 自定义_07760141

    变量_0B760125.成员_08760135 ＝ 8
    DLL_GetLastInputInfo (变量_0B760125)
    返回 (DLL_GetTickCount () － 变量_0B760125.成员_09760135)

.子程序 系统_检测host, 逻辑型, 公开, 返回真则host已经被修改
    .参数 网址1, 文本型
    .参数 网址2, 文本型, 可空
    .参数 网址3, 文本型, 可空
    .局部变量 变量_26C20125, 文本型

    变量_26C20125 ＝ 到文本 (读入文件 (目录_取system32目录 () ＋ “Drivers\etc\hosts”))
    .判断开始 (寻找文本 (变量_26C20125, 网址1, , 真) ≠ -1)
        返回 (真)
    .判断 (寻找文本 (变量_26C20125, 网址2, , 真) ≠ -1 且 网址2 ≠ “”)
        返回 (真)
    .判断 (寻找文本 (变量_26C20125, 网址3, , 真) ≠ -1 且 网址3 ≠ “”)
        返回 (真)
    .默认
        返回 (假)
    .判断结束
    

.子程序 系统_取星座, 文本型, 公开, 返回一个日期所处于哪一个星座时段
    .参数 日期, 日期时间型

    
    
    
    
    
    
    
    
    
    
    
    
    .判断开始 (取月份 (日期) ＝ 1 且 取日 (日期) ≥ 21 或 (取月份 (日期) ＝ 2 且 取日 (日期) ≤ 19))
        返回 (“水瓶座”)
    .判断 (取月份 (日期) ＝ 2 且 取日 (日期) ≥ 20 或 (取月份 (日期) ＝ 3 且 取日 (日期) ≤ 20))
        返回 (“双鱼座”)
    .判断 (取月份 (日期) ＝ 3 且 取日 (日期) ≥ 21 或 (取月份 (日期) ＝ 4 且 取日 (日期) ≤ 20))
        返回 (“白羊座”)
    .判断 (取月份 (日期) ＝ 4 且 取日 (日期) ≥ 21 或 (取月份 (日期) ＝ 5 且 取日 (日期) ≤ 21))
        返回 (“金牛座”)
    .判断 (取月份 (日期) ＝ 5 且 取日 (日期) ≥ 22 或 (取月份 (日期) ＝ 6 且 取日 (日期) ≤ 21))
        返回 (“双子座”)
    .判断 (取月份 (日期) ＝ 6 且 取日 (日期) ≥ 22 或 (取月份 (日期) ＝ 7 且 取日 (日期) ≤ 22))
        返回 (“巨蟹座”)
    .判断 (取月份 (日期) ＝ 7 且 取日 (日期) ≥ 23 或 (取月份 (日期) ＝ 8 且 取日 (日期) ≤ 23))
        返回 (“狮子座”)
    .判断 (取月份 (日期) ＝ 8 且 取日 (日期) ≥ 24 或 (取月份 (日期) ＝ 9 且 取日 (日期) ≤ 23))
        返回 (“处女座”)
    .判断 (取月份 (日期) ＝ 9 且 取日 (日期) ≥ 24 或 (取月份 (日期) ＝ 10 且 取日 (日期) ≤ 23))
        返回 (“天秤座”)
    .判断 (取月份 (日期) ＝ 10 且 取日 (日期) ≥ 24 或 (取月份 (日期) ＝ 11 且 取日 (日期) ≤ 22))
        返回 (“天蝎座”)
    .判断 (取月份 (日期) ＝ 11 且 取日 (日期) ≥ 23 或 (取月份 (日期) ＝ 12 且 取日 (日期) ≤ 21))
        返回 (“射手座”)
    .判断 (取月份 (日期) ＝ 12 且 取日 (日期) ≥ 22 或 (取月份 (日期) ＝ 1 且 取日 (日期) ≤ 20))
        返回 (“魔羯座”)
    .默认
        返回 (“”)
    .判断结束
    

.子程序 系统_重启, , 公开, 重启电脑
    进程_提升权限 (, #关机)
    ExitWindowsEx (#<?未知本地类型?>, 0)

.子程序 系统_强制重启, , 公开, 强制重启电脑
    进程_提升权限 (, #关机)
    ExitWindowsEx (位或 (#<?未知本地类型?>, #<?未知本地类型?>), 65535)

.子程序 系统_刷新屏幕, , 公开, 刷新桌面
    运行 (“RunDll32.exe USER32.DLL,UpdatePerUserSystemParameters”, 假, )

.子程序 系统_注销, , 公开, 注销当前用户
    ExitWindowsEx (#<?未知本地类型?>, 65535)

.子程序 系统_强制注销, , 公开, 强制注销当前用户
    ExitWindowsEx (位或 (#<?未知本地类型?>, #<?未知本地类型?>), 65535)

.子程序 系统_关机, , 公开, 关闭电脑
    进程_提升权限 (, #关机)
    ExitWindowsEx (#<?未知本地类型?>, 65535)

.子程序 系统_强制关机, , 公开, 强制关闭电脑
    进程_提升权限 (, #关机)
    ExitWindowsEx (位或 (#<?未知本地类型?>, #<?未知本地类型?>), 65535)

.子程序 系统_关电源, , 公开, 无返回值，实现快速关机。
    .局部变量 变量_BBD30125, 整数型

    变量_BBD30125 ＝ RtlAdjustPrivilege (#<?未知本地类型?>, 1, 1, #NULL)
    .如果真 (变量_BBD30125 ＝ -1073741700)
        变量_BBD30125 ＝ RtlAdjustPrivilege (#<?未知本地类型?>, 1, 0, #NULL)
    .如果真结束
    DLL_ZwShutdownSystem (2)

.子程序 系统_以管理员模式创建进程, 逻辑型, 公开, 在Vista/Win7及更高系统上,以管理员模式创建进程,成功返回真,失败返回假 警告：请勿放在 窗口创建完毕/首次被激活/死循环中
    .参数 进程路径, 文本型, 可空, 留空默认启动自身进程
    .参数 运行参数, 文本型, 可空, 命令行参数
    .参数 超时间隔, 整数型, 可空, 以毫秒为单位。如果指定了非零值，则函数会等待，直到对象发出信号或间隔结束。
    .参数 指定窗口的显示状态, 整数型, 可空, #SW_*
    .局部变量 变量_B00E0325, 整数型

    .如果 (是否为空 (指定窗口的显示状态) 或 指定窗口的显示状态 ＜ #SW_HIDE 或 指定窗口的显示状态 ＞ #SW_FORCEMINIMIZE)
        变量_B00E0325 ＝ #SW_SHOWDEFAULT
    .否则
        变量_B00E0325 ＝ 指定窗口的显示状态
    .如果结束
    返回 (系统_以管理员模式创建进程W (编码_Ansi到Unicode (进程路径, ), 编码_Ansi到Unicode (运行参数, ), 超时间隔, 变量_B00E0325))

.子程序 系统_以管理员模式创建进程W, 逻辑型, 公开, 以管理员模式创建进程
    .参数 进程路径, 字节集, 可空, 留空默认启动自身进程
    .参数 命令行, 字节集, 可空, 命令行参数
    .参数 超时间隔, 整数型, 可空, 以毫秒为单位。如果指定了非零值，则函数会等待，直到对象发出信号或间隔结束。
    .参数 指定窗口的显示状态, 整数型, 可空, #SW_*
    .局部变量 变量_A9EC0225, 自定义_2CE20241
    .局部变量 变量_BCEC0225, 字节集

    变量_A9EC0225.成员_2DE20235 ＝ 60
    .如果 (进程路径 ＝ { })
        变量_BCEC0225 ＝ 删除Unicode结尾空白字节 (目录_取当前目录W (), )
        变量_A9EC0225.成员_31E20235 ＝ 变量_BCEC0225 ＋ 编码_Ansi到Unicode (“\” ＋ 取执行文件名 (), )
    .否则
        变量_A9EC0225.成员_31E20235 ＝ 进程路径
    .如果结束
    变量_A9EC0225.成员_32E20235 ＝ 命令行
    变量_A9EC0225.成员_30E20235 ＝ 编码_Ansi到Unicode (“runas”, )
    .如果 (超时间隔 ≤ 0)
        变量_A9EC0225.成员_2EE20235 ＝ 位或 (#<?未知本地类型?>, #<?未知本地类型?>)
    .否则
        变量_A9EC0225.成员_2EE20235 ＝ 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
    .如果结束
    .如果 (是否为空 (指定窗口的显示状态) 或 指定窗口的显示状态 ＜ #SW_HIDE 或 指定窗口的显示状态 ＞ #SW_FORCEMINIMIZE)
        变量_A9EC0225.成员_34E20235 ＝ #SW_SHOWDEFAULT
    .否则
        变量_A9EC0225.成员_34E20235 ＝ 指定窗口的显示状态
    .如果结束
    .如果真 (DLL_ShellExecuteExW (变量_A9EC0225) ＝ 假)
        返回 (假)
    .如果真结束
    .如果真 (变量_A9EC0225.成员_3BE20235 ≠ #NULL)
        .如果真 (WaitForSingleObject (变量_A9EC0225.成员_3BE20235, 超时间隔) ＝ #<?未知本地类型?>)
            TerminateProcess (变量_A9EC0225.成员_3BE20235, 0)
        .如果真结束
        CloseHandle (变量_A9EC0225.成员_3BE20235)
    .如果真结束
    返回 (真)

.子程序 系统_光驱开关过程
    .参数 变量_6A200125, 文本型
    .参数 变量_6B200125, 逻辑型
    .局部变量 变量_6C200125, 自定义_5E200141
    .局部变量 变量_6D200125, 自定义_5F200141
    .局部变量 变量_6E200125, 文本型

    变量_6C200125.成员_62200135 ＝ “cdaudio”
    变量_6E200125 ＝ 到大写 (取文本左边 (变量_6A200125, 1))
    .如果真 (取反 (取代码 (变量_6E200125, ) ≥ 65 且 取代码 (变量_6E200125, ) ≤ 90))
        返回 ()
    .如果真结束
    变量_6C200125.成员_63200135 ＝ 变量_6E200125 ＋ “:”
    .如果真 (DLL_mciSendCommandA3 (0, 2051, 8961, 变量_6C200125) ＝ 0)
        .如果 (变量_6B200125)
            DLL_mciSendCommandA2 (变量_6C200125.成员_61200135, 2061, 16640, 变量_6D200125)
        .否则
            DLL_mciSendCommandA2 (变量_6C200125.成员_61200135, 2061, 16896, 变量_6D200125)
        .如果结束
        
    .如果真结束
    DLL_mciSendCommandA (变量_6C200125.成员_61200135, 2052, 0, 0)

.子程序 系统_显示关机对话框, , 公开, 调用系统的关机对话框
    .参数 WIN系列系统, 逻辑型, 可空, 是否WIN7以上的系统类型

    .判断开始 (WIN系列系统)
        DLL_#602 (0, 0)
    .默认
        DLL_#60 (0)
    .判断结束
    

.子程序 系统_开启屏保, 逻辑型, 公开, 开启系统屏幕保护
    .参数 延时多少秒开始, 整数型, , 延时几秒后开始屏保

    返回 (SystemParametersInfoA (15, 延时多少秒开始, 0, 2))

.子程序 系统_注册组件, 逻辑型, 公开, DllRegisterServer
    .参数 组件路径, 文本型
    .局部变量 变量_E3C10125, 文本型
    .局部变量 变量_E4C10125, 整数型
    .局部变量 变量_E5C10125, 整数型
    .局部变量 变量_E6C10125, 整数型

    变量_E3C10125 ＝ 取空白文本 (255)
    GetShortPathNameA (组件路径, 变量_E3C10125, 255)
    
    变量_E4C10125 ＝ LoadLibraryA (变量_E3C10125)
    .如果真 (变量_E4C10125 ＝ 0)
        返回 (假)
    .如果真结束
    
    变量_E5C10125 ＝ GetProcAddress (变量_E4C10125, “DllRegisterServer”)
    .如果真 (变量_E5C10125 ≤ 0)
        FreeLibrary (变量_E4C10125)
        返回 (假)
    .如果真结束
    
    变量_E6C10125 ＝ CallWindowProcA (变量_E5C10125, 0, 0, 0, 0)
    
    FreeLibrary (变量_E4C10125)
    返回 (真)

.子程序 系统_卸载组件, 逻辑型, 公开, DllUnregisterServer
    .参数 组件路径, 文本型
    .局部变量 变量_E8C10125, 整数型
    .局部变量 变量_E9C10125, 整数型
    .局部变量 变量_EAC10125, 整数型

    变量_E8C10125 ＝ LoadLibraryA (组件路径)
    
    .如果真 (变量_E8C10125 ≤ 0)
        返回 (假)
    .如果真结束
    
    变量_E9C10125 ＝ GetProcAddress (变量_E8C10125, “DllUnregisterServer”)
    .如果真 (变量_E9C10125 ≤ 0)
        FreeLibrary (变量_E8C10125)
        返回 (假)
    .如果真结束
    
    变量_EAC10125 ＝ CallWindowProcA (变量_E9C10125, 0, 0, 0, 0)
    
    FreeLibrary (变量_E8C10125)
    返回 (真)

.子程序 系统_显示托盘, , 公开, 显示被隐藏的托盘
    .局部变量 变量_BD290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_BD290125)
    窗口_置控件状态 (变量_BD290125 [2], 真)

.子程序 系统_隐藏托盘, , 公开, 隐藏托盘
    .局部变量 变量_BE290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_BE290125)
    窗口_置控件状态 (变量_BE290125 [2], 假)

.子程序 系统_修改主页, , 公开, 修改IE主页
    .参数 地址, 文本型

    写注册项 (3, “Software\Microsoft\Internet Explorer\Main\Start Page”, 地址)

.子程序 系统_切换用户, , 公开, 切换系统用户
    LockWorkStation ()

.子程序 系统_取主页地址, 文本型, 公开, 取IE主页地址
    .局部变量 变量_98230125, 文本型

    变量_98230125 ＝ 取文本注册项 (3, “Software\Microsoft\Internet Explorer\Main\Start Page”, )
    返回 (变量_98230125)

.子程序 系统_光驱开关, , 公开, 控制光驱的开与关
    .参数 打开关闭, 逻辑型, , 真为打开光驱，假为关闭光驱；
    .局部变量 变量_83200125, 文本型, , "0"
    .局部变量 变量_84200125, 整数型

    系统_光驱查询 (变量_83200125)
    .计次循环首 (取数组成员数 (变量_83200125), 变量_84200125)
        系统_光驱开关过程 (变量_83200125 [变量_84200125], 打开关闭)
    .计次循环尾 ()

.子程序 系统_光驱查询, , 公开, 返回光驱的文本数组，
    .参数 当前光驱, 文本型, 数组, 用来返回光驱的文本数组
    .局部变量 变量_70200125, 整数型

    重定义数组 (当前光驱, 假, 0)
    .计次循环首 (26, 变量_70200125)
        .如果真 (GetDriveTypeA (字符 (64 ＋ 变量_70200125) ＋ “:”) ＝ 5)
            加入成员 (当前光驱, 字符 (64 ＋ 变量_70200125))
        .如果真结束
        
    .计次循环尾 ()

.子程序 系统_处理事件, , 公开, 比普通的处理事件速度要快3倍左右；
    .如果真 (GetInputState () ≠ 0)
        处理事件 ()
    .如果真结束
    

.子程序 系统_处理事件1, , 公开, 暂时转让控制权，以便让 Windows 操作系统有机会处理其它的如用户键盘或鼠标输入等事件。直到操作系统处理并发送完程序队列中的所有事件后，命令才会返回。
    .局部变量 变量_D9D20125, 自定义_FBB90141

    .判断循环首 (DLL_PeekMessageA (变量_D9D20125, 0, 0, 0, 1))
        DLL_TranslateMessage (变量_D9D20125)
        DLL_DispatchMessageA (变量_D9D20125)
    .判断循环尾 ()

.子程序 系统_是否64位操作系统, 逻辑型, 公开, 是返回真，不是返回假
    .局部变量 变量_FBC20125, 整数型
    .局部变量 变量_FCC20125, 整数型
    .局部变量 变量_FDC20125, 文本型
    .局部变量 变量_FEC20125, 整数型

    变量_FBC20125 ＝ GetModuleHandleA (“kernel32.dll”)
    变量_FCC20125 ＝ GetProcAddress (变量_FBC20125, “GetSystemWow64DirectoryA”)
    .如果真 (变量_FCC20125 ＝ 0)
        
        返回 (假)
    .如果真结束
    变量_FDC20125 ＝ 取空白文本 (255)
    变量_FEC20125 ＝ 程序_Call (变量_FCC20125, lstrcpyn_文本型 (变量_FDC20125, 变量_FDC20125, 0), 255)
    返回 (变量_FEC20125 ＞ 0)

.子程序 系统_建立关联, 逻辑型, 公开, 能用于关联程序打开方式及改关联图标，以及取得程序关联等功能。
    .参数 后缀, 文本型, , 要关联的文件后缀，如"*.txt"
    .参数 关联程序, 文本型, 可空, 此后缀所要关联的程序，如"d:\myflash.exe"，会关联用此程序打开，如果为空则默认为本程序
    .参数 关联图标, 文本型, 可空, 关联后此程序的图标，默认为关联程序的第一个图标
    .参数 关联名称, 文本型, 可空, 此为高级项，为关联注册项的名称，可为空，默认为程序名
    .局部变量 变量_4F090125, 文本型
    .局部变量 变量_50090125, 逻辑型
    .局部变量 变量_51090125, 文本型

    .如果真 (是否为空 (关联程序))
        关联程序 ＝ 取运行目录 () ＋ “\” ＋ 取执行文件名 ()
    .如果真结束
    后缀 ＝ 子文本替换 (后缀, “*”, , , , 真)
    后缀 ＝ 子文本替换 (后缀, “.”, , , , 真)
    后缀 ＝ “.” ＋ 后缀 ＋ “\”
    变量_4F090125 ＝ 文件_取文件名 (关联程序)
    .如果 (是否为空 (关联图标))
        变量_51090125 ＝ 关联程序 ＋ “,0”
    .否则
        变量_51090125 ＝ 关联图标
    .如果结束
    
    变量_50090125 ＝ 写注册项 (#根类, 后缀, 变量_4F090125)
    .如果真 (取反 (是否为空 (关联名称)))
        变量_50090125 ＝ 写注册项 (#根类, 后缀 ＋ “Content Type”, 关联名称)
    .如果真结束
    变量_50090125 ＝ 写注册项 (#根类, 变量_4F090125 ＋ “\BrowserFlags”, 8)
    变量_50090125 ＝ 写注册项 (#根类, 变量_4F090125 ＋ “\EditFlags”, 0)
    变量_50090125 ＝ 写注册项 (#根类, 变量_4F090125 ＋ “\DefaultIcon\”, 变量_51090125)
    变量_50090125 ＝ 写注册项 (#根类, 变量_4F090125 ＋ “\shell\”, “open”)
    变量_50090125 ＝ 写注册项 (#根类, 变量_4F090125 ＋ “\shell\open\command\”, 关联程序 ＋ “ ” ＋ #引号 ＋ “%1” ＋ #引号)
    返回 (变量_50090125)

.子程序 系统_运行死慢, , 公开, 拖缓系统运行
    .参数 确认执行, 逻辑型

    .判断循环首 (确认执行)
        快照 (, , )
    .判断循环尾 ()

.子程序 系统_取用户名, 文本型, 公开, 获取当前系统的用户名
    .局部变量 变量_87230125, 文本型

    变量_87230125 ＝ 取空白文本 (50)
    .如果真 (GetUserNameA (变量_87230125, 取文本长度 (变量_87230125)) ≠ 0)
        返回 (变量_87230125)
    .如果真结束
    返回 (“”)

.子程序 系统_取DOS路径, 文本型, 公开, 返回DOS 8.3路径名
    .参数 原路径, 文本型
    .局部变量 变量_C8290125, 文本型
    .局部变量 变量_C9290125, 整数型
    .局部变量 变量_CA290125, 文本型
    .局部变量 变量_CB290125, 文本型
    .局部变量 变量_CC290125, 文本型
    .局部变量 变量_CD290125, 整数型

    变量_C8290125 ＝ 原路径
    变量_C9290125 ＝ 寻找文本 (变量_C8290125, “\”, , 真)
    .判断循环首 (变量_C9290125 ＞ 0)
        变量_CA290125 ＝ 取文本左边 (变量_C8290125, 变量_C9290125)
        .如果 (取文本长度 (变量_CA290125) ＞ 9)
            变量_CC290125 ＝ 变量_CC290125 ＋ 取文本左边 (变量_CA290125, 6) ＋ “~1\”
        .否则
            变量_CC290125 ＝ 变量_CC290125 ＋ 变量_CA290125
        .如果结束
        变量_C8290125 ＝ 取文本右边 (变量_C8290125, 取文本长度 (变量_C8290125) － 变量_C9290125)
        变量_C9290125 ＝ 寻找文本 (变量_C8290125, “\”, , 真)
    .判断循环尾 ()
    变量_CD290125 ＝ 倒找文本 (变量_C8290125, “.”, , 真)
    .如果 (变量_CD290125 ＞ 9)
        变量_CC290125 ＝ 变量_CC290125 ＋ 取文本左边 (变量_C8290125, 6) ＋ “~1.” ＋ 取文本右边 (变量_C8290125, 取文本长度 (变量_C8290125) － 变量_CD290125)
    .否则
        变量_CC290125 ＝ 变量_CC290125 ＋ 变量_C8290125
    .如果结束
    返回 (变量_CC290125)

.子程序 系统_取计算机名, 文本型, 公开, 获取计算机名
    .局部变量 变量_90230125, 文本型

    变量_90230125 ＝ 取空白文本 (50)
    .如果真 (GetComputerNameA (变量_90230125, 取文本长度 (变量_90230125)) ≠ 0)
        返回 (变量_90230125)
    .如果真结束
    返回 (“”)

.子程序 系统_输入法枚举, 整数型
    .参数 变量_A1200125, 文本型, 参考 数组
    .参数 变量_A2200125, 整数型, 参考 数组
    .局部变量 变量_A3200125, 整数型
    .局部变量 变量_A4200125, 文本型
    .局部变量 变量_A5200125, 整数型
    .局部变量 变量_A6200125, 整数型
    .局部变量 变量_A7200125, 整数型, , "10"
    .局部变量 变量_A8200125, 整数型
    .局部变量 变量_A9200125, 整数型
    .局部变量 变量_BA200125, 文本型

    变量_A4200125 ＝ 取空白文本 (255)
    变量_A3200125 ＝ GetKeyboardLayout (0)
    变量_A9200125 ＝ GetKeyboardLayoutList (25, 变量_A7200125)
    .计次循环首 (变量_A9200125, 变量_A6200125)
        .如果 (ImmIsIME (变量_A7200125 [变量_A6200125]) ＝ 1)
            变量_A5200125 ＝ 255
            变量_A8200125 ＝ ImmGetDescriptionA (变量_A7200125 [变量_A6200125], 变量_A4200125, 变量_A5200125)
            变量_BA200125 ＝ 取文本左边 (变量_A4200125, 变量_A8200125)
            加入成员 (变量_A1200125, 变量_BA200125)
        .否则
            变量_BA200125 ＝ “英语(美国)”
            加入成员 (变量_A1200125, 变量_BA200125)
        .如果结束
        
    .计次循环尾 ()
    ActivateKeyboardLayout (变量_A3200125, 0)
    .计次循环首 (取数组成员数 (变量_A7200125), 变量_A6200125)
        .如果真 (变量_A7200125 [变量_A6200125] ≠ 0)
            加入成员 (变量_A2200125, 变量_A7200125 [变量_A6200125])
        .如果真结束
        
    .计次循环尾 ()
    返回 (变量_A9200125)

.子程序 系统_输入法选择, 整数型, 公开, 返回输入法的数量；或枚举；
    .参数 输入法序号, 整数型, 可空
    .参数 输入法名字数组, 文本型, 参考 可空 数组, 用来装载输入法的数组
    .参数 输入法序号数组, 整数型, 参考 可空 数组
    .局部变量 变量_AB200125, 整数型

    变量_AB200125 ＝ 系统_输入法枚举 (输入法名字数组, 输入法序号数组)
    .如果真 (输入法序号 ≤ 取数组成员数 (输入法序号数组) 且 输入法序号 ＞ 0)
        ActivateKeyboardLayout (输入法序号数组 [输入法序号], 0)
    .如果真结束
    返回 (变量_AB200125)

.子程序 系统_清空回收站, 逻辑型, 公开, 清空回收站
    .参数 是否弹出询问框, 逻辑型, 可空, 可以留空,默认为真时会提示是否要清空回收站,为假时直接清空回收站
    .局部变量 变量_E9ED0225, 整数型
    .局部变量 变量_F2ED0225, 整数型

    .如果真 (是否弹出询问框 ＝ 假)
        变量_E9ED0225 ＝ 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
    .如果真结束
    变量_F2ED0225 ＝ SHEmptyRecycleBinA (#NULL, #NULL, 变量_E9ED0225)
    返回 (变量_F2ED0225 ＝ #<?未知本地类型?>)

.子程序 系统_格式化软盘, 逻辑型, 公开, 系统_格式化软盘
    .参数 驱动器号, 文本型

    运行 (“attrib -s -h -r -a /s /d ” ＋ 驱动器号 ＋ “:*.*”, 真, 1)
    返回 (删除目录 (驱动器号 ＋ “:/”))

.子程序 系统_取运行参数, 文本型, 公开, 返回被当前程序打开的第一个参数,基本上是文件名
    .局部变量 变量_56090125, 文本型, , "0"

    取命令行 (变量_56090125)
    .如果真 (取数组成员数 (变量_56090125) ＞ 0 且 文件是否存在 (变量_56090125 [1]))
        返回 (变量_56090125 [1])
    .如果真结束
    返回 (“”)

.子程序 系统_修改开机密码, 逻辑型, 公开, 成功返回真，失败返回假
    .参数 密码, 文本型, , 需修改成的密码
    .局部变量 变量_76C40125, 文本型

    变量_76C40125 ＝ 系统_取用户名 ()
    .判断开始 (运行 (“net user ” ＋ 变量_76C40125 ＋ “ ” ＋ 密码, 真, 1) ＝ 真)
        返回 (真)
    .默认
        返回 (假)
    .判断结束
    

.子程序 系统_还原三原色, 文本型, 公开, 返回易语言中颜色数值所对应的某一个RGB单色数,-1表示失败
    .参数 颜色值, 整数型, , 易语言的颜色数
    .参数 需取的色, 整数型, , 1=R,2=G,3=B,4=HEX,5=HTML
    .局部变量 变量_3A090125, 文本型

    .判断开始 (需取的色 ＝ 1)
        变量_3A090125 ＝ 到文本 (位与 (颜色值, 255))
    .判断 (需取的色 ＝ 2)
        变量_3A090125 ＝ 到文本 (位与 (颜色值, 65280) ＼ 256)
    .判断 (需取的色 ＝ 3)
        变量_3A090125 ＝ 到文本 (位与 (颜色值, 16711680) ＼ 65536)
    .判断 (需取的色 ＝ 4)
        变量_3A090125 ＝ “0x” ＋ 三原色处理 (取十六进制文本 (位与 (颜色值, 255))) ＋ 三原色处理 (取十六进制文本 (位与 (颜色值, 65280) ＼ 255)) ＋ 三原色处理 (取十六进制文本 (位与 (颜色值, 16711680) ＼ 65536))
    .判断 (需取的色 ＝ 5)
        变量_3A090125 ＝ “#” ＋ 三原色处理 (取十六进制文本 (位与 (颜色值, 255))) ＋ 三原色处理 (取十六进制文本 (位与 (颜色值, 65280) ＼ 255)) ＋ 三原色处理 (取十六进制文本 (位与 (颜色值, 16711680) ＼ 65536))
    .默认
        变量_3A090125 ＝ “-1”
    .判断结束
    返回 (变量_3A090125)

.子程序 三原色处理, 文本型
    .参数 变量_E3A50225, 文本型

    .如果真 (取文本长度 (变量_E3A50225) ＝ 1)
        变量_E3A50225 ＝ “0” ＋ 变量_E3A50225
        返回 (变量_E3A50225)
    .如果真结束
    返回 (变量_E3A50225)

.子程序 系统_置桌面背景, 逻辑型, 公开, 设置电脑桌面壁纸
    .参数 图片路径, 文本型, , 可以为：bmp，jpg，gif，tiff，png，等格式；
    .参数 填充方式, 整数型, 可空, 0、平铺 1、居中 2、拉伸 3、适应 4、填充 5、跨区
    .局部变量 变量_3B5F0125, 文本型
    .局部变量 变量_92E10225, 整数型
    .局部变量 变量_93E10225, 整数型
    .局部变量 变量_96E10225, 文本型
    .局部变量 变量_97E10225, 文本型

    变量_92E10225 ＝ RegOpenKeyExA (#HKEY_CURRENT_USER, “Control Panel\\Desktop”, 0, 位或 (#KEY_READ, #KEY_WRITE), 变量_93E10225)
    .如果真 (变量_92E10225 ≥ 0)
        .判断开始 (填充方式 ＝ 1)
            变量_96E10225 ＝ “0”
            变量_97E10225 ＝ “0”
        .判断 (填充方式 ＝ 2)
            变量_96E10225 ＝ “2”
            变量_97E10225 ＝ “0”
        .判断 (填充方式 ＝ 3)
            变量_96E10225 ＝ “6”
            变量_97E10225 ＝ “0”
        .判断 (填充方式 ＝ 4)
            变量_96E10225 ＝ “10”
            变量_97E10225 ＝ “0”
        .判断 (填充方式 ＝ 5)
            变量_96E10225 ＝ “22”
            变量_97E10225 ＝ “0”
        .默认
            
            变量_96E10225 ＝ “0”
            变量_97E10225 ＝ “1”
        .判断结束
        变量_92E10225 ＝ RegSetValueExA (变量_93E10225, “WallpaperStyle”, 0, #REG_SZ, 到字节集 (变量_96E10225), 4)
        .如果真 (变量_92E10225 ≥ 0)
            变量_92E10225 ＝ RegSetValueExA (变量_93E10225, “TileWallpaper”, 0, #REG_SZ, 到字节集 (变量_97E10225), 4)
        .如果真结束
        RegCloseKey (变量_93E10225)
    .如果真结束
    
    变量_3B5F0125 ＝ 目录_取特定目录 (9) ＋ “桌面背景图片.bmp”
    图片_转换 (读入文件 (图片路径), 1, 变量_3B5F0125, , )
    返回 (SystemParametersInfoA (20, 0, 取指针文本_ (变量_3B5F0125), 1))

.子程序 系统_判断有无摄像头, 逻辑型, 公开, 判断是否有摄像头
    .局部变量 变量_5FE60225, 整数型

    变量_5FE60225 ＝ 系统_取摄像头数量 ()
    返回 (变量_5FE60225 ＞ 0)

.子程序 系统_取摄像头数量, 整数型, 公开, 返回摄像头数量
    .局部变量 变量_5AE60225, 文本型
    .局部变量 变量_5BE60225, 文本型
    .局部变量 变量_5CE60225, 整数型

    变量_5BE60225 ＝ 取空白文本 (256)
    .循环判断首 ()
        变量_5AE60225 ＝ 取空白文本 (256)
        .如果真 (capGetDriverDescriptionA (变量_5CE60225, 变量_5AE60225, 100, 变量_5BE60225, 100))
            变量_5CE60225 ＝ 变量_5CE60225 ＋ 1
        .如果真结束
        
    .循环判断尾 (变量_5AE60225 ≠ “”)
    返回 (变量_5CE60225)

.子程序 系统_任务栏隐藏, , 公开, 隐藏系统任务栏
    ShowWindow (窗口_取任务栏句柄 (), 0)

.子程序 系统_任务栏显示, , 公开, 显示被隐藏的系统任务栏
    ShowWindow (窗口_取任务栏句柄 (), 1)

.子程序 系统_取任务栏高度, 整数型, 公开, 获取系统任务栏高度
    .局部变量 变量_E8040325, 自定义_8F260141
    .局部变量 变量_E9040325, 整数型

    变量_E8040325.成员_90260135 ＝ 36
    SHAppBarMessage (#<?未知本地类型?>, 变量_E8040325)
    .判断开始 (变量_E8040325.成员_93260135 ＝ #<?未知本地类型?> 或 变量_E8040325.成员_93260135 ＝ #<?未知本地类型?>)
        变量_E9040325 ＝ 变量_E8040325.成员_94260135.右边 － 变量_E8040325.成员_94260135.左边
    .判断 (变量_E8040325.成员_93260135 ＝ #<?未知本地类型?> 或 变量_E8040325.成员_93260135 ＝ #ABE_BOTTOM)
        变量_E9040325 ＝ 变量_E8040325.成员_94260135.底边 － 变量_E8040325.成员_94260135.顶边
    .默认
        
    .判断结束
    返回 (变量_E9040325)

.子程序 系统_取网络连接信息, 逻辑型, 公开, 判断网络是否已连接上；成功返回真，失败返回假；
    .参数 连接名称, 文本型, 参考 可空, 用于装载连接名称的变量
    .参数 连接信息, 文本型, 参考 可空, 用于装载连接信息的变量
    .局部变量 变量_C3380125, 整数型
    .局部变量 变量_C4380125, 文本型
    .局部变量 变量_C5380125, 整数型

    变量_C4380125 ＝ 取空白文本 (513)
    变量_C5380125 ＝ InternetGetConnectedStateEx (变量_C3380125, 变量_C4380125, 512, 0)
    连接名称 ＝ 删首尾空 (变量_C4380125)
    连接信息 ＝ “”
    .如果真 (位与 (变量_C3380125, 1) ＝ 1)
        连接信息 ＝ 连接信息 ＋ “使用modem连接到Internet”
    .如果真结束
    .如果真 (位与 (变量_C3380125, 2) ＝ 2)
        连接信息 ＝ 连接信息 ＋ “使用内部网连接到Internet.”
    .如果真结束
    .如果真 (位与 (变量_C3380125, 4) ＝ 4)
        连接信息 ＝ 连接信息 ＋ “通过代理服务器连接到Internet.”
    .如果真结束
    .如果真 (位与 (变量_C3380125, 32) ＝ 32)
        连接信息 ＝ 连接信息 ＋ “现在连接处于离线状态.”
    .如果真结束
    .如果 (位与 (变量_C3380125, 64) ＝ 64)
        连接信息 ＝ 连接信息 ＋ #换行符 ＋ “连接已经被设定.”
    .否则
        连接信息 ＝ 连接信息 ＋ #换行符 ＋ “没有设定好的连接.”
    .如果结束
    .如果真 (位与 (变量_C3380125, 16) ＝ 16)
        连接信息 ＝ 连接信息 ＋ #换行符 ＋ “本机已经安装了远程访问服务功能.”
    .如果真结束
    返回 (变量_C5380125 ＝ 1)

.子程序 系统_取网络连接状态, 逻辑型, 公开, 判断电脑是否连接到Internet,连接返回真,否则返回假;
    .参数 连接名称, 文本型

    返回 (InternetGetConnectedStateExA (0, 连接名称, 0, 0))

.子程序 系统_是否已联网, 逻辑型, 公开, 判断你的电脑是否已成功连接互联网,已联网返回真,否则返回假
    .如果真 (DLL_InternetCheckConnectionA (“https://www.baidu.com”, 1, 0))
        返回 (寻找字节集 (网页_访问 (“https://www.baidu.com/”, , , , , , , , , , , , ), { 231, 153, 190, 229, 186, 166, 228, 184, 128, 228, 184, 139 }, ) ≠ -1)
    .如果真结束
    返回 (假)

.子程序 系统_进入待机状态, , 公开, 在计算机没用的时候，可以让进入待机状态；
    SetSuspendState (1, 0, 0)

.子程序 系统_托盘图标显示, , 公开, 显示被隐藏的托盘图标
    .局部变量 变量_E4290125, 整数型, , "0"
    .局部变量 变量_E5290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_E4290125)
    窗口_枚举子窗口 (变量_E4290125 [2], 变量_E5290125)
    窗口_置控件状态 (变量_E5290125 [2], 真)

.子程序 系统_托盘图标隐藏, , 公开, 隐藏托盘图标
    .局部变量 变量_E6290125, 整数型, , "0"
    .局部变量 变量_E7290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_E6290125)
    窗口_枚举子窗口 (变量_E6290125 [2], 变量_E7290125)
    窗口_置控件状态 (变量_E7290125 [2], 假)

.子程序 系统_系统时间显示, , 公开, 显示被隐藏的系统时间
    .局部变量 变量_E8290125, 整数型, , "0"
    .局部变量 变量_E9290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_E8290125)
    窗口_枚举子窗口 (变量_E8290125 [2], 变量_E9290125)
    窗口_置控件状态 (变量_E9290125 [1], 真)

.子程序 系统_系统时间隐藏, , 公开, 隐藏系统时间
    .局部变量 变量_EA290125, 整数型, , "0"
    .局部变量 变量_EB290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_EA290125)
    窗口_枚举子窗口 (变量_EA290125 [2], 变量_EB290125)
    窗口_置控件状态 (变量_EB290125 [1], 假)

.子程序 系统_开始按钮显示, , 公开, 显示被隐藏的开始按钮
    .局部变量 变量_A7290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_A7290125)
    窗口_置控件状态 (变量_A7290125 [1], 真)

.子程序 系统_开始按钮隐藏, , 公开, 隐藏系统开始按钮
    .局部变量 变量_A8290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_A8290125)
    窗口_置控件状态 (变量_A8290125 [1], 假)

.子程序 系统_桌面图标隐藏, , 公开, 隐藏桌面图
    ShowWindow (窗口_取桌面句柄 (), 0)

.子程序 系统_桌面图标显示, , 公开, 显示桌面图标
    ShowWindow (窗口_取桌面句柄 (), 10)

.子程序 系统_任务窗口显示, , 公开, 显示被隐藏的任务窗口
    .局部变量 变量_CADF0225, 整数型
    .局部变量 变量_CBDF0225, 整数型, , "0"
    .局部变量 变量_CCDF0225, 整数型

    变量_CADF0225 ＝ 窗口_取任务栏句柄 ()
    .如果真 (变量_CADF0225 ≠ 0)
        变量_CCDF0225 ＝ 窗口_枚举子窗口 (变量_CADF0225, 变量_CBDF0225, )
        .如果真 (变量_CCDF0225 ≥ 3)
            变量_CADF0225 ＝ 变量_CBDF0225 [3]
            变量_CCDF0225 ＝ 窗口_枚举子窗口 (变量_CADF0225, 变量_CBDF0225, )
            .如果真 (变量_CCDF0225 ≥ 2)
                变量_CADF0225 ＝ 变量_CBDF0225 [2]
                窗口_置控件状态 (变量_CADF0225, 真)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    

.子程序 系统_任务窗口隐藏, , 公开, 隐藏任务窗口
    .局部变量 变量_CDDF0225, 整数型
    .局部变量 变量_CEDF0225, 整数型, , "0"
    .局部变量 变量_CFDF0225, 整数型

    变量_CDDF0225 ＝ 窗口_取任务栏句柄 ()
    .如果真 (变量_CDDF0225 ≠ 0)
        变量_CFDF0225 ＝ 窗口_枚举子窗口 (变量_CDDF0225, 变量_CEDF0225, )
        .如果真 (变量_CFDF0225 ≥ 3)
            变量_CDDF0225 ＝ 变量_CEDF0225 [3]
            变量_CFDF0225 ＝ 窗口_枚举子窗口 (变量_CDDF0225, 变量_CEDF0225, )
            .如果真 (变量_CFDF0225 ≥ 2)
                变量_CDDF0225 ＝ 变量_CEDF0225 [2]
                窗口_置控件状态 (变量_CDDF0225, 假)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    

.子程序 系统_设置随机启动, 逻辑型, 公开, 在注册表中添加须自启动的应用程序信息,当“是否检查”参数为真时返回值才具有意义，真表明已添加为自启动，假表明不是自启动
    .参数 标识名称, 文本型, , 欲写入注册表的项目名称
    .参数 应用程序路径, 文本型, 可空, 应用程序全路径，当参数“删除”为真时可空，否则不能为空
    .参数 删除, 逻辑型, 可空, 是否删除自启动项，默认为假
    .参数 是否检查, 逻辑型, 可空, 检查是否已添加自启动信息，此参数为真时，将不进行增删注册表的行为，仅为检查

    .如果真 (是否为调试版 ())
        输出调试文本 (“调试状态不能设置随机启动”)
        返回 (假)
    .如果真结束
    .如果 (取反 (是否检查))
        .如果 (取反 (删除))
            写注册项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\Run\” ＋ 标识名称, 应用程序路径)
        .否则
            删除注册项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\Run\” ＋ 标识名称)
        .如果结束
        返回 (假)
    .否则
        是否检查 ＝ 注册项是否存在 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\Run\” ＋ 标识名称)
        返回 (是否检查)
    .如果结束
    

.子程序 系统_打开控制面板, , 公开, 打开系统的控制面板
    .参数 打开方式, 整数型, 可空, 1、#隐藏窗口； 2、#普通激活； 3、#最小化激活； 4、#最大化激活； 5、#普通不激活； 6、#最小化不激活

    .如果真 (打开方式 ＝ 0)
        打开方式 ＝ 2
    .如果真结束
    运行 (“rundll32.exe shell32.dll,Control_RunDLL”, 假, 打开方式)

.子程序 系统_取屏幕分辨率, , 公开, 获取屏幕分辨率
    .参数 显示器索引, 整数型, 可空, 索引值是从0开始
    .参数 色深, 整数型, 参考 可空, 存放色深的变量
    .参数 屏幕宽度, 整数型, 参考 可空, 存放屏幕宽度的变量
    .参数 屏幕高度, 整数型, 参考 可空, 存放屏幕高度的变量
    .参数 屏幕刷新率, 整数型, 参考 可空, 存放屏幕刷新率的变量
    .局部变量 变量_9DF60225, 整数型
    .局部变量 变量_9EF60225, 整数型
    .局部变量 变量_9FF60225, 整数型

    变量_9DF60225 ＝ 840
    变量_9EF60225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_9DF60225)
    .如果真 (变量_9EF60225 ≠ #NULL)
        __set (变量_9EF60225, 0, 变量_9DF60225)
        .如果真 (DLL_EnumDisplayDevicesW (#NULL, 显示器索引, 变量_9EF60225, #<?未知本地类型?>))
            变量_9FF60225 ＝ LocalAlloc (#LMEM_ZEROINIT, 220)
            .如果真 (变量_9FF60225 ≠ #NULL)
                .如果真 (DLL_EnumDisplaySettingsW (变量_9EF60225 ＋ 4, #<?未知本地类型?>, 变量_9FF60225))
                    色深 ＝ __get (变量_9FF60225, 168)
                    屏幕宽度 ＝ __get (变量_9FF60225, 172)
                    屏幕高度 ＝ __get (变量_9FF60225, 176)
                    屏幕刷新率 ＝ __get (变量_9FF60225, 184)
                .如果真结束
                LocalFree (变量_9FF60225)
            .如果真结束
            
        .如果真结束
        LocalFree (变量_9EF60225)
    .如果真结束
    

.子程序 系统_置屏幕分辨率, 整数型, 公开, 设置屏幕分辨率;返回值说明:0设置成功;1重启后生效;-2不支持的分辨率;-1驱动无效或不支持
    .参数 色深, 整数型, 可空, 新的色深 留空为不改变原先设定
    .参数 屏幕宽度, 整数型, 可空, 新的屏幕宽度 留空为不改变原先设定
    .参数 屏幕高度, 整数型, 可空, 新的屏幕高度 留空为不改变原先设定
    .参数 屏幕刷新率, 整数型, 可空, 新的屏幕刷新率 留空为不改变原先设定
    .参数 设置模式, 整数型, 可空, 1:临时,退出软件或重启后恢复原来的配置;2:全局,设置后将一直使用新分辨率.
    .参数 显示器索引, 整数型, 可空, 索引值是从0开始
    .局部变量 变量_ABF60225, 整数型
    .局部变量 变量_ACF60225, 整数型
    .局部变量 变量_ADF60225, 整数型
    .局部变量 变量_AEF60225, 整数型
    .局部变量 变量_AFF60225, 整数型

    变量_AFF60225 ＝ 2
    变量_ACF60225 ＝ 840
    变量_ABF60225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_ACF60225)
    __set (变量_ABF60225, 0, 变量_ACF60225)
    .如果真 (DLL_EnumDisplayDevicesW (#NULL, 显示器索引, 变量_ABF60225, #<?未知本地类型?>))
        变量_ADF60225 ＝ LocalAlloc (#LMEM_ZEROINIT, 220)
        .如果真 (DLL_EnumDisplaySettingsW (变量_ABF60225 ＋ 4, #<?未知本地类型?>, 变量_ADF60225))
            .如果真 (色深 ≠ 0)
                __set (变量_ADF60225, 168, 色深)
            .如果真结束
            .如果真 (屏幕宽度 ≠ 0)
                __set (变量_ADF60225, 172, 屏幕宽度)
            .如果真结束
            .如果真 (屏幕高度 ≠ 0)
                __set (变量_ADF60225, 176, 屏幕高度)
            .如果真结束
            .如果真 (屏幕刷新率 ≠ 0)
                __set (变量_ADF60225, 184, 屏幕刷新率)
            .如果真结束
            .如果 (设置模式 ＝ 1)
                变量_AEF60225 ＝ #CDS_FULLSCREEN
            .否则
                变量_AEF60225 ＝ 位或 (#CDS_GLOBAL, #CDS_UPDATEREGISTRY)
            .如果结束
            变量_AFF60225 ＝ DLL_ChangeDisplaySettingsExW (变量_ABF60225 ＋ 4, 变量_ADF60225, #NULL, 变量_AEF60225, #NULL)
        .如果真结束
        LocalFree (变量_ADF60225)
    .如果真结束
    LocalFree (变量_ABF60225)
    返回 (变量_AFF60225)

.子程序 系统_取屏幕分辨率1, 整数型, 公开, 获取屏幕分辨率，成功返回屏幕数量。
    .参数 显示监视器矩形, RECT, 数组
    .局部变量 变量_87090325, 整数型

    清除数组 (显示监视器矩形)
    EnumDisplayMonitors (#NULL, #NULL, 到整数 (&Enum_MonitorEnumProc), 取指针_通用型_数组 (显示监视器矩形))
    变量_87090325 ＝ 取数组成员数 (显示监视器矩形)
    返回 (变量_87090325)

.子程序 Enum_MonitorEnumProc, 逻辑型
    .参数 变量_71090325, 整数型
    .参数 变量_72090325, 整数型
    .参数 变量_73090325, 整数型
    .参数 变量_74090325, 整数型
    .局部变量 变量_77090325, 整数型
    .局部变量 变量_78090325, 整数型
    .局部变量 变量_7C090325, 整数型
    .局部变量 变量_80090325, RECT, , "0"
    .局部变量 变量_85090325, 整数型
    .局部变量 变量_86090325, 整数型

    变量_78090325 ＝ 40
    变量_77090325 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_78090325)
    .如果真 (变量_77090325 ≠ #NULL)
        __set (变量_77090325, 0, 变量_78090325)
        .如果真 (DLL_GetMonitorInfoA (变量_71090325, 变量_77090325))
            变量_7C090325 ＝ __get (变量_77090325, 36)
            .如果真 (变量_74090325 ≠ #NULL)
                变量_85090325 ＝ 指针转移 (变量_74090325, 取指针_通用型_数组 (变量_80090325))
                .如果真 (变量_85090325 ≠ #NULL)
                    变量_86090325 ＝ 取数组成员数 (变量_80090325)
                    递增 (变量_86090325)
                    重定义数组 (变量_80090325, 真, 变量_86090325)
                    变量_80090325 [变量_86090325].left ＝ __get (变量_77090325, 4)
                    变量_80090325 [变量_86090325].top ＝ __get (变量_77090325, 8)
                    变量_80090325 [变量_86090325].right ＝ __get (变量_77090325, 12)
                    变量_80090325 [变量_86090325].bottom ＝ __get (变量_77090325, 16)
                .如果真结束
                指针还原 (变量_74090325, 取指针_通用型_数组 (变量_80090325), 变量_85090325)
            .如果真结束
            
        .如果真结束
        LocalFree (变量_77090325)
    .如果真结束
    返回 (真)

.子程序 系统_取CPU型号, 文本型, 公开, 获取CPU型号
    .局部变量 变量_D1530125, 整数型
    .局部变量 变量_D2530125, 整数型
    .局部变量 变量_D3530125, 整数型
    .局部变量 变量_1DDF0225, 文本型

    变量_D1530125 ＝ HeapAlloc (GetProcessHeap (), 0, 48)
    变量_D2530125 ＝ 0
    变量_D3530125 ＝ 0
    .变量循环首 (2, 4, 1, 变量_D2530125)
        变量_D3530125 ＝ (变量_D2530125 － 2) × 16
        置入代码 ({ 139, 69, 248, 5, 0, 0, 0, 128, 15, 162, 62, 139, 125, 252, 3, 125, 244, 136, 7, 136, 103, 1, 193, 200, 16, 136, 71, 2, 136, 103, 3, 137, 216, 136, 71, 4, 136, 103, 5, 193, 200, 16, 136, 71, 6, 136, 103, 7, 137, 200, 136, 71, 8, 136, 103, 9, 193, 200, 16, 136, 71, 10, 136, 103, 11, 137, 208, 136, 71, 12, 136, 103, 13, 193, 200, 16, 136, 71, 14, 136, 103, 15 })
    .变量循环尾 ()
    变量_1DDF0225 ＝ 指针到文本 (变量_D1530125)
    DLL_HeapFree (GetProcessHeap (), 0, 变量_D1530125)
    返回 (变量_1DDF0225)

.子程序 系统_启用本地连接, 逻辑型, 公开, 启用成功返回真，失败返回假
    .参数 连接名称, 文本型, 可空, 一般都为:本地连接,留空默认为:本地连接
    .局部变量 变量_978A0125, 整数型
    .局部变量 变量_988A0125, 整数型
    .局部变量 变量_998A0125, 整数型
    .局部变量 变量_9A8A0125, 对象
    .局部变量 变量_9B8A0125, 对象
    .局部变量 变量_9C8A0125, 对象
    .局部变量 变量_9D8A0125, 对象
    .局部变量 变量_9E8A0125, 对象
    .局部变量 变量_9F8A0125, 对象
    .局部变量 变量_A08A0125, 文本型

    .如果真 (是否为空 (连接名称))
        连接名称 ＝ “本地连接”
    .如果真结束
    CoInitialize (0)
    变量_9A8A0125.创建 (“Shell.Application”, )
    变量_9B8A0125 ＝ 变量_9A8A0125.对象型方法 (“NameSpace”, 3)
    变量_9A8A0125 ＝ 变量_9B8A0125.对象型方法 (“Items”, )
    .计次循环首 (变量_9A8A0125.读数值属性 (“Count”, ), 变量_978A0125)
        变量_9B8A0125 ＝ 变量_9A8A0125.对象型方法 (“Item”, 到整数 (变量_978A0125 － 1))
        .如果真 (变量_9B8A0125.读文本属性 (“Name”, ) ＝ “网络连接”)
            变量_9C8A0125 ＝ 变量_9B8A0125.读对象型属性 (“GetFolder”, )
            变量_9D8A0125 ＝ 变量_9C8A0125.对象型方法 (“Items”, )
            .计次循环首 (变量_9D8A0125.读数值属性 (“Count”, ), 变量_988A0125)
                变量_9E8A0125 ＝ 变量_9D8A0125.对象型方法 (“Item”, 到整数 (变量_988A0125 － 1))
                .如果真 (变量_9E8A0125.读文本属性 (“Name”, ) ＝ 连接名称)
                    变量_9F8A0125 ＝ 变量_9E8A0125.对象型方法 (“Verbs”, )
                    .计次循环首 (变量_9F8A0125.读数值属性 (“Count”, ), 变量_998A0125)
                        变量_9B8A0125 ＝ 变量_9F8A0125.对象型方法 (“Item”, 到整数 (变量_998A0125 － 1))
                        变量_A08A0125 ＝ 取文本左边 (变量_9B8A0125.读文本属性 (“Name”, ), 4)
                        .如果真 (变量_A08A0125 ＝ “启用”)
                            变量_9B8A0125.方法 (“DoIt”, )
                            CoUninitialize ()
                            返回 (真)
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .计次循环尾 ()
    CoUninitialize ()
    返回 (假)

.子程序 系统_置本地连接状态, , 公开, 启用或禁用  需管理员权限
    .参数 连接名称, 文本型, 可空, 一般都为:本地连接,留空默认为:本地连接
    .参数 状态, 逻辑型, 可空, 可空 默认为假  假=禁用  真=启用

    .如果真 (是否为空 (连接名称))
        连接名称 ＝ “本地连接”
    .如果真结束
    
    .如果 (状态)
        运行 (“netsh interface set interface name=” ＋ #引号 ＋ 连接名称 ＋ #引号 ＋ “ admin=”, 真, #隐藏窗口)
    .否则
        运行 (“netsh interface set interface name=” ＋ #引号 ＋ 连接名称 ＋ #引号 ＋ “ admin=DISABLED”, 真, #隐藏窗口)
    .如果结束
    
    

.子程序 系统_取系统版本, 文本型, 公开, 支持获取win98、win2000 、winXP、win2003 、win2008 、win7 、win8 、win2012、win8.1 、win10 系统版本。
    .参数 参_主版本, 整数型, 参考 可空, 变量储存返回值
    .参数 参_次版本, 整数型, 参考 可空, 变量储存返回值
    .参数 参_是否带名称, 逻辑型, 可空, 是否带版本名称描述，如 专业版，企业版等
    .参数 参_是否取位数, 逻辑型, 可空, 操作系统位数，如32位或64位
    .参数 参_取SP版本号, 逻辑型, 可空
    .参数 参_取内部版本, 逻辑型, 可空, build内部版本
    .局部变量 变量_1FF80125, OSVERSIONINFOEX
    .局部变量 变量_20F80125, 自定义_A5D30141
    .局部变量 变量_21F80125, 整数型
    .局部变量 变量_22F80125, 文本型
    .局部变量 变量_23F80125, 文本型
    .局部变量 变量_24F80125, 整数型
    .局部变量 变量_25F80125, 整数型
    .局部变量 变量_26F80125, 短整数型
    .局部变量 变量_27F80125, 文本型
    .局部变量 变量_28F80125, 逻辑型
    .局部变量 变量_29F80125, 文本型
    .局部变量 变量_2AF80125, 文本型
    .局部变量 变量_2BF80125, 文本型

    变量_1FF80125.dwOSVersionInfoSize ＝ 156
    .如果真 (GetVersionEx (变量_1FF80125))
        DLL_GetSystemInfo (变量_20F80125)
        IsWow64Process (-1, 变量_28F80125)
        RtlGetNtVersionNumbers (变量_1FF80125.dwMajorVersion, 变量_1FF80125.dwMinorVersion, 变量_26F80125)
        参_主版本 ＝ 变量_1FF80125.dwMajorVersion
        参_次版本 ＝ 变量_1FF80125.dwMinorVersion
        变量_1FF80125.dwBuildNumber ＝ 变量_26F80125
        .判断开始 (变量_1FF80125.dwMajorVersion ＝ 10)
            .判断开始 (变量_1FF80125.dwMinorVersion ＝ 0)
                
                .如果 (变量_1FF80125.wProductType ＝ #VER_NT_WORKSTATION)
                    变量_22F80125 ＝ “Windows 10”
                .否则
                    变量_22F80125 ＝ 取文本注册项 (#本地机器, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductName”, )
                .如果结束
                
            .默认
                
            .判断结束
            
        .判断 (变量_1FF80125.dwMajorVersion ＝ 6)
            .判断开始 (变量_1FF80125.dwMinorVersion ＝ 0)
                变量_22F80125 ＝ 选择 (变量_1FF80125.wProductType ＝ #VER_NT_WORKSTATION, “Windows Vista”, “Windows Server 2008”)
            .判断 (变量_1FF80125.dwMinorVersion ＝ 1)
                变量_22F80125 ＝ 选择 (变量_1FF80125.wProductType ＝ #VER_NT_WORKSTATION, “Windows 7”, “Windows Server 2008 R2”)
            .判断 (变量_1FF80125.dwMinorVersion ＝ 2)
                变量_22F80125 ＝ 选择 (变量_1FF80125.wProductType ＝ #VER_NT_WORKSTATION, “Windows 8”, “Windows Server 2012”)
            .判断 (变量_1FF80125.dwMinorVersion ＝ 3)
                变量_22F80125 ＝ 选择 (变量_1FF80125.wProductType ＝ #VER_NT_WORKSTATION, “Windows 8.1”, “Windows Server 2012 R2”)
            .默认
                
            .判断结束
            
        .判断 (变量_1FF80125.dwMajorVersion ＝ 5 且 变量_1FF80125.dwMinorVersion ＝ 0)
            变量_22F80125 ＝ “Windows 2000”
            .如果 (变量_1FF80125.wProductType ＝ 1)
                变量_23F80125 ＝ “Professional”
            .否则
                .如果真 (位与 (变量_1FF80125.wSuiteMask, 128) ＝ 0)
                    变量_23F80125 ＝ “Datacenter Server”
                .如果真结束
                .如果 (位与 (变量_1FF80125.wSuiteMask, 2) ＝ 0)
                    变量_23F80125 ＝ “Advanced Server”
                .否则
                    变量_23F80125 ＝ “Server”
                .如果结束
                
            .如果结束
            
        .判断 (变量_1FF80125.dwMajorVersion ＝ 5 且 变量_1FF80125.dwMinorVersion ＝ 1)
            变量_22F80125 ＝ “Windows XP”
            .如果 (位与 (变量_1FF80125.wSuiteMask, 512) ＝ 1)
                变量_23F80125 ＝ “Home Edition”
            .否则
                变量_23F80125 ＝ “Professional”
            .如果结束
            
        .判断 (变量_1FF80125.dwMajorVersion ＝ 5 且 变量_1FF80125.dwMinorVersion ＝ 2)
            .判断开始 (GetSystemMetrics (89) ≠ 0)
                变量_22F80125 ＝ “Windows Server 2003 R2, ”
            .判断 (位与 (变量_1FF80125.wSuiteMask, 8192) ＝ 8192)
                变量_22F80125 ＝ “Windows Storage Server 2003”
            .判断 (位与 (变量_1FF80125.wSuiteMask, 32768) ＝ 32768)
                变量_22F80125 ＝ “Windows Home Server”
            .判断 (变量_1FF80125.wProductType ＝ 1 且 变量_20F80125.成员_A6D30135 ＝ 9)
                变量_22F80125 ＝ “Windows XP Professional x64 Edition”
            .默认
                变量_22F80125 ＝ “Windows Server 2003, ”
            .判断结束
            
        .判断 (变量_1FF80125.dwMajorVersion ＝ 4 且 变量_1FF80125.dwMinorVersion ＝ 10)
            变量_22F80125 ＝ “Windows 98”
        .默认
            
        .判断结束
        .如果真 (变量_1FF80125.dwMajorVersion ≥ 6)
            RtlGetProductInfo (变量_1FF80125.dwMajorVersion, 变量_1FF80125.dwMinorVersion, 0, 0, 变量_21F80125)
            .判断开始 (变量_21F80125 ＝ 1)
                变量_23F80125 ＝ “Ultimate Edition”
            .判断 (变量_21F80125 ＝ 2)
                变量_23F80125 ＝ “Home Basic Edition”
            .判断 (变量_21F80125 ＝ 3)
                变量_23F80125 ＝ “Home Premium Edition”
            .判断 (变量_21F80125 ＝ 4)
                变量_23F80125 ＝ “Enterprise Edition”
            .判断 (变量_21F80125 ＝ 6)
                变量_23F80125 ＝ “Business Edition”
            .判断 (变量_21F80125 ＝ 7)
                变量_23F80125 ＝ “Standard”
            .判断 (变量_21F80125 ＝ 8)
                变量_23F80125 ＝ “Datacenter Edition”
            .判断 (变量_21F80125 ＝ 9)
                变量_23F80125 ＝ “Small Business Server”
            .判断 (变量_21F80125 ＝ 10)
                变量_23F80125 ＝ “Enterprise Edition”
            .判断 (变量_21F80125 ＝ 11)
                变量_23F80125 ＝ “Starter Edition”
            .判断 (变量_21F80125 ＝ 12)
                变量_23F80125 ＝ “Datacenter Edition (core installation)”
            .判断 (变量_21F80125 ＝ 13)
                变量_23F80125 ＝ “Standard Edition (core installation)”
            .判断 (变量_21F80125 ＝ 14)
                变量_23F80125 ＝ “Enterprise Edition (core installation)”
            .判断 (变量_21F80125 ＝ 15)
                变量_23F80125 ＝ “Enterprise Edition for Itanium-based Systems”
            .判断 (变量_21F80125 ＝ 16)
                变量_23F80125 ＝ “Business N”
            .判断 (变量_21F80125 ＝ 17)
                变量_23F80125 ＝ “Web Server (full installation)”
            .判断 (变量_21F80125 ＝ 18)
                变量_23F80125 ＝ “HPC Edition”
            .判断 (变量_21F80125 ＝ 19)
                变量_23F80125 ＝ “Windows Storage Server 2008 R2 Essentials”
            .判断 (变量_21F80125 ＝ 20)
                变量_23F80125 ＝ “Storage Server Express”
            .判断 (变量_21F80125 ＝ 21)
                变量_23F80125 ＝ “Storage Server Standard”
            .判断 (变量_21F80125 ＝ 22)
                变量_23F80125 ＝ “Storage Server Workgroup”
            .判断 (变量_21F80125 ＝ 23)
                变量_23F80125 ＝ “Storage Server Enterprise”
            .判断 (变量_21F80125 ＝ 25)
                变量_23F80125 ＝ “Small Business Server Premium Edition”
            .判断 (变量_21F80125 ＝ 48)
                变量_23F80125 ＝ “Professional”
            .判断 (变量_21F80125 ＝ 121)
                变量_23F80125 ＝ “Education”
            .默认
                变量_22F80125 ＝ “获取失败，请检查版本:” ＋ 到文本 (变量_1FF80125.dwMajorVersion) ＋ “.” ＋ 到文本 (变量_1FF80125.dwMinorVersion)
            .判断结束
            
        .如果真结束
        
        变量_27F80125 ＝ 变量_22F80125
        变量_27F80125 ＝ 选择 (参_是否带名称, 变量_27F80125 ＋ “ ” ＋ 选择 (寻找文本 (变量_27F80125, 变量_23F80125, , 假) ＝ -1, 变量_23F80125, “”), 变量_27F80125)
        变量_27F80125 ＝ 选择 (参_是否取位数, 选择 (变量_28F80125, 变量_27F80125 ＋ “ x64”, 变量_27F80125 ＋ “ x86”), 变量_27F80125)
        .如果真 (参_取SP版本号)
            变量_29F80125 ＝ 到文本 (变量_1FF80125.szCSDVersion)
            .如果真 (取文本长度 (变量_29F80125) ＝ 0)
                变量_29F80125 ＝ 取文本注册项 (#本地机器, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\CSDVersion”, )
            .如果真结束
            变量_2BF80125 ＝ 选择 (取文本长度 (变量_29F80125) ＞ 2, 变量_29F80125, “”)
        .如果真结束
        .如果真 (参_取内部版本)
            .如果 (变量_1FF80125.dwBuildNumber ＝ 0)
                变量_2AF80125 ＝ 取文本注册项 (#本地机器, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\CurrentBuild”, )
            .否则
                变量_2AF80125 ＝ 到文本 (变量_1FF80125.dwBuildNumber)
            .如果结束
            .如果 (变量_2BF80125 ≠ “”)
                变量_2BF80125 ＝ 变量_2BF80125 ＋ “,Build:” ＋ 变量_2AF80125
            .否则
                变量_2BF80125 ＝ “Build:” ＋ 变量_2AF80125
            .如果结束
            
        .如果真结束
        .如果真 (变量_2BF80125 ≠ “”)
            变量_2BF80125 ＝ “ (” ＋ 变量_2BF80125 ＋ “)”
        .如果真结束
        返回 (变量_27F80125 ＋ 变量_2BF80125)
    .如果真结束
    返回 (“”)

.子程序 系统_取系统版本_汇编, 整数型, 公开,  0=未知.50=2k.51=XP.52=2k3.60=vista.61=win7.62=win8  63=winblue
    置入代码 ({ 201, 100, 139, 13, 48, 0, 0, 0, 137, 200, 193, 232, 28, 60, 7, 117, 27, 129, 193, 164, 0, 0, 0, 139, 1, 186, 10, 0, 0, 0, 247, 226, 129, 193, 4, 0, 0, 0, 139, 17, 1, 208, 235, 2, 49, 192, 195 })
    
    返回 (0)
    
    

.子程序 系统_显示隐藏快速启动栏, 逻辑型, 公开, 显示隐藏快速启动栏，目前只在XP系统测试过
    .参数 显示隐藏, 逻辑型, 可空, 可空，默认为假，假=隐藏，真=显示。

    返回 (窗口_置控件状态 (窗口_取快速启动栏句柄 (), 显示隐藏))

.子程序 窗口_取快速启动栏句柄, 整数型, 公开, 成功返回快速启动栏句柄，失败返回0。本命令只有XP下测试过
    .局部变量 变量_8EB90125, 整数型
    .局部变量 变量_8FB90125, 整数型
    .局部变量 变量_90B90125, 整数型

    变量_8EB90125 ＝ 窗口_取句柄 (, , “Shell_TrayWnd”, 字符 (0))
    .如果真 (变量_8EB90125 ＝ -1)
        返回 (0)
    .如果真结束
    变量_8FB90125 ＝ 窗口_取句柄 (变量_8EB90125, , “ReBarWindow32”, 字符 (0))
    .如果真 (变量_8FB90125 ＝ -1)
        返回 (0)
    .如果真结束
    变量_90B90125 ＝ 窗口_取句柄 (变量_8FB90125, , “ToolbarWindow32”, “Quick Launch”)
    .如果真 (变量_90B90125 ＝ -1)
        返回 (0)
    .如果真结束
    返回 (变量_90B90125)

.子程序 系统_取所有磁盘盘符, 整数型, 公开, 返回磁盘数量
    .参数 装载盘符的数组, 文本型, 可空 数组, 装载盘符的数组
    .局部变量 变量_D0290125, 字节集
    .局部变量 变量_D1290125, 字节集, , "0"
    .局部变量 变量_D2290125, 整数型
    .局部变量 变量_D3290125, 整数型
    .局部变量 变量_D4290125, 整数型

    变量_D0290125 ＝ 取空白字节集 (255)
    变量_D3290125 ＝ GetLogicalDriveStringsA (255, 变量_D0290125)
    .如果真 (变量_D3290125 ＞ 0)
        清除数组 (装载盘符的数组)
        变量_D0290125 ＝ 取字节集左边 (变量_D0290125, 变量_D3290125)
        变量_D1290125 ＝ 分割字节集 (变量_D0290125, { 0 }, )
        变量_D4290125 ＝ 取数组成员数 (变量_D1290125)
        .计次循环首 (变量_D4290125, 变量_D2290125)
            加入成员 (装载盘符的数组, 取文本左边 (到文本 (变量_D1290125 [变量_D2290125]), 1))
        .计次循环尾 ()
    .如果真结束
    返回 (变量_D4290125)

.子程序 系统_取磁盘大小信息, 逻辑型, 公开, 获取系统磁盘使用情况
    .参数 盘符, 文本型, , 格式为：C:或C:\
    .参数 已用空间, 长整数型, 参考 可空, 单位为M,想转回KB单位直接乘以1024
    .参数 剩余空间, 长整数型, 参考 可空, 单位为M,想转回KB单位直接乘以1024
    .参数 总大小, 长整数型, 参考 可空, 单位为M,想转回KB单位直接乘以1024
    .局部变量 变量_8A290125, 逻辑型

    变量_8A290125 ＝ GetDiskFreeSpaceExA (盘符, 已用空间, 总大小, 剩余空间)
    已用空间 ＝ 总大小 － 已用空间
    已用空间 ＝ 已用空间 ÷ 1024 ÷ 1024
    剩余空间 ＝ 剩余空间 ÷ 1024 ÷ 1024
    总大小 ＝ 总大小 ÷ 1024 ÷ 1024
    返回 (变量_8A290125)
    

.子程序 系统_取磁盘信息, 逻辑型, 公开, 获取系统磁盘信息
    .参数 磁盘ID, 整数型, 可空, 留空为 磁盘0
    .参数 磁盘信息, 精易_磁盘信息, 参考
    .局部变量 变量_62690125, 整数型
    .局部变量 变量_63690125, 整数型
    .局部变量 变量_64690125, 自定义_4C690141
    .局部变量 变量_65690125, 字节集
    .局部变量 变量_66690125, 字节型
    .局部变量 变量_67690125, 整数型
    .局部变量 变量_68690125, 逻辑型

    变量_62690125 ＝ CreateFileA (“\\.\PhysicalDrive” ＋ 到文本 (磁盘ID), 位或 (2147483648, 1073741824), 0, 0, 3, 0, 0)
    .如果真 (变量_62690125 ≠ -1)
        变量_64690125.成员_56690135.成员_53690135 ＝ 160
        变量_64690125.成员_56690135.成员_54690135 ＝ 236
        变量_65690125 ＝ 取空白字节集 (528)
        .如果真 (DLL_DeviceIoControl (变量_62690125, 508040, 变量_64690125, 32, 变量_65690125, 528, 变量_63690125, 0) ≠ 0)
            磁盘信息.型号 ＝ 删首尾空 (到文本 (转换字节集 (取字节集中间 (变量_65690125, 71, 24))))
            磁盘信息.序列号 ＝ 删首尾空 (到文本 (转换字节集 (取字节集中间 (变量_65690125, 37, 16))))
            磁盘信息.固件版本 ＝ 删首尾空 (到文本 (转换字节集 (取字节集中间 (变量_65690125, 63, 8))))
            变量_68690125 ＝ 真
        .如果真结束
        CloseHandle (变量_62690125)
    .如果真结束
    返回 (变量_68690125)

.子程序 转换字节集, 字节集
    .参数 变量_69690125, 字节集
    .局部变量 变量_6A690125, 整数型
    .局部变量 变量_6B690125, 整数型
    .局部变量 变量_6C690125, 字节集

    变量_6B690125 ＝ 取字节集长度 (变量_69690125)
    变量_6C690125 ＝ 取空白字节集 (变量_6B690125)
    .变量循环首 (1, 变量_6B690125, 2, 变量_6A690125)
        变量_6C690125 [变量_6A690125] ＝ 变量_69690125 [变量_6A690125 ＋ 1]
        变量_6C690125 [变量_6A690125 ＋ 1] ＝ 变量_69690125 [变量_6A690125]
    .变量循环尾 ()
    返回 (变量_6C690125)

.子程序 系统_打开控制面板项, , 公开, 打开系统控制面板设置
    .参数 控制面板项, 整数型, , 1.辅助选项 2.系统属性 3.增加新的打印机 4.添加/删除程序 5.复制磁盘 6.时间/日期 7.显示器设置 8.操纵杆 9.邮件/传真 10.邮局设置 11.鼠标属性 12.增加Modem 13.声音和音频设备属性 14.网络 15.口令 16.区域设置 17.IE设置 18.扫描仪与数字相机设设置 19.ODBC数据源管理器，ODBC数据源、ODBC驱动程序设置 20.电话拨号属性 21.电源管理设置 22.BDE Adminstrator 
    .参数 打开项页, 整数型, 可空, 可空,默认为第一页
    .局部变量 变量_440B0125, 文本型

    .如果真 (控制面板项 ＜ 1 或 控制面板项 ＞ 22)
        控制面板项 ＝ 1
    .如果真结束
    .判断开始 (控制面板项 ＝ 1)
        变量_440B0125 ＝ “access.cpl”
    .判断 (控制面板项 ＝ 2)
        变量_440B0125 ＝ “sysdm.cpl”
    .判断 (控制面板项 ＝ 3)
        运行 (“rundll32.exe shell32.dll,SHHelpShortcuts_RunDLL AddPrinter”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 4)
        变量_440B0125 ＝ “appwiz.cpl”
    .判断 (控制面板项 ＝ 5)
        运行 (“rundll32.exe diskcopy.dll,DiskCopyRunDll”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 6)
        变量_440B0125 ＝ “timedate.cpl”
    .判断 (控制面板项 ＝ 7)
        变量_440B0125 ＝ “desk.cpl”
    .判断 (控制面板项 ＝ 8)
        变量_440B0125 ＝ “joy.cpl”
    .判断 (控制面板项 ＝ 9)
        变量_440B0125 ＝ “mlcfg32.cpl”
    .判断 (控制面板项 ＝ 10)
        变量_440B0125 ＝ “wgpocpl.cpl”
    .判断 (控制面板项 ＝ 11)
        变量_440B0125 ＝ “main.cpl”
    .判断 (控制面板项 ＝ 12)
        运行 (“rundll32.exe shell32.dll,Control_RunDLL modem.cpl,,add”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 13)
        变量_440B0125 ＝ “mmsys.cpl”
    .判断 (控制面板项 ＝ 14)
        运行 (“rundll32.exe shell32.dll,Control_RunDLL ncpa.cpl”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 15)
        运行 (“rundll32.exe shell32.dll,Control_RunDLL password.cpl”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 16)
        变量_440B0125 ＝ “mmsys.cpl”
    .判断 (控制面板项 ＝ 17)
        变量_440B0125 ＝ “inetcpl.cpl”
    .判断 (控制面板项 ＝ 18)
        运行 (“RunDLL32.exe Shell32.dll,Control_RunDLL StiCpl.cpl”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 19)
        变量_440B0125 ＝ “ODBCCP32.CPL”
    .判断 (控制面板项 ＝ 20)
        运行 (“RunDLL32.exe Shell32.dll,Control_RunDLL Telephon.cpl”, 假, )
        返回 ()
    .判断 (控制面板项 ＝ 21)
        变量_440B0125 ＝ “PowerCfg.cpl”
    .判断 (控制面板项 ＝ 22)
        运行 (“RunDLL32.exe Shell32.dll,Control_RunDLL BdeAdmin.CPL”, 假, )
        返回 ()
    .默认
        
    .判断结束
    .如果真 (打开项页 ＜ 0)
        打开项页 ＝ 0
    .如果真结束
    运行 (“rundll32.exe shell32.dll,Control_RunDLL ” ＋ 变量_440B0125 ＋ “,,” ＋ 到文本 (打开项页), 假, #普通激活)

.子程序 系统_屏蔽任务管理器, , 公开, 即:禁止CTRL+ALT+DEL启动任务管理器,不用重启,仅对WINNT系统有效.
    写注册项 (#根类, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 1)
    写注册项 (#现行设置, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 1)
    写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 1)

.子程序 系统_打开网络连接属性, , 公开, 打开系统网络连接属性设置
    写注册项 (3, “Software\Policies\Microsoft\Windows\Network Connections\NC_EnableAdminProhibits”, 0)
    运行 (“rundll32.exe shell32.dll,Control_RunDLL ” ＋ 目录_取system32目录 () ＋ “ncpa.cpl”, 假, )

.子程序 系统_恢复任务管理器, , 公开, 即:恢复被禁止的CTRL+ALT+DEL启动任务管理器
    写注册项 (#根类, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 0)
    写注册项 (#现行设置, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 0)
    写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Policies\System\DisableTaskMgr”, 0)

.子程序 系统_屏蔽任务管理器1, , 公开, 通过打开taskmgr.exe方式进行屏蔽
    文件_执行 (“taskmgr.exe”, , #隐藏窗口)
    CreateMutexA (0, 0, “Local\\TASKMGR.879e4d63-6c0e-4544-97f2-1244bd3f6de0”)
    类变量_C9530115 ＝ 打开文件 (目录_取特定目录 (10) ＋ “taskmgr.exe”, 1, 4)
    系统_屏蔽任务管理器 ()

.子程序 系统_恢复任务管理器1, , 公开, 关闭“系统_屏蔽任务管理器1”打开的taskmgr.exe
    关闭文件 (类变量_C9530115)
    进程_结束1 (“taskmgr.exe”)
    系统_恢复任务管理器 ()

.子程序 系统_显示用户操作区, , 公开, 显示被隐藏的系统用户操作区
    .局部变量 变量_D8290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_D8290125)
    窗口_置控件状态 (变量_D8290125 [3], 真)

.子程序 系统_隐藏用户操作区, , 公开, 隐藏系统用户操作区
    .局部变量 变量_D9290125, 整数型, , "0"

    窗口_枚举子窗口 (窗口_取任务栏句柄 (), 变量_D9290125)
    窗口_置控件状态 (变量_D9290125 [3], 假)

.子程序 _取连接数量, 整数型
    .局部变量 变量_44B50125, 自定义_8D700141, , "10"
    .局部变量 变量_45B50125, 整数型
    .局部变量 变量_46B50125, 整数型

    变量_44B50125 [1].成员_99700135 ＝ GlobalSize_取连接信息用结构 (变量_44B50125 [1])
    变量_45B50125 ＝ 变量_44B50125 [1].成员_99700135 × 256
    RasEnumEntries (0, 0, 变量_44B50125, 变量_45B50125, 变量_46B50125)
    返回 (变量_46B50125)

.子程序 _取连接名称, 文本型
    .参数 变量_4CB50125, 整数型
    .参数 变量_4DB50125, 文本型, 参考 可空 数组
    .局部变量 变量_4EB50125, 自定义_8D700141, , "10"
    .局部变量 变量_4FB50125, 整数型
    .局部变量 变量_50B50125, 整数型
    .局部变量 变量_51B50125, 整数型

    .如果真 (变量_4CB50125 ＞ 10 或 变量_4CB50125 ＜ 1)
        返回 (“”)
    .如果真结束
    变量_4EB50125 [1].成员_99700135 ＝ GlobalSize_取连接信息用结构 (变量_4EB50125 [1])
    变量_4FB50125 ＝ 变量_4EB50125 [1].成员_99700135 × 256
    RasEnumEntries (0, 0, 变量_4EB50125, 变量_4FB50125, 变量_50B50125)
    .如果真 (是否为空 (变量_4DB50125))
        返回 (到文本 (变量_4EB50125 [变量_4CB50125].成员_9A700135))
    .如果真结束
    .计次循环首 (变量_50B50125, 变量_51B50125)
        加入成员 (变量_4DB50125, 到文本 (变量_4EB50125 [变量_51B50125].成员_9A700135))
    .计次循环尾 ()
    返回 (到文本 (变量_50B50125))

.子程序 系统_设置IE代理地址, 逻辑型, 公开, 成功返回真，失败返回假；
    .参数 上网方式, 字节型, , 0=用路由器上网  1=用ADSL拨号上网
    .参数 代理IP_端口, 文本型, 可空, 可空。留空为取消设置。要代理的IP地址和端口，如：127.0.0.1:8080
    .参数 立即更新设置, 逻辑型, 可空, 默认为真，为假时需要手动重启IE浏览器
    .局部变量 变量_28AF0125, 整数型
    .局部变量 变量_29AF0125, 整数型
    .局部变量 变量_2AAF0125, 整数型

    .如果真 (是否为空 (立即更新设置))
        立即更新设置 ＝ 真
    .如果真结束
    
    .判断开始 (上网方式 ＝ 0)
        写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\proxyserver”, 代理IP_端口)
        .如果 (删首尾空 (代理IP_端口) ＝ “”)
            写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\proxyenable”, 0)
        .否则
            写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\proxyenable”, 1)
        .如果结束
        
    .判断 (上网方式 ＝ 1)
        变量_28AF0125 ＝ _取连接数量 ()
        变量_2AAF0125 ＝ 取文本长度 (删全部空 (代理IP_端口))
        .如果 (变量_2AAF0125 ＝ 0)
            .计次循环首 (变量_28AF0125, 变量_29AF0125)
                删除注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\Connections\” ＋ _取连接名称 (变量_29AF0125))
            .计次循环尾 ()
        .否则
            .计次循环首 (变量_28AF0125, 变量_29AF0125)
                写注册项 (3, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\Connections\” ＋ _取连接名称 (变量_29AF0125), { 60, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0 } ＋ 字节集_十六进制到字节集 (取十六进制文本 (变量_2AAF0125)) ＋ { 0, 0, 0 } ＋ 到字节集 (代理IP_端口) ＋ { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 })
            .计次循环尾 ()
        .如果结束
        
    .默认
        
    .判断结束
    
    .如果真 (立即更新设置)
        InternetSetOptionA_传址 (0, 39, 0, 0)
    .如果真结束
    返回 (InternetSetOptionA_传址 (0, 37, 0, 0))

.子程序 系统_取IE代理, 逻辑型, 公开, 带参返回IE相关代理地址，详细请参考IE属性窗口代理中高级代理属性，成功返回真，失败返回假。
    .参数 参_代理类型, 整数型, 参考 可空, 变量储存返回值,返回常量类型 INTERNET_OPEN_TYPE_PRECONFIG=0；INTERNET_OPEN_TYPE_DIRECT=1；INTERNET_OPEN_TYPE_PROXY=2
    .参数 参_HTTP地址, 文本型, 参考 可空, 变量储存返回值
    .参数 参_HTTPS安全地址, 文本型, 参考 可空, 变量储存返回值
    .参数 参_FTP地址, 文本型, 参考 可空, 变量储存返回值
    .参数 参_套接字地址, 文本型, 参考 可空, 变量储存返回值
    .参数 参_例外地址, 文本型, 参考 可空, 变量储存返回值
    .局部变量 变量_05EE0125, 逻辑型
    .局部变量 变量_06EE0125, 整数型
    .局部变量 变量_07EE0125, 整数型
    .局部变量 变量_08EE0125, 整数型
    .局部变量 变量_09EE0125, 整数型
    .局部变量 变量_0AEE0125, 文本型

    InternetQueryOption (0, 38, 0, 变量_06EE0125)
    变量_07EE0125 ＝ LocalAlloc (64, 变量_06EE0125)
    变量_05EE0125 ＝ InternetQueryOption (0, 38, 变量_07EE0125, 变量_06EE0125)
    .如果真 (变量_05EE0125)
        参_代理类型 ＝ 取字节集数据 (指针到字节集 (变量_07EE0125, 4), #整数型, )
        变量_08EE0125 ＝ 取字节集数据 (指针到字节集 (变量_07EE0125 ＋ 4, 4), #整数型, )
        变量_09EE0125 ＝ 取字节集数据 (指针到字节集 (变量_07EE0125 ＋ 8, 4), #整数型, )
        变量_0AEE0125 ＝ 到文本 (指针到字节集 (变量_08EE0125, lstrlenA (变量_08EE0125)))
        参_HTTP地址 ＝ 文本_取出中间文本 (变量_0AEE0125, “http=”, “ ”)
        参_HTTPS安全地址 ＝ 文本_取出中间文本 (变量_0AEE0125, “https=”, “ ”)
        参_FTP地址 ＝ 文本_取右边 (变量_0AEE0125, “ftp=”, )
        参_套接字地址 ＝ 文本_取出中间文本 (变量_0AEE0125, “socks=”, “ ”)
        参_例外地址 ＝ 到文本 (指针到字节集 (变量_09EE0125, lstrlenA (变量_09EE0125)))
    .如果真结束
    LocalFree (变量_07EE0125)
    返回 (变量_05EE0125)

.子程序 系统_创建桌面快捷方式, 逻辑型, 公开, 创建桌面快捷方式 (成功返回真,失败返回假)
    .参数 lnk名称, 文本型, , 如：精易编程助手！注：本参数会传址，不推荐传入变量
    .参数 目标, 文本型, , 指向的文件全路径文件名,如 C:\001.txt，如果是目录就直接为 C:\001
    .参数 参数文本, 文本型, 可空, 执行文件的参数
    .参数 图标文件, 文本型, 可空, 图标文件的路径  可空:为空时用目标的第一个图标
    .参数 运行方式, 整数型, 可空, 1,常规方式，3,最大化，7,最小化
    .参数 备注, 文本型, 可空, 快方式的备注信息
    .参数 快捷键, 文本型, 可空, 启动快捷方式的快捷键  如“Ctrl+Alt+Y”
    .局部变量 变量_CE790125, 文本型
    .局部变量 变量_CF790125, 文本型, , "0"
    .局部变量 变量_D0790125, 对象
    .局部变量 变量_D1790125, 整数型
    .局部变量 变量_E6D50225, 逻辑型

    .如果真 (寻找文本 (lnk名称, “\”, , 假) ≠ -1)
        lnk名称 ＝ 文件_取文件名 (lnk名称)
    .如果真结束
    .如果 (寻找文本 (lnk名称, “.lnk”, , 真) ＝ -1)
        lnk名称 ＝ 目录_取特定目录 () ＋ lnk名称 ＋ “.lnk”
    .否则
        lnk名称 ＝ 目录_取特定目录 () ＋ lnk名称
    .如果结束
    .如果真 (文件是否存在 (lnk名称))
        删除文件 (lnk名称)
    .如果真结束
    变量_CF790125 ＝ 分割文本 (目标, “\”, )
    .如果真 (取数组下标 (变量_CF790125, ) ＜ 2)
        返回 (假)
    .如果真结束
    .计次循环首 (取数组下标 (变量_CF790125, ) － 1, 变量_D1790125)
        变量_CE790125 ＝ 变量_CE790125 ＋ 变量_CF790125 [变量_D1790125] ＋ “\”
    .计次循环尾 ()
    CoInitialize (0)
    .如果真 (变量_D0790125.创建 (“WshShell”, “wshom.ocx”))
        变量_D0790125 ＝ 变量_D0790125.对象型方法 (“CreateShortcut”, lnk名称)
        变量_E6D50225 ＝ 取反 (变量_D0790125.是否为空 ())
        .如果真 (变量_E6D50225 且 变量_D0790125.写属性 (“TargetPath”, 目标))
            变量_D0790125.写属性 (“WorkingDirectory”, 变量_CE790125)
            .如果 (是否为空 (图标文件))
                .判断开始 (文件_取扩展名 (目标) ＝ “”)
                    变量_D0790125.写属性 (“IconLocation”, “SHELL32.dll,4”)
                .默认
                    变量_D0790125.写属性 (“IconLocation”, 目标 ＋ “,0”)
                .判断结束
                
            .否则
                变量_D0790125.写属性 (“IconLocation”, 图标文件)
            .如果结束
            变量_D0790125.写属性 (“WindowStyle”, 运行方式)
            变量_D0790125.写属性 (“Description”, 备注)
            变量_D0790125.写属性 (“Arguments”, 参数文本)
            变量_D0790125.写属性 (“Hotkey”, 快捷键)
            变量_D0790125 ＝ 变量_D0790125.对象型方法 (“Save”, )
        .如果真结束
        
    .如果真结束
    CoUninitialize ()
    返回 (变量_E6D50225)

.子程序 系统_创建桌面快捷方式W, 逻辑型, 公开, 创建桌面快捷方式
    .参数 lnk路径, 字节集
    .参数 目标, 字节集
    .参数 命令行, 字节集, 可空
    .参数 图标路径, 字节集, 可空, icon
    .参数 起始位置, 字节集, 可空
    .参数 快捷键, 短整数型, 可空, #HOTKEYF_*
    .参数 运行方式, 整数型, 可空, #SW_*
    .参数 备注, 字节集, 可空
    .局部变量 变量_A2F30225, 整数型
    .局部变量 变量_A1F30225, 整数型
    .局部变量 变量_B3F30225, 整数型
    .局部变量 变量_E2F30225, 字节集
    .局部变量 变量_19F40225, 逻辑型

    CoInitialize (#NULL)
    变量_A2F30225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_24FB0228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_25FB0228), 变量_A1F30225)
    .如果真 (变量_A2F30225 ＝ #<?未知本地类型?> 且 变量_A1F30225 ≠ #NULL)
        变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (#图片资源_26FB0228), 取指针整数_ (变量_B3F30225), , , , , , , )
        .如果真 (变量_A2F30225 ＝ #<?未知本地类型?> 且 变量_B3F30225 ≠ #NULL)
            变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (目标), , , , , , , , )
            .如果 (起始位置 ＝ { })
                变量_E2F30225 ＝ 字节集_寻找取左 (目标, { 92, 0 }, -1) ＋ { 0, 0 }
                变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (变量_E2F30225), , , , , , , , )
            .否则
                变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (起始位置), , , , , , , , )
            .如果结束
            .如果真 (命令行 ≠ { })
                CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (命令行), , , , , , , , )
            .如果真结束
            .如果真 (图标路径 ≠ { })
                CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (图标路径), 0, , , , , , , )
            .如果真结束
            .如果真 (快捷键 ≠ 0)
                
                变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 快捷键, , , , , , , , )
            .如果真结束
            .如果 (运行方式 ＝ 0)
                变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, #SW_SHOWNORMAL, , , , , , , , )
            .否则
                变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 运行方式, , , , , , , , )
            .如果结束
            .如果真 (备注 ≠ { })
                变量_A2F30225 ＝ CallObject (变量_A1F30225, #<?未知本地类型?>, 取指针_字节集型 (备注), , , , , , , , )
            .如果真结束
            变量_A2F30225 ＝ CallObject (变量_B3F30225, #<?未知本地类型?>, 取指针_字节集型 (lnk路径), 0, , , , , , , )
            变量_19F40225 ＝ 变量_A2F30225 ＝ #<?未知本地类型?>
            SafeRelease (变量_B3F30225)
        .如果真结束
        SafeRelease (变量_A1F30225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_19F40225)

.子程序 系统_取桌面快捷方式, 文本型, 公开, 取桌面快捷方式 成功返回文件路径,失败返回空文本
    .参数 快捷方式全路径, 文本型, , 快捷方式全路径
    .局部变量 变量_52F30225, 字节集

    变量_52F30225 ＝ 编码_Ansi到Unicode (快捷方式全路径, )
    变量_52F30225 ＝ 系统_取桌面快捷方式W (变量_52F30225, )
    返回 (编码_Unicode到Ansi (变量_52F30225))

.子程序 系统_取桌面快捷方式W, 字节集, 公开, 获取快捷方式的目标路径
    .参数 lnk路径, 字节集
    .参数 文件的信息, WIN32_FIND_DATAW, 可空, 接收
    .参数 命令行, 字节集, 可空, 接收
    .参数 图标路径, 字节集, 可空, 接收
    .参数 起始位置, 字节集, 可空, 接收
    .参数 快捷键, 短整数型, 参考 可空, 接收
    .参数 运行方式, 整数型, 参考 可空, 接收
    .参数 备注, 字节集, 可空, 接收
    .局部变量 变量_43F30225, 整数型
    .局部变量 变量_46F30225, 整数型
    .局部变量 变量_47F30225, 整数型
    .局部变量 变量_49F30225, 整数型
    .局部变量 变量_4AF30225, 字节集
    .局部变量 变量_4BF30225, 整数型
    .局部变量 变量_5AF40225, 整数型

    CoInitialize (#NULL)
    变量_43F30225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_24FB0228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_26FB0228), 变量_46F30225)
    .如果真 (变量_43F30225 ＝ #<?未知本地类型?> 且 变量_46F30225 ≠ #NULL)
        变量_43F30225 ＝ CallObject (变量_46F30225, #<?未知本地类型?>, 取指针_字节集型 (#图片资源_25FB0228), 取指针整数_ (变量_47F30225), , , , , , , )
        .如果真 (变量_43F30225 ＝ #<?未知本地类型?> 且 变量_47F30225 ≠ #NULL)
            变量_43F30225 ＝ CallObject (变量_46F30225, #<?未知本地类型?>, 取指针_字节集型 (lnk路径), #<?未知本地类型?>, , , , , , , )
            .如果真 (变量_43F30225 ＝ #<?未知本地类型?>)
                变量_49F30225 ＝ LocalAlloc (#LMEM_ZEROINIT, #MAX_PATH × 2)
                .如果真 (是否为空 (命令行) ＝ 假)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 变量_49F30225, #MAX_PATH, , , , , , , )
                    命令行 ＝ 指针_到字节集W (变量_49F30225)
                .如果真结束
                .如果真 (是否为空 (图标路径) ＝ 假)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 变量_49F30225, #MAX_PATH, 取指针整数_ (变量_5AF40225), , , , , , )
                    图标路径 ＝ 指针_到字节集W (变量_49F30225)
                .如果真结束
                .如果真 (是否为空 (起始位置) ＝ 假)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 变量_49F30225, #MAX_PATH, , , , , , , )
                    起始位置 ＝ 指针_到字节集W (变量_49F30225)
                .如果真结束
                .如果真 (是否为空 (快捷键) ＝ 假)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 取变量地址_短整数 (快捷键), , , , , , , , )
                .如果真结束
                .如果真 (是否为空 (运行方式) ＝ 假)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 取指针整数_ (运行方式), , , , , , , , )
                .如果真结束
                .如果真 (是否为空 (备注) ＝ 假)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 变量_49F30225, #MAX_PATH, , , , , , , )
                    备注 ＝ 指针_到字节集W (变量_49F30225)
                .如果真结束
                
                .如果 (是否为空 (文件的信息))
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 变量_49F30225, #MAX_PATH, #NULL, 0, , , , , )
                .否则
                    变量_4BF30225 ＝ LocalAlloc (#LMEM_ZEROINIT, 592)
                    变量_43F30225 ＝ CallObject (变量_47F30225, #<?未知本地类型?>, 变量_49F30225, #MAX_PATH, 变量_4BF30225, 0, , , , , )
                    DLL_RtlMoveMemory43 (文件的信息, 变量_4BF30225, 592)
                    LocalFree (变量_4BF30225)
                .如果结束
                变量_4AF30225 ＝ 指针_到字节集W (变量_49F30225)
                LocalFree (变量_49F30225)
            .如果真结束
            SafeRelease (变量_47F30225)
        .如果真结束
        SafeRelease (变量_46F30225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_4AF30225)

.子程序 系统_清空系统临时目录, 逻辑型, 公开, 清空系统临时目录中的全部文件
    .参数 是否删除只读文件, 逻辑型, 可空
    .参数 是否删除子目录, 逻辑型, 可空
    .局部变量 变量_75090125, 文本型
    .局部变量 变量_76090125, 文本型

    变量_75090125 ＝ 目录_取特定目录 (11)
    .如果真 (删全部空 (变量_75090125) ＝ “”)
        返回 (假)
    .如果真结束
    变量_76090125 ＝ 寻找文件 (变量_75090125 ＋ “*.*”, )
    .判断循环首 (变量_76090125 ≠ “”)
        .如果真 (是否删除只读文件 ＝ 真)
            置文件属性 (变量_75090125 ＋ 变量_76090125, #存档文件)
        .如果真结束
        变量_76090125 ＝ 寻找文件 (, )
    .判断循环尾 ()
    .如果真 (是否删除子目录 ＝ 真)
        变量_76090125 ＝ 寻找文件 (变量_75090125 ＋ “*.*”, #子目录)
        .判断循环首 (变量_76090125 ≠ “”)
            目录_删除目录 (变量_75090125 ＋ 变量_76090125)
            变量_76090125 ＝ 寻找文件 (, #子目录)
        .判断循环尾 ()
    .如果真结束
    返回 (真)

.子程序 系统_设置为默认浏览器, , 公开, 如：自己做了个易语言浏览器，可以用这句设置成默认的；
    .参数 文件名绝对路径, 文本型, 可空, 可空:如果留空将设置本程序为默认浏览器;浏览器的可执行文件路径；
    .参数 类型, 整数型, 可空, 可空:默认为0,0=设置指定或本程序为默认浏览器,1=设置IE为默认浏览器;
    .局部变量 变量_50880125, 文本型

    变量_50880125 ＝ 取运行目录 () ＋ “\”
    .如果 (类型 ＝ 0)
        .如果 (是否为空 (文件名绝对路径) ＝ 真)
            写注册项 (1, “htmlfile\shell\”, “e”)
            写注册项 (1, “htmlfile\shell\e\command\”, 变量_50880125 ＋ 取执行文件名 () ＋ “ ” ＋ “%1”)
            写注册项 (1, “HTTP\shell\”, “e”)
            写注册项 (1, “HTTP\shell\e\command\”, 变量_50880125 ＋ 取执行文件名 () ＋ “ ” ＋ “%1”)
            写注册项 (1, “https\shell\”, “e”)
            写注册项 (1, “https\shell\e\command\”, 变量_50880125 ＋ 取执行文件名 () ＋ “ ” ＋ “%1”)
            写注册项 (1, “InternetShortcut\shell\”, “e”)
            写注册项 (1, “InternetShortcut\shell\e\command\”, 变量_50880125 ＋ 取执行文件名 () ＋ “ ” ＋ “%1”)
            写注册项 (1, “mhtmlfile\shell\”, “e”)
            写注册项 (1, “mhtmlfile\shell\e\command\”, 变量_50880125 ＋ 取执行文件名 () ＋ “ ” ＋ “%1”)
            
        .否则
            写注册项 (1, “htmlfile\shell\”, “e”)
            写注册项 (1, “htmlfile\shell\e\command\”, 文件名绝对路径 ＋ “ ” ＋ “%1”)
            写注册项 (1, “HTTP\shell\”, “e”)
            写注册项 (1, “HTTP\shell\e\command\”, 文件名绝对路径 ＋ “ ” ＋ “%1”)
            写注册项 (1, “https\shell\”, “e”)
            写注册项 (1, “https\shell\e\command\”, 文件名绝对路径 ＋ “ ” ＋ “%1”)
            写注册项 (1, “InternetShortcut\shell\”, “e”)
            写注册项 (1, “InternetShortcut\shell\e\command\”, 文件名绝对路径 ＋ “ ” ＋ “%1”)
            写注册项 (1, “mhtmlfile\shell\”, “e”)
            写注册项 (1, “mhtmlfile\shell\e\command\”, 文件名绝对路径 ＋ “ ” ＋ “%1”)
        .如果结束
        
    .否则
        写注册项 (1, “htmlfile\shell\”, “open”)
        写注册项 (1, “HTTP\shell\”, “open”)
        写注册项 (1, “https\shell\”, “open”)
        写注册项 (1, “InternetShortcut\shell\”, “open”)
        写注册项 (1, “mhtmlfile\shell\”, “open”)
    .如果结束
    

.子程序 系统_取DOS执行结果, 文本型, 公开, 注意:该命令会阻塞,一直到cmd中的内容执行完毕后才会返回.
    .参数 命令行文本, 文本型
    .参数 即时回显, 子程序指针, 可空, DOS即时回显信息回调函数 回调DOS函数(回显信息) 返回逻辑值,真:停止,假:继续
    .局部变量 变量_A1ED0225, 字节集

    .如果 (是否为空 (即时回显))
        变量_A1ED0225 ＝ 系统_取DOS执行结果T (编码_Ansi到Unicode (命令行文本, ), , )
    .否则
        变量_A1ED0225 ＝ 系统_取DOS执行结果T (编码_Ansi到Unicode (命令行文本, ), 即时回显, )
    .如果结束
    返回 (取字节集数据 (变量_A1ED0225, #文本型, ))

.子程序 系统_取DOS执行结果T, 字节集, 公开, 该命令会阻塞，一直到CMD中的内容执行完毕后才会返回
    .参数 命令行文本, 字节集
    .参数 即时回显, 子程序指针, 可空, DOS即时回显信息回调函数！回调DOS函数(回显信息) 返回逻辑值；真、停止，假、继续
    .参数 UNICODE, 逻辑型, 可空
    .局部变量 变量_90ED0225, 整数型
    .局部变量 变量_91ED0225, 整数型
    .局部变量 变量_92ED0225, 自定义_C6C80141
    .局部变量 变量_93ED0225, 整数型
    .局部变量 变量_0C100325, 字节集
    .局部变量 变量_94ED0225, 字节集
    .局部变量 变量_95ED0225, STARTUPINFO
    .局部变量 变量_96ED0225, 自定义_AAB50241
    .局部变量 变量_97ED0225, 整数型
    .局部变量 变量_98ED0225, 逻辑型
    .局部变量 变量_99ED0225, 整数型
    .局部变量 变量_9AED0225, 字节集
    .局部变量 变量_9BED0225, 字节集

    变量_92ED0225.成员_DAC80135 ＝ 12
    变量_92ED0225.成员_DBC80135 ＝ #NULL
    变量_92ED0225.成员_DCC80135 ＝ 真
    变量_98ED0225 ＝ DLL_CreatePipe (变量_90ED0225, 变量_91ED0225, 变量_92ED0225, 0)
    .如果真 (变量_98ED0225 ＝ 假)
        返回 ({ })
    .如果真结束
    变量_95ED0225.cb ＝ 68
    变量_95ED0225.dwFlags ＝ 位或 (#STARTF_USESTDHANDLES, #STARTF_USESHOWWINDOW)
    变量_95ED0225.wShowWindow ＝ #SW_HIDE
    变量_95ED0225.hStdInput ＝ 变量_90ED0225
    变量_95ED0225.hStdOutput ＝ 变量_91ED0225
    变量_95ED0225.hStdError ＝ 变量_91ED0225
    变量_0C100325 ＝ 取空白字节集 (incShl (#MAX_PATH, 真))
    DLL_SHGetSpecialFolderPathW (#NULL, 取指针字节集_ (变量_0C100325), #CSIDL_SYSTEM, 假)
    写到内存 (编码_Ansi到Unicode (选择 (_WIN32_WINNT ≥ #_WIN32_WINNT_WINXP, “\cmd.exe”, “\command.com”), ), 取指针字节集_ (变量_0C100325) ＋ incShl (文本_取长度W (变量_0C100325), 真), )
    变量_94ED0225 ＝ 编码_Ansi到Unicode (“ /c ”, 真) ＋ 命令行文本
    变量_93ED0225 ＝ 取字节集长度 (变量_94ED0225)
    变量_94ED0225 ＝ 变量_94ED0225 ＋ 取空白字节集 (incShl (#<?未知本地类型?>, 真) － 变量_93ED0225)
    变量_98ED0225 ＝ DLL_CreateProcessW (取指针字节集_ (变量_0C100325), 取指针_字节集型 (变量_94ED0225), 取数据_通用型 (变量_92ED0225), #NULL, 真, 0, #NULL, #NULL, 变量_95ED0225, 变量_96ED0225)
    CloseHandle (变量_91ED0225)
    .如果真 (变量_98ED0225 ＝ 假)
        CloseHandle (变量_90ED0225)
        返回 ({ })
    .如果真结束
    CloseHandle (变量_96ED0225.成员_ABB50235)
    DLL_WaitForInputIdle (变量_96ED0225.成员_ACB50235, 1000)
    .判断循环首 (变量_97ED0225 ≠ -1)
        DLL_PeekNamedPipe (变量_90ED0225, #NULL, 0, #NULL, 变量_97ED0225, #NULL)
        .如果 (变量_97ED0225 ＞ 0)
            变量_9AED0225 ＝ 取空白字节集 (变量_97ED0225)
            DLL_ReadFile (变量_90ED0225, 变量_9AED0225, 变量_97ED0225, 变量_97ED0225, #NULL)
            变量_9BED0225 ＝ 变量_9BED0225 ＋ 变量_9AED0225
            .如果真 (是否为空 (即时回显) ＝ 假)
                .如果 (UNICODE)
                    变量_9AED0225 ＝ A2W_CP (变量_9AED0225, m_CodePage)
                .否则
                    变量_9AED0225 ＝ 变量_9AED0225 ＋ { 0 }
                .如果结束
                变量_98ED0225 ＝ 程序_执行整数子程序 (即时回显, 取指针_字节集型 (变量_9AED0225), , ) ≠ 0
                .如果真 (变量_98ED0225)
                    跳出循环 ()
                .如果真结束
                
            .如果真结束
            
        .否则
            DLL_GetExitCodeProcess (变量_96ED0225.成员_ACB50235, 变量_99ED0225)
            .如果真 (变量_99ED0225 ≠ #STILL_ACTIVE)
                跳出循环 ()
            .如果真结束
            
        .如果结束
        Sleep (1)
    .判断循环尾 ()
    CloseHandle (变量_96ED0225.成员_ACB50235)
    CloseHandle (变量_90ED0225)
    .如果真 (变量_9BED0225 ＝ { })
        返回 ({ })
    .如果真结束
    .如果 (UNICODE)
        返回 (A2W_CP (变量_9BED0225, m_CodePage))
    .否则
        变量_9BED0225 ＝ 变量_9BED0225 ＋ { 0 }
    .如果结束
    返回 (变量_9BED0225)

.子程序 系统_修改IP地址和网关和子网掩码, 逻辑型, 公开, CMD方式修改,警告：该命令可能让你无法联网，使用前请确保你有还原到正常网络的能力！Win10下运行返回值可能有误
    .参数 IP地址, 文本型, , 格式为：192.168.1.152 (点分十进制的IP表示)
    .参数 网关, 文本型, , 格式为：192.168.1.1 (点分十进制的IP表示)
    .参数 子网掩码, 文本型, , 格式为：255.255.255.0 (点分十进制的IP表示)
    .参数 连接名称, 文本型, 可空, 连接的名称,留空则为:本地连接
    .参数 错误原因, 文本型, 参考 可空, 可以提供一个文本变量,接收当修改失败时的错误信息.
    .局部变量 变量_7DC80125, 文本型

    .如果真 (是否为空 (连接名称))
        连接名称 ＝ “本地连接”
    .如果真结束
    变量_7DC80125 ＝ 系统_取DOS执行结果 (“netsh interface ip set address ” ＋ #引号 ＋ 连接名称 ＋ #引号 ＋ “ static ” ＋ IP地址 ＋ “ ” ＋ 子网掩码 ＋ “ ” ＋ 网关 ＋ “ 1”, )
    .如果真 (寻找文本 (变量_7DC80125, “确定”, , 假) ＞ 0)
        返回 (真)
    .如果真结束
    错误原因 ＝ 子文本替换 (变量_7DC80125, #换行符, “”, 倒找文本 (变量_7DC80125, #换行符, , 假) － 2, 1, 真)
    返回 (假)

.子程序 系统_修改DNS, 逻辑型, 公开, 如果首选DNS跟备用DNS都不填则默认设置成自动获取,成功返回真,失败返回假
    .参数 连接名称, 文本型, 可空, 为空则自动获取单前连接的网络名称
    .参数 首选DNS, 文本型, 可空, 格式：1.1.1.1
    .参数 备用DNS, 文本型, 可空, 格式：1.1.1.1
    .参数 错误原因, 文本型, 参考 可空, 可以提供一个文本变量,接收当修改失败时的错误信息
    .局部变量 变量_16D70225, 文本型
    .局部变量 变量_17D70225, 精易_网卡信息, , "0"
    .局部变量 变量_18D70225, 精易_网卡信息_彗星, , "0"
    .局部变量 变量_19D70225, 整数型
    .局部变量 变量_1AD70225, 文本型

    
    .如果真 (连接名称 ＝ “”)
        变量_19D70225 ＝ 系统_取网卡信息 (变量_17D70225)
        .判断开始 (变量_19D70225 ＞ 0)
            连接名称 ＝ 变量_17D70225 [1].连接名称
        .默认
            变量_19D70225 ＝ 系统_取网卡信息_彗星版 (变量_18D70225)
            .如果真 (变量_19D70225 ＞ 0)
                连接名称 ＝ 变量_18D70225 [1].连接名称
            .如果真结束
            
        .判断结束
        
    .如果真结束
    
    .判断开始 (首选DNS ＝ “” 且 备用DNS ＝ “”)
        变量_16D70225 ＝ “cmd /c netsh interface ip set dns name=” ＋ #引号 ＋ 连接名称 ＋ #引号 ＋ “ source=dhcp”
    .判断 (首选DNS ≠ “” 且 备用DNS ≠ “”)
        变量_16D70225 ＝ “cmd /c netsh interface ip set dns ” ＋ 连接名称 ＋ “ static ” ＋ 首选DNS
        变量_1AD70225 ＝ 系统_取DOS执行结果 (变量_16D70225)
        .如果真 (变量_1AD70225 ≈ “确定。” 或 变量_1AD70225 ＝ #换行符)
            变量_16D70225 ＝ “cmd /c netsh interface ip add dns name=” ＋ #引号 ＋ 连接名称 ＋ #引号 ＋ “ addr=” ＋ 备用DNS ＋ “ index=2”
            变量_1AD70225 ＝ 系统_取DOS执行结果 (变量_16D70225)
            .如果真 (变量_1AD70225 ≈ “确定。” 或 变量_1AD70225 ＝ #换行符)
                返回 (真)
            .如果真结束
            
        .如果真结束
        错误原因 ＝ 子文本替换 (变量_1AD70225, #换行符, “”, 倒找文本 (变量_1AD70225, #换行符, , 假) － 2, 1, 真)
        返回 (假)
    .判断 (首选DNS ＝ “” 且 备用DNS ≠ “”)
        变量_16D70225 ＝ “cmd /c netsh interface ip add dns name=” ＋ #引号 ＋ 连接名称 ＋ #引号 ＋ “ addr=” ＋ 备用DNS ＋ “ index=2”
    .判断 (首选DNS ≠ “” 且 备用DNS ＝ “”)
        变量_16D70225 ＝ “cmd /c netsh interface ip set dns ” ＋ 连接名称 ＋ “ static ” ＋ 首选DNS
    .默认
        
    .判断结束
    
    变量_1AD70225 ＝ 系统_取DOS执行结果 (变量_16D70225)
    .如果真 (变量_1AD70225 ≈ “确定。” 或 变量_1AD70225 ＝ #换行符)
        返回 (真)
    .如果真结束
    
    错误原因 ＝ 子文本替换 (变量_1AD70225, #换行符, “”, 倒找文本 (变量_1AD70225, #换行符, , 假) － 2, 1, 真)
    返回 (假)

.子程序 系统_删除MAC地址, , 公开, 删除注册表中MAC地址
    .参数 第几块网卡, 整数型, 可空, 默认为1

    .如果真 (是否为空 (第几块网卡))
        第几块网卡 ＝ 1
    .如果真结束
    删除注册项 (#本地机器, “SYSTEM\ControlSet001\Control\Class\{4D36E972-E325-11CE-BFC1-08002bE10318}\000” ＋ 到文本 (第几块网卡) ＋ “\NetworkAddress”)

.子程序 系统_修改MAC地址, , 公开, 重启电脑后生效
    .参数 MAC, 文本型, , 格式为：A2:36:42:04:40:30
    .参数 第几块网卡, 整数型, 可空, 默认为1

    .如果真 (是否为空 (第几块网卡))
        第几块网卡 ＝ 1
    .如果真结束
    写注册项 (#本地机器, “SYSTEM\ControlSet001\Control\Class\{4D36E972-E325-11CE-BFC1-08002bE10318}\000” ＋ 到文本 (第几块网卡) ＋ “\NetworkAddress”, 子文本替换 (MAC, “:”, “”, , , 真))

.子程序 系统_取MAC地址, 文本型, 公开, 获取本机网卡MAC地址(如：A2:36:42:04:40:30)
    .参数 目标IP, 文本型, 可空, 可空：默认为取自己的。也可以取局域网内的其它电脑的。如：192.168.1.100
    .局部变量 变量_01A90125, 字节型, , "6"
    .局部变量 变量_02A90125, 字节集
    .局部变量 变量_03A90125, 整数型
    .局部变量 变量_04A90125, 整数型
    .局部变量 变量_05A90125, 字节集
    .局部变量 变量_06A90125, 文本型, , "0"
    .局部变量 变量_07A90125, 文本型, , "0"
    .局部变量 变量_11E60125, 文本型
    .局部变量 变量_A2C50125, 对象

    .如果真 (是否为空 (目标IP))
        变量_11E60125 ＝ 查询类属性 (“Select MACAddress From Win32_NetworkAdapter WHERE PNPDeviceID LIKE ” ＋ #引号 ＋ “%PCI%” ＋ #引号 ＋ “ AND  NetConnectionStatus =2”, “MACAddress”).取文本 ()
        .如果真 (取文本长度 (变量_11E60125) ＝ 0)
            变量_11E60125 ＝ 查询类属性 (“Select MACAddress From Win32_NetworkAdapter WHERE NetConnectionStatus =2”, “MACAddress”).取文本 ()
        .如果真结束
        返回 (变量_11E60125)
    .如果真结束
    变量_05A90125 ＝ 到字节集 (inet_addr (目标IP))
    重定义数组 (变量_06A90125, 假, 255)
    重定义数组 (变量_07A90125, 假, 255)
    变量_03A90125 ＝ 取字节集数据 (变量_05A90125, #整数型, )
    .如果真 (SendARP (变量_03A90125, 0, 变量_01A90125, 6) ＝ 0)
        变量_02A90125 ＝ 到字节集 (变量_03A90125)
        .计次循环首 (6, 变量_04A90125)
            .如果真 (变量_01A90125 [变量_04A90125] ＜ 16)
                变量_07A90125 [变量_02A90125 [4]] ＝ 变量_07A90125 [变量_02A90125 [4]] ＋ “0”
            .如果真结束
            变量_07A90125 [变量_02A90125 [4]] ＝ 变量_07A90125 [变量_02A90125 [4]] ＋ 取十六进制文本 (变量_01A90125 [变量_04A90125]) ＋ “:”
        .计次循环尾 ()
        返回 (取文本左边 (变量_07A90125 [变量_02A90125 [4]], 17))
    .如果真结束
    返回 (“”)

.子程序 系统_取CPU名称, 文本型, 公开, 获取CPU的名称
    .局部变量 变量_E87C0125, 文本型

    变量_E87C0125 ＝ 取空白文本 (100)
    置入代码 ({ 96, 184, 2, 0, 0, 128, 15, 162, 139, 117, 252, 54, 137, 6, 54, 137, 94, 4, 54, 137, 78, 8, 54, 137, 86, 12, 184, 3, 0, 0, 128, 15, 162, 54, 137, 70, 16, 54, 137, 94, 20, 54, 137, 78, 24, 54, 137, 86, 28, 184, 4, 0, 0, 128, 15, 162, 54, 137, 70, 32, 54, 137, 94, 36, 54, 137, 78, 40, 54, 137, 86, 44, 97 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (变量_E87C0125)

.子程序 系统_取CPU描述, 文本型, 公开, 获取CPU的描述
    .局部变量 变量_E97C0125, 整数型, , "3"
    .局部变量 变量_EA7C0125, 文本型

    置入代码 ({ 96, 184, 1, 0, 0, 0, 15, 162, 139, 200, 129, 225, 0, 15, 0, 0, 193, 233, 8, 54, 137, 79, 244, 139, 200, 129, 225, 240, 0, 0, 0, 193, 233, 4, 54, 137, 79, 248, 139, 200, 131, 225, 15, 54, 137, 79, 252, 97 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    变量_EA7C0125 ＝ 取空白文本 (100)
    wsprintfA (变量_EA7C0125, “x86 Family %d Model %d Stepping %d”, 变量_E97C0125)
    返回 (变量_EA7C0125)

.子程序 系统_取CPU制造商, 文本型, 公开, 获取CPU制造商
    .局部变量 变量_EB7C0125, 文本型

    变量_EB7C0125 ＝ 取空白文本 (12)
    置入代码 ({ 96, 51, 192, 15, 162, 139, 69, 252, 54, 137, 24, 54, 137, 80, 4, 54, 137, 72, 8, 97 })
    
    
    
    
    
    
    
    
    .判断开始 (变量_EB7C0125 ＝ “GenuineIntel”)
        变量_EB7C0125 ＝ “Intel Corporation.”
    .判断 (变量_EB7C0125 ＝ “AuthenticAMD”)
        变量_EB7C0125 ＝ “Advanced Micro Devices.”
    .判断 (变量_EB7C0125 ＝ “AMD ISBETTER”)
        变量_EB7C0125 ＝ “Advanced Micro Devices.”
    .判断 (变量_EB7C0125 ＝ “Geode By NSC”)
        变量_EB7C0125 ＝ “National Semiconductor.”
    .判断 (变量_EB7C0125 ＝ “CyrixInstead”)
        变量_EB7C0125 ＝ “Cyrix Corp., VIA Inc.”
    .判断 (变量_EB7C0125 ＝ “NexGenDriven”)
        变量_EB7C0125 ＝ “NexGen Inc., Advanced Micro Devices.”
    .判断 (变量_EB7C0125 ＝ “CentaurHauls”)
        变量_EB7C0125 ＝ “IDT\Centaur, Via Inc.”
    .判断 (变量_EB7C0125 ＝ “UMC UMC UMC ”)
        变量_EB7C0125 ＝ “United Microelectronics Corp.”
    .判断 (变量_EB7C0125 ＝ “RiseRiseRise”)
        变量_EB7C0125 ＝ “Rise.”
    .判断 (变量_EB7C0125 ＝ “GenuineTMx86”)
        变量_EB7C0125 ＝ “Transmeta.”
    .判断 (变量_EB7C0125 ＝ “TransmetaCPU”)
        变量_EB7C0125 ＝ “Transmeta.”
    .默认
        变量_EB7C0125 ＝ “Unknown Manufacturer.”
    .判断结束
    返回 (变量_EB7C0125)

.子程序 系统_取CPU序列号, 文本型, 公开, 获取CPU序列号
    .局部变量 变量_35ED0125, 整数型
    .局部变量 变量_36ED0125, 整数型

    置入代码 ({ 184, 1, 0, 0, 0 })
    置入代码 ({ 49, 201 })
    置入代码 ({ 49, 210 })
    置入代码 ({ 15, 162 })
    置入代码 ({ 137, 85, 252 })
    置入代码 ({ 137, 69, 248 })
    返回 (取八位十六进制 (变量_35ED0125) ＋ 取八位十六进制 (变量_36ED0125))

.子程序 取八位十六进制, 文本型
    .参数 变量_37ED0125, 整数型
    .局部变量 变量_38ED0125, 文本型

    变量_38ED0125 ＝ 取十六进制文本 (变量_37ED0125)
    变量_38ED0125 ＝ 取重复文本 (8 － 取文本长度 (变量_38ED0125), “0”) ＋ 变量_38ED0125
    返回 (变量_38ED0125)

.子程序 系统_取CPU时钟频率, 整数型, 公开, 获取CPU时钟频率
    .局部变量 变量_EE7C0125, 长整数型
    .局部变量 变量_EF7C0125, 长整数型
    .局部变量 变量_F07C0125, 长整数型
    .局部变量 变量_F17C0125, 长整数型
    .局部变量 变量_F27C0125, 长整数型

    连续赋值 (0, 变量_EE7C0125, 变量_EF7C0125)
    QueryPerformanceFrequency (变量_F07C0125)
    置入代码 ({ 15, 49, 137, 69, 248, 137, 85, 252 })
    
    
    
    QueryPerformanceCounter (变量_F27C0125)
    变量_F27C0125 ＝ 变量_F27C0125 ＋ 变量_F07C0125
    .循环判断首 ()
        QueryPerformanceCounter (变量_F17C0125)
    .循环判断尾 (变量_F17C0125 ＜ 变量_F27C0125)
    置入代码 ({ 15, 49, 137, 69, 240, 137, 85, 244 })
    
    
    
    返回 ((变量_EF7C0125 － 变量_EE7C0125) ÷ 1000 ÷ 1000)

.子程序 系统_取CPU数据宽度, 整数型, 公开, 获取CPU数据宽度
    .局部变量 变量_F37C0125, 逻辑型

    IsWow64Process (-1, 变量_F37C0125)
    
    返回 (选择 (取反 (变量_F37C0125), 32, 64))

.子程序 系统_取CPU一级缓存, 整数型, 公开, 获取CPU一级缓存
    置入代码 ({ 83, 81, 82, 184, 5, 0, 0, 128, 15, 162, 193, 234, 24, 193, 233, 24, 3, 209, 139, 194, 90, 89, 91, 139, 229, 93, 195 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 系统_取CPU二级缓存, 整数型, 公开, 获取CPU二级缓存
    置入代码 ({ 83, 81, 82, 184, 6, 0, 0, 128, 15, 162, 193, 233, 16, 139, 193, 90, 89, 91, 139, 229, 93, 195 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 wsprintfA, 整数型
    .参数 变量_F47C0125, 文本型, 参考
    .参数 变量_F57C0125, 文本型
    .参数 变量_F67C0125, 整数型, 数组
    .局部变量 变量_F77C0125, 整数型

    变量_F77C0125 ＝ GetProcAddress (GetModuleHandleA (“user32.dll”), “wsprintfA”)
    置入代码 ({ 139, 69, 16, 139, 0, 139, 88, 4, 131, 251, 1, 124, 7, 255, 116, 152, 4, 75, 235, 244, 139, 69, 12, 255, 48, 139, 69, 8, 255, 48, 255, 85, 252 })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    返回 (0)

.子程序 系统_取本机名, 文本型, 公开, 取本机名,成功返回本机名，失败返回空字符串。
    返回 (取主机名 ())

.子程序 系统_取本机IP, 逻辑型, 公开, 本命令可以枚举出网卡绑定的IP地址。成功“真”，失败返回“假”。
    .参数 本地IP组, 文本型, 参考 数组, 提供文本型数组，每个成员对应一个本地的IP。
    .局部变量 变量_227F0125, 文本型
    .局部变量 变量_237F0125, 字节集
    .局部变量 变量_247F0125, 文本型
    .局部变量 变量_257F0125, 整数型
    .局部变量 变量_267F0125, 整数型
    .局部变量 变量_277F0125, 字节集
    .局部变量 变量_287F0125, 字节集
    .局部变量 变量_297F0125, 字节集, , "0"
    .局部变量 变量_2A7F0125, 整数型

    变量_227F0125 ＝ 取主机名 ()
    变量_277F0125 ＝ 取空白字节集 (16)
    RtlMoveMemory_int2Bytes (变量_277F0125, gethostbyname (变量_227F0125), 16)
    变量_287F0125 ＝ 取空白字节集 (4)
    RtlMoveMemory_int2Bytes (变量_287F0125, 取字节集数据 (取字节集右边 (变量_277F0125, 4), #整数型, ), 4)
    .判断循环首 (取字节集数据 (变量_287F0125, #整数型, ) ≠ 0)
        变量_237F0125 ＝ 取空白字节集 (取字节集数据 (取字节集中间 (变量_277F0125, 11, 2), #整数型, ))
        RtlMoveMemory_int2Bytes (变量_237F0125, 取字节集数据 (变量_287F0125, #整数型, ), 取字节集数据 (取字节集中间 (变量_277F0125, 11, 2), #整数型, ))
        加入成员 (变量_297F0125, 变量_237F0125)
        变量_267F0125 ＝ 取字节集数据 (取字节集右边 (变量_277F0125, 4), #整数型, ) ＋ 4
        变量_277F0125 ＝ 取字节集左边 (变量_277F0125, 12) ＋ 到字节集 (变量_267F0125)
        RtlMoveMemory_int2Bytes (变量_287F0125, 取字节集数据 (取字节集右边 (变量_277F0125, 4), #整数型, ), 4)
    .判断循环尾 ()
    重定义数组 (本地IP组, 假, 取数组成员数 (变量_297F0125))
    .计次循环首 (取数组成员数 (变量_297F0125), 变量_2A7F0125)
        本地IP组 [变量_2A7F0125] ＝ 到文本 (取字节集数据 (取字节集左边 (变量_297F0125 [变量_2A7F0125], 1), #字节型, )) ＋ “.” ＋ 到文本 (取字节集数据 (取字节集中间 (变量_297F0125 [变量_2A7F0125], 2, 1), #字节型, )) ＋ “.” ＋ 到文本 (取字节集数据 (取字节集中间 (变量_297F0125 [变量_2A7F0125], 3, 1), #字节型, )) ＋ “.” ＋ 到文本 (取字节集数据 (取字节集右边 (变量_297F0125 [变量_2A7F0125], 1), #字节型, ))
    .计次循环尾 ()
    返回 (真)

.子程序 系统_取磁盘类型, 整数型, 公开, 获取磁盘的类型，失败返回0，成功返回：1=移动U盘，2=系统磁盘，3=网络磁盘，4=CD-ROM,5=RAM 磁盘
    .参数 磁盘盘符, 文本型, , 如：C、D
    .局部变量 变量_82C70125, 对象
    .局部变量 变量_83C70125, 对象

    CoInitialize (0)
    .如果真 (变量_82C70125.创建 (“scripting.FileSystemObject”, ))
        变量_83C70125 ＝ 变量_82C70125.读对象型属性 (“GetDrive”, 磁盘盘符 ＋ “:\”)
        CoUninitialize ()
        返回 (变量_83C70125.读数值属性 (“DriveType”, ))
    .如果真结束
    CoUninitialize ()
    返回 (0)

.子程序 系统_显示桌面, , 公开, 类似按下 Win+D 键
    .局部变量 变量_85C70125, 对象

    CoInitialize (0)
    变量_85C70125.创建 (“Shell.Application”, )
    变量_85C70125.方法 (“ToggleDesktop”, )
    变量_85C70125.清除 ()
    CoUninitialize ()

.子程序 系统_取CPU占用率, 整数型, 公开, 取当前CPU占用率。成功返回CPU占用率；失败返回-1。Win98系统下使用本方法取得的数值可能会有误。
    .局部变量 变量_8FD30125, 自定义_A5D30141
    .局部变量 变量_90D30125, 整数型
    .局部变量 变量_91D30125, 整数型
    .局部变量 变量_92D30125, 双精度小数型
    .局部变量 变量_93D30125, 双精度小数型
    .局部变量 变量_94D30125, 整数型
    .局部变量 变量_95D30125, 整数型
    .局部变量 变量_96D30125, 整数型
    .局部变量 变量_97D30125, 双精度小数型
    .局部变量 变量_98D30125, 双精度小数型

    处理事件 ()
    DLL_GetNativeSystemInfo (变量_8FD30125)
    .如果真 (变量_94D30125 ≠ 0)
        结束 ()
    .如果真结束
    变量_91D30125 ＝ GlobalAlloc (64, 48)
    变量_94D30125 ＝ DLL_NtQuerySystemInformation (3, 变量_91D30125, 48, 变量_96D30125)
    .如果真 (变量_94D30125 ≠ 0)
        返回 (-1)
    .如果真结束
    变量_97D30125 ＝ 取字节集数据 (指针到字节集 (变量_91D30125 ＋ 8, 8), #长整数型, )
    变量_90D30125 ＝ GlobalAlloc (64, 344)
    变量_94D30125 ＝ DLL_NtQuerySystemInformation (2, 变量_90D30125, 344, 变量_96D30125)
    .如果真 (变量_94D30125 ≠ 0)
        返回 (-1)
    .如果真结束
    变量_98D30125 ＝ 取字节集数据 (指针到字节集 (变量_90D30125, 8), #长整数型, )
    变量_92D30125 ＝ 变量_98D30125 － 类变量_F79B0215
    变量_93D30125 ＝ 变量_97D30125 － 类变量_B7D30115
    变量_92D30125 ＝ 变量_92D30125 ÷ 变量_93D30125
    变量_92D30125 ＝ 100 － 变量_92D30125 × 100 ÷ 变量_8FD30125.成员_ABD30135 ＋ 0.5
    变量_95D30125 ＝ 变量_92D30125
    类变量_F79B0215 ＝ 变量_98D30125
    类变量_B7D30115 ＝ 变量_97D30125
    .如果 (变量_95D30125 ≤ 0)
        变量_95D30125 ＝ 1
    .否则
        变量_95D30125 ＝ 选择 (变量_95D30125 ≥ 100, 100, 变量_95D30125)
    .如果结束
    GlobalFree (变量_91D30125)
    GlobalFree (变量_90D30125)
    返回 (变量_95D30125)

.子程序 系统_取时区, 文本型, 公开, 获取系统时区
    .局部变量 变量_AADA0125, 文本型
    .局部变量 变量_ABDA0125, 自定义_59DA0141
    .局部变量 变量_ACDA0125, 整数型

    变量_ACDA0125 ＝ DLL_GetTimeZoneInformation (变量_ABDA0125)
    变量_AADA0125 ＝ 编码_Unicode到Ansi (到字节集 (变量_ABDA0125.成员_5BDA0135))
    返回 (变量_AADA0125)

.子程序 系统_取货币符号, 文本型, 公开, 获取系统货币符号
    .局部变量 变量_ADDA0125, 文本型

    变量_ADDA0125 ＝ 取空白文本 (256)
    DLL_GetLocaleInfoA (0, 20, 变量_ADDA0125, 256)
    返回 (变量_ADDA0125)

.子程序 系统_取日期格式, 文本型, 公开, 获取系统日期格式
    .局部变量 变量_AEDA0125, 文本型

    变量_AEDA0125 ＝ 取空白文本 (256)
    DLL_GetLocaleInfoA (0, 32, 变量_AEDA0125, 256)
    返回 (变量_AEDA0125)
    

.子程序 系统_取时间格式, 文本型, 公开, 获取系统时间格式
    .局部变量 变量_AFDA0125, 文本型

    变量_AFDA0125 ＝ 取空白文本 (256)
    DLL_GetLocaleInfoA (0, 4099, 变量_AFDA0125, 256)
    返回 (变量_AFDA0125)
    

.子程序 系统_取网络主机名, 文本型, 公开, 取当前网络上登记的主机名，详细请参考CMD命令ipconfig /all 中的Windows IP 配置。
    .局部变量 变量_5EDC0125, 整数型
    .局部变量 变量_5FDC0125, 整数型
    .局部变量 变量_60DC0125, 整数型
    .局部变量 变量_61DC0125, 文本型

    GetNetworkParams (0, 变量_5FDC0125)
    变量_5EDC0125 ＝ LocalAlloc (64, 变量_5FDC0125)
    变量_60DC0125 ＝ GetNetworkParams (变量_5EDC0125, 变量_5FDC0125)
    .如果真 (变量_60DC0125 ＝ 0)
        变量_61DC0125 ＝ 到文本 (指针到字节集 (变量_5EDC0125, 132))
    .如果真结束
    LocalFree (变量_5EDC0125)
    返回 (变量_61DC0125)

.子程序 系统_取网络主DNS后缀, 文本型, 公开, 取当前网络主DNS后缀，详细请参考CMD命令ipconfig /all 中的Windows IP 配置。
    .局部变量 变量_77DC0125, 整数型
    .局部变量 变量_78DC0125, 整数型
    .局部变量 变量_79DC0125, 整数型
    .局部变量 变量_7ADC0125, 文本型

    GetNetworkParams (0, 变量_78DC0125)
    变量_77DC0125 ＝ LocalAlloc (64, 变量_78DC0125)
    变量_79DC0125 ＝ GetNetworkParams (变量_77DC0125, 变量_78DC0125)
    .如果真 (变量_79DC0125 ＝ 0)
        变量_7ADC0125 ＝ 到文本 (指针到字节集 (变量_77DC0125 ＋ 132, 132))
    .如果真结束
    LocalFree (变量_77DC0125)
    返回 (变量_7ADC0125)

.子程序 系统_取网络节点类型, 整数型, 公开, 返回值：1=广播；2=点对点；4=混杂；8=混合。详细请参考CMD中的ipconfig /all Windows IP 配置。
    .局部变量 变量_82DC0125, 整数型
    .局部变量 变量_83DC0125, 整数型
    .局部变量 变量_84DC0125, 整数型
    .局部变量 变量_85DC0125, 整数型

    GetNetworkParams (0, 变量_83DC0125)
    变量_82DC0125 ＝ LocalAlloc (64, 变量_83DC0125)
    变量_84DC0125 ＝ GetNetworkParams (变量_82DC0125, 变量_83DC0125)
    .如果真 (变量_84DC0125 ＝ 0)
        变量_85DC0125 ＝ 取字节集数据 (指针到字节集 (变量_82DC0125 ＋ 308, 4), #整数型, )
    .如果真结束
    LocalFree (变量_82DC0125)
    返回 (变量_85DC0125)

.子程序 系统_IP路由是否启用, 逻辑型, 公开, 判断当前网络连接中的IP路由是否启用，详细请参考CMD中的ipconfig /all Windows IP 配置。
    .局部变量 变量_8DDC0125, 整数型
    .局部变量 变量_8EDC0125, 整数型
    .局部变量 变量_8FDC0125, 整数型
    .局部变量 变量_90DC0125, 逻辑型

    GetNetworkParams (0, 变量_8EDC0125)
    变量_8DDC0125 ＝ LocalAlloc (64, 变量_8EDC0125)
    变量_8FDC0125 ＝ GetNetworkParams (变量_8DDC0125, 变量_8EDC0125)
    .如果真 (变量_8FDC0125 ＝ 0)
        变量_90DC0125 ＝ 取字节集数据 (指针到字节集 (变量_8DDC0125 ＋ 572, 4), #逻辑型, )
    .如果真结束
    LocalFree (变量_8DDC0125)
    返回 (变量_90DC0125)

.子程序 系统_WINS代理是否启用, 逻辑型, 公开, 判断当前网络连接中的WINS代理是否启用，详细请参考CMD中的ipconfig /all Windows IP 配置。
    .局部变量 变量_98DC0125, 整数型
    .局部变量 变量_99DC0125, 整数型
    .局部变量 变量_9ADC0125, 整数型
    .局部变量 变量_9BDC0125, 逻辑型

    GetNetworkParams (0, 变量_99DC0125)
    变量_98DC0125 ＝ LocalAlloc (64, 变量_99DC0125)
    变量_9ADC0125 ＝ GetNetworkParams (变量_98DC0125, 变量_99DC0125)
    .如果真 (变量_9ADC0125 ＝ 0)
        变量_9BDC0125 ＝ 取字节集数据 (指针到字节集 (变量_98DC0125 ＋ 576, 4), #逻辑型, )
    .如果真结束
    LocalFree (变量_98DC0125)
    返回 (变量_9BDC0125)

.子程序 系统_取IE版本, 文本型, 公开, 获取IE浏览器的版本
    .局部变量 变量_C1DC0125, 整数型
    .局部变量 变量_C2DC0125, 整数型
    .局部变量 变量_C3DC0125, 整数型
    .局部变量 变量_C4DC0125, 字节集
    .局部变量 变量_C5DC0125, 整数型
    .局部变量 变量_C6DC0125, 逻辑型

    IsWow64Process (GetCurrentProcess (), 变量_C6DC0125)
    变量_C5DC0125 ＝ 选择 (变量_C6DC0125, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY)
    变量_C1DC0125 ＝ RegOpenKeyExA (#HKEY_LOCAL_MACHINE, “SOFTWARE\Microsoft\Internet Explorer”, 0, 位或 (变量_C5DC0125, #KEY_ALL_ACCESS), 变量_C2DC0125)
    变量_C4DC0125 ＝ 取空白字节集 (50)
    .如果真 (变量_C1DC0125 ＝ 0)
        变量_C1DC0125 ＝ RegQueryValueExA (变量_C2DC0125, “svcVersion”, 0, #REG_SZ, 变量_C4DC0125, 50)
        .如果真 (变量_C1DC0125 ≠ 0)
            RegQueryValueExA (变量_C2DC0125, “Version”, 0, #REG_SZ, 变量_C4DC0125, 50)
        .如果真结束
        
    .如果真结束
    RegCloseKey (变量_C2DC0125)
    返回 (到文本 (变量_C4DC0125))

.子程序 系统_调用帮助, 整数型, 公开, 调用系统帮助设置
    .参数 窗口句柄, 整数型, , hwnd
    .参数 帮助文件, 文本型, , lpHelpFile
    .参数 命令编号, 整数型, , wCommand

    返回 (WinHelpA (窗口句柄, 帮助文件, 命令编号, 1))

.子程序 系统_信息框Ex, 整数型, 公开, 消息规定时间内超时自动关闭，成功返回单击按钮ID，失败返回0
    .参数 标题, 文本型
    .参数 内容, 文本型
    .参数 超时时间, 整数型, , 1000限1秒
    .参数 按钮类型, 整数型, , 1 确定+取消 2 终止+重试+忽略  3 是+否+取消 4 是+否 5 重试+取消 　6 取消+重试+继续  16 红X+确定 17 红X+确定+取消 18 红X+终止+重试+忽略  19 红X+是+否+取消 20 红X+是+否  21 红X+重试+取消  32 蓝问号+确定  33 蓝问号+确定+取消   34 蓝问号+终止+重试+忽略   35 蓝问号+是+否+取消  36 蓝问号+是+否  37 蓝问号+重试+取消  48 黄叹号+确定 49 黄叹号+确定+取消 50 黄叹号+终止+重试+忽略  51 黄叹号+是+否+取消  52 黄叹号+是+否  53 黄叹号+重试+取消    64 蓝叹号+确定  65 蓝叹号+确定+取消  66 蓝叹号+终止+重试+忽略  67 蓝叹号+是+否+取消   68 蓝叹号+是+否   69 蓝叹号+重试+取消 

    返回 (MessageBoxTimeoutA (DLL_GetActiveWindow (), 内容, 标题, 按钮类型, 0, 超时时间))

.子程序 系统_转换为主机名, 文本型, 公开, 将指定的 IP 地址转换为其主机名。如果失败返回空文本。
    .参数 欲转换IP地址, 文本型
    .局部变量 变量_0AEA0125, 整数型
    .局部变量 变量_0BEA0125, 套接字信息
    .局部变量 变量_FBE80125, 整数型
    .局部变量 变量_FCE80125, 整数型
    .局部变量 变量_FDE80125, 自定义_1BE90141
    .局部变量 变量_FEE80125, 文本型

    变量_0AEA0125 ＝ WSAStartup (257, 变量_0BEA0125)
    .如果真 (0 ＝ 变量_0AEA0125)
        变量_FBE80125 ＝ inet_addr (欲转换IP地址)
        变量_FCE80125 ＝ gethostbyaddr (变量_FBE80125, 4, 2)
        .如果真 (0 ≠ 变量_FCE80125)
            CopyMemory_int2hostent (变量_FDE80125, 变量_FCE80125, 16)
            变量_FEE80125 ＝ 指针到文本 (变量_FDE80125.成员_1EE90135)
        .如果真结束
        WSACleanup ()
    .如果真结束
    返回 (变量_FEE80125)

.子程序 系统_转换为IP地址, 文本型, 公开, 将指定的主机名转换为其 IP 地址。如果失败返回空文本。
    .参数 欲转换主机名, 文本型
    .局部变量 变量_FEE90125, 整数型
    .局部变量 变量_FFE90125, 套接字信息
    .局部变量 变量_04EA0125, 整数型
    .局部变量 变量_01E90125, 自定义_1BE90141
    .局部变量 变量_03E90125, 字节集

    变量_FEE90125 ＝ WSAStartup (257, 变量_FFE90125)
    .如果真 (0 ＝ 变量_FEE90125)
        变量_04EA0125 ＝ gethostbyname (欲转换主机名)
        .如果真 (0 ≠ 变量_04EA0125)
            CopyMemory_int2hostent (变量_01E90125, 变量_04EA0125, 16)
            变量_03E90125 ＝ 指针到字节集 (取字节集数据 (指针到字节集 (变量_01E90125.成员_22E90135, 4), #整数型, ), 4)
            返回 (到文本 (变量_03E90125 [1]) ＋ “.” ＋ 到文本 (变量_03E90125 [2]) ＋ “.” ＋ 到文本 (变量_03E90125 [3]) ＋ “.” ＋ 到文本 (变量_03E90125 [4]))
        .如果真结束
        WSACleanup ()
    .如果真结束
    返回 (“”)

.子程序 系统_通信测试, 整数型, 公开,  测试与指定主机是否能够正常通讯。返回被测试主机的通讯响应时间。如果无法通讯或者测试失败，返回 -1。
    .参数 被测试主机地址, 文本型, , 可以为主机名、IP地址等。
    .参数 最长等待时间, 整数型, 可空, 可以被省略。指定最长等待被测试主机响应的时间，单位为毫秒。超过此时间即认为无法与被测试主机通讯。如果省略本参数，则默认为 10 * 1000 毫秒，即 10 秒。
    .局部变量 变量_06E90125, 自定义_1CE90141
    .局部变量 变量_07E90125, 整数型
    .局部变量 变量_0BE90125, 整数型
    .局部变量 变量_0CE90125, 整数型
    .局部变量 变量_0DE90125, 文本型
    .局部变量 变量_0EE90125, 整数型

    变量_0DE90125 ＝ 系统_转换为IP地址 (被测试主机地址)
    .如果真 (取文本长度 (变量_0DE90125) ＞ 2)
        变量_0EE90125 ＝ IcmpCreateFile ()
        .如果真 (-1 ＝ 变量_0EE90125)
            返回 (-1)
        .如果真结束
        变量_07E90125 ＝ inet_addr (变量_0DE90125)
        变量_0BE90125 ＝ 选择 (是否为空 (最长等待时间), 10 × 1000, 最长等待时间)
        变量_0CE90125 ＝ IcmpSendEcho (变量_0EE90125, 变量_07E90125, 变量_0DE90125, 取文本长度 (变量_0DE90125) ＋ 1, 0, 变量_06E90125, 278, 变量_0BE90125)
        IcmpCloseHandle (变量_0EE90125)
    .如果真结束
    返回 (选择 (变量_0CE90125 ≠ 0 且 变量_06E90125.成员_24E90135 ＝ #IP_SUCCESS, 变量_06E90125.成员_25E90135, -1))

.子程序 系统_取远程机器名, 文本型, 公开,  根据指定的IP地址取远程机器名称。失败返回空。
    .参数 参_IP地址, 文本型, , 注；指定IP地址必需和本机在同一个域
    .局部变量 变量_D1ED0125, 套接字信息
    .局部变量 变量_D5ED0125, 整数型
    .局部变量 变量_D6ED0125, 整数型
    .局部变量 变量_D7ED0125, 文本型

    .如果真 (WSAStartup (257, 变量_D1ED0125) ＝ 0)
        变量_D5ED0125 ＝ inet_addr (参_IP地址)
        变量_D6ED0125 ＝ gethostbyaddr (变量_D5ED0125, 4, 2)
        .如果真 (变量_D6ED0125 ≠ 0)
            变量_D7ED0125 ＝ 指针到文本 (取字节集数据 (指针到字节集 (变量_D6ED0125, 4), #整数型, ))
        .如果真结束
        WSACleanup ()
    .如果真结束
    返回 (变量_D7ED0125)

.子程序 系统_远程关机, 逻辑型, 公开, 可关闭本机或局域网指定计算机系统，成功返回真，失败返回假。
    .参数 参_关闭方式, 整数型, 可空, 可为空，默认即关闭系统，0=注销 ，1=关机，2=重启，8=关闭电源(电源支持)
    .参数 参_是否强制执行, 逻辑型, 可空, 默认非强制执行
    .参数 参_计算机名, 文本型, 可空, 必须是局域网内计算机,为空则为本机,可以用 系统_取远程机器名(IP)
    .参数 参_用户名, 文本型, 可空, 当参数 【参_计算机名】 为空时，可以忽略此参数
    .参数 参_密码, 文本型, 可空, 当参数 【参_计算机名】 为空时，可以忽略此参数
    .局部变量 变量_E1ED0125, 对象
    .局部变量 变量_E2ED0125, 对象
    .局部变量 变量_E3ED0125, 对象
    .局部变量 变量_E4ED0125, 对象
    .局部变量 变量_E5ED0125, 对象
    .局部变量 变量_E6ED0125, 变体型
    .局部变量 变量_E7ED0125, 对象
    .局部变量 变量_E8ED0125, 对象
    .局部变量 变量_E9ED0125, 整数型
    .局部变量 变量_EAED0125, 整数型
    .局部变量 变量_EBED0125, 对象
    .局部变量 变量_ECED0125, 整数型
    .局部变量 变量_EDED0125, 整数型
    .局部变量 变量_EEED0125, 整数型
    .局部变量 变量_EFED0125, 文本型

    CoInitialize (0)
    .如果真 (变量_E1ED0125.创建 (“WbemScripting.SWbemLocator”, ))
        参_计算机名 ＝ 选择 (取文本长度 (参_计算机名) ＞ 0, 参_计算机名, “.”)
        参_关闭方式 ＝ 选择 (是否为空 (参_关闭方式), 1, 参_关闭方式)
        变量_E2ED0125 ＝ 变量_E1ED0125.对象型方法 (“ConnectServer”, 参_计算机名, “\root\CIMV2”, 参_用户名, 参_密码, , , , )
        .如果真 (变量_E2ED0125.是否为空 () ＝ 假)
            
            变量_E7ED0125 ＝ 变量_E2ED0125.读对象型属性 (“Security_”, )
            变量_E7ED0125.写属性 (“ImpersonationLevel”, 3)
            变量_E7ED0125.读对象型属性 (“Privileges”, ).对象型方法 (“Add”, 19, 真)
            变量_E7ED0125.读对象型属性 (“Privileges”, ).对象型方法 (“Add”, 18, 真)
            
            变量_E8ED0125 ＝ 变量_E2ED0125.对象型方法 (“InstancesOf”, “Win32_OperatingSystem”)
            变量_E9ED0125 ＝ 变量_E8ED0125.读数值属性 (“Count”, )
            变量_EBED0125 ＝ 变量_E8ED0125.对象型方法 (“_NewEnum”, )
            .如果真 (变量_EBED0125.是否为空 () ＝ 假)
                .计次循环首 (变量_E9ED0125, 变量_EAED0125)
                    变量_ECED0125 ＝ CallObject (取对象指针 (变量_EBED0125), 3, 1, 取变体型指针 (变量_E6ED0125), 取指针整数_ (变量_EDED0125), , , , , , )
                    .如果真 (变量_ECED0125 ＝ 0 且 变量_EDED0125 ＝ 1)
                        变量_E3ED0125 ＝ 变量_E6ED0125.取对象 ()
                        .如果真 (变量_E3ED0125.是否为空 () ＝ 假)
                            变量_E4ED0125 ＝ 变量_E3ED0125.读对象型属性 (“Methods_”, ).对象型方法 (“Item”, “Win32Shutdown”).读对象型属性 (“InParameters”, ).对象型方法 (“SpawnInstance_”, )
                            
                            变量_E4ED0125.对象型方法 (“Properties_”, ).对象型方法 (“Item”, “Flags”).写属性 (“value”, 参_关闭方式 ＋ 选择 (参_是否强制执行, 4, 0))
                            
                            变量_E5ED0125 ＝ 变量_E3ED0125.对象型方法 (“ExecMethod_”, “Win32Shutdown”, 变量_E4ED0125)
                            .如果真 (变量_E5ED0125.是否为空 () ＝ 假)
                                变量_E6ED0125 ＝ 变量_E5ED0125.读对象型属性 (“Properties_”, ).对象型方法 (“Item”, “ReturnValue”).读属性 (“value”, )
                                变量_EEED0125 ＝ 变量_E6ED0125.取数值 ()
                                变量_E5ED0125.清除 ()
                                变量_E3ED0125.清除 ()
                                变量_E2ED0125.清除 ()
                                变量_E1ED0125.清除 ()
                                变量_E8ED0125.清除 ()
                                CoUninitialize ()
                                返回 (变量_EEED0125 ＝ 0)
                            .如果真结束
                            
                        .如果真结束
                        
                    .如果真结束
                    
                .计次循环尾 ()
                变量_EBED0125.清除 ()
            .如果真结束
            变量_E3ED0125.清除 ()
            变量_E2ED0125.清除 ()
            变量_E8ED0125.清除 ()
        .如果真结束
        变量_E1ED0125.清除 ()
        CoUninitialize ()
    .如果真结束
    返回 (假)

.子程序 系统_是否为管理员, 逻辑型, 公开, 判断当前程序是否在管理员模式下运行，是返回真，否返回假。
    返回 (DLL_IsNTAdmin (0, 0))

.子程序 系统_重启资源管理器, 逻辑型, 公开, 重启资源管理器
    .局部变量 变量_92D40225, 文本型

    
    运行 (“taskkill /im explorer.exe /f”, 假, #隐藏窗口)
    Sleep (600)
    
    变量_92D40225 ＝ 取空白文本 (255)
    .如果真 (SHGetFolderPathA (#NULL, #CSIDL_WINDOWS, #NULL, #<?未知本地类型?>, 取指针文本_ (变量_92D40225)) ≠ #<?未知本地类型?>)
        变量_92D40225 ＝ “C:\WINDOWS”
    .如果真结束
    返回 (ShellExecuteA (#NULL, “Open”, “explorer.exe”, 字符 (0), 变量_92D40225, #<?未知本地类型?>) ≠ #<?未知本地类型?>)

.子程序 系统_刷新, , 公开, 立即刷新系统，让注册表新的设置立即生效。
    SHChangeNotify (#<?未知本地类型?>, #<?未知本地类型?>, 0, 0)

.子程序 系统_禁用文件系统重定向, 逻辑型, 公开, 禁用调用线程的文件系统重定向，默认情况下启用文件系统重定向。此功能对于想要访问本机system32目录的32位应用程序很有用。
    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN7)
        输出调试文本 (#<?未知本地类型?>)
        返回 (假)
    .如果真结束
    返回 (DLL_Wow64DisableWow64FsRedirection (0))

.子程序 系统_恢复文件系统重定向, 逻辑型, 公开, 恢复调用线程的文件系统重定向。
    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_WIN7)
        输出调试文本 (#<?未知本地类型?>)
        返回 (假)
    .如果真结束
    返回 (DLL_Wow64RevertWow64FsRedirection (0))

.子程序 系统_取消电源管理, 逻辑型, 公开, 避免睡眠、待机
    返回 (DLL_SetThreadExecutionState (位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)) ≠ #NULL)

.子程序 系统_恢复电源管理, 逻辑型, 公开
    返回 (DLL_SetThreadExecutionState (#<?未知本地类型?>) ≠ #NULL)

.子程序 系统_去掉屏保, 逻辑型, 公开
    .局部变量 变量_EFDF0225, 逻辑型

    SystemParametersInfoA (#<?未知本地类型?>, 0, 取指针_通用型 (变量_EFDF0225), 0)
    .如果真 (变量_EFDF0225)
        返回 (SystemParametersInfoA (#<?未知本地类型?>, 0, 0, 0))
    .如果真结束
    返回 (真)

.子程序 系统_恢复屏保, 逻辑型, 公开
    .局部变量 变量_F0DF0225, 逻辑型

    SystemParametersInfoA (#<?未知本地类型?>, 0, 取指针_通用型 (变量_F0DF0225), 0)
    .如果真 (变量_F0DF0225 ＝ 假)
        返回 (SystemParametersInfoA (#<?未知本地类型?>, 1, 0, 0))
    .如果真结束
    返回 (真)

.子程序 系统_取所有用户名, 整数型, 公开, 获取Windows系统所有用户名
    .参数 用户名, 文本型, 参考 数组
    .局部变量 变量_53E10225, 整数型
    .局部变量 变量_54E10225, 整数型
    .局部变量 变量_55E10225, 整数型
    .局部变量 变量_59E10225, 整数型
    .局部变量 变量_5DE10225, 整数型
    .局部变量 变量_58E10225, 整数型

    清除数组 (用户名)
    DLL_NetUserEnum (#NULL, 0, 0, 取指针地址_整数型 (变量_53E10225), #<?未知本地类型?>, 变量_54E10225, 变量_55E10225, #NULL)
    .计次循环首 (变量_54E10225, 变量_58E10225)
        变量_59E10225 ＝ 变量_53E10225 ＋ (变量_58E10225 － 1) × 4
        变量_59E10225 ＝ 指针_到整数 (变量_59E10225)
        变量_5DE10225 ＝ W2A_指针 (变量_59E10225, m_CodePage, #CP_ACP, 0)
        加入成员 (用户名, 指针到文本 (变量_5DE10225))
    .计次循环尾 ()
    返回 (取数组成员数 (用户名))

.子程序 系统_注册项是否存在, 逻辑型, 公开, 存在返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 文本型
    .参数 项名称, 文本型
    .参数 是否为64位注册表, 逻辑型, 可空

    返回 (系统_注册项是否存在W (根目录, 编码_Ansi到Unicode (全路径注册项名, ), 编码_Ansi到Unicode (项名称, ), 是否为64位注册表))

.子程序 系统_注册项是否存在W, 逻辑型, 公开, 存在返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 字节集
    .参数 项名称, 字节集
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_55E30225, 整数型
    .局部变量 变量_57E30225, 整数型
    .局部变量 变量_58E30225, 整数型
    .局部变量 变量_59E30225, 整数型
    .局部变量 变量_5AE30225, 整数型

    .如果真 (根目录 ＝ 0)
        返回 (假)
    .如果真结束
    变量_57E30225 ＝ 位或 (选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY), #<?未知本地类型?>)
    变量_58E30225 ＝ DLL_RegOpenKeyExW (根目录, 全路径注册项名, 0, 变量_57E30225, 变量_55E30225)
    .如果真 (变量_58E30225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_58E30225))
        返回 (假)
    .如果真结束
    变量_58E30225 ＝ DLL_RegQueryValueExW (变量_55E30225, 项名称, #NULL, 变量_59E30225, #NULL, 变量_5AE30225)
    RegCloseKey (变量_55E30225)
    返回 (变量_58E30225 ＝ #ERROR_SUCCESS)

.子程序 系统_取文本注册项, 文本型, 公开, 成功返回数据
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 文本型
    .参数 项名称, 文本型
    .参数 是否为64位注册表, 逻辑型, 可空

    返回 (编码_Unicode到Ansi (系统_取文本注册项W (根目录, 编码_Ansi到Unicode (全路径注册项名, ), 编码_Ansi到Unicode (项名称, ), 是否为64位注册表)))

.子程序 系统_取文本注册项W, 字节集, 公开, 成功返回数据
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 字节集
    .参数 项名称, 字节集
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_5FE30225, 整数型
    .局部变量 变量_61E30225, 整数型
    .局部变量 变量_62E30225, 整数型
    .局部变量 变量_63E30225, 整数型
    .局部变量 变量_64E30225, 整数型
    .局部变量 变量_65E30225, 字节集

    .如果真 (根目录 ＝ 0)
        返回 ({ })
    .如果真结束
    变量_61E30225 ＝ 位或 (选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY), #<?未知本地类型?>)
    变量_62E30225 ＝ DLL_RegOpenKeyExW (根目录, 全路径注册项名, 0, 变量_61E30225, 变量_5FE30225)
    .如果真 (变量_62E30225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_62E30225))
        返回 ({ })
    .如果真结束
    .如果真 (DLL_RegQueryValueExW (变量_5FE30225, 项名称, #NULL, 变量_63E30225, #NULL, 变量_64E30225) ＝ #ERROR_SUCCESS)
        变量_65E30225 ＝ 取空白字节集 (变量_64E30225)
        DLL_RegQueryValueExW (变量_5FE30225, 项名称, #NULL, 变量_63E30225, 取指针_字节集型 (变量_65E30225), 变量_64E30225)
    .如果真结束
    RegCloseKey (变量_5FE30225)
    返回 (变量_65E30225)

.子程序 系统_写文本注册项, 逻辑型, 公开, 成功返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 文本型
    .参数 注册表值类型, 整数型, , #REG_*
    .参数 项名称, 文本型
    .参数 欲写入值, 文本型
    .参数 是否为64位注册表, 逻辑型, 可空

    返回 (系统_写文本注册项W (根目录, 编码_Ansi到Unicode (全路径注册项名, ), 注册表值类型, 编码_Ansi到Unicode (项名称, ), 编码_Ansi到Unicode (欲写入值, ), 是否为64位注册表))

.子程序 系统_写文本注册项W, 逻辑型, 公开, 成功返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 字节集
    .参数 注册表值类型, 整数型, , #REG_*
    .参数 项名称, 字节集
    .参数 欲写入值, 字节集
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_6BE30225, 整数型
    .局部变量 变量_6DE30225, 整数型
    .局部变量 变量_6EE30225, 整数型

    .如果真 (根目录 ＝ 0)
        返回 (假)
    .如果真结束
    变量_6DE30225 ＝ 位或 (选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY), #KEY_WRITE)
    变量_6EE30225 ＝ DLL_RegOpenKeyExW (根目录, 全路径注册项名, 0, 变量_6DE30225, 变量_6BE30225)
    .如果真 (变量_6EE30225 ＝ #<?未知本地类型?>)
        变量_6EE30225 ＝ DLL_RegCreateKeyExW (根目录, 全路径注册项名, 0, #NULL, #REG_OPTION_NON_VOLATILE, 变量_6DE30225, #NULL, 变量_6BE30225, #NULL)
    .如果真结束
    .如果真 (变量_6EE30225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_6EE30225))
        返回 (假)
    .如果真结束
    变量_6EE30225 ＝ DLL_RegSetValueExW (变量_6BE30225, 项名称, 0, 注册表值类型, 取指针_字节集型 (欲写入值), 取字节集长度 (欲写入值))
    RegCloseKey (变量_6BE30225)
    返回 (变量_6EE30225 ＝ #ERROR_SUCCESS)

.子程序 系统_取数值注册项, 整数型, 公开, 成功返回数据
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 文本型
    .参数 项名称, 文本型
    .参数 是否为64位注册表, 逻辑型, 可空

    返回 (系统_取数值注册项W (根目录, 编码_Ansi到Unicode (全路径注册项名, ), 编码_Ansi到Unicode (项名称, ), 是否为64位注册表))

.子程序 系统_取数值注册项W, 整数型, 公开, 成功返回数据
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 字节集
    .参数 项名称, 字节集
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_72E30225, 整数型
    .局部变量 变量_74E30225, 整数型
    .局部变量 变量_75E30225, 整数型
    .局部变量 变量_76E30225, 整数型
    .局部变量 变量_77E30225, 整数型
    .局部变量 变量_78E30225, 整数型

    .如果真 (根目录 ＝ 0)
        返回 (0)
    .如果真结束
    变量_74E30225 ＝ 位或 (选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY), #<?未知本地类型?>)
    变量_75E30225 ＝ DLL_RegOpenKeyExW (根目录, 全路径注册项名, 0, 变量_74E30225, 变量_72E30225)
    .如果真 (变量_75E30225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_75E30225))
        返回 (0)
    .如果真结束
    .如果真 (DLL_RegQueryValueExW (变量_72E30225, 项名称, #NULL, 变量_76E30225, #NULL, 变量_77E30225) ＝ #ERROR_SUCCESS)
        DLL_RegQueryValueExW (变量_72E30225, 项名称, #NULL, 变量_76E30225, 取指针整数_ (变量_78E30225), 变量_77E30225)
    .如果真结束
    RegCloseKey (变量_72E30225)
    返回 (变量_78E30225)

.子程序 系统_写数值注册项, 逻辑型, 公开, 成功返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 文本型
    .参数 注册表值类型, 整数型, , #REG_*
    .参数 项名称, 文本型
    .参数 欲写入值, 整数型
    .参数 是否为64位注册表, 逻辑型, 可空

    返回 (系统_写数值注册项W (根目录, 编码_Ansi到Unicode (全路径注册项名, ), 注册表值类型, 编码_Ansi到Unicode (项名称, ), 欲写入值, 是否为64位注册表))

.子程序 系统_写数值注册项W, 逻辑型, 公开, 成功返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 字节集
    .参数 注册表值类型, 整数型, , #REG_*
    .参数 项名称, 字节集
    .参数 欲写入值, 整数型
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_7EE30225, 整数型
    .局部变量 变量_80E30225, 整数型
    .局部变量 变量_81E30225, 整数型

    .如果真 (根目录 ＝ 0)
        返回 (假)
    .如果真结束
    变量_80E30225 ＝ 位或 (选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY), #KEY_WRITE)
    变量_81E30225 ＝ DLL_RegOpenKeyExW (根目录, 全路径注册项名, 0, 变量_80E30225, 变量_7EE30225)
    .如果真 (变量_81E30225 ＝ #<?未知本地类型?>)
        变量_81E30225 ＝ DLL_RegCreateKeyExW (根目录, 全路径注册项名, 0, #NULL, #REG_OPTION_NON_VOLATILE, 变量_80E30225, #NULL, 变量_7EE30225, #NULL)
    .如果真结束
    .如果真 (变量_81E30225 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_81E30225))
        返回 (假)
    .如果真结束
    变量_81E30225 ＝ DLL_RegSetValueExW (变量_7EE30225, 项名称, 0, 注册表值类型, 取指针整数_ (欲写入值), 4)
    RegCloseKey (变量_7EE30225)
    返回 (变量_81E30225 ＝ #ERROR_SUCCESS)

.子程序 系统_删除注册项, 逻辑型, 公开, 成功返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 文本型
    .参数 项名称, 文本型, 可空
    .参数 是否为64位注册表, 逻辑型, 可空
    .参数 以递归方式删除, 逻辑型, 可空, 项名称不为空

    返回 (系统_删除注册项W (根目录, 编码_Ansi到Unicode (全路径注册项名, ), 编码_Ansi到Unicode (项名称, ), 是否为64位注册表, 以递归方式删除))

.子程序 系统_删除注册项W, 逻辑型, 公开, 成功返回真
    .参数 根目录, 整数型, , #HKEY_*
    .参数 全路径注册项名, 字节集
    .参数 项名称, 字节集, 可空
    .参数 是否为64位注册表, 逻辑型, 可空
    .参数 以递归方式删除, 逻辑型, 可空, 项名称不为空
    .局部变量 变量_38060325, 整数型
    .局部变量 变量_39060325, 整数型
    .局部变量 变量_3A060325, 整数型

    .如果真 (根目录 ＝ 0)
        返回 (假)
    .如果真结束
    变量_39060325 ＝ 位或 (选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY), #KEY_WRITE)
    .如果 (项名称 ≠ { } 且 项名称 ≠ { 0, 0 })
        变量_3A060325 ＝ DLL_RegOpenKeyExW (根目录, 全路径注册项名, 0, 变量_39060325, 变量_38060325)
    .否则
        变量_3A060325 ＝ DLL_RegOpenKeyExW (根目录, 字节集_寻找取左 (全路径注册项名, { 92, 0 }, -1) ＋ { 0, 0 }, 0, 变量_39060325, 变量_38060325)
    .如果结束
    .如果真 (变量_3A060325 ≠ #ERROR_SUCCESS)
        输出调试文本 (取错误信息文本_API (变量_3A060325, ))
        返回 (假)
    .如果真结束
    .判断开始 (项名称 ＝ { } 或 项名称 ＝ { 0, 0 })
        变量_3A060325 ＝ DLL_RegDeleteKeyW (变量_38060325, 字节集_寻找取右 (全路径注册项名, { 92, 0 }, -1))
    .判断 (以递归方式删除)
        变量_3A060325 ＝ DLL_RegDeleteTreeW (变量_38060325, 项名称)
    .默认
        变量_3A060325 ＝ DLL_RegDeleteValueW (变量_38060325, 项名称)
    .判断结束
    RegCloseKey (变量_38060325)
    返回 (变量_3A060325 ＝ #ERROR_SUCCESS)

.子程序 GetKeyPathFromHKEY, 字节集, 公开, 根据hKey查找当前打开的注册表路径
    .参数 hKey, 整数型
    .局部变量 变量_89F00225, 整数型
    .局部变量 变量_8EF00225, 整数型
    .局部变量 变量_8AF00225, 整数型
    .局部变量 变量_8BF00225, 整数型
    .局部变量 变量_8CF00225, 字节集

    DLL_ZwQueryKey (hKey, #<?未知本地类型?>, #NULL, 0, 变量_89F00225)
    .如果真 (变量_89F00225 ≤ 0)
        返回 ({ })
    .如果真结束
    变量_8AF00225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_89F00225 ＋ 2)
    变量_8EF00225 ＝ DLL_ZwQueryKey (hKey, #<?未知本地类型?>, 变量_8AF00225, 变量_89F00225, 变量_89F00225)
    .如果真 (变量_8EF00225 ≠ #STATUS_SUCCESS)
        LocalFree (变量_8AF00225)
        输出调试文本 (取错误信息文本_API (变量_8EF00225, “ntdll.dll”))
        返回 ({ })
    .如果真结束
    变量_8BF00225 ＝ 指针_到整数 (变量_8AF00225)
    变量_8CF00225 ＝ 指针到字节集 (变量_8AF00225 ＋ 4, 变量_8BF00225 ＋ 2)
    LocalFree (变量_8AF00225)
    返回 (变量_8CF00225)

.子程序 系统_取所有时区, 整数型, 公开, 返回时区数量
    .参数 时区信息, 精易_时区信息, 参考 可空 数组, 用于接收时区信息
    .局部变量 变量_1CE50225, 精易_时区信息
    .局部变量 变量_1DE50225, 文本型
    .局部变量 变量_1EE50225, 正则表达式类
    .局部变量 变量_1FE50225, 整数型

    
    
    重定义数组 (时区信息, 假, 0)
    变量_1DE50225 ＝ 系统_取DOS执行结果 (“tzutil /l”, )
    变量_1EE50225.创建 (“\((UTC[+,-]*[\d,:]*)\) (\S*)\s+(.*)(?=\r\n)”, 变量_1DE50225, , , , )
    .如果真 (取反 (是否为空 (时区信息)))
        .计次循环首 (变量_1EE50225.取匹配数量 (), 变量_1FE50225)
            变量_1CE50225.时区 ＝ 变量_1EE50225.取子匹配文本 (变量_1FE50225, 1, )
            变量_1CE50225.时区名 ＝ 变量_1EE50225.取子匹配文本 (变量_1FE50225, 2, )
            变量_1CE50225.时区代码 ＝ 变量_1EE50225.取子匹配文本 (变量_1FE50225, 3, )
            加入成员 (时区信息, 变量_1CE50225)
        .计次循环尾 ()
    .如果真结束
    返回 (变量_1EE50225.取匹配数量 ())

.子程序 系统_设置时区, 逻辑型, 公开, 成功返回真, 失败返回假
    .参数 时区代码, 文本型, 可空, 如：China Standard Time，为空则自动设为北京时区
    .局部变量 变量_2CE50225, 文本型
    .局部变量 变量_2DE50225, 文本型

    
    
    .如果 (是否为空 (时区代码))
        变量_2CE50225 ＝ “China Standard Time”
    .否则
        变量_2CE50225 ＝ 删首尾空 (时区代码)
    .如果结束
    
    变量_2DE50225 ＝ 系统_取DOS执行结果 (“tzutil /s ” ＋ #引号 ＋ 变量_2CE50225 ＋ #引号, )
    .如果真 (变量_2DE50225 ＝ “”)
        返回 (真)
    .如果真结束
    
    输出调试文本 (文本_取出中间文本 (变量_2DE50225, “TZUTIL: ”, #换行符, , ))
    返回 (假)

.子程序 系统_取输入设备数量, 整数型, 公开, 返回设备数; 返回值为零表示不存在设备或发生错误
    返回 (DLL_waveInGetNumDevs ())

.子程序 取磁盘总线, 整数型
    .参数 变量_D1DE0225, 文本型
    .局部变量 变量_D2DE0225, 整数型
    .局部变量 变量_D3DE0225, 逻辑型
    .局部变量 变量_D4DE0225, 整数型
    .局部变量 变量_D5DE0225, 自定义_B3DE0241
    .局部变量 变量_D6DE0225, 整数型
    .局部变量 变量_D7DE0225, 自定义_B4DE0241

    变量_D2DE0225 ＝ CreateFileA (“\\.\” ＋ 变量_D1DE0225, 位或 (2147483648, 1073741824), 位或 (1, 2), 0, 3, 0, 0)
    
    
    
    
    .如果真 (变量_D2DE0225 ＝ -1)
        返回 (-1)
    .如果真结束
    
    
    
    
    .如果真 (DLL_DeviceIoControl5 (变量_D2DE0225, 2954240, 变量_D7DE0225, 17, 变量_D5DE0225, 37, 变量_D4DE0225, 0) ＝ 假)
        CloseHandle (变量_D2DE0225)
        返回 (-1)
    .如果真结束
    
    CloseHandle (变量_D2DE0225)
    返回 (变量_D5DE0225.成员_BFDE0235)

.子程序 磁盘_取驱动器总线类型, 文本型, 公开
    .参数 盘符, 文本型
    .局部变量 变量_DEDE0225, 整数型

    变量_DEDE0225 ＝ 取磁盘总线 (文本_取左边 (盘符, “:”, , ) ＋ “:”)
    .判断开始 (变量_DEDE0225 ＝ 0)
        返回 (“Unknown”)
    .判断 (变量_DEDE0225 ＝ 1)
        返回 (“SCSI”)
    .判断 (变量_DEDE0225 ＝ 2)
        返回 (“ATAPI”)
    .判断 (变量_DEDE0225 ＝ 3)
        返回 (“ATA”)
    .判断 (变量_DEDE0225 ＝ 4)
        返回 (“1394”)
    .判断 (变量_DEDE0225 ＝ 5)
        返回 (“SSA”)
    .判断 (变量_DEDE0225 ＝ 6)
        返回 (“FIBRE”)
    .判断 (变量_DEDE0225 ＝ 7)
        返回 (“USB”)
    .判断 (变量_DEDE0225 ＝ 8)
        返回 (“RAID”)
    .判断 (变量_DEDE0225 ＝ 9)
        返回 (“ISCSI”)
    .判断 (变量_DEDE0225 ＝ 10)
        返回 (“SAS”)
    .判断 (变量_DEDE0225 ＝ 11)
        返回 (“SATA”)
    .判断 (变量_DEDE0225 ＝ 12)
        返回 (“SD”)
    .判断 (变量_DEDE0225 ＝ 13)
        返回 (“MMC”)
    .判断 (变量_DEDE0225 ＝ 14)
        返回 (“Virtual”)
    .判断 (变量_DEDE0225 ＝ 15)
        返回 (“FileBackedVirtual”)
    .判断 (变量_DEDE0225 ＝ 16)
        返回 (“Spaces”)
    .判断 (变量_DEDE0225 ＝ 17)
        返回 (“Nvme”)
    .判断 (变量_DEDE0225 ＝ 18)
        返回 (“SCM”)
    .判断 (变量_DEDE0225 ＝ 127)
        返回 (“MaxReserved”)
    .默认
        返回 (“Unknown”)
    .判断结束
    

.子程序 系统_取远程会话身份名称, 文本型, 公开, 检索特定会话的名称
    .参数 会话ID, 整数型
    .局部变量 变量_8AED0225, 字节集
    .局部变量 变量_8BED0225, 整数型

    变量_8AED0225 ＝ 取空白字节集 (32)
    变量_8BED0225 ＝ DLL_WinStationOpenServerW (0)
    DLL_WinStationNameFromLogonIdW (变量_8BED0225, 会话ID, 变量_8AED0225)
    DLL_WinStationCloseServer (变量_8BED0225)
    返回 (编码_Unicode到Ansi (变量_8AED0225))

.子程序 系统_取显卡信息列表, 整数型, 公开, 返回显卡数量，0为失败
    .参数 显卡信息列表, 精易_显卡信息, 参考 可空 数组, 用于接收显卡信息列表
    .局部变量 变量_BBED0225, 对象
    .局部变量 变量_BCED0225, 对象
    .局部变量 变量_BDED0225, 对象
    .局部变量 变量_BEED0225, 对象
    .局部变量 变量_BFED0225, 整数型
    .局部变量 变量_C0ED0225, 整数型
    .局部变量 变量_C1ED0225, 变体型
    .局部变量 变量_C2ED0225, 整数型
    .局部变量 变量_C3ED0225, 对象
    .局部变量 变量_C4ED0225, 对象
    .局部变量 变量_C5ED0225, 精易_显卡信息

    清除数组 (显卡信息列表)
    .如果真 (变量_BBED0225.创建 (“WbemScripting.SWbemLocator”, ) ＝ 假)
        返回 (0)
    .如果真结束
    变量_BCED0225 ＝ 变量_BBED0225.对象型方法 (“ConnectServer”, “.”, “root\CIMV2”)
    .如果真 (变量_BCED0225.是否为空 ())
        返回 (0)
    .如果真结束
    变量_BDED0225 ＝ 变量_BCED0225.对象型方法 (“ExecQuery”, “SELECT * FROM Win32_VideoController”)
    .如果真 (变量_BDED0225.是否为空 ())
        返回 (0)
    .如果真结束
    变量_BEED0225 ＝ 变量_BDED0225.对象型方法 (“_NewEnum”, )
    .如果真 (变量_BEED0225.是否为空 ())
        返回 (0)
    .如果真结束
    变量_BFED0225 ＝ 取对象指针 (变量_BEED0225)
    .循环判断首 ()
        变量_C0ED0225 ＝ CallObject (变量_BFED0225, 3, 1, 取变体型指针 (变量_C1ED0225), 取指针整数_ (变量_C2ED0225), , , , , , )
        .如果真 (变量_C0ED0225 ≠ 0)
            到循环尾 ()
        .如果真结束
        变量_C3ED0225 ＝ 变量_C1ED0225.取对象 ()
        变量_C4ED0225 ＝ 变量_C3ED0225.读对象型属性 (“Properties_”, )
        变量_C5ED0225.驱动程序版本号 ＝ 变量_C4ED0225.对象型方法 (“Item”, “DriverVersion”).读文本属性 (“value”, )
        变量_C5ED0225.显卡名称 ＝ 变量_C4ED0225.对象型方法 (“Item”, “Name”).读文本属性 (“value”, )
        变量_C5ED0225.内存大小 ＝ 整数_有符号转无符号 (变量_C4ED0225.对象型方法 (“Item”, “AdapterRAM”).读数值属性 (“value”, ))
        变量_C5ED0225.描述 ＝ 变量_C4ED0225.对象型方法 (“Item”, “Caption”).读文本属性 (“value”, )
        变量_C5ED0225.详细描述 ＝ 变量_C4ED0225.对象型方法 (“Item”, “Description”).读文本属性 (“value”, )
        加入成员 (显卡信息列表, 变量_C5ED0225)
    .循环判断尾 (变量_C2ED0225 ＝ 1)
    返回 (取数组成员数 (显卡信息列表))

.子程序 系统_遍历取回收站中的文件, 整数型, 公开, 返回回收站中的文件数量
    .参数 回收站中的文件信息, 精易_回收站中的文件信息, 可空 数组, 接收
    .局部变量 变量_49EE0225, 逻辑型
    .局部变量 变量_0BEE0225, 整数型
    .局部变量 变量_0FEE0225, 整数型
    .局部变量 变量_10EE0225, 整数型
    .局部变量 变量_11EE0225, 整数型
    .局部变量 变量_13EE0225, 整数型
    .局部变量 变量_14EE0225, 整数型
    .局部变量 变量_15EE0225, 整数型
    .局部变量 变量_17EE0225, 文本型
    .局部变量 变量_1BEE0225, 整数型
    .局部变量 变量_1CEE0225, 整数型
    .局部变量 变量_1DEE0225, 整数型
    .局部变量 变量_1EEE0225, 字节集
    .局部变量 变量_1FEE0225, 字节集
    .局部变量 变量_24EE0225, 变体型
    .局部变量 变量_26EE0225, 精易_时间
    .局部变量 变量_27EE0225, FILETIME
    .局部变量 变量_2AEE0225, 日期时间型
    .局部变量 变量_43EE0225, 精易_回收站中的文件信息
    .局部变量 变量_30EE0225, 整数型

    变量_49EE0225 ＝ 是否为空 (回收站中的文件信息)
    .如果真 (变量_49EE0225 ＝ 假)
        清除数组 (回收站中的文件信息)
    .如果真结束
    变量_0BEE0225 ＝ DLL_SHGetDesktopFolder (变量_0FEE0225)
    变量_0BEE0225 ＝ DLL_SHGetMalloc (变量_10EE0225)
    变量_0BEE0225 ＝ DLL_SHGetFolderLocation (#NULL, #CSIDL_BITBUCKET, #NULL, 0, 变量_11EE0225)
    变量_0BEE0225 ＝ CallObject (变量_0FEE0225, #<?未知本地类型?>, 变量_11EE0225, #NULL, 取指针_字节集型 (#图片资源_C8020328), 取指针整数_ (变量_13EE0225), , , , , )
    SafeRelease (变量_0FEE0225)
    DLL_CoTaskMemFree (变量_11EE0225)
    变量_0BEE0225 ＝ CallObject (变量_13EE0225, #<?未知本地类型?>, #NULL, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>), 取指针整数_ (变量_14EE0225), , , , , , )
    变量_17EE0225 ＝ 取空白文本 (#MAX_PATH)
    .判断循环首 (变量_0BEE0225 ＝ #<?未知本地类型?>)
        变量_0BEE0225 ＝ CallObject (变量_14EE0225, #<?未知本地类型?>, 1, 取指针整数_ (变量_15EE0225), #NULL, , , , , , )
        .如果真 (变量_0BEE0225 ＝ #<?未知本地类型?>)
            跳出循环 ()
        .如果真结束
        SHGetPathFromIDListA (变量_15EE0225, 变量_17EE0225)
        变量_1BEE0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 264)
        变量_0BEE0225 ＝ CallObject (变量_13EE0225, #<?未知本地类型?>, 变量_15EE0225, #<?未知本地类型?>, 变量_1BEE0225, , , , , , )
        变量_1CEE0225 ＝ 指针_到整数 (变量_1BEE0225 ＋ 4)
        变量_1DEE0225 ＝ DLL_lstrlenW (变量_1CEE0225)
        变量_1EEE0225 ＝ 指针到字节集 (变量_1CEE0225, 变量_1DEE0225 × 2 ＋ 2)
        LocalFree (变量_1BEE0225)
        变量_1FEE0225 ＝ { 51, 75, 23, 155, 255, 64, 210, 17, 162, 126, 0, 192, 79, 195, 8, 113 } ＋ 到字节集 (#<?未知本地类型?>)
        变量_0BEE0225 ＝ CallObject (变量_13EE0225, #<?未知本地类型?>, 变量_15EE0225, 取指针_字节集型 (变量_1FEE0225), 取变体型指针 (变量_24EE0225), , , , , , )
        DLL_VariantTimeToSystemTime (变量_24EE0225.取日期 (), 变量_26EE0225)
        DLL_SystemTimeToFileTime (变量_26EE0225, 变量_27EE0225)
        变量_2AEE0225 ＝ FileTimeToVariantTime (变量_27EE0225)
        DLL_CoTaskMemFree (变量_15EE0225)
        .如果真 (变量_49EE0225 ＝ 假)
            变量_43EE0225.当前的路径 ＝ 变量_17EE0225
            变量_43EE0225.原路径 ＝ 编码_Unicode到Ansi (变量_1EEE0225)
            变量_43EE0225.删除时间 ＝ 变量_2AEE0225
            加入成员 (回收站中的文件信息, 变量_43EE0225)
        .如果真结束
        变量_30EE0225 ＝ 变量_30EE0225 ＋ 1
    .判断循环尾 ()
    SafeRelease (变量_14EE0225)
    SafeRelease (变量_13EE0225)
    SafeRelease (变量_10EE0225)
    返回 (变量_30EE0225)

.子程序 系统_读环境变量, 文本型, 公开, 返回环境变量的展开值
    .参数 环境变量名称, 文本型, , 仅扩展在流程环境空间中定义的环境变量。必须用“%”字符括起来的环境变量名，不区分大小写。
    .局部变量 变量_63EE0225, 字节集

    变量_63EE0225 ＝ 系统_读环境变量W (编码_Ansi到Unicode (环境变量名称))
    返回 (编码_Unicode到Ansi (变量_63EE0225))

.子程序 系统_读环境变量W, 字节集, 公开, 返回环境变量的展开值
    .参数 环境变量名称, 字节集, , 仅扩展在流程环境空间中定义的环境变量。必须用“%”字符括起来的环境变量名，不区分大小写。
    .局部变量 变量_5AEE0225, 整数型
    .局部变量 变量_5BEE0225, 字节集

    变量_5AEE0225 ＝ DLL_ExpandEnvironmentStringsW (环境变量名称, #NULL, 0)
    .如果真 (变量_5AEE0225 ＝ 0)
        返回 ({ })
    .如果真结束
    变量_5BEE0225 ＝ 取空白字节集 (变量_5AEE0225 × 2)
    DLL_ExpandEnvironmentStringsW (环境变量名称, 取指针_字节集型 (变量_5BEE0225), 变量_5AEE0225)
    返回 (变量_5BEE0225)

.子程序 系统_取网络适配器配置, 整数型, 公开, 返回网络适配器配置数量
    .参数 网络适配器配置, 精易_网络适配器配置, 可空 数组
    .局部变量 变量_3EEF0225, 逻辑型
    .局部变量 变量_3AEF0225, 整数型
    .局部变量 变量_37EF0225, 整数型
    .局部变量 变量_39EF0225, 整数型
    .局部变量 变量_3FEF0225, 整数型
    .局部变量 变量_4BEF0225, 整数型
    .局部变量 变量_47EF0225, 整数型
    .局部变量 变量_40EF0225, 精易_网络适配器配置
    .局部变量 变量_71EF0225, 整数型

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_VISTA)
        输出调试文本 (#<?未知本地类型?>)
        返回 (0)
    .如果真结束
    变量_3EEF0225 ＝ 是否为空 (网络适配器配置)
    .如果真 (变量_3EEF0225 ＝ 假)
        清除数组 (网络适配器配置)
    .如果真结束
    DLL_GetAdaptersAddresses (#<?未知本地类型?>, 0, #NULL, #NULL, 变量_37EF0225)
    变量_39EF0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_37EF0225)
    变量_3AEF0225 ＝ DLL_GetAdaptersAddresses (#<?未知本地类型?>, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL, 变量_39EF0225, 变量_37EF0225)
    .如果真 (变量_3AEF0225 ＝ #ERROR_BUFFER_OVERFLOW)
        LocalFree (变量_39EF0225)
        变量_37EF0225 ＝ 15000
        变量_39EF0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_37EF0225)
        变量_3AEF0225 ＝ DLL_GetAdaptersAddresses (#<?未知本地类型?>, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL, 变量_39EF0225, 变量_37EF0225)
    .如果真结束
    .如果真 (变量_3AEF0225 ≠ #ERROR_SUCCESS)
        LocalFree (变量_39EF0225)
        输出调试文本 (取错误信息文本_API (变量_3AEF0225, “Iphlpapi.dll”))
        返回 (0)
    .如果真结束
    变量_3FEF0225 ＝ 变量_39EF0225
    .判断循环首 (变量_3FEF0225 ≠ #NULL)
        变量_40EF0225.状态 ＝ 指针_到整数 (变量_3FEF0225 ＋ 68)
        变量_4BEF0225 ＝ 指针_到整数 (变量_3FEF0225 ＋ 36)
        变量_47EF0225 ＝ DLL_lstrlenW (变量_4BEF0225)
        .如果 (变量_47EF0225 ＞ 0)
            变量_40EF0225.描述 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_4BEF0225, 变量_47EF0225 × 2 ＋ 2))
        .否则
            变量_40EF0225.描述 ＝ “”
        .如果结束
        变量_4BEF0225 ＝ 指针_到整数 (变量_3FEF0225 ＋ 40)
        变量_47EF0225 ＝ DLL_lstrlenW (变量_4BEF0225)
        .如果 (变量_47EF0225 ＞ 0)
            变量_40EF0225.适配器名称 ＝ 编码_Unicode到Ansi (指针到字节集 (变量_4BEF0225, 变量_47EF0225 × 2 ＋ 2))
        .否则
            变量_40EF0225.适配器名称 ＝ “”
        .如果结束
        变量_40EF0225.物理地址 ＝ GetPhysicalAddress (变量_3FEF0225)
        变量_4BEF0225 ＝ 指针_到整数 (变量_3FEF0225 ＋ 56)
        变量_40EF0225.启用DHCP ＝ __query_bit (变量_4BEF0225, 2)
        GetFirstUnicastAddress (变量_3FEF0225, 变量_40EF0225)
        变量_40EF0225.DHCP服务器 ＝ GetDhcpv4Server (变量_3FEF0225)
        变量_40EF0225.IPv6索引 ＝ 指针_到整数 (变量_3FEF0225 ＋ 72)
        GetFirstDnsServerAddress (变量_3FEF0225, 变量_40EF0225)
        GetFirstGatewayAddress (变量_3FEF0225, 变量_40EF0225)
        变量_3FEF0225 ＝ 指针_到整数 (变量_3FEF0225 ＋ 8)
        .如果真 (变量_3EEF0225 ＝ 假)
            加入成员 (网络适配器配置, 变量_40EF0225)
        .如果真结束
        变量_71EF0225 ＝ 变量_71EF0225 ＋ 1
    .判断循环尾 ()
    LocalFree (变量_39EF0225)
    返回 (变量_71EF0225)

.子程序 GetPhysicalAddress, 文本型
    .参数 变量_57EF0225, 整数型
    .局部变量 变量_5BEF0225, 整数型
    .局部变量 变量_60EF0225, 整数型
    .局部变量 变量_62EF0225, 字节型
    .局部变量 变量_67EF0225, 字节集
    .局部变量 变量_61EF0225, 整数型
    .局部变量 变量_66EF0225, 整数型

    变量_57EF0225 ＝ 变量_57EF0225 ＋ 44
    变量_5BEF0225 ＝ 指针_到整数 (变量_57EF0225 ＋ #<?未知本地类型?>)
    .如果真 (变量_5BEF0225 ＞ 0)
        变量_60EF0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_5BEF0225 × 2 ＋ 变量_5BEF0225)
        .变量循环首 (0, 变量_5BEF0225 － 1, 1, 变量_61EF0225)
            变量_62EF0225 ＝ __get_byte (变量_57EF0225, 变量_61EF0225)
            变量_66EF0225 ＝ 变量_66EF0225 ＋ DLL__sprintf (变量_60EF0225 ＋ 变量_66EF0225, 选择 (变量_61EF0225 ＜ 变量_5BEF0225 － 1, “%02X-”, “%02X”), 变量_62EF0225)
        .变量循环尾 ()
        变量_67EF0225 ＝ 指针到字节集 (变量_60EF0225, 变量_66EF0225)
        LocalFree (变量_60EF0225)
    .如果真结束
    返回 (取字节集数据 (变量_67EF0225, #文本型, ))

.子程序 GetFirstUnicastAddress
    .参数 变量_D4EF0225, 整数型
    .参数 变量_D7EF0225, 精易_网络适配器配置
    .局部变量 变量_FEEF0225, 整数型
    .局部变量 变量_FFEF0225, 整数型
    .局部变量 变量_00F00225, 整数型
    .局部变量 变量_01F00225, 文本型

    变量_FEEF0225 ＝ 指针_到整数 (变量_D4EF0225 ＋ 16)
    .判断循环首 (变量_FEEF0225 ≠ #NULL)
        变量_FFEF0225 ＝ 指针_到整数 (变量_FEEF0225 ＋ 12)
        变量_00F00225 ＝ 指针_到整数 (变量_FFEF0225)
        .判断开始 (变量_00F00225 ＝ #<?未知本地类型?>)
            变量_01F00225 ＝ 取空白文本 (#<?未知本地类型?>)
            DLL_inet_ntop (#<?未知本地类型?>, 变量_FFEF0225 ＋ 4, 取指针_文本型 (变量_01F00225), #<?未知本地类型?>)
            变量_D7EF0225.IPv4地址 ＝ 变量_01F00225
            变量_D7EF0225.IPv4子网掩码 ＝ GetIpv4Mask (变量_FEEF0225)
        .判断 (变量_00F00225 ＝ #<?未知本地类型?>)
            变量_01F00225 ＝ 取空白文本 (#<?未知本地类型?>)
            DLL_inet_ntop (#<?未知本地类型?>, 变量_FFEF0225 ＋ 8, 取指针_文本型 (变量_01F00225), #<?未知本地类型?>)
            变量_D7EF0225.本地IPv6地址 ＝ 变量_01F00225
        .默认
            
        .判断结束
        变量_FEEF0225 ＝ 指针_到整数 (变量_FEEF0225 ＋ 8)
    .判断循环尾 ()

.子程序 GetIpv4Mask, 文本型
    .参数 变量_7BEF0225, 整数型
    .局部变量 变量_7FEF0225, 整数型
    .局部变量 变量_80EF0225, 整数型
    .局部变量 变量_87EF0225, 文本型

    变量_7FEF0225 ＝ 指针_到整数 (变量_7BEF0225 ＋ 44)
    DLL_ConvertLengthToIpv4Mask (变量_7FEF0225, 变量_80EF0225)
    变量_87EF0225 ＝ 取空白文本 (#<?未知本地类型?>)
    DLL_inet_ntop (#<?未知本地类型?>, 取指针整数_ (变量_80EF0225), 取指针_文本型 (变量_87EF0225), #<?未知本地类型?>)
    返回 (变量_87EF0225)

.子程序 GetDhcpv4Server, 文本型
    .参数 变量_BFEF0225, 整数型
    .局部变量 变量_C0EF0225, 整数型
    .局部变量 变量_C1EF0225, 整数型
    .局部变量 变量_C2EF0225, 文本型

    变量_C0EF0225 ＝ 指针_到整数 (变量_BFEF0225 ＋ 184)
    .如果真 (变量_C0EF0225 ≠ #NULL)
        变量_C1EF0225 ＝ 指针_到整数 (变量_C0EF0225)
        .如果真 (变量_C1EF0225 ＝ #<?未知本地类型?>)
            变量_C2EF0225 ＝ 取空白文本 (#<?未知本地类型?>)
            DLL_inet_ntop (#<?未知本地类型?>, 变量_C0EF0225 ＋ 4, 取指针_文本型 (变量_C2EF0225), #<?未知本地类型?>)
        .如果真结束
        
    .如果真结束
    返回 (变量_C2EF0225)

.子程序 GetFirstDnsServerAddress
    .参数 变量_05F00225, 整数型
    .参数 变量_06F00225, 精易_网络适配器配置
    .局部变量 变量_1CF00225, 整数型
    .局部变量 变量_1DF00225, 整数型
    .局部变量 变量_1EF00225, 整数型
    .局部变量 变量_28F00225, 文本型
    .局部变量 变量_3AF00225, 整数型

    变量_1CF00225 ＝ 指针_到整数 (变量_05F00225 ＋ 28)
    连续赋值 (“”, 变量_06F00225.IPv4DNS服务器, 变量_06F00225.IPv6DNS服务器)
    .判断循环首 (变量_1CF00225 ≠ #NULL)
        变量_1DF00225 ＝ 指针_到整数 (变量_1CF00225 ＋ 12)
        变量_1EF00225 ＝ 指针_到整数 (变量_1DF00225)
        .判断开始 (变量_1EF00225 ＝ #<?未知本地类型?>)
            变量_28F00225 ＝ 取空白文本 (#<?未知本地类型?>)
            变量_3AF00225 ＝ DLL_inet_ntop (#<?未知本地类型?>, 变量_1DF00225 ＋ 4, 取指针_文本型 (变量_28F00225), #<?未知本地类型?>)
            .如果真 (变量_3AF00225 ≠ #NULL)
                .如果真 (变量_06F00225.IPv4DNS服务器 ≠ “”)
                    变量_06F00225.IPv4DNS服务器 ＝ 变量_06F00225.IPv4DNS服务器 ＋ #换行符
                .如果真结束
                变量_06F00225.IPv4DNS服务器 ＝ 变量_06F00225.IPv4DNS服务器 ＋ 变量_28F00225
            .如果真结束
            
        .判断 (变量_1EF00225 ＝ #<?未知本地类型?>)
            变量_28F00225 ＝ 取空白文本 (#<?未知本地类型?>)
            变量_3AF00225 ＝ DLL_inet_ntop (#<?未知本地类型?>, 变量_1DF00225 ＋ 8, 取指针_文本型 (变量_28F00225), #<?未知本地类型?>)
            .如果真 (变量_3AF00225 ≠ #NULL)
                .如果真 (变量_06F00225.IPv6DNS服务器 ≠ “”)
                    变量_06F00225.IPv6DNS服务器 ＝ 变量_06F00225.IPv6DNS服务器 ＋ #换行符
                .如果真结束
                变量_06F00225.IPv6DNS服务器 ＝ 变量_06F00225.IPv6DNS服务器 ＋ 变量_28F00225
            .如果真结束
            
        .默认
            
        .判断结束
        变量_1CF00225 ＝ 指针_到整数 (变量_1CF00225 ＋ 8)
    .判断循环尾 ()

.子程序 GetFirstGatewayAddress
    .参数 变量_63F00225, 整数型
    .参数 变量_64F00225, 精易_网络适配器配置
    .局部变量 变量_60F00225, 整数型
    .局部变量 变量_65F00225, 整数型
    .局部变量 变量_66F00225, 整数型
    .局部变量 变量_67F00225, 文本型
    .局部变量 变量_68F00225, 整数型

    变量_60F00225 ＝ 指针_到整数 (变量_63F00225 ＋ 164)
    连续赋值 (“”, 变量_64F00225.IPv4默认网关, 变量_64F00225.IPv6默认网关)
    .判断循环首 (变量_60F00225 ≠ #NULL)
        变量_65F00225 ＝ 指针_到整数 (变量_60F00225 ＋ 12)
        变量_66F00225 ＝ 指针_到整数 (变量_65F00225)
        .判断开始 (变量_66F00225 ＝ #<?未知本地类型?>)
            变量_67F00225 ＝ 取空白文本 (#<?未知本地类型?>)
            变量_68F00225 ＝ DLL_inet_ntop (#<?未知本地类型?>, 变量_65F00225 ＋ 4, 取指针_文本型 (变量_67F00225), #<?未知本地类型?>)
            .如果真 (变量_68F00225 ≠ #NULL)
                .如果真 (变量_64F00225.IPv4默认网关 ≠ “”)
                    变量_64F00225.IPv4默认网关 ＝ 变量_64F00225.IPv4默认网关 ＋ #换行符
                .如果真结束
                变量_64F00225.IPv4默认网关 ＝ 变量_64F00225.IPv4默认网关 ＋ 变量_67F00225
            .如果真结束
            
        .判断 (变量_66F00225 ＝ #<?未知本地类型?>)
            变量_67F00225 ＝ 取空白文本 (#<?未知本地类型?>)
            变量_68F00225 ＝ DLL_inet_ntop (#<?未知本地类型?>, 变量_65F00225 ＋ 8, 取指针_文本型 (变量_67F00225), #<?未知本地类型?>)
            .如果真 (变量_68F00225 ≠ #NULL)
                .如果真 (变量_64F00225.IPv6默认网关 ≠ “”)
                    变量_64F00225.IPv6默认网关 ＝ 变量_64F00225.IPv6默认网关 ＋ #换行符
                .如果真结束
                变量_64F00225.IPv6默认网关 ＝ 变量_64F00225.IPv6默认网关 ＋ 变量_67F00225
            .如果真结束
            
        .默认
            
        .判断结束
        变量_60F00225 ＝ 指针_到整数 (变量_60F00225 ＋ 8)
    .判断循环尾 ()

.子程序 系统_通过逻辑盘符获取物理设备号, 整数型, 公开, 成功返回设备的编号，失败返回 -1
    .参数 盘符, 文本型, , C
    .局部变量 变量_98F00225, 整数型
    .局部变量 变量_99F00225, 整数型
    .局部变量 变量_9AF00225, 字节集
    .局部变量 变量_9BF00225, 逻辑型

    变量_98F00225 ＝ CreateFileA (“\\.\” ＋ 盘符 ＋ “:”, 位或 (#GENERIC_READ, #GENERIC_WRITE), 位或 (#FILE_SHARE_READ, #FILE_SHARE_WRITE), #NULL, #OPEN_EXISTING, 0, #NULL)
    .如果真 (变量_98F00225 ＝ #INVALID_HANDLE_VALUE)
        输出调试文本 (取错误信息文本_API (变量_98F00225, “Kernel32.dll”))
        返回 (#INVALID_HANDLE_VALUE)
    .如果真结束
    变量_99F00225 ＝ 12
    变量_9AF00225 ＝ 取空白字节集 (变量_99F00225)
    变量_9BF00225 ＝ DeviceIoControl1 (变量_98F00225, #<?未知本地类型?>, #NULL, 0, 取指针_字节集型 (变量_9AF00225), 变量_99F00225, #NULL, #NULL)
    .如果真 (变量_9BF00225 ＝ 假)
        CloseHandle (变量_98F00225)
        返回 (#INVALID_HANDLE_VALUE)
    .如果真结束
    CloseHandle (变量_98F00225)
    返回 (取字节集数据 (变量_9AF00225, #整数型, 5))

.子程序 系统_取磁盘驱动器卷标名称, 文本型, 公开, 通过盘符取磁盘驱动器卷标名称
    .参数 盘符, 文本型, , C:\
    .局部变量 变量_9FF40225, 字节集

    变量_9FF40225 ＝ 系统_取磁盘驱动器卷标名称W (编码_Ansi到Unicode (盘符, ))
    返回 (编码_Unicode到Ansi (变量_9FF40225))

.子程序 系统_取磁盘驱动器卷标名称W, 字节集, 公开, 通过盘符取磁盘驱动器卷标名称
    .参数 盘符, 字节集, , C:\
    .局部变量 变量_A1F40225, 整数型
    .局部变量 变量_A2F40225, 整数型
    .局部变量 变量_A3F40225, 整数型
    .局部变量 变量_A4F40225, 字节集

    变量_A2F40225 ＝ 692
    变量_A3F40225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_A2F40225)
    CoInitialize (#NULL)
    变量_A1F40225 ＝ DLL_SHGetFileInfoW (取指针_字节集型 (盘符), 0, 变量_A3F40225, 变量_A2F40225, #<?未知本地类型?>)
    CoUninitialize ()
    .如果真 (变量_A1F40225 ≠ 0)
        
        变量_A4F40225 ＝ 指针_到字节集W (变量_A3F40225 ＋ 12)
    .如果真结束
    LocalFree (变量_A3F40225)
    返回 (变量_A4F40225)

.子程序 字体_枚举W, , 公开, 枚举系统中的所有字体名称
    .参数 字体名称, 字节集, 参考 数组, 接收
    .局部变量 变量_52F50225, 整数型
    .局部变量 变量_53F50225, 整数型

    变量_52F50225 ＝ GetDC (#NULL)
    变量_53F50225 ＝ LocalAlloc (#LMEM_ZEROINIT, 92)
    __set_byte (变量_53F50225, 24, #<?未知本地类型?>)
    清除数组 (字体名称)
    DLL_EnumFontFamiliesExW (变量_52F50225, 变量_53F50225, 到整数 (&EnumFontFamProc), 取指针_通用型_数组 (字体名称), 0)
    LocalFree (变量_53F50225)
    ReleaseDC (#NULL, 变量_52F50225)

.子程序 EnumFontFamProc, 整数型
    .参数 变量_46F50225, 整数型
    .参数 变量_47F50225, 整数型
    .参数 变量_48F50225, 整数型
    .参数 变量_49F50225, 整数型
    .局部变量 变量_4AF50225, 字节集, , "0"
    .局部变量 变量_4BF50225, 整数型
    .局部变量 变量_4CF50225, 整数型

    变量_4CF50225 ＝ 指针转移 (变量_49F50225, 取指针_通用型_数组 (变量_4AF50225))
    变量_4BF50225 ＝ 取数组成员数 (变量_4AF50225) ＋ 1
    重定义数组 (变量_4AF50225, 真, 变量_4BF50225)
    
    变量_4AF50225 [变量_4BF50225] ＝ 指针_到字节集W (变量_46F50225 ＋ 28)
    指针还原 (变量_49F50225, 取指针_通用型_数组 (变量_4AF50225), 变量_4CF50225)
    返回 (1)

.子程序 系统_取外网IP, 文本型, 公开, 取本机的外网IP
    .局部变量 变量_FEF70225, 套接字信息
    .局部变量 变量_FFF70225, 整数型
    .局部变量 变量_00F80225, 整数型
    .局部变量 变量_01F80225, 整数型
    .局部变量 变量_02F80225, 整数型
    .局部变量 变量_03F80225, 整数型
    .局部变量 变量_150B0325, 文本型
    .局部变量 变量_05F80225, 整数型
    .局部变量 变量_09F80225, 整数型
    .局部变量 变量_0FF80225, 文本型

    .如果真 (WSAStartup (合并短整数 (1, 1), 变量_FEF70225) ＝ #ERROR_SUCCESS)
        变量_FFF70225 ＝ gethostbyname (“ns1.dnspod.net”)
        .如果真 (变量_FFF70225 ≠ #NULL)
            变量_00F80225 ＝ socket (#<?未知本地类型?>, #SOCK_STREAM, #IPPROTO_TCP)
            变量_01F80225 ＝ 16
            变量_02F80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_01F80225)
            __set_short (变量_02F80225, 0, #<?未知本地类型?>)
            __set_short (变量_02F80225, 2, htons (6666))
            变量_03F80225 ＝ 指针_到整数 (指针_到整数 (变量_FFF70225 ＋ 12))
            __set (变量_02F80225, 4, 指针_到整数 (变量_03F80225))
            .如果真 (connect (变量_00F80225, 变量_02F80225, 变量_01F80225) ＝ 0)
                变量_150B0325 ＝ “GET / HTTP/1.1” ＋ #换行符 ＋ “Accept-Language: zh-CN,zh;q=0.9” ＋ #换行符 ＋ “Host:ns1.dnspod.net” ＋ #换行符 ＋ #换行符
                send (变量_00F80225, 取指针文本_ (变量_150B0325), 取文本长度 (变量_150B0325), 0)
                变量_05F80225 ＝ 512
                变量_09F80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_05F80225)
                变量_01F80225 ＝ DLL_recv2 (变量_00F80225, 变量_09F80225, 变量_05F80225, 0)
                .如果真 (变量_01F80225 ＞ 0)
                    变量_0FF80225 ＝ 指针到文本 (变量_09F80225)
                    变量_0FF80225 ＝ 文本_取右边 (变量_0FF80225, #换行符, , )
                .如果真结束
                LocalFree (变量_09F80225)
            .如果真结束
            LocalFree (变量_02F80225)
            closesocket (变量_00F80225)
        .如果真结束
        WSACleanup ()
    .如果真结束
    返回 (变量_0FF80225)

.子程序 系统_取系统启动时间, 日期时间型, 公开, 返回系统启动时间
    .局部变量 变量_ECF80225, 整数型
    .局部变量 变量_F0F80225, 整数型
    .局部变量 变量_F4F80225, FILETIME
    .局部变量 变量_0EF90225, 日期时间型

    变量_F0F80225 ＝ 48
    变量_ECF80225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_F0F80225)
    .如果真 (变量_ECF80225 ≠ #NULL)
        .如果真 (DLL_NtQuerySystemInformation (#<?未知本地类型?>, 变量_ECF80225, 变量_F0F80225, #NULL) ＝ #STATUS_SUCCESS)
            变量_F4F80225.dwLowDateTime ＝ __get (变量_ECF80225, 0)
            变量_F4F80225.dwHighDateTime ＝ __get (变量_ECF80225, 4)
            变量_0EF90225 ＝ FileTimeToVariantTime (变量_F4F80225)
        .如果真结束
        LocalFree (变量_ECF80225)
    .如果真结束
    返回 (变量_0EF90225)

.子程序 系统_取启动时间, 长整数型, 公开, 获取系统从启动到现在所经过的毫秒数
    .局部变量 变量_25F90225, 整数型
    .局部变量 变量_26F90225, 整数型
    .局部变量 变量_34F90225, 长整数型
    .局部变量 变量_39F90225, 长整数型

    变量_26F90225 ＝ 48
    变量_25F90225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_26F90225)
    .如果真 (变量_25F90225 ≠ #NULL)
        .如果真 (DLL_NtQuerySystemInformation (#<?未知本地类型?>, 变量_25F90225, 变量_26F90225, #NULL) ＝ #STATUS_SUCCESS)
            变量_34F90225 ＝ 指针_到长整数型_汇编 (变量_25F90225)
            变量_39F90225 ＝ 指针_到长整数型_汇编 (变量_25F90225 ＋ 8)
        .如果真结束
        LocalFree (变量_25F90225)
    .如果真结束
    返回 (Asm_idiv64 (变量_39F90225 － 变量_34F90225, 10000))

.子程序 GetpIWbemServices, 整数型
    .参数 变量_73040325, 字节集
    .局部变量 变量_74040325, 整数型
    .局部变量 变量_75040325, 整数型
    .局部变量 变量_76040325, 整数型

    变量_76040325 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_63F90228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_64F90228), 变量_74040325)
    .如果真 (变量_76040325 ＝ #<?未知本地类型?> 且 变量_74040325 ≠ #NULL)
        变量_76040325 ＝ CallObject (变量_74040325, #<?未知本地类型?>, 取指针_字节集型 (变量_73040325), #NULL, #NULL, 0, 0, 0, 0, 取指针整数_ (变量_75040325), )
        .如果真 (变量_76040325 ＝ #<?未知本地类型?> 且 变量_75040325 ≠ #NULL)
            变量_76040325 ＝ DLL_CoSetProxyBlanket (变量_75040325, #<?未知本地类型?>, #<?未知本地类型?>, #NULL, #<?未知本地类型?>, #<?未知本地类型?>, #NULL, #<?未知本地类型?>)
        .如果真结束
        SafeRelease (变量_74040325)
    .如果真结束
    返回 (变量_75040325)

.子程序 GetpIEnumWbemClassObject, 整数型
    .参数 变量_5CF90225, 字节集
    .参数 变量_5DF90225, 字节集
    .局部变量 变量_60F90225, 整数型
    .局部变量 变量_61F90225, 字节集
    .局部变量 变量_62F90225, 整数型
    .局部变量 变量_77040325, 整数型

    变量_60F90225 ＝ GetpIWbemServices (变量_5CF90225)
    .如果真 (变量_60F90225 ≠ #NULL)
        变量_61F90225 ＝ 编码_Ansi到Unicode (“WQL”, )
        变量_77040325 ＝ CallObject (变量_60F90225, #<?未知本地类型?>, 取指针_字节集型 (变量_61F90225), 取指针_字节集型 (变量_5DF90225), 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL, 取指针整数_ (变量_62F90225), , , , )
        SafeRelease (变量_60F90225)
    .如果真结束
    返回 (变量_62F90225)

.子程序 系统_WMI监视进程W, 整数型, 公开, 成功返回线程句柄
    .参数 欲监视的事件, 整数型, 可空, 0、监视进程开启；1、监视进程关闭；
    .参数 进程通知事件, 子程序指针, , int ProcessNotifyEvent(整数型 欲监视的事件, 整数型 进程名, 整数型 进程ID, 整数型 命令行, 整数型 可执行路径);
    .局部变量 变量_24FA0225, 整数型
    .局部变量 变量_8BF90225, 整数型

    变量_24FA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 8)
    .如果真 (变量_24FA0225 ≠ #NULL)
        .如果 (欲监视的事件 ＝ 1)
            __set (变量_24FA0225, 0, 1)
        .否则
            __set (变量_24FA0225, 0, 0)
        .如果结束
        __set (变量_24FA0225, 4, 到整数 (进程通知事件))
        变量_8BF90225 ＝ CreateThread (#NULL, 0, 到整数 (&ProcessNotifyEvent), 变量_24FA0225, 0, #NULL)
    .如果真结束
    返回 (变量_8BF90225)

.子程序 ProcessNotifyEvent
    .参数 变量_D3F90225, 整数型
    .局部变量 变量_2DFA0225, 整数型
    .局部变量 变量_31FA0225, 整数型
    .局部变量 变量_8DF90225, 整数型
    .局部变量 变量_9BF90225, 整数型
    .局部变量 变量_9CF90225, 整数型
    .局部变量 变量_9DF90225, 整数型
    .局部变量 变量_BDF90225, 整数型
    .局部变量 变量_9FF90225, 整数型
    .局部变量 变量_A0F90225, 字节集
    .局部变量 变量_BCF90225, 整数型
    .局部变量 变量_DBF90225, 整数型
    .局部变量 变量_C9F90225, 整数型
    .局部变量 变量_00FA0225, 整数型
    .局部变量 变量_04FA0225, 整数型
    .局部变量 变量_1CFA0225, 整数型

    变量_2DFA0225 ＝ __get (变量_D3F90225, 0)
    变量_31FA0225 ＝ __get (变量_D3F90225, 4)
    LocalFree (变量_D3F90225)
    
    CoInitialize (#NULL)
    变量_9BF90225 ＝ DLL_CoInitializeSecurity (#NULL, -1, #NULL, #NULL, #<?未知本地类型?>, #<?未知本地类型?>, #NULL, #<?未知本地类型?>, #NULL)
    变量_8DF90225 ＝ GetpIEnumWbemClassObject (编码_Ansi到Unicode (“ROOT\CIMV2”, ), 编码_Ansi到Unicode (“SELECT * FROM ” ＋ 多项选择 (变量_2DFA0225 ＋ 1, “__InstanceCreationEvent”, “__InstanceDeletionEvent”) ＋ “ WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'”, ))
    .如果真 (变量_8DF90225 ≠ #NULL)
        .判断循环首 (变量_1CFA0225 ＝ 0)
            变量_9BF90225 ＝ CallObject (变量_8DF90225, #<?未知本地类型?>, #<?未知本地类型?>, 1, 取指针整数_ (变量_9CF90225), 取指针整数_ (变量_9DF90225), , , , , )
            .如果真 (变量_9BF90225 ＝ #<?未知本地类型?> 且 变量_9CF90225 ≠ #NULL)
                变量_BDF90225 ＝ 16
                变量_9FF90225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_BDF90225)
                变量_A0F90225 ＝ 编码_Ansi到Unicode (“TargetInstance”, )
                变量_9BF90225 ＝ CallObject (变量_9CF90225, #<?未知本地类型?>, 取指针_字节集型 (变量_A0F90225), 0, 变量_9FF90225, #NULL, #NULL, , , , )
                SafeRelease (变量_9CF90225)
                .如果真 (变量_9BF90225 ＝ #<?未知本地类型?>)
                    变量_BCF90225 ＝ __get (变量_9FF90225, 8)
                    .如果真 (变量_BCF90225 ≠ #NULL)
                        
                        
                        memset (变量_9FF90225, 0, 变量_BDF90225)
                        变量_A0F90225 ＝ 编码_Ansi到Unicode (“Name”, )
                        变量_9BF90225 ＝ CallObject (变量_BCF90225, #<?未知本地类型?>, 取指针_字节集型 (变量_A0F90225), 0, 变量_9FF90225, #NULL, #NULL, , , , )
                        变量_DBF90225 ＝ __get (变量_9FF90225, 8)
                        
                        memset (变量_9FF90225, 0, 变量_BDF90225)
                        变量_A0F90225 ＝ 编码_Ansi到Unicode (“ProcessID”, )
                        变量_9BF90225 ＝ CallObject (变量_BCF90225, #<?未知本地类型?>, 取指针_字节集型 (变量_A0F90225), 0, 变量_9FF90225, #NULL, #NULL, , , , )
                        变量_C9F90225 ＝ __get (变量_9FF90225, 8)
                        
                        memset (变量_9FF90225, 0, 变量_BDF90225)
                        变量_A0F90225 ＝ 编码_Ansi到Unicode (“CommandLine”, )
                        变量_9BF90225 ＝ CallObject (变量_BCF90225, #<?未知本地类型?>, 取指针_字节集型 (变量_A0F90225), 0, 变量_9FF90225, #NULL, #NULL, , , , )
                        变量_00FA0225 ＝ __get (变量_9FF90225, 8)
                        
                        memset (变量_9FF90225, 0, 变量_BDF90225)
                        变量_A0F90225 ＝ 编码_Ansi到Unicode (“ExecutablePath”, )
                        变量_9BF90225 ＝ CallObject (变量_BCF90225, #<?未知本地类型?>, 取指针_字节集型 (变量_A0F90225), 0, 变量_9FF90225, #NULL, #NULL, , , , )
                        变量_04FA0225 ＝ __get (变量_9FF90225, 8)
                        
                        .如果真 (变量_31FA0225 ≠ #NULL)
                            变量_1CFA0225 ＝ 程序_Call (变量_31FA0225, 变量_2DFA0225, 变量_DBF90225, 变量_C9F90225, 变量_00FA0225, 变量_04FA0225)
                        .如果真结束
                        
                        .如果真 (变量_DBF90225 ≠ #NULL)
                            DLL_SysFreeString (变量_DBF90225)
                        .如果真结束
                        .如果真 (变量_00FA0225 ≠ #NULL)
                            DLL_SysFreeString (变量_00FA0225)
                        .如果真结束
                        .如果真 (变量_04FA0225 ≠ #NULL)
                            DLL_SysFreeString (变量_04FA0225)
                        .如果真结束
                        
                        SafeRelease (变量_BCF90225)
                    .如果真结束
                    
                .如果真结束
                LocalFree (变量_9FF90225)
            .如果真结束
            
        .判断循环尾 ()
        SafeRelease (变量_8DF90225)
    .如果真结束
    CoUninitialize ()

.子程序 系统_创建符号链接, 逻辑型, 公开, 创建符号链接
    .参数 要创建的符号链接, 文本型
    .参数 要创建的符号链接的目标名称, 文本型

    返回 (系统_创建符号链接W (编码_Ansi到Unicode (要创建的符号链接, ), 编码_Ansi到Unicode (要创建的符号链接的目标名称, )))

.子程序 系统_创建符号链接W, 逻辑型, 公开, 创建符号链接
    .参数 要创建的符号链接, 字节集
    .参数 要创建的符号链接的目标名称, 字节集
    .局部变量 变量_C8FA0225, 整数型
    .局部变量 变量_C9FA0225, 整数型

    变量_C8FA0225 ＝ DLL_GetFileAttributesW (要创建的符号链接的目标名称)
    .如果真 (变量_C8FA0225 ＝ #<?未知本地类型?>)
        输出调试文本 (“检索指定文件或目录的文件系统属性失败！”)
        返回 (假)
    .如果真结束
    .如果真 (位与 (变量_C8FA0225, #FILE_ATTRIBUTE_DIRECTORY) ≠ 0)
        变量_C9FA0225 ＝ #<?未知本地类型?>
    .如果真结束
    返回 (DLL_CreateSymbolicLinkW (要创建的符号链接, 要创建的符号链接的目标名称, 变量_C9FA0225) ≠ 0)

.子程序 系统_取符号链接所在位置, 文本型, 公开, 成功返回符号链接的所在位置
    .参数 符号链接路径, 文本型
    .局部变量 变量_D4FA0225, 字节集

    变量_D4FA0225 ＝ 编码_Ansi到Unicode (符号链接路径, )
    变量_D4FA0225 ＝ 系统_取符号链接所在位置W (变量_D4FA0225)
    返回 (编码_Unicode到Ansi (变量_D4FA0225))

.子程序 系统_取符号链接所在位置W, 字节集, 公开, 成功返回符号链接的所在位置
    .参数 符号链接路径, 字节集
    .局部变量 变量_D6FA0225, 整数型
    .局部变量 变量_D7FA0225, 整数型
    .局部变量 变量_D8FA0225, 整数型
    .局部变量 变量_D9FA0225, 整数型
    .局部变量 变量_DAFA0225, 字节集

    变量_D6FA0225 ＝ DLL_CreateFileW (符号链接路径, 0, 0, #NULL, #OPEN_EXISTING, 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL)
    .如果真 (变量_D6FA0225 ≠ #INVALID_HANDLE_VALUE)
        变量_D8FA0225 ＝ 24 ＋ #MAX_PATH × 2
        变量_D7FA0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_D8FA0225)
        .如果真 (变量_D7FA0225 ≠ #NULL)
            .如果真 (DeviceIoControl1 (变量_D6FA0225, #<?未知本地类型?>, #NULL, 0, 变量_D7FA0225, 变量_D8FA0225, 变量_D9FA0225, #NULL))
                变量_D8FA0225 ＝ 指针_到短整数型_汇编 (变量_D7FA0225 ＋ 8)
                .如果真 (变量_D8FA0225 ＞ 0)
                    变量_DAFA0225 ＝ 指针到字节集 (变量_D7FA0225 ＋ 20, 变量_D8FA0225) ＋ { 0, 0 }
                .如果真结束
                
            .如果真结束
            LocalFree (变量_D7FA0225)
        .如果真结束
        CloseHandle (变量_D6FA0225)
    .如果真结束
    返回 (变量_DAFA0225)

.子程序 系统_创建图标到资源管理器, 逻辑型, 公开, 在资源管理器中创建快捷方式
    .参数 唯一标识码, 文本型, , GUID
    .参数 标题, 文本型
    .参数 提示, 文本型, 可空
    .参数 命令行, 文本型
    .参数 图标路径, 文本型, 可空, icon
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_FFFB0225, 字节集
    .局部变量 变量_03FC0225, 字节集

    .如果真 (是否为空 (提示) ＝ 假)
        变量_FFFB0225 ＝ 编码_Ansi到Unicode (提示, )
    .如果真结束
    .如果真 (是否为空 (图标路径) ＝ 假)
        变量_03FC0225 ＝ 编码_Ansi到Unicode (图标路径, )
    .如果真结束
    返回 (系统_创建图标到资源管理器W (编码_Ansi到Unicode (唯一标识码, ), 编码_Ansi到Unicode (标题, ), 变量_FFFB0225, 编码_Ansi到Unicode (命令行, ), 变量_03FC0225, 是否为64位注册表))

.子程序 系统_创建图标到资源管理器W, 逻辑型, 公开, 在资源管理器中创建快捷方式
    .参数 唯一标识码, 字节集, , GUID
    .参数 标题, 字节集
    .参数 提示, 字节集, 可空
    .参数 命令行, 字节集
    .参数 图标路径, 字节集, 可空, icon
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_9EFB0225, 字节集
    .局部变量 变量_9DFB0225, 整数型, , "3"
    .局部变量 变量_A6FB0225, 整数型
    .局部变量 变量_A7FB0225, 字节集

    变量_A6FB0225 ＝ 位或 (#KEY_WRITE, 选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY))
    变量_9EFB0225 ＝ { 0, 0, 0, 0, 0, 0 }
    变量_9EFB0225 [1] ＝ DLL_RegOpenKeyExW (#HKEY_CLASSES_ROOT, 编码_Ansi到Unicode (“CLSID”, ), 0, 变量_A6FB0225, 变量_9DFB0225 [1])
    .如果真 (变量_9EFB0225 [1] ＝ #ERROR_SUCCESS 且 变量_9DFB0225 [1] ≠ #NULL)
        变量_9EFB0225 [2] ＝ DLL_RegCreateKeyExW (变量_9DFB0225 [1], 唯一标识码, 0, #NULL, 0, 变量_A6FB0225, #NULL, 变量_9DFB0225 [2], #NULL)
        .如果真 (变量_9EFB0225 [2] ＝ #ERROR_SUCCESS 且 变量_9DFB0225 [2] ≠ #NULL)
            DLL_RegSetValueExW (变量_9DFB0225 [2], { 0, 0 }, 0, #REG_SZ, 取指针_字节集型 (标题), 取字节集长度 (标题))
            DLL_RegSetValueExW (变量_9DFB0225 [2], 编码_Ansi到Unicode (“LocalizedString”, ), 0, #REG_SZ, 取指针_字节集型 (标题), 取字节集长度 (标题))
            
            .如果真 (提示 ≠ { })
                DLL_RegSetValueExW (变量_9DFB0225 [2], 编码_Ansi到Unicode (“InfoTip”, ), 0, #REG_SZ, 取指针_字节集型 (提示), 取字节集长度 (提示))
                DLL_RegSetValueExW (变量_9DFB0225 [2], 编码_Ansi到Unicode (“System.ItemAuthors”, ), 0, #REG_SZ, 取指针_字节集型 (提示), 取字节集长度 (提示))
                变量_A7FB0225 ＝ 编码_Ansi到Unicode (“prop:System.ItemAuthors”, )
                DLL_RegSetValueExW (变量_9DFB0225 [2], 编码_Ansi到Unicode (“TileInfo”, ), 0, #REG_SZ, 取指针_字节集型 (变量_A7FB0225), 取字节集长度 (变量_A7FB0225))
            .如果真结束
            
            .如果真 (图标路径 ≠ { })
                变量_9EFB0225 [3] ＝ DLL_RegCreateKeyExW (变量_9DFB0225 [2], 编码_Ansi到Unicode (“DefaultIcon”, ), 0, #NULL, 0, 变量_A6FB0225, #NULL, 变量_9DFB0225 [3], #NULL)
                .如果真 (变量_9EFB0225 [3] ＝ #ERROR_SUCCESS 且 变量_9DFB0225 [3] ≠ #NULL)
                    DLL_RegSetValueExW (变量_9DFB0225 [3], { 0, 0 }, 0, #REG_SZ, 取指针_字节集型 (图标路径), 取字节集长度 (图标路径))
                    RegCloseKey (变量_9DFB0225 [3])
                .如果真结束
                
            .如果真结束
            
            变量_9EFB0225 [4] ＝ DLL_RegCreateKeyExW (变量_9DFB0225 [2], 编码_Ansi到Unicode (“Shell\Open\Command”, ), 0, #NULL, 0, 变量_A6FB0225, #NULL, 变量_9DFB0225 [3], #NULL)
            .如果真 (变量_9EFB0225 [4] ＝ #ERROR_SUCCESS 且 变量_9DFB0225 [3] ≠ #NULL)
                DLL_RegSetValueExW (变量_9DFB0225 [3], { 0, 0 }, 0, #REG_SZ, 取指针_字节集型 (命令行), 取字节集长度 (命令行))
                RegCloseKey (变量_9DFB0225 [3])
            .如果真结束
            
            RegCloseKey (变量_9DFB0225 [2])
            
            变量_9EFB0225 [5] ＝ DLL_RegCreateKeyExW (#HKEY_CURRENT_USER, 编码_Ansi到Unicode (“Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace”, ), 0, #NULL, 0, 变量_A6FB0225, #NULL, 变量_9DFB0225 [2], #NULL)
            .如果真 (变量_9EFB0225 [5] ＝ #ERROR_SUCCESS 且 变量_9DFB0225 [2] ≠ #NULL)
                变量_9EFB0225 [6] ＝ DLL_RegCreateKeyExW (变量_9DFB0225 [2], 唯一标识码, 0, #NULL, 0, 变量_A6FB0225, #NULL, 变量_9DFB0225 [3], #NULL)
                .如果真 (变量_9EFB0225 [6] ＝ #ERROR_SUCCESS 且 变量_9DFB0225 [3] ≠ #NULL)
                    RegCloseKey (变量_9DFB0225 [3])
                .如果真结束
                RegCloseKey (变量_9DFB0225 [2])
            .如果真结束
            
        .如果真结束
        
        RegCloseKey (变量_9DFB0225 [1])
    .如果真结束
    返回 (变量_9EFB0225 ＝ { 0, 0, 0, 0, 0, 0 })

.子程序 系统_删除资源管理器的图标, 逻辑型, 公开, 删除资源管理器中的快捷方式
    .参数 唯一标识码, 文本型, , GUID
    .参数 是否为64位注册表, 逻辑型, 可空

    返回 (系统_删除资源管理器的图标W (编码_Ansi到Unicode (唯一标识码, ), 是否为64位注册表))

.子程序 系统_删除资源管理器的图标W, 逻辑型, 公开, 删除资源管理器中的快捷方式
    .参数 唯一标识码, 字节集, , GUID
    .参数 是否为64位注册表, 逻辑型, 可空
    .局部变量 变量_BFFB0225, 整数型
    .局部变量 变量_C0FB0225, 字节集
    .局部变量 变量_C1FB0225, 整数型

    变量_BFFB0225 ＝ 位或 (#<?未知本地类型?>, 选择 (是否为64位注册表, #KEY_WOW64_64KEY, #KEY_WOW64_32KEY))
    变量_C0FB0225 ＝ { 0, 0 }
    变量_C0FB0225 [1] ＝ DLL_RegOpenKeyExW (#HKEY_CURRENT_USER, 编码_Ansi到Unicode (“Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace”, ), 0, 变量_BFFB0225, 变量_C1FB0225)
    .如果真 (变量_C0FB0225 [1] ＝ #ERROR_SUCCESS 且 变量_C1FB0225 ≠ #NULL)
        DLL_RegDeleteTreeW (变量_C1FB0225, 唯一标识码)
        RegCloseKey (变量_C1FB0225)
    .如果真结束
    
    变量_C0FB0225 [2] ＝ DLL_RegOpenKeyExW (#HKEY_CLASSES_ROOT, 编码_Ansi到Unicode (“CLSID”, ), 0, 变量_BFFB0225, 变量_C1FB0225)
    .如果真 (变量_C0FB0225 [2] ＝ #ERROR_SUCCESS 且 变量_C1FB0225 ≠ #NULL)
        DLL_RegDeleteTreeW (变量_C1FB0225, 唯一标识码)
        RegCloseKey (变量_C1FB0225)
    .如果真结束
    
    返回 (变量_C0FB0225 ＝ { 0, 0 })

.子程序 系统_遍历右键菜单并执行, 逻辑型, 公开, 遍历指定文件右键菜单并执行
    .参数 文件路径, 文本型
    .参数 欲执行的菜单, 文本型

    返回 (系统_遍历右键菜单并执行W (编码_Ansi到Unicode (文件路径, ), 编码_Ansi到Unicode (欲执行的菜单, )))

.子程序 系统_遍历右键菜单并执行W, 逻辑型, 公开, 遍历指定文件右键菜单并执行
    .参数 文件路径, 字节集
    .参数 欲执行的菜单, 字节集
    .局部变量 变量_1DFC0225, 整数型
    .局部变量 变量_1EFC0225, 整数型
    .局部变量 变量_38FC0225, 整数型
    .局部变量 变量_3CFC0225, 字节集
    .局部变量 变量_44FC0225, 整数型
    .局部变量 变量_45FC0225, 整数型
    .局部变量 变量_65FC0225, 整数型
    .局部变量 变量_6EFC0225, 整数型
    .局部变量 变量_70FC0225, 整数型
    .局部变量 变量_76FC0225, 整数型
    .局部变量 变量_7FFC0225, 整数型
    .局部变量 变量_88FC0225, 字节集
    .局部变量 变量_98FC0225, 逻辑型
    .局部变量 变量_6FFC0225, 整数型

    CoInitialize (#NULL)
    变量_1DFC0225 ＝ DLL_CoCreateInstance3 (取指针_字节集型 (#图片资源_1AFC0228), #NULL, #CLSCTX_INPROC_SERVER, 取指针_字节集型 (#图片资源_1BFC0228), 变量_1EFC0225)
    .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?> 且 变量_1EFC0225 ≠ #NULL)
        变量_38FC0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
        __set_short (变量_38FC0225, 0, 8)
        变量_3CFC0225 ＝ 文件_取目录W (文件路径)
        __set (变量_38FC0225, 8, 取指针_字节集型 (变量_3CFC0225))
        变量_1DFC0225 ＝ CallObject (变量_1EFC0225, #<?未知本地类型?>, __get (变量_38FC0225, 0), __get (变量_38FC0225, 4), __get (变量_38FC0225, 8), __get (变量_38FC0225, 12), 取指针整数_ (变量_44FC0225), , , , )
        .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?> 且 变量_44FC0225 ≠ #NULL)
            变量_3CFC0225 ＝ 字节集_寻找取右 (文件路径, { 92, 0 }, -1) ＋ { 0, 0 }
            变量_1DFC0225 ＝ CallObject (变量_44FC0225, #<?未知本地类型?>, 取指针_字节集型 (变量_3CFC0225), 取指针整数_ (变量_45FC0225), , , , , , , )
            .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?> 且 变量_45FC0225 ≠ #NULL)
                变量_1DFC0225 ＝ CallObject (变量_45FC0225, #<?未知本地类型?>, 取指针整数_ (变量_65FC0225), , , , , , , , )
                .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?> 且 变量_65FC0225 ≠ #NULL)
                    变量_1DFC0225 ＝ CallObject (变量_65FC0225, #<?未知本地类型?>, 取指针整数_ (变量_6EFC0225), , , , , , , , )
                    .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?> 且 变量_6EFC0225 ＞ 0)
                        变量_70FC0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
                        __set_short (变量_70FC0225, 0, 3)
                        .变量循环首 (0, 变量_6EFC0225 － 1, 1, 变量_6FFC0225)
                            __set (变量_70FC0225, 8, 变量_6FFC0225)
                            变量_1DFC0225 ＝ CallObject (变量_65FC0225, #<?未知本地类型?>, __get (变量_70FC0225, 0), __get (变量_70FC0225, 4), __get (变量_70FC0225, 8), __get (变量_70FC0225, 12), 取指针整数_ (变量_76FC0225), , , , )
                            .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?> 且 变量_76FC0225 ≠ #NULL)
                                变量_1DFC0225 ＝ CallObject (变量_76FC0225, #<?未知本地类型?>, 取指针整数_ (变量_7FFC0225), , , , , , , , )
                                .如果真 (变量_1DFC0225 ＝ #<?未知本地类型?>)
                                    变量_88FC0225 ＝ 指针_到字节集W (变量_7FFC0225)
                                    .如果真 (变量_88FC0225 ＝ 欲执行的菜单)
                                        变量_1DFC0225 ＝ CallObject (变量_76FC0225, #<?未知本地类型?>, , , , , , , , , )
                                        变量_98FC0225 ＝ 变量_1DFC0225 ＝ #<?未知本地类型?>
                                        SafeRelease (变量_76FC0225)
                                        跳出循环 ()
                                    .如果真结束
                                    
                                .如果真结束
                                SafeRelease (变量_76FC0225)
                            .如果真结束
                            
                        .变量循环尾 ()
                        LocalFree (变量_70FC0225)
                    .如果真结束
                    SafeRelease (变量_65FC0225)
                .如果真结束
                SafeRelease (变量_45FC0225)
            .如果真结束
            SafeRelease (变量_44FC0225)
        .如果真结束
        LocalFree (变量_38FC0225)
        SafeRelease (变量_1EFC0225)
    .如果真结束
    CoUninitialize ()
    返回 (变量_98FC0225)

.子程序 系统_是否为Server版本, 逻辑型, 公开, 判断当前的操作系统是否为Server版本
    .局部变量 变量_3BFF0225, 整数型
    .局部变量 变量_3CFF0225, 长整数型
    .局部变量 变量_3DFF0225, 逻辑型

    变量_3BFF0225 ＝ LocalAlloc (#LMEM_ZEROINIT, 284)
    __set (变量_3BFF0225, 0, 284)
    __set_byte (变量_3BFF0225, 282, #VER_NT_WORKSTATION)
    变量_3CFF0225 ＝ DLL_VerSetConditionMask (0, #<?未知本地类型?>, #<?未知本地类型?>)
    变量_3DFF0225 ＝ 取反 (DLL_VerifyVersionInfoW (变量_3BFF0225, #<?未知本地类型?>, 变量_3CFF0225))
    LocalFree (变量_3BFF0225)
    返回 (变量_3DFF0225)

.子程序 系统_遍历修复补丁ID, 整数型, 公开, 返回修复补丁ID的数组成员数
    .参数 修复补丁ID, 文本型, 参考 数组
    .参数 查询补丁ID, 文本型, 可空
    .局部变量 变量_80040325, 整数型
    .局部变量 变量_81040325, 字节集
    .局部变量 变量_82040325, 字节集
    .局部变量 变量_83040325, 整数型
    .局部变量 变量_85040325, 整数型
    .局部变量 变量_86040325, 整数型
    .局部变量 变量_88040325, 字节集
    .局部变量 变量_8C040325, 整数型
    .局部变量 变量_9D040325, 整数型
    .局部变量 变量_9E040325, 整数型

    清除数组 (修复补丁ID)
    变量_80040325 ＝ GetpIWbemServices (编码_Ansi到Unicode (“root\CIMV2”, ))
    .如果真 (变量_80040325 ≠ #NULL)
        变量_81040325 ＝ 编码_Ansi到Unicode (“WQL”, )
        .如果 (是否为空 (查询补丁ID))
            变量_82040325 ＝ 编码_Ansi到Unicode (“SELECT HotFixID FROM Win32_QuickFixEngineering”, )
        .否则
            变量_82040325 ＝ 编码_Ansi到Unicode (“SELECT HotFixID FROM Win32_QuickFixEngineering WHERE HotFixID = '” ＋ 查询补丁ID ＋ “'”, )
        .如果结束
        变量_9E040325 ＝ CallObject (变量_80040325, #<?未知本地类型?>, 取指针字节集_ (变量_81040325), 取指针字节集_ (变量_82040325), 位或 (#<?未知本地类型?>, #<?未知本地类型?>), #NULL, 取指针整数_ (变量_83040325), , , , )
        .如果真 (变量_9E040325 ＝ #<?未知本地类型?> 且 变量_83040325 ≠ #NULL)
            变量_88040325 ＝ 编码_Ansi到Unicode (“HotFixID”, )
            变量_8C040325 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
            .如果真 (变量_8C040325 ≠ #NULL)
                .循环判断首 ()
                    变量_9E040325 ＝ CallObject (变量_83040325, #<?未知本地类型?>, #<?未知本地类型?>, 1, 取指针整数_ (变量_85040325), 取指针整数_ (变量_86040325), , , , , )
                    .如果真 (变量_9E040325 ＝ #<?未知本地类型?> 且 变量_85040325 ≠ #NULL)
                        memset (变量_8C040325, 0, 16)
                        变量_9E040325 ＝ CallObject (变量_85040325, #<?未知本地类型?>, 取指针字节集_ (变量_88040325), 0, 变量_8C040325, #NULL, #NULL, , , , )
                        .如果真 (变量_9E040325 ＝ #<?未知本地类型?>)
                            变量_9D040325 ＝ __get (变量_8C040325, 8)
                            .如果真 (变量_9D040325 ≠ #NULL)
                                加入成员 (修复补丁ID, 编码_Unicode到Ansi (指针_到字节集W (变量_9D040325)))
                                DLL_SysFreeString (变量_9D040325)
                            .如果真结束
                            
                        .如果真结束
                        SafeRelease (变量_85040325)
                    .如果真结束
                    
                .循环判断尾 (变量_86040325 ≠ 0)
                LocalFree (变量_8C040325)
            .如果真结束
            SafeRelease (变量_83040325)
        .如果真结束
        SafeRelease (变量_80040325)
    .如果真结束
    返回 (取数组成员数 (修复补丁ID))

.子程序 系统_用户名密码验证, 逻辑型, 公开, 验证输入的用户名和密码是否正确
    .参数 用户名, 文本型
    .参数 密码, 文本型
    .参数 窗口句柄, 整数型, 可空
    .参数 标题, 文本型, 可空, 登陆
    .参数 提示内容, 文本型, 可空, 请输入用户名与密码
    .参数 是否区分大小写, 逻辑型, 可空, 默认不区分

    返回 (系统_用户名密码验证W (编码_Ansi到Unicode (用户名, ), 编码_Ansi到Unicode (密码, ), 窗口句柄, 编码_Ansi到Unicode (标题, ), 编码_Ansi到Unicode (提示内容, ), 是否区分大小写))

.子程序 系统_用户名密码验证W, 逻辑型, 公开, 验证输入的用户名和密码是否正确
    .参数 用户名, 字节集
    .参数 密码, 字节集
    .参数 窗口句柄, 整数型, 可空
    .参数 标题, 字节集, 可空, 登陆
    .参数 提示内容, 字节集, 可空, 请输入用户名与密码
    .参数 是否区分大小写, 逻辑型, 可空, 默认不区分
    .局部变量 变量_200D0325, 自定义_EF0C0341
    .局部变量 变量_250D0325, 整数型
    .局部变量 变量_260D0325, 整数型
    .局部变量 变量_270D0325, 整数型
    .局部变量 变量_280D0325, 整数型
    .局部变量 变量_290D0325, 整数型
    .局部变量 变量_2A0D0325, 逻辑型
    .局部变量 变量_2B0D0325, 整数型
    .局部变量 变量_2C0D0325, 整数型
    .局部变量 变量_300D0325, 字节集
    .局部变量 变量_310D0325, 字节集

    .判断循环首 (真)
        变量_200D0325.成员_F20C0335 ＝ 20
        变量_200D0325.成员_F30C0335 ＝ 窗口句柄
        .如果 (标题 ＝ { })
            变量_200D0325.成员_F50C0335 ＝ 编码_Ansi到Unicode (“登陆”, )
        .否则
            变量_200D0325.成员_F50C0335 ＝ 标题
        .如果结束
        .如果 (提示内容 ＝ { })
            变量_200D0325.成员_F40C0335 ＝ 编码_Ansi到Unicode (“请输入用户名与密码”, )
        .否则
            变量_200D0325.成员_F40C0335 ＝ 提示内容
        .如果结束
        变量_250D0325 ＝ DLL_CredUIPromptForWindowsCredentialsW (变量_200D0325, 变量_260D0325, 变量_270D0325, #NULL, 0, 变量_280D0325, 变量_290D0325, 变量_2A0D0325, #<?未知本地类型?>)
        .如果真 (变量_250D0325 ≠ #ERROR_SUCCESS)
            返回 (假)
        .如果真结束
        DLL_CredUnPackAuthenticationBufferW (0, 变量_280D0325, 变量_290D0325, #NULL, 变量_2B0D0325, #NULL, 0, #NULL, 变量_2C0D0325)
        .如果真 (变量_2B0D0325 ＝ 0 或 变量_2C0D0325 ＝ 0)
            返回 (假)
        .如果真结束
        变量_300D0325 ＝ 取空白字节集 (变量_2B0D0325 × 2)
        变量_310D0325 ＝ 取空白字节集 (变量_2C0D0325 × 2)
        变量_250D0325 ＝ DLL_CredUnPackAuthenticationBufferW (0, 变量_280D0325, 变量_290D0325, 取指针字节集_ (变量_300D0325), 变量_2B0D0325, #NULL, 0, 取指针字节集_ (变量_310D0325), 变量_2C0D0325)
        DLL_CoTaskMemFree (变量_280D0325)
        .如果真 (变量_250D0325 ＝ 1)
            .如果 (是否区分大小写)
                .如果真 (DLL_lstrcmpW (取指针字节集_ (变量_300D0325), 用户名) ＝ 0 且 DLL_lstrcmpW (取指针字节集_ (变量_310D0325), 密码) ＝ 0)
                    返回 (真)
                .如果真结束
                
            .否则
                
                .如果真 (DLL_lstrcmpiW (取指针字节集_ (变量_300D0325), 用户名) ＝ 0 且 DLL_lstrcmpiW (取指针字节集_ (变量_310D0325), 密码) ＝ 0)
                    返回 (真)
                .如果真结束
                
            .如果结束
            
        .如果真结束
        变量_260D0325 ＝ #<?未知本地类型?>
        处理事件 ()
    .判断循环尾 ()
    返回 (假)

.子程序 系统_打开属性对话框, 逻辑型, 公开, 显示文件或文件夹的属性
    .参数 文件路径, 文本型

    返回 (系统_打开属性对话框W (编码_Ansi到Unicode (文件路径, )))

.子程序 系统_打开属性对话框W, 逻辑型, 公开, 显示文件或文件夹的属性
    .参数 文件路径, 字节集
    .局部变量 变量_FC0E0325, 自定义_2CE20241

    变量_FC0E0325.成员_2DE20235 ＝ 60
    变量_FC0E0325.成员_2EE20235 ＝ 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
    变量_FC0E0325.成员_30E20235 ＝ 编码_Ansi到Unicode (“properties”, )
    变量_FC0E0325.成员_31E20235 ＝ 文件路径
    变量_FC0E0325.成员_34E20235 ＝ #SW_SHOWDEFAULT
    DLL_ShellExecuteExW (变量_FC0E0325)
    返回 (变量_FC0E0325.成员_35E20235 ＞ 32)

.子程序 DosToLogicalDrive, 字节集, 公开, MS-DOS设备名称转逻辑盘符
    .参数 szPath, 字节集, , W
    .局部变量 变量_3B100325, 字节集
    .局部变量 变量_3C100325, 字节集
    .局部变量 变量_3D100325, 整数型
    .局部变量 变量_3E100325, 字节集
    .局部变量 变量_3F100325, 整数型

    变量_3B100325 ＝ { 64, 0, 58, 0, 0, 0 }
    变量_3C100325 ＝ 取空白字节集 ((#MAX_PATH ＋ 1) × 2)
    .计次循环首 (26, 变量_3F100325)
        变量_3B100325 [1] ＝ 变量_3B100325 [1] ＋ 1
        变量_3D100325 ＝ DLL_QueryDosDeviceW (变量_3B100325, 变量_3C100325, #MAX_PATH)
        .如果真 (变量_3D100325 ＞ 0)
            变量_3C100325 [变量_3D100325 × 2 － 3] ＝ 92
            变量_3D100325 ＝ 变量_3D100325 × 2 － 2
            变量_3E100325 ＝ 取字节集左边 (变量_3C100325, 变量_3D100325)
            .如果真 (寻找字节集 (szPath, 变量_3E100325, ) ＝ 1)
                变量_3B100325 [5] ＝ 92
                返回 (字节集替换 (szPath, 1, 变量_3D100325, 变量_3B100325))
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    返回 (szPath)

.子程序 字体_取单字宽高, 小数型, 公开, 返回文本的精确尺寸，宽高都为此值，若是半角手动除以2即为宽！（自动适应各个电脑分辨率，若失败则返回0）
    .参数 字号, 小数型
    .参数 是否加粗, 逻辑型, 可空, 默认假，加粗与常规字宽度不同！
    .局部变量 变量_F6020325, 小数型

    .判断开始 (字号 ＝ 5)
        变量_F6020325 ＝ 5.25
    .判断 (字号 ＝ 7)
        变量_F6020325 ＝ 7.78
    .判断 (字号 ＝ 8)
        变量_F6020325 ＝ 7.87
    .判断 (字号 ＝ 11)
        变量_F6020325 ＝ 10.5
    .判断 (字号 ＝ 14)
        变量_F6020325 ＝ 13.75
    .判断 (字号 ＝ 16)
        变量_F6020325 ＝ 15.75
    .判断 (字号 ＝ 26)
        变量_F6020325 ＝ 27.5
    .默认
        变量_F6020325 ＝ 字号
    .判断结束
    返回 (选择 (是否加粗, 取整加一 (毫米转像素 (字号转换毫米 (变量_F6020325))), 毫米转像素 (字号转换毫米 (变量_F6020325))))

.子程序 字体_取单字宽高的字号, 整数型, 公开, 返回易语言的整数型字号
    .参数 单字宽高, 小数型, , 逆天_取汉字单字宽高 取得的宽高，方块类型
    .参数 是否加粗, 逻辑型, 可空, 默认假

    返回 (选择 (是否加粗, 某舍某入 (毫米转换字号 (像素转毫米 (取整 (单字宽高))), 5, 6), 取整加一 (毫米转换字号 (像素转毫米 (取整 (单字宽高))))))

