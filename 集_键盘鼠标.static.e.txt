.版本 2

.程序集 集_键盘鼠标
.程序集变量 类变量_19130115, 整数型
.程序集变量 类变量_1B130115, 整数型
.程序集变量 类变量_1C130115, 逻辑型
.程序集变量 类变量_D0120115, 精易_坐标
.程序集变量 类变量_BC790215, 精易_鼠标移入移出事件, , "0"
.程序集变量 类变量_BD790215, 逻辑型
.程序集变量 类变量_BE790215, 精易_鼠标移入移出事件
.程序集变量 类变量_BF790215, 整数型
.程序集变量 类变量_C0790215, 整数型
.程序集变量 类变量_F0B90115, 逻辑型
.程序集变量 类变量_C1A20215, 整数型
.程序集变量 类变量_E1A20215, 子程序指针

.子程序 鼠标_监视_安装, , 公开
    .参数 响应监视事件, 子程序指针, , 响应监视事件,3个参数,都为整数型,第1个为键代码（1为左键，2为右键，3为中键，4为滚轮，5为侧键上，6为侧键下）,第2个为按键状态(1为按下，2为放开，4往上滚，5往下滚)，第3个参数为窗口句柄与坐标的指针集合（指针到文本即可取出信息  窗口句柄|X,Y）

    .如果真 (类变量_C1A20215 ≠ 0)
        返回 ()
    .如果真结束
    类变量_E1A20215 ＝ 响应监视事件
    类变量_C1A20215 ＝ SetWindowsHookExA (14, &MousePro, GetModuleHandleA1 (0), 0)

.子程序 MousePro, 整数型
    .参数 变量_C3A20225, 整数型
    .参数 变量_C4A20225, 整数型
    .参数 变量_C5A20225, 整数型
    .局部变量 变量_C6A20225, MOUSEHOOKSTRUCT
    .局部变量 变量_C7A20225, 整数型
    .局部变量 变量_C8A20225, 整数型
    .局部变量 变量_E6A20225, 整数型
    .局部变量 变量_E7A20225, 整数型
    .局部变量 变量_FEA20225, 文本型
    .局部变量 变量_D2DA0225, 整数型

    .如果真 (变量_C3A20225 ≥ 0)
        DLL_RtlMoveMemory37 (变量_C6A20225, 变量_C5A20225, 20)
        .判断开始 (变量_C4A20225 ＝ #WM_MOUSEWHEEL)
            .判断开始 (右移 (变量_C6A20225.hwnd, 16) ＞ 0)
                变量_E6A20225 ＝ 4
                变量_E7A20225 ＝ 4
                
            .判断 (右移 (变量_C6A20225.hwnd, 16) ＜ 0)
                变量_E6A20225 ＝ 4
                变量_E7A20225 ＝ 5
                
            .默认
                
            .判断结束
            
        .判断 (变量_C4A20225 ＝ #WM_LBUTTONDOWN)
            变量_E6A20225 ＝ 1
            变量_E7A20225 ＝ 1
            
        .判断 (变量_C4A20225 ＝ #WM_LBUTTONUP)
            变量_E6A20225 ＝ 1
            变量_E7A20225 ＝ 2
            
        .判断 (变量_C4A20225 ＝ #WM_LBUTTONDBLCLK)
            变量_E6A20225 ＝ 1
            变量_E7A20225 ＝ 3
            
        .判断 (变量_C4A20225 ＝ #WM_RBUTTONDOWN)
            变量_E6A20225 ＝ 2
            变量_E7A20225 ＝ 1
            
        .判断 (变量_C4A20225 ＝ #WM_RBUTTONUP)
            变量_E6A20225 ＝ 2
            变量_E7A20225 ＝ 2
            
        .判断 (变量_C4A20225 ＝ #WM_RBUTTONDBLCLK)
            变量_E6A20225 ＝ 2
            变量_E7A20225 ＝ 3
            
        .判断 (变量_C4A20225 ＝ #WM_MBUTTONDOWN)
            变量_E6A20225 ＝ 3
            变量_E7A20225 ＝ 1
            
        .判断 (变量_C4A20225 ＝ #WM_MBUTTONUP)
            变量_E6A20225 ＝ 3
            变量_E7A20225 ＝ 2
            
        .判断 (变量_C4A20225 ＝ #WM_MBUTTONDBLCLK)
            变量_E6A20225 ＝ 3
            变量_E7A20225 ＝ 3
            
        .判断 (变量_C4A20225 ＝ 523)
            变量_D2DA0225 ＝ 右移 (变量_C6A20225.hwnd, 16)
            .判断开始 (变量_D2DA0225 ＝ 2)
                变量_E6A20225 ＝ 5
                变量_E7A20225 ＝ 1
                
            .判断 (变量_D2DA0225 ＝ 1)
                变量_E6A20225 ＝ 6
                变量_E7A20225 ＝ 1
                
            .默认
                
            .判断结束
            
        .判断 (变量_C4A20225 ＝ 524)
            变量_D2DA0225 ＝ 右移 (变量_C6A20225.hwnd, 16)
            .判断开始 (变量_D2DA0225 ＝ 2)
                变量_E6A20225 ＝ 5
                变量_E7A20225 ＝ 2
                
            .判断 (变量_D2DA0225 ＝ 1)
                变量_E6A20225 ＝ 6
                变量_E7A20225 ＝ 2
                
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        变量_C7A20225 ＝ WindowFromPoint (变量_C6A20225.pt.X, 变量_C6A20225.pt.Y)
        变量_FEA20225 ＝ 到文本 (变量_C7A20225) ＋ “|” ＋ 到文本 (变量_C6A20225.pt.X) ＋ “,” ＋ 到文本 (变量_C6A20225.pt.Y)
        程序_执行整数子程序 (类变量_E1A20215, 变量_E6A20225, 变量_E7A20225, 取指针文本_ (变量_FEA20225))
    .如果真结束
    返回 (CallNextHookEx (类变量_C1A20215, 变量_C3A20225, 变量_C4A20225, 变量_C5A20225))

.子程序 鼠标_监视_卸载, 逻辑型, 公开
    .局部变量 变量_99B90225, 逻辑型

    变量_99B90225 ＝ UnhookWindowsHookEx (类变量_C1A20215)
    .如果真 (变量_99B90225)
        类变量_C1A20215 ＝ 0
    .如果真结束
    返回 (变量_99B90225)
    

.子程序 鼠标_删除鼠标移入移出事件, 整数型, 公开, 本命令由【不想说话的树】提供
    .参数 组件句柄, 整数型
    .局部变量 变量_92790225, 整数型
    .局部变量 变量_93790225, 整数型

    .计次循环首 (取数组成员数 (类变量_BC790215), 变量_92790225)
        .如果真 (类变量_BC790215 [变量_92790225].句柄 ＝ 组件句柄)
            变量_93790225 ＝ SetWindowLongA (类变量_BC790215 [变量_92790225].句柄, -4, 类变量_BC790215 [变量_92790225].消息钩子句柄)
            删除成员 (类变量_BC790215, 变量_92790225, )
            类变量_C0790215 ＝ 0
            类变量_BF790215 ＝ 0
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    返回 (变量_93790225)

.子程序 鼠标_删除所有鼠标移入移出事件, , 公开
    .局部变量 变量_94790225, 整数型

    .计次循环首 (取数组成员数 (类变量_BC790215), 变量_94790225)
        SetWindowLongA (类变量_BC790215 [变量_94790225].句柄, -4, 类变量_BC790215 [变量_94790225].消息钩子句柄)
    .计次循环尾 ()
    清除数组 (类变量_BC790215)
    类变量_C0790215 ＝ 0
    类变量_BF790215 ＝ 0

.子程序 鼠标_添加鼠标移入移出事件, , 公开, 添加鼠标移入移出事件
    .参数 句柄, 整数型, , 指定控件句柄可以是任何组件
    .参数 移入事件, 子程序指针
    .参数 移出事件, 子程序指针

    类变量_BE790215.句柄 ＝ 句柄
    类变量_BE790215.移入事件 ＝ 移入事件
    类变量_BE790215.移出事件 ＝ 移出事件
    类变量_BE790215.消息钩子句柄 ＝ SetWindowLongA (句柄, -4, 到整数 (&消息钩子回调))
    加入成员 (类变量_BC790215, 类变量_BE790215)

.子程序 消息钩子回调, 整数型
    .参数 变量_98790225, 整数型
    .参数 变量_99790225, 整数型
    .参数 变量_9A790225, 整数型
    .参数 变量_9B790225, 整数型
    .局部变量 变量_9C790225, 整数型
    .局部变量 变量_9D790225, 整数型
    .局部变量 变量_9E790225, 整数型

    变量_9E790225 ＝ 取数组成员数 (类变量_BC790215)
    ' .如果真 (变量_9E790225 ＝ 0)
        
    ' .如果真结束
    
    .如果真 (类变量_BF790215 ≠ 变量_98790225)
        类变量_BF790215 ＝ 变量_98790225
        .计次循环首 (变量_9E790225, 变量_9D790225)
            .如果真 (类变量_BC790215 [变量_9D790225].句柄 ＝ 变量_98790225)
                
                类变量_C0790215 ＝ 变量_9D790225
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
    .如果真 (变量_99790225 ＝ 512)
        鼠标移入移出事件 (变量_98790225, 类变量_BC790215 [类变量_C0790215].移入事件, 类变量_BC790215 [类变量_C0790215].移出事件)
        返回 (1)
    .如果真结束
    返回 (CallWindowProcA (类变量_BC790215 [类变量_C0790215].消息钩子句柄, 变量_98790225, 变量_99790225, 变量_9A790225, 变量_9B790225))

.子程序 鼠标移入移出事件, 整数型
    .参数 变量_9F790225, 整数型
    .参数 变量_A0790225, 子程序指针
    .参数 变量_A1790225, 子程序指针

    处理事件 ()
    .如果 (窗口_取鼠标处窗口句柄 () ＝ 变量_9F790225)
        .如果真 (类变量_BD790215 ＝ 假)
            SetCapture (变量_9F790225)
            执行子程序_ (变量_A0790225)
            类变量_BD790215 ＝ 真
            返回 (1)
        .如果真结束
        
    .否则
        执行子程序_ (变量_A1790225)
        ReleaseCapture ()
        类变量_BD790215 ＝ 假
        返回 (2)
        
    .如果结束
    SetCapture (变量_9F790225)
    返回 (3)

.子程序 执行子程序_, 整数型
    .参数 变量_A2790225, 子程序指针
    .参数 变量_A3790225, 整数型, 可空
    .参数 变量_A4790225, 整数型, 可空
    .参数 变量_A5790225, 整数型, 可空
    .局部变量 变量_BBAC0225, 字节集

    变量_BBAC0225 ＝ { 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }
    返回 (CallWindowProcA (取指针_字节集型 (变量_BBAC0225), 到整数 (变量_A2790225), 变量_A3790225, 变量_A4790225, 变量_A5790225))
    

.子程序 键鼠_锁定, 整数型, 公开, 阻塞键盘及鼠标事件到达应用程序【beineimao】
    .参数 状态, 逻辑型, , 真=锁定

    .如果 (状态)
        返回 (BlockInput (1))
    .否则
        返回 (BlockInput (0))
    .如果结束
    

.子程序 鼠标钩子处理, 整数型
    .参数 变量_F3120125, 整数型
    .参数 变量_F4120125, 整数型
    .参数 变量_F5120125, 整数型

    .如果真 (类变量_1C130115)
        返回 (1)
    .如果真结束
    .如果真 (变量_F4120125 ＝ 513 或 变量_F4120125 ＝ 514 或 变量_F4120125 ＝ 515)
        返回 (1)
    .如果真结束
    .如果真 (变量_F4120125 ＝ 516 或 变量_F4120125 ＝ 517 或 变量_F4120125 ＝ 518)
        返回 (1)
    .如果真结束
    返回 (CallNextHookEx (类变量_1B130115, 变量_F3120125, 变量_F4120125, 变量_F5120125))

.子程序 子程序0
    

.子程序 鼠标_带轨迹移动, , 公开
    .参数 起始x, 整数型, 可空, 空为鼠标当前坐标
    .参数 起始y, 整数型, 可空
    .参数 终点x, 整数型
    .参数 终点y, 整数型
    .参数 移动速度, 整数型, 可空
    .参数 窗口句柄, 整数型, 可空
    .局部变量 变量_BCE60225, 逻辑型
    .局部变量 变量_BDE60225, 整数型
    .局部变量 变量_BEE60225, 整数型
    .局部变量 变量_BFE60225, 精易_坐标

    .如果真 (窗口句柄 ≠ 0)
        ClientToScreen (窗口句柄, 变量_BFE60225)
        终点x ＝ 变量_BFE60225.横 ＋ 终点x
        终点y ＝ 变量_BFE60225.纵 ＋ 终点y
    .如果真结束
    
    .如果真 (是否为空 (起始x))
        起始x ＝ 取鼠标水平位置 ()
    .如果真结束
    .如果真 (是否为空 (起始y))
        起始y ＝ 取鼠标垂直位置 ()
    .如果真结束
    .如果真 (是否为空 (移动速度))
        移动速度 ＝ 1
    .如果真结束
    SetCursorPos (起始x, 起始y)
    .判断循环首 (变量_BCE60225 ＝ 假)
        起始x ＝ 取鼠标水平位置 ()
        起始y ＝ 取鼠标垂直位置 ()
        .判断开始 (终点x ＞ 起始x)
            变量_BDE60225 ＝ 1
        .判断 (终点x ＜ 起始x)
            变量_BDE60225 ＝ -1
        .判断 (终点x ＝ 起始x)
            变量_BDE60225 ＝ 0
        .默认
            
        .判断结束
        
        .判断开始 (终点y ＞ 起始y)
            变量_BEE60225 ＝ 1
        .判断 (终点y ＜ 起始y)
            变量_BEE60225 ＝ -1
        .判断 (终点y ＝ 起始y)
            变量_BEE60225 ＝ 0
        .默认
            
        .判断结束
        鼠标_相对移动 (变量_BDE60225, 变量_BEE60225)
        .如果真 (起始x ＝ 终点x 且 起始y ＝ 终点y)
            变量_BCE60225 ＝ 真
            
        .如果真结束
        程序_延时 (移动速度, )
        处理事件 ()
    .判断循环尾 ()

.子程序 鼠标_相对移动
    .参数 变量_6D9F0225, 整数型
    .参数 变量_6E9F0225, 整数型
    .局部变量 变量_6F9F0225, 整数型
    .局部变量 变量_709F0225, 整数型

    变量_6F9F0225 ＝ 取鼠标水平位置 ()
    变量_709F0225 ＝ 取鼠标垂直位置 ()
    SetCursorPos (变量_6F9F0225 ＋ 变量_6D9F0225, 变量_709F0225 ＋ 变量_6E9F0225)

.子程序 鼠标_捕获, , 公开, 捕获指定窗口的鼠标
    .参数 窗口句柄, 整数型

    SetCapture (窗口句柄)

.子程序 鼠标_释放, , 公开, 释放被捕获的鼠标
    ReleaseCapture ()

.子程序 鼠标_锁定, , 公开, 锁定鼠标键(锁定后,鼠标键无效)
    .参数 状态, 逻辑型, 可空, 真:完全锁定鼠标 (可空为假) 假:锁定鼠标左右键

    .如果真 (类变量_1B130115 ≠ 0)
        UnhookWindowsHookEx (类变量_1B130115)
    .如果真结束
    类变量_1C130115 ＝ 状态
    类变量_1B130115 ＝ SetWindowsHookExA (#WH_MOUSE_LL, &鼠标钩子处理, GetModuleHandleA1 (0), 0)

.子程序 鼠标_解锁, , 公开, 鼠标键解锁(锁定鼠标键锁定后,用来恢复鼠标的使用)
    .如果真 (类变量_1B130115 ≠ 0)
        UnhookWindowsHookEx (类变量_1B130115)
    .如果真结束
    

.子程序 鼠标_限制, , 公开, 限制鼠标的活动范围(无返回值)，参数留空为解除鼠标限制
    .参数 临时左边, 整数型, 可空, 可空，为0
    .参数 临时顶边, 整数型, 可空, 可空，为0
    .参数 临时宽度, 整数型, 可空, 可空，为屏幕宽度-临时左边
    .参数 临时高度, 整数型, 可空, 可空，为屏幕高度-临时顶边
    .局部变量 变量_25130125, 精易_矩形

    变量_25130125.左边 ＝ 临时左边
    变量_25130125.顶边 ＝ 临时顶边
    .判断开始 (临时宽度 ＝ 0)
        变量_25130125.右边 ＝ 取屏幕宽度 () － 临时左边
    .默认
        变量_25130125.右边 ＝ 临时宽度 ＋ 临时左边
    .判断结束
    .判断开始 (临时高度 ＝ 0)
        变量_25130125.底边 ＝ 取屏幕高度 () － 临时高度
    .默认
        变量_25130125.底边 ＝ 临时高度 ＋ 临时顶边
    .判断结束
    ClipCursor (变量_25130125)
    
    

.子程序 鼠标_按键, , 公开, 模拟鼠标按键(无返回值)
    .参数 键, 整数型, 可空, 可空:为左键  1 #左键   2 #右键   3 #中键
    .参数 控制, 整数型, 可空, 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开

    .如果真 (键 ＝ 1 或 键 ＝ 0)
        .如果真 (控制 ＝ 3)
            mouse_event (2, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 4)
            mouse_event (4, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 1 或 控制 ＝ 0)
            mouse_event (2, 0, 0, 0, 0)
            mouse_event (4, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 2)
            mouse_event (2, 0, 0, 0, 0)
            mouse_event (4, 0, 0, 0, 0)
            程序_延时 (GetDoubleClickTime ())
            mouse_event (2, 0, 0, 0, 0)
            mouse_event (4, 0, 0, 0, 0)
        .如果真结束
        
    .如果真结束
    .如果真 (键 ＝ 3)
        .如果真 (控制 ＝ 3)
            mouse_event (32, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 4)
            mouse_event (64, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 1 或 控制 ＝ 0)
            mouse_event (32, 0, 0, 0, 0)
            mouse_event (64, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 2)
            mouse_event (32, 0, 0, 0, 0)
            mouse_event (64, 0, 0, 0, 0)
            程序_延时 (GetDoubleClickTime ())
            mouse_event (32, 0, 0, 0, 0)
            mouse_event (64, 0, 0, 0, 0)
        .如果真结束
        
    .如果真结束
    .如果真 (键 ＝ 2)
        .如果真 (控制 ＝ 3)
            mouse_event (8, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 4)
            mouse_event (16, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 1 或 控制 ＝ 0)
            mouse_event (8, 0, 0, 0, 0)
            mouse_event (16, 0, 0, 0, 0)
        .如果真结束
        .如果真 (控制 ＝ 2)
            mouse_event (8, 0, 0, 0, 0)
            mouse_event (16, 0, 0, 0, 0)
            程序_延时 (GetDoubleClickTime ())
            mouse_event (8, 0, 0, 0, 0)
            mouse_event (16, 0, 0, 0, 0)
        .如果真结束
        
    .如果真结束
    

.子程序 鼠标_消息, , 公开, 向指定窗口发送鼠标动作消息(无返回值)
    .参数 窗口句柄, 整数型, 可空, 可空:为桌面超级列表框句柄  接收鼠标消息窗口句柄
    .参数 水平坐标, 整数型, 可空, 可空:为原水平坐标不变  移动目标鼠标水平坐标 (注:坐标为参数一窗口句柄中的坐标)
    .参数 垂直坐标, 整数型, 可空, 可空:为原垂直坐标不变  移动目标鼠标垂直坐标
    .参数 键, 整数型, 可空, 可空:为左键  1 #左键   2 #右键   3 #中键  4 #中键上滚动 5 #中键下滚动(滚动前后请按下放开中键)
    .参数 控制, 整数型, 可空, 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开
    .局部变量 变量_A3120125, 整数型
    .局部变量 变量_A4120125, 精易_坐标

    .如果真 (窗口句柄 ＝ 0)
        窗口句柄 ＝ GetDesktopWindow ()
    .如果真结束
    
    .如果真 (是否为空 (水平坐标))
        水平坐标 ＝ 2
    .如果真结束
    .如果真 (是否为空 (垂直坐标))
        垂直坐标 ＝ 2
    .如果真结束
    变量_A3120125 ＝ 水平坐标 ＋ 垂直坐标 × 65536
    .如果真 (键 ＝ 4)
        投递消息整数 (窗口句柄, 522, 7864336, 变量_A3120125 ＋ 25100873)
        返回 ()
    .如果真结束
    .如果真 (键 ＝ 5)
        投递消息整数 (窗口句柄, 522, -7864304, 变量_A3120125 ＋ 25100873)
        返回 ()
    .如果真结束
    投递消息整数 (窗口句柄, 512, 2, 变量_A3120125)
    .如果真 (键 ＝ 0 或 键 ＝ 1)
        .如果真 (控制 ＝ 0 或 控制 ＝ 1)
            投递消息整数 (窗口句柄, 513, 1, 变量_A3120125)
            投递消息整数 (窗口句柄, 514, 0, 变量_A3120125)
        .如果真结束
        .如果真 (控制 ＝ 2)
            投递消息整数 (窗口句柄, 513, 1, 变量_A3120125)
            投递消息整数 (窗口句柄, 514, 0, 变量_A3120125)
            投递消息整数 (窗口句柄, 515, 0, 变量_A3120125)
        .如果真结束
        .如果真 (控制 ＝ 3)
            投递消息整数 (窗口句柄, 513, 1, 变量_A3120125)
        .如果真结束
        .如果真 (控制 ＝ 4)
            投递消息整数 (窗口句柄, 514, 0, 变量_A3120125)
        .如果真结束
        返回 ()
    .如果真结束
    .如果真 (键 ＝ 2)
        .如果真 (控制 ＝ 0 或 控制 ＝ 1)
            投递消息整数 (窗口句柄, 516, 2, 变量_A3120125)
            投递消息整数 (窗口句柄, 517, 2, 变量_A3120125)
            
        .如果真结束
        .如果真 (控制 ＝ 2)
            投递消息整数 (窗口句柄, 516, 2, 变量_A3120125)
            投递消息整数 (窗口句柄, 517, 2, 变量_A3120125)
            投递消息整数 (窗口句柄, 518, 0, 变量_A3120125)
            
        .如果真结束
        .如果真 (控制 ＝ 3)
            投递消息整数 (窗口句柄, 516, 2, 变量_A3120125)
            
        .如果真结束
        .如果真 (控制 ＝ 4)
            投递消息整数 (窗口句柄, 517, 2, 变量_A3120125)
            
        .如果真结束
        投递消息整数 (窗口句柄, 123, 132782, 变量_A3120125 ＋ 25100873)
        返回 ()
    .如果真结束
    .如果真 (键 ＝ 3)
        .如果真 (控制 ＝ 0 或 控制 ＝ 1)
            投递消息整数 (窗口句柄, 519, 16, 变量_A3120125)
            投递消息整数 (窗口句柄, 520, 0, 变量_A3120125)
        .如果真结束
        .如果真 (控制 ＝ 2)
            投递消息整数 (窗口句柄, 519, 16, 变量_A3120125)
            投递消息整数 (窗口句柄, 520, 0, 变量_A3120125)
            投递消息整数 (窗口句柄, 521, 0, 变量_A3120125)
        .如果真结束
        .如果真 (控制 ＝ 3)
            投递消息整数 (窗口句柄, 519, 16, 变量_A3120125)
        .如果真结束
        .如果真 (控制 ＝ 4)
            投递消息整数 (窗口句柄, 520, 0, 变量_A3120125)
        .如果真结束
        返回 ()
    .如果真结束
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

.子程序 鼠标_记位, 精易_坐标, 公开, 记录当前鼠标坐标
    .局部变量 变量_484E0125, 精易_坐标

    类变量_D0120115.横 ＝ 0
    类变量_D0120115.纵 ＝ 0
    变量_484E0125 ＝ 鼠标_取位置 ()
    类变量_D0120115.横 ＝ 变量_484E0125.横
    类变量_D0120115.纵 ＝ 变量_484E0125.纵
    返回 (类变量_D0120115)

.子程序 鼠标_归位, , 公开, 恢复当前鼠标坐标到"鼠标_记位"的坐标点或移动鼠标到指定点(无返回值)
    .参数 坐标, 精易_坐标, 可空, 可空:恢复到上次记录的坐标点

    .如果 (是否为空 (坐标))
        鼠标_移动 (, 类变量_D0120115.横, 类变量_D0120115.纵)
    .否则
        鼠标_移动 (, 坐标.横, 坐标.纵)
    .如果结束
    

.子程序 鼠标_单击, , 公开, 鼠标操作，具体请看参数的备注
    .参数 窗口句柄, 整数型
    .参数 横坐标, 整数型, 可空, 留空则取鼠标所在位置
    .参数 纵坐标, 整数型, 可空, 留空则取鼠标所在位置
    .参数 类型, 整数型, 可空, 1 = 鼠标左键单击；2 = 鼠标右键单击；3 = 鼠标左键按住不放；
    .局部变量 变量_4E4E0125, 精易_坐标
    .局部变量 变量_C3F00125, 整数型

    变量_4E4E0125 ＝ 鼠标_取位置 ()
    类型 ＝ 选择 (类型 ＝ 0, 1, 类型)
    横坐标 ＝ 选择 (是否为空 (横坐标), 变量_4E4E0125.横, 横坐标)
    纵坐标 ＝ 选择 (是否为空 (纵坐标), 变量_4E4E0125.纵, 纵坐标)
    .如果真 (类型 ＞ 0 且 类型 ＜ 4)
        变量_C3F00125 ＝ 多项选择 (类型, 6, 24, 3)
        鼠标_移动 (窗口句柄, 横坐标, 纵坐标)
        mouse_event (变量_C3F00125, 横坐标, 纵坐标, 0, 0)
        鼠标_移动 (, 变量_4E4E0125.横, 变量_4E4E0125.纵)
    .如果真结束
    
    ' .判断开始 (类型 ＝ 1)
        
        
        
    ' .判断 (类型 ＝ 2)
        
        
        
    ' .判断 (类型 ＝ 3)
        
        
        
    ' .默认
        
    ' .判断结束
    
    
    
    
    
    
    
    
    
    
    
    

.子程序 鼠标_移动, , 公开, 设置鼠标坐标
    .参数 窗口句柄, 整数型, 可空, 可空:相对桌面移动鼠标  句柄有效则相对窗口中坐标移动
    .参数 水平坐标, 整数型, , 水平坐标
    .参数 垂直坐标, 整数型, , 垂直坐标
    .局部变量 变量_E52C0125, 精易_坐标

    .如果真 (窗口句柄 ≠ 0)
        ClientToScreen (窗口句柄, 变量_E52C0125)
    .如果真结束
    SetCursorPos (变量_E52C0125.横 ＋ 水平坐标, 变量_E52C0125.纵 ＋ 垂直坐标)

.子程序 鼠标_取位置, 精易_坐标, 公开, 取鼠标在屏幕中的坐标位置；
    .局部变量 变量_D32C0125, 精易_坐标

    DLL_GetCursorPos (变量_D32C0125)
    返回 (变量_D32C0125)

.子程序 鼠标_显示隐藏, , 公开, 设置鼠标指针的可视性,只能在自身窗口隐藏鼠标
    .参数 类型, 逻辑型, , 真 = 隐藏；假 = 显示；

    ShowCursor (取反 (类型))

.子程序 鼠标_改指针, , 公开, 只能改自身程序的鼠标指针；
    .参数 参_窗口句柄, 整数型, , 要改鼠标的窗口句柄
    .参数 参_光标路径, 文本型, 可空, 鼠标文件名路径；支持动态鼠标；
    .参数 参_光标指针, 整数型, 可空, #鼠标指针_
    .局部变量 变量_9BD70225, 整数型

    .如果 (是否为空 (参_光标路径) ＝ 假 且 参_光标路径 ≠ “”)
        变量_9BD70225 ＝ LoadCursorFromFileA (参_光标路径)
    .否则
        变量_9BD70225 ＝ DLL_LoadCursorW (0, 参_光标指针)
    .如果结束
    SetClassLongA (参_窗口句柄, -12, 变量_9BD70225)

.子程序 鼠标_取窗口坐标, 精易_坐标, 公开, 取回鼠标当前在某个窗口上的坐标
    .参数 窗口句柄, 整数型, 可空, 如果提供窗口句柄，将返回鼠标在该窗口上的坐标；否则将取出屏幕中的坐标；
    .局部变量 变量_75380125, 精易_坐标
    .局部变量 变量_76380125, 精易_坐标

    .如果真 (窗口句柄 ≠ 0)
        变量_76380125 ＝ 窗口_取控件坐标 (窗口句柄)
    .如果真结束
    DLL_GetCursorPos (变量_75380125)
    变量_75380125.横 ＝ 变量_75380125.横 － 变量_76380125.横
    变量_75380125.纵 ＝ 变量_75380125.纵 － 变量_76380125.纵
    返回 (变量_75380125)

.子程序 鼠标_左右键交换, , 公开, 鼠标左右键交换
    .参数 是否交换, 逻辑型, , 真=左右键交换；假=恢复

    SwapMouseButton (是否交换)

.子程序 鼠标_取双击间隔时间, 整数型, 公开, 取鼠标双击间隔时间
    返回 (GetDoubleClickTime ())

.子程序 鼠标_取指针移动速度, 整数型, 公开, 检索当前鼠标速度
    .局部变量 变量_DDF60225, 整数型

    DLL_SystemParametersInfoW (#<?未知本地类型?>, 0, 取指针整数_ (变量_DDF60225), 0)
    返回 (变量_DDF60225)

.子程序 鼠标_设置指针移动速度, 逻辑型, 公开, 设置当前鼠标速度
    .参数 速度值, 整数型, , 1（最慢）和20（最快）

    返回 (DLL_SystemParametersInfoW (#<?未知本地类型?>, 0, 速度值, 位或 (#<?未知本地类型?>, #<?未知本地类型?>)))

.子程序 子程序2
    

.子程序 键盘_取功能键状态, 整数型, 公开, 取键名的功能键组合，1.Ctrl键，2.Shift键，4.Alt键，其他为组合
    .参数 键名, 文本型, , 键名,如填:Ctrl键,将返回1，字母不区分大小写
    .局部变量 变量_BBA20225, 整数型
    .局部变量 变量_BCA20225, 整数型
    .局部变量 变量_BDA20225, 整数型

    变量_BBA20225 ＝ 选择 (寻找文本 (键名, “Ctrl键”, , 真) ＝ -1, 0, 1)
    变量_BCA20225 ＝ 选择 (寻找文本 (键名, “Shift键”, , 真) ＝ -1, 0, 2)
    变量_BDA20225 ＝ 选择 (寻找文本 (键名, “Alt键”, , 真) ＝ -1, 0, 4)
    返回 (变量_BBA20225 ＋ 变量_BCA20225 ＋ 变量_BDA20225)

.子程序 键盘_取功能键名, 文本型, 公开, 取功能键状态对应的键名，1.Ctrl键，2.Shift键，4.Alt键，其他为组合
    .参数 功能键状态, 整数型, , 功能键状态,如填1，将返回Ctrl键
    .局部变量 变量_BFA20225, 文本型

    .判断开始 (功能键状态 ＝ 1)
        变量_BFA20225 ＝ “Ctrl键”
    .判断 (功能键状态 ＝ 2)
        变量_BFA20225 ＝ “Shift键”
    .判断 (功能键状态 ＝ 3)
        变量_BFA20225 ＝ “Ctrl键” ＋ “Shift键”
    .判断 (功能键状态 ＝ 4)
        变量_BFA20225 ＝ “Alt键”
    .判断 (功能键状态 ＝ 5)
        变量_BFA20225 ＝ “Ctrl键” ＋ “Alt键”
    .判断 (功能键状态 ＝ 6)
        变量_BFA20225 ＝ “Shift键” ＋ “Alt键”
    .判断 (功能键状态 ＝ 7)
        变量_BFA20225 ＝ “Ctrl键” ＋ “Shift键” ＋ “Alt键”
    .默认
        变量_BFA20225 ＝ “”
    .判断结束
    返回 (变量_BFA20225)

.子程序 键盘_模拟输入, , 公开, 利用vbs脚本模拟键盘输入，感谢小磊提供
    .参数 字符, 文本型, , 待输入的字符
    .局部变量 变量_D3B60125, 对象
    .局部变量 变量_6B610225, 文本型

    变量_6B610225 ＝ 字符
    变量_6B610225 ＝ 子文本替换 (变量_6B610225, “+”, “{+}”, , , 真)
    变量_6B610225 ＝ 子文本替换 (变量_6B610225, “^”, “{^}”, , , 真)
    变量_6B610225 ＝ 子文本替换 (变量_6B610225, “%”, “{%}”, , , 真)
    变量_6B610225 ＝ 子文本替换 (变量_6B610225, “~”, “{~}”, , , 真)
    CoInitialize (0)
    变量_D3B60125.创建 (“wscript.shell”, )
    变量_D3B60125.写属性 (“SendKeys”, 变量_6B610225)
    CoUninitialize ()

.子程序 键盘_锁定, , 公开, 锁定所有键盘按键(锁定后,键盘无法操作) 
    .参数 状态, 逻辑型, 可空, 可空。真=锁全键盘(可空为假)，假=锁定功能键与Win键Esc键F4键Tab键Print键Soroll键Pause键

    .如果真 (类变量_19130115 ≠ 0)
        UnhookWindowsHookEx (类变量_19130115)
    .如果真结束
    类变量_F0B90115 ＝ 状态
    类变量_19130115 ＝ SetWindowsHookExA (#WH_KEYBOARD_LL, &键盘钩子处理, GetModuleHandleA1 (0), 0)

.子程序 键盘钩子处理, 整数型
    .参数 变量_F2B90125, 整数型
    .参数 变量_F3B90125, 整数型
    .参数 变量_F4B90125, 整数型
    .局部变量 变量_F5B90125, 自定义_FBB90141

    .如果真 (变量_F2B90125 ＝ 0)
        DLL_RtlMoveMemory17 (变量_F5B90125, 变量_F4B90125, 28)
        .判断开始 (类变量_F0B90115 ＝ 假)
            .如果真 (变量_F5B90125.成员_FCB90135 ＝ #Esc键 或 变量_F5B90125.成员_FCB90135 ＝ #Tab键 或 变量_F5B90125.成员_FCB90135 ＝ #F4键)
                返回 (1)
            .如果真结束
            
            .如果真 (变量_F5B90125.成员_FCB90135 ＝ 44 或 变量_F5B90125.成员_FCB90135 ＝ 145 或 变量_F5B90125.成员_FCB90135 ＝ 19)
                返回 (1)
            .如果真结束
            
            .如果真 (变量_F5B90125.成员_FCB90135 ＝ 91 或 变量_F5B90125.成员_FCB90135 ＝ 92 或 变量_F5B90125.成员_FCB90135 ＝ 93)
                返回 (1)
            .如果真结束
            
            .如果真 (变量_F5B90125.成员_FCB90135 ＝ 160 或 变量_F5B90125.成员_FCB90135 ＝ 161)
                返回 (1)
            .如果真结束
            
            .如果真 (变量_F5B90125.成员_FCB90135 ＝ 162 或 变量_F5B90125.成员_FCB90135 ＝ 163)
                返回 (1)
            .如果真结束
            
            .如果真 (变量_F5B90125.成员_FCB90135 ＝ 164 或 变量_F5B90125.成员_FCB90135 ＝ 165)
                返回 (1)
            .如果真结束
            
            返回 (0)
        .默认
            返回 (1)
        .判断结束
        
    .如果真结束
    返回 (CallNextHookEx (类变量_19130115, 变量_F2B90125, 变量_F3B90125, 变量_F4B90125))

.子程序 键盘_解锁, , 公开, 键盘解锁(键盘锁定后,用来恢复键盘的使用)
    .如果真 (类变量_19130115 ≠ 0)
        UnhookWindowsHookEx (类变量_19130115)
    .如果真结束
    

.子程序 键盘_单击, , 公开, 前台模拟键盘操作
    .参数 键代码, 整数型, , 键代码；如A是65，就直接输65
    .参数 状态, 整数型, 可空, 留空为单击；1按下   2放开

    .判断开始 (状态 ＝ 1)
        keybd_event (键代码, 0, 0, 0)
    .判断 (状态 ＝ 2)
        keybd_event (键代码, 0, 2, 0)
    .默认
        keybd_event (键代码, 0, 0, 0)
        处理事件 ()
        keybd_event (键代码, 0, 2, 0)
    .判断结束
    

.子程序 键盘_消息, , 公开, 向指定窗口句柄的窗口中发送按键消息(无返回值)
    .参数 窗口句柄, 整数型, , 接收消息的窗口句柄
    .参数 键代码, 整数型, , 按键的键代码
    .参数 状态, 整数型, 可空, 可空。默认为1  1=输入字符 2=1(废弃)  3=按下，4=放开，5=单击
    .参数 是否功能键, 逻辑型, 可空, 可空。默认为假：普通键   真:功能键 (为功能键可用于热键技能不输入字符)
    .局部变量 变量_87070325, 整数型
    .局部变量 变量_8C070325, 整数型
    .局部变量 变量_8B070325, 整数型

    .判断开始 (状态 ＝ 3)
        变量_87070325 ＝ 选择 (是否功能键, #<?未知本地类型?>, #<?未知本地类型?>)
        变量_8C070325 ＝ DLL_MapVirtualKeyA (键代码, #<?未知本地类型?>)
        变量_8B070325 ＝ 生成键盘消息lParam (1, 变量_8C070325, 是否功能键, 假, 假, 假)
        DLL_PostMessageW (窗口句柄, 变量_87070325, 键代码, 变量_8B070325)
    .判断 (状态 ＝ 4)
        变量_87070325 ＝ 选择 (是否功能键, #<?未知本地类型?>, #<?未知本地类型?>)
        变量_8C070325 ＝ DLL_MapVirtualKeyA (键代码, #<?未知本地类型?>)
        变量_8B070325 ＝ 生成键盘消息lParam (1, 变量_8C070325, 是否功能键, 假, 真, 真)
        DLL_PostMessageW (窗口句柄, 变量_87070325, 键代码, 变量_8B070325)
    .判断 (状态 ＝ 5)
        键盘_消息 (窗口句柄, 键代码, 3, 是否功能键)
        键盘_消息 (窗口句柄, 键代码, 4, 是否功能键)
    .默认
        
        .判断开始 (键代码 ＝ 58 或 键代码 ＝ 59)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ＝ 43)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ＝ 44)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ＝ 45)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ＝ 46)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ＝ 47 或 键代码 ＝ 63)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ＝ 96 或 键代码 ＝ 126)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (#<?未知本地类型?>, #<?未知本地类型?>)
        .判断 (键代码 ≥ 97 且 键代码 ≤ 122)
            变量_8C070325 ＝ DLL_MapVirtualKeyA (键代码 － 32, #<?未知本地类型?>)
        .默认
            变量_8C070325 ＝ DLL_MapVirtualKeyA (键代码, #<?未知本地类型?>)
        .判断结束
        变量_8B070325 ＝ 生成键盘消息lParam (1, 变量_8C070325, 是否功能键, 假, 假, 假)
        DLL_PostMessageW (窗口句柄, #<?未知本地类型?>, 键代码, 变量_8B070325)
    .判断结束
    

.子程序 键盘_组合按键, , 公开, 模拟一个组合按键；如:Ctrl+A
    .参数 键代码, 整数型, , 键代码；如：A(65)
    .参数 功能键码1, 整数型, , 功能键代码；如：ctrl(1) 或 #ctrl
    .参数 功能键码2, 整数型, 可空, 功能键代码(可以留空)
    .参数 功能键码3, 整数型, 可空, 功能键代码(可以留空)

    .如果真 (功能键码3 ≠ 0)
        keybd_event (功能键码3, 0, 0, 0)
    .如果真结束
    .如果真 (功能键码2 ≠ 0)
        keybd_event (功能键码2, 0, 0, 0)
    .如果真结束
    keybd_event (功能键码1, 0, 0, 0)
    keybd_event (键代码, 0, 0, 0)
    .如果真 (功能键码3 ≠ 0)
        keybd_event (功能键码3, 0, 2, 0)
    .如果真结束
    .如果真 (功能键码2 ≠ 0)
        keybd_event (功能键码2, 0, 2, 0)
    .如果真结束
    keybd_event (功能键码1, 0, 2, 0)
    keybd_event (键代码, 0, 2, 0)

.子程序 键盘_组合按键1, 整数型, 公开, 成功返回插入到键盘中的事件数，失败返回0。
    .参数 键代码, 整数型, 数组, { #VK_RMENU, #空格键, #N键 }
    .局部变量 变量_6BFA0225, 整数型
    .局部变量 变量_66FA0225, INPUT, , "0"
    .局部变量 变量_73FA0225, 整数型

    变量_6BFA0225 ＝ 取数组成员数 (键代码)
    重定义数组 (变量_66FA0225, 假, 变量_6BFA0225 × 2)
    .计次循环首 (到整数 (变量_6BFA0225 × 2), 变量_73FA0225)
        变量_66FA0225 [变量_73FA0225].type ＝ #INPUT_KEYBOARD
        .如果 (变量_73FA0225 ＞ 变量_6BFA0225)
            变量_66FA0225 [变量_73FA0225].ki.wVk ＝ 键代码 [变量_6BFA0225 － (变量_73FA0225 － 变量_6BFA0225) ＋ 1]
            变量_66FA0225 [变量_73FA0225].ki.dwFlags ＝ #KEYEVENTF_KEYUP
        .否则
            变量_66FA0225 [变量_73FA0225].ki.wVk ＝ 键代码 [变量_73FA0225]
        .如果结束
        变量_66FA0225 [变量_73FA0225].ki.wScan ＝ DLL_MapVirtualKeyA (变量_66FA0225 [变量_73FA0225].ki.wVk, #<?未知本地类型?>)
    .计次循环尾 ()
    返回 (SendInput (变量_6BFA0225 × 2, 变量_66FA0225, 28))

.子程序 键盘_键名取键代码, 整数型, 公开, 取键名的键代码(返回键代码)
    .参数 键名, 文本型, , 键名,如填:A键,将返回65的键代码
    .局部变量 变量_D8120125, 整数型

    .判断开始 (到小写 (键名) ＝ “win键”)
        变量_D8120125 ＝ 91
    .判断 (到小写 (键名) ＝ “ctrl键”)
        变量_D8120125 ＝ #Ctrl键
    .判断 (到小写 (键名) ＝ “shift键”)
        变量_D8120125 ＝ #Shift键
    .判断 (到小写 (键名) ＝ “alt键”)
        变量_D8120125 ＝ #Alt键
    .判断 (键名 ＝ “0键”)
        变量_D8120125 ＝ #键0
    .判断 (键名 ＝ “1键”)
        变量_D8120125 ＝ #键1
    .判断 (键名 ＝ “2键”)
        变量_D8120125 ＝ #键2
    .判断 (键名 ＝ “3键”)
        变量_D8120125 ＝ #键3
    .判断 (键名 ＝ “4键”)
        变量_D8120125 ＝ #键4
    .判断 (键名 ＝ “5键”)
        变量_D8120125 ＝ #键5
    .判断 (键名 ＝ “6键”)
        变量_D8120125 ＝ #键6
    .判断 (键名 ＝ “7键”)
        变量_D8120125 ＝ #键7
    .判断 (键名 ＝ “8键”)
        变量_D8120125 ＝ #键8
    .判断 (键名 ＝ “9键”)
        变量_D8120125 ＝ #键9
    .判断 (到大写 (键名) ＝ “A键”)
        变量_D8120125 ＝ #A键
    .判断 (到大写 (键名) ＝ “B键”)
        变量_D8120125 ＝ #B键
    .判断 (到大写 (键名) ＝ “C键”)
        变量_D8120125 ＝ #C键
    .判断 (到大写 (键名) ＝ “D键”)
        变量_D8120125 ＝ #D键
    .判断 (到大写 (键名) ＝ “E键”)
        变量_D8120125 ＝ #E键
    .判断 (到大写 (键名) ＝ “F键”)
        变量_D8120125 ＝ #F键
    .判断 (到大写 (键名) ＝ “G键”)
        变量_D8120125 ＝ #G键
    .判断 (到大写 (键名) ＝ “H键”)
        变量_D8120125 ＝ #H键
    .判断 (到大写 (键名) ＝ “I键”)
        变量_D8120125 ＝ #I键
    .判断 (到大写 (键名) ＝ “J键”)
        变量_D8120125 ＝ #J键
    .判断 (到大写 (键名) ＝ “K键”)
        变量_D8120125 ＝ #K键
    .判断 (到大写 (键名) ＝ “L键”)
        变量_D8120125 ＝ #L键
    .判断 (到大写 (键名) ＝ “M键”)
        变量_D8120125 ＝ #M键
    .判断 (到大写 (键名) ＝ “N键”)
        变量_D8120125 ＝ #N键
    .判断 (到大写 (键名) ＝ “O键”)
        变量_D8120125 ＝ #O键
    .判断 (到大写 (键名) ＝ “P键”)
        变量_D8120125 ＝ #P键
    .判断 (到大写 (键名) ＝ “Q键”)
        变量_D8120125 ＝ #Q键
    .判断 (到大写 (键名) ＝ “R键”)
        变量_D8120125 ＝ #R键
    .判断 (到大写 (键名) ＝ “S键”)
        变量_D8120125 ＝ #S键
    .判断 (到大写 (键名) ＝ “T键”)
        变量_D8120125 ＝ #T键
    .判断 (到大写 (键名) ＝ “U键”)
        变量_D8120125 ＝ #U键
    .判断 (到大写 (键名) ＝ “V键”)
        变量_D8120125 ＝ #V键
    .判断 (到大写 (键名) ＝ “W键”)
        变量_D8120125 ＝ #W键
    .判断 (到大写 (键名) ＝ “X键”)
        变量_D8120125 ＝ #X键
    .判断 (到大写 (键名) ＝ “Y键”)
        变量_D8120125 ＝ #Y键
    .判断 (到大写 (键名) ＝ “Z键”)
        变量_D8120125 ＝ #Z键
    .判断 (到大写 (键名) ＝ “F1键”)
        变量_D8120125 ＝ #F1键
    .判断 (到大写 (键名) ＝ “F2键”)
        变量_D8120125 ＝ #F2键
    .判断 (到大写 (键名) ＝ “F3键”)
        变量_D8120125 ＝ #F3键
    .判断 (到大写 (键名) ＝ “F4键”)
        变量_D8120125 ＝ #F4键
    .判断 (到大写 (键名) ＝ “F5键”)
        变量_D8120125 ＝ #F5键
    .判断 (到大写 (键名) ＝ “F6键”)
        变量_D8120125 ＝ #F6键
    .判断 (到大写 (键名) ＝ “F7键”)
        变量_D8120125 ＝ #F7键
    .判断 (到大写 (键名) ＝ “F8键”)
        变量_D8120125 ＝ #F8键
    .判断 (到大写 (键名) ＝ “F9键”)
        变量_D8120125 ＝ #F9键
    .判断 (到大写 (键名) ＝ “F10键”)
        变量_D8120125 ＝ #F10键
    .判断 (到大写 (键名) ＝ “F11键”)
        变量_D8120125 ＝ #F11键
    .判断 (到大写 (键名) ＝ “F12键”)
        变量_D8120125 ＝ #F12键
    .判断 (到大写 (键名) ＝ “F13键”)
        变量_D8120125 ＝ #F13键
    .判断 (到大写 (键名) ＝ “F14键”)
        变量_D8120125 ＝ #F14键
    .判断 (到大写 (键名) ＝ “F15键”)
        变量_D8120125 ＝ #F15键
    .判断 (到大写 (键名) ＝ “F16键”)
        变量_D8120125 ＝ #F16键
    .判断 (键名 ＝ “break键”)
        变量_D8120125 ＝ #Break键
    .判断 (键名 ＝ “Tab键”)
        变量_D8120125 ＝ #Tab键
    .判断 (键名 ＝ “回车键”)
        变量_D8120125 ＝ #回车键
    .判断 (到小写 (键名) ＝ “pause键”)
        变量_D8120125 ＝ #Pause键
    .判断 (到小写 (键名) ＝ “capsLock键”)
        变量_D8120125 ＝ #CapsLock键
    .判断 (到小写 (键名) ＝ “numLock键”)
        变量_D8120125 ＝ #NumLock键
    .判断 (到小写 (键名) ＝ “scrollLock键”)
        变量_D8120125 ＝ #ScrollLock键
    .判断 (到小写 (键名) ＝ “esc键”)
        变量_D8120125 ＝ #Esc键
    .判断 (键名 ＝ “空格键”)
        变量_D8120125 ＝ #空格键
    .判断 (到小写 (键名) ＝ “pageup键”)
        变量_D8120125 ＝ #PageUp键
    .判断 (到小写 (键名) ＝ “pagedown键”)
        变量_D8120125 ＝ #PageDown键
    .判断 (到小写 (键名) ＝ “home键”)
        变量_D8120125 ＝ #Home键
    .判断 (到小写 (键名) ＝ “end键”)
        变量_D8120125 ＝ #End键
    .判断 (键名 ＝ “左光标键”)
        变量_D8120125 ＝ #左光标键
    .判断 (键名 ＝ “上光标键”)
        变量_D8120125 ＝ #上光标键
    .判断 (键名 ＝ “右光标键”)
        变量_D8120125 ＝ #右光标键
    .判断 (键名 ＝ “下光标键”)
        变量_D8120125 ＝ #下光标键
    .判断 (到小写 (键名) ＝ “ins键”)
        变量_D8120125 ＝ #Ins键
    .判断 (到小写 (键名) ＝ “del键”)
        变量_D8120125 ＝ #Del键
    .判断 (键名 ＝ “分号键”)
        变量_D8120125 ＝ #分号键
    .判断 (键名 ＝ “等号键”)
        变量_D8120125 ＝ #等号键
    .判断 (键名 ＝ “逗号键”)
        变量_D8120125 ＝ #逗号键
    .判断 (键名 ＝ “减号键”)
        变量_D8120125 ＝ #减号键
    .判断 (键名 ＝ “圆点键”)
        变量_D8120125 ＝ #圆点键
    .判断 (键名 ＝ “除号键”)
        变量_D8120125 ＝ #除号键
    .判断 (键名 ＝ “反撇号键”)
        变量_D8120125 ＝ #反撇号键
    .判断 (键名 ＝ “左中括号键”)
        变量_D8120125 ＝ #左中括号键
    .判断 (键名 ＝ “右中括号键”)
        变量_D8120125 ＝ #右中括号键
    .判断 (键名 ＝ “斜杠键”)
        变量_D8120125 ＝ #斜杠键
    .判断 (键名 ＝ “单引号键”)
        变量_D8120125 ＝ #单引号键
    .判断 (键名 ＝ “乘号键”)
        变量_D8120125 ＝ 106
    .判断 (键名 ＝ “加号键”)
        变量_D8120125 ＝ 107
    .判断 (键名 ＝ “退格键”)
        变量_D8120125 ＝ #退格键
    .判断 (键名 ＝ “~”)
        变量_D8120125 ＝ 192
    .判断 (到小写 (键名) ＝ “左shift键”)
        变量_D8120125 ＝ 160
    .判断 (到小写 (键名) ＝ “右shift键”)
        变量_D8120125 ＝ 161
    .判断 (到大写 (键名) ＝ “左CTRL键”)
        变量_D8120125 ＝ 162
    .判断 (到大写 (键名) ＝ “右CTRL键”)
        变量_D8120125 ＝ 163
    .默认
        
    .判断结束
    返回 (变量_D8120125)

.子程序 键盘_键代码取键名, 文本型, 公开, 取键代码的键名(返回键名)
    .参数 键代码, 整数型, , 键代码,如填:65,将返回 A键
    .局部变量 变量_DA120125, 文本型

    .判断开始 (键代码 ＝ #Ctrl键)
        变量_DA120125 ＝ “Ctrl键”
    .判断 (键代码 ＝ #Shift键)
        变量_DA120125 ＝ “Shift键”
    .判断 (键代码 ＝ #Alt键)
        变量_DA120125 ＝ “Alt键”
    .判断 (键代码 ＝ #键0)
        变量_DA120125 ＝ “0键”
    .判断 (键代码 ＝ #键1)
        变量_DA120125 ＝ “1键”
    .判断 (键代码 ＝ #键2)
        变量_DA120125 ＝ “2键”
    .判断 (键代码 ＝ #键3)
        变量_DA120125 ＝ “3键”
    .判断 (键代码 ＝ #键4)
        变量_DA120125 ＝ “4键”
    .判断 (键代码 ＝ #键5)
        变量_DA120125 ＝ “5键”
    .判断 (键代码 ＝ #键6)
        变量_DA120125 ＝ “6键”
    .判断 (键代码 ＝ #键7)
        变量_DA120125 ＝ “7键”
    .判断 (键代码 ＝ #键8)
        变量_DA120125 ＝ “8键”
    .判断 (键代码 ＝ #键9)
        变量_DA120125 ＝ “9键”
    .判断 (键代码 ＝ #A键)
        变量_DA120125 ＝ “A键”
    .判断 (键代码 ＝ #B键)
        变量_DA120125 ＝ “B键”
    .判断 (键代码 ＝ #C键)
        变量_DA120125 ＝ “C键”
    .判断 (键代码 ＝ #D键)
        变量_DA120125 ＝ “D键”
    .判断 (键代码 ＝ #E键)
        变量_DA120125 ＝ “E键”
    .判断 (键代码 ＝ #F键)
        变量_DA120125 ＝ “F键”
    .判断 (键代码 ＝ #G键)
        变量_DA120125 ＝ “G键”
    .判断 (键代码 ＝ #H键)
        变量_DA120125 ＝ “H键”
    .判断 (键代码 ＝ #I键)
        变量_DA120125 ＝ “I键”
    .判断 (键代码 ＝ #J键)
        变量_DA120125 ＝ “J键”
    .判断 (键代码 ＝ #K键)
        变量_DA120125 ＝ “K键”
    .判断 (键代码 ＝ #L键)
        变量_DA120125 ＝ “L键”
    .判断 (键代码 ＝ #M键)
        变量_DA120125 ＝ “M键”
    .判断 (键代码 ＝ #N键)
        变量_DA120125 ＝ “N键”
    .判断 (键代码 ＝ #O键)
        变量_DA120125 ＝ “O键”
    .判断 (键代码 ＝ #P键)
        变量_DA120125 ＝ “P键”
    .判断 (键代码 ＝ #Q键)
        变量_DA120125 ＝ “Q键”
    .判断 (键代码 ＝ #R键)
        变量_DA120125 ＝ “R键”
    .判断 (键代码 ＝ #S键)
        变量_DA120125 ＝ “S键”
    .判断 (键代码 ＝ #T键)
        变量_DA120125 ＝ “T键”
    .判断 (键代码 ＝ #U键)
        变量_DA120125 ＝ “U键”
    .判断 (键代码 ＝ #V键)
        变量_DA120125 ＝ “V键”
    .判断 (键代码 ＝ #W键)
        变量_DA120125 ＝ “W键”
    .判断 (键代码 ＝ #X键)
        变量_DA120125 ＝ “X键”
    .判断 (键代码 ＝ #Y键)
        变量_DA120125 ＝ “Y键”
    .判断 (键代码 ＝ #Z键)
        变量_DA120125 ＝ “Z键”
    .判断 (键代码 ＝ #F1键)
        变量_DA120125 ＝ “F1键”
    .判断 (键代码 ＝ #F2键)
        变量_DA120125 ＝ “F2键”
    .判断 (键代码 ＝ #F3键)
        变量_DA120125 ＝ “F3键”
    .判断 (键代码 ＝ #F4键)
        变量_DA120125 ＝ “F4键”
    .判断 (键代码 ＝ #F5键)
        变量_DA120125 ＝ “F5键”
    .判断 (键代码 ＝ #F6键)
        变量_DA120125 ＝ “F6键”
    .判断 (键代码 ＝ #F7键)
        变量_DA120125 ＝ “F7键”
    .判断 (键代码 ＝ #F8键)
        变量_DA120125 ＝ “F8键”
    .判断 (键代码 ＝ #F9键)
        变量_DA120125 ＝ “F9键”
    .判断 (键代码 ＝ #F10键)
        变量_DA120125 ＝ “F10键”
    .判断 (键代码 ＝ #F11键)
        变量_DA120125 ＝ “F11键”
    .判断 (键代码 ＝ #F12键)
        变量_DA120125 ＝ “F12键”
    .判断 (键代码 ＝ #F13键)
        变量_DA120125 ＝ “F13键”
    .判断 (键代码 ＝ #F14键)
        变量_DA120125 ＝ “F14键”
    .判断 (键代码 ＝ #F15键)
        变量_DA120125 ＝ “F15键”
    .判断 (键代码 ＝ #F16键)
        变量_DA120125 ＝ “F16键”
    .判断 (键代码 ＝ #Break键)
        变量_DA120125 ＝ “Break”
    .判断 (键代码 ＝ #回车键)
        变量_DA120125 ＝ “回车键”
    .判断 (键代码 ＝ #Pause键)
        变量_DA120125 ＝ “Pause键”
    .判断 (键代码 ＝ #CapsLock键)
        变量_DA120125 ＝ “Caps Lock键”
    .判断 (键代码 ＝ #NumLock键)
        变量_DA120125 ＝ “NumLock键”
    .判断 (键代码 ＝ #ScrollLock键)
        变量_DA120125 ＝ “ScrollLock键”
    .判断 (键代码 ＝ #Esc键)
        变量_DA120125 ＝ “Esc键”
    .判断 (键代码 ＝ #空格键)
        变量_DA120125 ＝ “空格键”
    .判断 (键代码 ＝ #PageUp键)
        变量_DA120125 ＝ “PageUp键”
    .判断 (键代码 ＝ #PageDown键)
        变量_DA120125 ＝ “PageDown键”
    .判断 (键代码 ＝ #Home键)
        变量_DA120125 ＝ “Home键”
    .判断 (键代码 ＝ #End键)
        变量_DA120125 ＝ “End键”
    .判断 (键代码 ＝ #左光标键)
        变量_DA120125 ＝ “左光标键”
    .判断 (键代码 ＝ #上光标键)
        变量_DA120125 ＝ “上光标键”
    .判断 (键代码 ＝ #右光标键)
        变量_DA120125 ＝ “右光标键”
    .判断 (键代码 ＝ #下光标键)
        变量_DA120125 ＝ “下光标键”
    .判断 (键代码 ＝ #Ins键)
        变量_DA120125 ＝ “Ins键”
    .判断 (键代码 ＝ #Del键)
        变量_DA120125 ＝ “Del键”
    .判断 (键代码 ＝ #分号键)
        变量_DA120125 ＝ “分号键”
    .判断 (键代码 ＝ #等号键)
        变量_DA120125 ＝ “等号键”
    .判断 (键代码 ＝ #逗号键)
        变量_DA120125 ＝ “逗号键”
    .判断 (键代码 ＝ #减号键)
        变量_DA120125 ＝ “减号键”
    .判断 (键代码 ＝ #圆点键)
        变量_DA120125 ＝ “圆点键”
    .判断 (键代码 ＝ #除号键)
        变量_DA120125 ＝ “除号键”
    .判断 (键代码 ＝ #反撇号键)
        变量_DA120125 ＝ “反撇号键”
    .判断 (键代码 ＝ #左中括号键)
        变量_DA120125 ＝ “左中括号键”
    .判断 (键代码 ＝ #右中括号键)
        变量_DA120125 ＝ “右中括号键”
    .判断 (键代码 ＝ #斜杠键)
        变量_DA120125 ＝ “斜杠键”
    .判断 (键代码 ＝ #单引号键)
        变量_DA120125 ＝ “单引号键”
    .判断 (键代码 ＝ 106)
        变量_DA120125 ＝ “乘号键”
    .判断 (键代码 ＝ 107)
        变量_DA120125 ＝ “加号键”
    .判断 (键代码 ＝ #退格键)
        变量_DA120125 ＝ “退格键”
    .判断 (键代码 ＝ 91)
        变量_DA120125 ＝ “Win键”
    .判断 (键代码 ＝ #Tab键)
        变量_DA120125 ＝ “Tab键”
    .判断 (键代码 ＝ 192)
        变量_DA120125 ＝ “~”
    .判断 (键代码 ＝ 160)
        变量_DA120125 ＝ “左shift键”
    .判断 (键代码 ＝ 161)
        变量_DA120125 ＝ “右shift键”
    .判断 (键代码 ＝ 162)
        变量_DA120125 ＝ “左CTRL键”
    .判断 (键代码 ＝ 163)
        变量_DA120125 ＝ “右CTRL键”
    .默认
        
    .判断结束
    返回 (变量_DA120125)

.子程序 键盘_键代码取键名1, 文本型, 公开, 成功返回键代码的键名
    .参数 键代码, 整数型
    .局部变量 变量_34FF0225, 整数型
    .局部变量 变量_A2E30225, 文本型

    变量_34FF0225 ＝ DLL_MapVirtualKeyA (键代码, #<?未知本地类型?>)
    .如果真 (键代码 ＝ #左光标键 或 键代码 ＝ #上光标键 或 键代码 ＝ #右光标键 或 键代码 ＝ #下光标键 或 键代码 ＝ #PageUp键 或 键代码 ＝ #PageDown键 或 键代码 ＝ #End键 或 键代码 ＝ #Home键 或 键代码 ＝ #Ins键 或 键代码 ＝ #Del键 或 键代码 ＝ #<?未知本地类型?> 或 键代码 ＝ #NumLock键)
        变量_34FF0225 ＝ 位或 (变量_34FF0225, 256)
    .如果真结束
    变量_A2E30225 ＝ 取空白文本 (256)
    DLL_GetKeyNameTextA (左移 (变量_34FF0225, 16), 变量_A2E30225, 256)
    返回 (变量_A2E30225)

.子程序 键盘_取大小写状态, 逻辑型, 公开, 取当前的输入状态,返回真为大写,返回假则为小写
    返回 (GetKeyState (20))
    

.子程序 键盘_取小键盘状态, 逻辑型, 公开, 取当前的输入状态,返回真为开,返回假则为关
    返回 (GetKeyState (144))
    

