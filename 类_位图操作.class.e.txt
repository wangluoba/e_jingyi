.版本 2

.程序集 类_位图操作, , 公开, 此类由坛友提供
.程序集变量 颜色表_1位深, 字节集, , , 2色biBitCount=1
.程序集变量 颜色表_4位深, 字节集, , , 16色biBitCount=4
.程序集变量 颜色表_8位深, 字节集, , , 256色biBitCount=8
.程序集变量 屏幕设备句柄, 整数型
.程序集变量 场景句柄, 整数型
.程序集变量 位图句柄, 整数型
.程序集变量 旧位图句柄, 整数型
.程序集变量 位图数据, 字节集, , , 位图数据
.程序集变量 位图指针, 整数型
.程序集变量 场景被更新, 逻辑型

.子程序 _初始化
    初始化颜色表 ()
    屏幕设备句柄 ＝ GetDC (0)

.子程序 _销毁
    SelectObject (场景句柄, 旧位图句柄)
    DeleteObject (位图句柄)
    DeleteDC (场景句柄)
    ReleaseDC (0, 屏幕设备句柄)

.子程序 释放旧位图
    .如果真 (位图数据 ＝ { } 且 位图句柄 ＝ 0)
        返回 ()
    .如果真结束
    SelectObject (场景句柄, 旧位图句柄)
    DeleteObject (位图句柄)
    DeleteDC (场景句柄)
    ReleaseDC (0, 屏幕设备句柄)
    连续赋值 (0, 位图句柄, 位图指针, 场景句柄, 旧位图句柄)
    位图数据 ＝ { }
    屏幕设备句柄 ＝ GetDC (0)
    场景被更新 ＝ 假

.子程序 初始化颜色表
    颜色表_1位深 ＝ { }
    颜色表_1位深 ＝ 颜色表_1位深 ＋ { 0, 0, 0, 0 }
    颜色表_1位深 ＝ 颜色表_1位深 ＋ { 255, 255, 255, 0 }
    颜色表_4位深 ＝ { }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 0, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 0, 128, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 128, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 128, 128, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 128, 0, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 128, 0, 128, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 128, 128, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 128, 128, 128, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 192, 192, 192, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 0, 255, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 255, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 0, 255, 255, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 255, 0, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 255, 0, 255, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 255, 255, 0, 0 }
    颜色表_4位深 ＝ 颜色表_4位深 ＋ { 255, 255, 255, 0 }
    颜色表_8位深 ＝ { }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 0, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 0, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 220, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 240, 202, 166, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 32, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 32, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 32, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 32, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 32, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 32, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 64, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 96, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 128, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 160, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 192, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 224, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 0, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 32, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 64, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 96, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 128, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 160, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 192, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 64, 224, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 0, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 32, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 64, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 96, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 160, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 192, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 224, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 0, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 32, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 64, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 96, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 128, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 192, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 160, 224, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 32, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 64, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 96, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 192, 192, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 240, 251, 255, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 164, 160, 160, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 128, 128, 128, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 0, 255, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 255, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 0, 255, 255, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 255, 0, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 255, 0, 255, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 255, 255, 0, 0 }
    颜色表_8位深 ＝ 颜色表_8位深 ＋ { 255, 255, 255, 0 }

.子程序 从数据创建, 逻辑型, 公开, 从位图字节集载入位图数据创建位图(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 位图文件数据, 字节集
    .局部变量 变量_229A0125, 逻辑型

    写到文件 (目录_取特定目录 (11) ＋ “新位图操作类_载入位图.bmp”, 位图文件数据)
    变量_229A0125 ＝ 从文件创建 (目录_取特定目录 (11) ＋ “新位图操作类_载入位图.bmp”)
    删除文件 (目录_取特定目录 (11) ＋ “新位图操作类_载入位图.bmp”)
    返回 (变量_229A0125)

.子程序 从数据创建2, 逻辑型, 公开
    .参数 位图文件数据, 字节集
    .局部变量 变量_F9F60225, 整数型
    .局部变量 变量_FAF60225, 整数型
    .局部变量 变量_FBF60225, 整数型

    释放旧位图 ()
    .如果真 (取字节集长度 (位图文件数据) ＜ 55)
        返回 (假)
    .如果真结束
    变量_F9F60225 ＝ 取字节集数据 (位图文件数据, 3, 19)
    变量_FAF60225 ＝ 取字节集数据 (位图文件数据, 3, 23)
    变量_FBF60225 ＝ 取字节集数据 (位图文件数据, 2, 29)
    .如果真 (变量_F9F60225 ＜ 1 或 变量_FAF60225 ＜ 1)
        返回 (假)
    .如果真结束
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    位图数据 ＝ 取字节集右边 (位图文件数据, 取字节集长度 (位图文件数据) － 14)
    位图句柄 ＝ CreateDIBSection1 (屏幕设备句柄, 位图数据, 0, 位图指针, 0, 0)
    RtlMoveMemory (位图指针, 取颜色点阵地址 (), 取颜色点阵大小 ())
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    返回 (真)

.子程序 从文件创建, 逻辑型, 公开, 从bmp文件载入位图数据创建位图(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 文件名, 文本型, , 位图文件路径
    .局部变量 变量_289A0125, 整数型
    .局部变量 变量_299A0125, 逻辑型

    变量_289A0125 ＝ LoadImage (0, 文件名, 0, 0, 0, 16)
    变量_299A0125 ＝ 从位图句柄创建 (变量_289A0125)
    DeleteObject (变量_289A0125)
    返回 (变量_299A0125)

.子程序 从位图句柄创建, 逻辑型, 公开, 通过已有的位图句柄创建新的位图存于本类中(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 已知的位图句柄, 整数型, , 已经获得的位图句柄,该句柄需另外删除!
    .参数 位深度, 整数型, 可空, 位深度:  1, 4, 8, 16, 24, 32  默认为原来的位深度
    .局部变量 变量_2C9A0125, 自定义_7D4D0141
    .局部变量 变量_2D9A0125, 整数型
    .局部变量 变量_2E9A0125, 整数型

    释放旧位图 ()
    .如果真 (GetObjectA (已知的位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_2C9A0125) ＝ 0)
        返回 (假)
    .如果真结束
    变量_2D9A0125 ＝ CreateCompatibleDC (屏幕设备句柄)
    变量_2E9A0125 ＝ SelectObject (变量_2D9A0125, 已知的位图句柄)
    创建空位图 (变量_2C9A0125.成员_914D0135, 变量_2C9A0125.成员_924D0135, 选择 (位深度 ＝ 0, 变量_2C9A0125.成员_954D0135, 位深度), )
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    位图句柄 ＝ CreateDIBSection1 (屏幕设备句柄, 位图数据, 0, 位图指针, 0, 0)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    BitBlt (场景句柄, 0, 0, 变量_2C9A0125.成员_914D0135, 变量_2C9A0125.成员_924D0135, 变量_2D9A0125, 0, 0, #SRCCOPY)
    GdiFlush ()
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
    SelectObject (变量_2D9A0125, 变量_2E9A0125)
    
    DeleteDC (变量_2D9A0125)
    返回 (真)
    

.子程序 从图标句柄创建, 逻辑型, 公开, 通过文件图标句柄创建图标位图(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 图标句柄, 整数型, , 文件图标句柄
    .参数 图标宽度, 整数型, 可空, 默认为32
    .参数 图标高度, 整数型, 可空, 默认为32
    .参数 位深度, 整数型, 可空, 位深度:  1, 4, 8, 16, 24, 32  默认为32位
    .局部变量 变量_339A0125, 精易_矩形
    .局部变量 变量_349A0125, 整数型
    .局部变量 变量_359A0125, 整数型
    .局部变量 变量_369A0125, 整数型
    .局部变量 变量_379A0125, 整数型

    .如果真 (是否为空 (图标宽度))
        图标宽度 ＝ 32
    .如果真结束
    .如果真 (是否为空 (图标高度))
        图标高度 ＝ 32
    .如果真结束
    .如果真 (是否为空 (位深度))
        位深度 ＝ 32
    .如果真结束
    变量_339A0125.右边 ＝ 图标宽度
    变量_339A0125.底边 ＝ 图标高度
    变量_349A0125 ＝ CreateCompatibleDC (屏幕设备句柄)
    变量_359A0125 ＝ CreateCompatibleBitmap (屏幕设备句柄, 图标宽度, 图标高度)
    变量_369A0125 ＝ SelectObject (变量_349A0125, 变量_359A0125)
    变量_379A0125 ＝ CreateSolidBrush (#白色)
    FillRect (变量_349A0125, 变量_339A0125, 变量_379A0125)
    DrawIconEx (变量_349A0125, 0, 0, 图标句柄, 图标宽度, 图标高度, 0, 0, 3)
    从场景创建 (变量_349A0125, 变量_339A0125, 位深度)
    DeleteDC (变量_349A0125)
    DeleteObject (变量_369A0125)
    DeleteObject (变量_359A0125)
    DeleteObject (变量_379A0125)
    返回 (位图句柄 ≠ 0)

.子程序 从屏幕创建, 逻辑型, 公开, 从屏幕创建位图,抓取屏幕画面(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 左边, 整数型, 可空, 抓取的屏幕区域左边  默认为0
    .参数 顶边, 整数型, 可空, 抓取的屏幕区域顶边  默认为0
    .参数 宽度, 整数型, 可空, 创建位图的宽度  默认为屏幕宽度-左边
    .参数 高度, 整数型, 可空, 创建位图的高度  默认为屏幕高度-顶边
    .参数 位深度, 整数型, 可空, 位深度:  1, 4, 8, 16, 24, 32  默认为当前屏幕色深
    .局部变量 变量_3D9A0125, 整数型
    .局部变量 变量_3E9A0125, 整数型
    .局部变量 变量_3F9A0125, 整数型
    .局部变量 变量_409A0125, 自定义_71960141
    .局部变量 变量_419A0125, 短整数型, , "61"

    释放旧位图 ()
    EnumDisplaySettingsA (0, -1, 变量_419A0125 [1])
    .如果真 (位深度 ＝ 0)
        位深度 ＝ 变量_419A0125 [53]
    .如果真结束
    .如果真 (位深度 ≠ 1 且 位深度 ≠ 4 且 位深度 ≠ 8 且 位深度 ≠ 16 且 位深度 ≠ 24 且 位深度 ≠ 32)
        返回 (假)
    .如果真结束
    .如果真 (宽度 ＝ 0)
        宽度 ＝ 变量_419A0125 [55] － 左边
    .如果真结束
    .如果真 (高度 ＝ 0)
        高度 ＝ 变量_419A0125 [57] － 顶边
    .如果真结束
    变量_409A0125.成员_76960135 ＝ 位深度
    变量_409A0125.成员_77960135 ＝ 0
    变量_409A0125.成员_75960135 ＝ 1
    变量_409A0125.成员_72960135 ＝ 40
    变量_409A0125.成员_73960135 ＝ 宽度
    变量_409A0125.成员_74960135 ＝ 高度
    变量_3D9A0125 ＝ CreateCompatibleDC (屏幕设备句柄)
    变量_3E9A0125 ＝ CreateDIBSection (变量_3D9A0125, 变量_409A0125, 0, 0, 0, 0)
    变量_3F9A0125 ＝ SelectObject (变量_3D9A0125, 变量_3E9A0125)
    创建空位图 (变量_409A0125.成员_73960135, 变量_409A0125.成员_74960135, 变量_409A0125.成员_76960135, )
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    位图句柄 ＝ CreateDIBSection1 (屏幕设备句柄, 位图数据, 0, 位图指针, 0, 0)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    BitBlt (场景句柄, 0, 0, 变量_409A0125.成员_73960135, 变量_409A0125.成员_74960135, 屏幕设备句柄, 左边, 顶边, #SRCCOPY)
    GdiFlush ()
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
    SelectObject (变量_3D9A0125, 变量_3F9A0125)
    DeleteObject (变量_3E9A0125)
    DeleteDC (变量_3D9A0125)
    返回 (真)

.子程序 从窗口创建, 逻辑型, 公开, 从窗口创建位图,获取窗口客户区画面(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 窗口句柄, 整数型, , 欲获取窗口位图的窗口句柄,必须保证窗口可视性,且不能是最小化窗口
    .参数 左边, 整数型, 可空, 抓取的窗口客户区域左边  默认为0
    .参数 顶边, 整数型, 可空, 抓取的窗口客户区域顶边  默认为0
    .参数 宽度, 整数型, 可空, 创建位图的宽度  默认为窗口客户区域的宽度-左边
    .参数 高度, 整数型, 可空, 创建位图的高度  默认为窗口客户区域的高度-顶边
    .参数 位深度, 整数型, 可空, 位深度:  1, 4, 8, 16, 24, 32  默认为24位
    .局部变量 变量_489A0125, 精易_矩形
    .局部变量 变量_499A0125, 精易_矩形
    .局部变量 变量_4A9A0125, 精易_坐标
    .局部变量 变量_4B9A0125, 整数型
    .局部变量 变量_4C9A0125, 整数型
    .局部变量 变量_4D9A0125, 整数型

    释放旧位图 ()
    .如果真 (IsIconic (窗口句柄))
        返回 (假)
    .如果真结束
    .如果真 (IsWindowVisible (窗口句柄) ＝ 假)
        返回 (假)
    .如果真结束
    .如果真 (位深度 ＝ 0)
        位深度 ＝ 24
    .如果真结束
    .如果真 (位深度 ≠ 1 且 位深度 ≠ 4 且 位深度 ≠ 8 且 位深度 ≠ 16 且 位深度 ≠ 24 且 位深度 ≠ 32)
        返回 (假)
    .如果真结束
    GetWindowRect (窗口句柄, 变量_489A0125)
    变量_4B9A0125 ＝ CreateCompatibleDC (屏幕设备句柄)
    变量_4C9A0125 ＝ CreateCompatibleBitmap (屏幕设备句柄, 变量_489A0125.右边 － 变量_489A0125.左边, 变量_489A0125.底边 － 变量_489A0125.顶边)
    变量_4D9A0125 ＝ SelectObject (变量_4B9A0125, 变量_4C9A0125)
    .如果真 (取反 (PrintWindow (窗口句柄, 变量_4B9A0125, 0)))
        SelectObject (变量_4B9A0125, 变量_4D9A0125)
        DeleteObject (变量_4C9A0125)
        DeleteDC (变量_4B9A0125)
        返回 (假)
    .如果真结束
    GetClientRect (窗口句柄, 变量_499A0125)
    .如果真 (宽度 ＝ 0)
        宽度 ＝ 变量_499A0125.右边 － 左边
    .如果真结束
    .如果真 (高度 ＝ 0)
        高度 ＝ 变量_499A0125.底边 － 顶边
    .如果真结束
    ClientToScreen (窗口句柄, 变量_4A9A0125)
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    创建空位图 (宽度, 高度, 位深度, )
    位图句柄 ＝ CreateDIBSection1 (屏幕设备句柄, 位图数据, 0, 位图指针, 0, 0)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    BitBlt (场景句柄, 0, 0, 宽度, 高度, 变量_4B9A0125, 变量_4A9A0125.横 － 变量_489A0125.左边 ＋ 左边, 变量_4A9A0125.纵 － 变量_489A0125.顶边 ＋ 顶边, 13369376)
    SelectObject (变量_4B9A0125, 变量_4D9A0125)
    DeleteObject (变量_4C9A0125)
    DeleteDC (变量_4B9A0125)
    GdiFlush ()
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
    返回 (真)

.子程序 从场景创建, 逻辑型, 公开, 从DC场景创建位图,复制DC上的内容到DIB获取场景中画面(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 DC场景句柄, 整数型, , 已经的DC场景
    .参数 区域, 精易_矩形, , 欲获取场景的区域范围
    .参数 位深度, 整数型, , 位深度:  1, 4, 8, 16, 24, 32
    .局部变量 变量_519A0125, 整数型
    .局部变量 变量_529A0125, 整数型

    释放旧位图 ()
    .如果真 (位深度 ≠ 1 且 位深度 ≠ 4 且 位深度 ≠ 8 且 位深度 ≠ 16 且 位深度 ≠ 24 且 位深度 ≠ 32)
        返回 (假)
    .如果真结束
    变量_519A0125 ＝ 区域.右边 － 区域.左边
    变量_529A0125 ＝ 区域.底边 － 区域.顶边
    创建空位图 (变量_519A0125, 变量_529A0125, 位深度, )
    场景句柄 ＝ CreateCompatibleDC (DC场景句柄)
    位图句柄 ＝ CreateDIBSection1 (DC场景句柄, 位图数据, 0, 位图指针, 0, 0)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    BitBlt (场景句柄, 0, 0, 变量_519A0125, 变量_529A0125, DC场景句柄, 区域.左边, 区域.顶边, #SRCCOPY)
    GdiFlush ()
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
    返回 (真)

.子程序 从资料创建
    .参数 变量_539A0125, 整数型
    .参数 变量_549A0125, 整数型
    .参数 变量_559A0125, 字节集

    释放旧位图 ()
    位图句柄 ＝ 变量_539A0125
    场景句柄 ＝ 变量_549A0125
    位图数据 ＝ 变量_559A0125
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)

.子程序 从剪辑板创建, 逻辑型, 公开, 取得剪辑板中位图(成功返回真,剪辑板中没有位图或失败返回假,本类原有位图将自动被释放)
    .参数 位深度, 整数型, 可空, 位深度:  1, 4, 8, 16, 24, 32  默认为系统色深
    .局部变量 变量_579A0125, 整数型
    .局部变量 变量_589A0125, 逻辑型

    释放旧位图 ()
    OpenClipboard (0)
    变量_579A0125 ＝ GetClipboardData (2)
    CloseClipboard ()
    变量_589A0125 ＝ 从位图句柄创建 (变量_579A0125, 位深度)
    DeleteObject (变量_579A0125)
    返回 (变量_589A0125)

.子程序 创建空白位图, 逻辑型, 公开, 创建一幅指定大小与位深度的空白位图(成功返回真,失败返回假,本类原有位图将自动被释放)
    .参数 宽度, 整数型
    .参数 高度, 整数型
    .参数 位深度, 整数型, , 位深度:  1, 4, 8, 16, 24, 32

    释放旧位图 ()
    创建空位图 (宽度, 高度, 位深度)
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    位图句柄 ＝ CreateDIBSection1 (屏幕设备句柄, 位图数据, 0, 位图指针, 0, 0)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    GdiFlush ()
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
    返回 (真)

.子程序 更新位图, , 公开, 强制立即更新位图中所作的操作(通常不使用)
    .如果真 (位图数据 ＝ { })
        返回 ()
    .如果真结束
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())

.子程序 创建空位图, 逻辑型
    .参数 变量_5C9A0125, 整数型
    .参数 变量_5D9A0125, 整数型
    .参数 变量_5E9A0125, 整数型
    .参数 变量_5F9A0125, 长整数型, 可空
    .局部变量 变量_609A0125, 整数型
    .局部变量 变量_619A0125, 整数型
    .局部变量 变量_629A0125, 自定义_7B4D0141

    ' .如果真 (是否为空 (变量_5F9A0125))
        
    ' .如果真结束
    .如果 (变量_5E9A0125 ＝ 1)
        变量_609A0125 ＝ 2
    .否则
        .如果 (变量_5E9A0125 ＝ 4)
            变量_609A0125 ＝ 16
        .否则
            .如果 (变量_5E9A0125 ＝ 8)
                变量_609A0125 ＝ 256
            .否则
                .如果 (变量_5E9A0125 ＝ 16 或 变量_5E9A0125 ＝ 24 或 变量_5E9A0125 ＝ 32)
                    变量_609A0125 ＝ 0
                .否则
                    返回 (假)
                .如果结束
                
            .如果结束
            
        .如果结束
        
    .如果结束
    变量_619A0125 ＝ 变量_609A0125 × 4 ＋ 扫描行对齐 (变量_5C9A0125 × 变量_5E9A0125) × 变量_5D9A0125
    位图数据 ＝ 取空白字节集 (变量_619A0125)
    
    变量_629A0125.成员_804D0135 ＝ 40
    变量_629A0125.成员_814D0135 ＝ 变量_5C9A0125
    变量_629A0125.成员_824D0135 ＝ 变量_5D9A0125
    变量_629A0125.成员_834D0135 ＝ 1
    变量_629A0125.成员_844D0135 ＝ 变量_5E9A0125
    位图数据 ＝ 位图信息头转字节集 (变量_629A0125) ＋ 位图数据
    
    .判断开始 (变量_5E9A0125 ＝ 1)
        RtlMoveMemory (取颜色表指针 (), lstrcpyn_字节集 (颜色表_1位深, 颜色表_1位深, 0), 取颜色表大小 ())
    .判断 (变量_5E9A0125 ＝ 4)
        RtlMoveMemory (取颜色表指针 (), lstrcpyn_字节集 (颜色表_4位深, 颜色表_4位深, 0), 取颜色表大小 ())
    .默认
        .如果真 (变量_5E9A0125 ＝ 8)
            RtlMoveMemory (取颜色表指针 (), lstrcpyn_字节集 (颜色表_8位深, 颜色表_8位深, 0), 取颜色表大小 ())
        .如果真结束
        
    .判断结束
    返回 (真)

.子程序 转换位深度, 逻辑型, 公开, 转换当前类中位图的位深度(成功返回真,失败返回假)
    .参数 新的位深度, 整数型, , 位深度:  1, 4, 8, 16, 24, 32
    .局部变量 变量_649A0125, 自定义_7D4D0141
    .局部变量 变量_659A0125, 整数型
    .局部变量 变量_669A0125, 整数型
    .局部变量 变量_679A0125, 整数型

    .如果真 (GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_649A0125) ＝ 0)
        返回 (假)
    .如果真结束
    变量_659A0125 ＝ 场景句柄
    变量_669A0125 ＝ 位图句柄
    变量_679A0125 ＝ 旧位图句柄
    位图数据 ＝ { }
    创建空位图 (变量_649A0125.成员_914D0135, 变量_649A0125.成员_924D0135, 新的位深度, )
    场景句柄 ＝ CreateCompatibleDC (屏幕设备句柄)
    位图句柄 ＝ CreateDIBSection1 (屏幕设备句柄, 位图数据, 0, 位图指针, 0, 0)
    旧位图句柄 ＝ SelectObject (场景句柄, 位图句柄)
    BitBlt (场景句柄, 0, 0, 变量_649A0125.成员_914D0135, 变量_649A0125.成员_924D0135, 变量_659A0125, 0, 0, #SRCCOPY)
    GdiFlush ()
    RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
    SelectObject (变量_659A0125, 变量_679A0125)
    DeleteObject (变量_669A0125)
    DeleteDC (变量_659A0125)
    返回 (真)

.子程序 复制到, 逻辑型, 公开, 将当前类中位图复制到目标位图类中(成功返回真,失败返回假)
    .参数 目标位图, 类_位图操作, 参考, 复制到的目标位图
    .参数 左边, 整数型, 可空, 复制源位图区域的左边 默认为0
    .参数 顶边, 整数型, 可空, 复制源位图区域的顶边 默认为0
    .参数 宽度, 整数型, 可空, 复制源位图的宽度 默认为源位图最大有效宽度
    .参数 高度, 整数型, 可空, 复制源位图的高度 默认为源位图最大有效高度
    .参数 目标左边, 整数型, 可空, 复制到目标位图的横坐标 默认为0
    .参数 目标顶边, 整数型, 可空, 复制到目标位图的纵坐标 默认为0
    .局部变量 变量_6F9A0125, 自定义_7D4D0141

    .如果真 (GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_6F9A0125) ＝ 0)
        返回 (假)
    .如果真结束
    .如果真 (是否为空 (宽度))
        宽度 ＝ 变量_6F9A0125.成员_914D0135
    .如果真结束
    .如果真 (是否为空 (高度))
        高度 ＝ 变量_6F9A0125.成员_924D0135
    .如果真结束
    
    BitBlt (目标位图.取场景句柄 (), 目标左边, 目标顶边, 宽度 ＋ 目标左边, 高度 ＋ 目标顶边, 场景句柄, 左边, 顶边, #SRCCOPY)
    目标位图.更新位图 ()
    返回 (真)

.子程序 取位图句柄, 整数型, 公开, 取得当前类中位图的位图句柄(返回位图句柄,本类中没有位图返回0)
    返回 (位图句柄)

.子程序 取场景句柄, 整数型, 公开, 取得当前类中位图所在DC场景句柄(返回场景句柄,本类中没有位图返回0)
    返回 (场景句柄)

.子程序 取宽度, 整数型, 公开, (数据方式)取位图宽度,失败返回0
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    返回 (取字节集数据 (取字节集中间 (位图数据, 5, 4), #整数型, ))

.子程序 取高度, 整数型, 公开, (数据方式)取位图高度,失败返回0
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    返回 (取字节集数据 (位图数据, #整数型, 9))

.子程序 取位深度, 整数型, 公开, (数据方式)取位图颜色位数,失败返回0
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    返回 (到整数 (到短整数 (取字节集中间 (位图数据, 15, 2))))

.子程序 取宽度2, 整数型, 公开, (函数方式)取位图宽度,失败返回0
    .局部变量 变量_709A0125, 自定义_7D4D0141

    GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_709A0125)
    返回 (变量_709A0125.成员_914D0135)

.子程序 取高度2, 整数型, 公开, (函数方式)取位图高度,失败返回0
    .局部变量 变量_719A0125, 自定义_7D4D0141

    GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_719A0125)
    返回 (变量_719A0125.成员_924D0135)

.子程序 取位深度2, 整数型, 公开, (函数方式)取位图颜色位数,失败返回0
    .局部变量 变量_729A0125, 自定义_7D4D0141

    GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_729A0125)
    返回 (变量_729A0125.成员_954D0135)

.子程序 取指针, 整数型, 公开, 取位图数据BITMAPINFO指针,失败返回0
    返回 (lstrcpyn_字节集 (位图数据, 位图数据, 0))

.子程序 取颜色点阵地址, 整数型, 公开, 取颜色点阵地址,失败返回0
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    返回 (lstrcpyn_字节集 (位图数据, 位图数据, 0) ＋ 40 ＋ 取颜色表大小 ())

.子程序 取颜色点阵大小, 整数型, 公开, 取颜色点阵大小,失败返回0
    .局部变量 变量_739A0125, 整数型

    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    变量_739A0125 ＝ 取行字节数 ()
    返回 (取高度 () × 取行字节数 ())

.子程序 取颜色表指针, 整数型, 公开, 取颜色表指针,失败返回0,大于256色的位图不使用颜色表
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    .如果真 (取位深度 () ≥ 16)
        返回 (0)
    .如果真结束
    返回 (lstrcpyn_字节集 (位图数据, 位图数据, 0) ＋ 40)

.子程序 取颜色表大小, 整数型, 公开, 取颜色表大小,失败返回0
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    返回 (取颜色表颜色个数 (取字节集左边 (位图数据, 40)) × 4)

.子程序 取颜色表颜色个数, 整数型
    .参数 变量_749A0125, 字节集
    .局部变量 变量_759A0125, 短整数型

    变量_759A0125 ＝ 取字节集数据 (取字节集中间 (变量_749A0125, 15, 2), #短整数型, )
    .判断开始 (变量_759A0125 ＝ 1)
        返回 (2)
    .判断 (变量_759A0125 ＝ 4)
        返回 (16)
    .判断 (变量_759A0125 ＝ 8)
        返回 (256)
    .默认
        .如果真 (变量_759A0125 ＝ 16 或 变量_759A0125 ＝ 24 或 变量_759A0125 ＝ 32)
            返回 (0)
        .如果真结束
        
    .判断结束
    返回 (0)

.子程序 取行字节数, 整数型, 公开, 取得位图颜色数据一行的字节数
    .如果真 (位图数据 ＝ { })
        返回 (0)
    .如果真结束
    返回 (扫描行对齐 (取字节集数据 (取字节集中间 (位图数据, 5, 4), #整数型, ) × 取字节集数据 (取字节集中间 (位图数据, 13, 2), #整数型, ) × 取字节集数据 (取字节集中间 (位图数据, 15, 2), #整数型, )))
    

.子程序 扫描行对齐, 整数型
    .参数 变量_769A0125, 整数型

    变量_769A0125 ＝ 变量_769A0125 ＋ 31
    返回 (左移 (右移 (变量_769A0125, 5), 2))

.子程序 位图信息头转字节集, 字节集
    .参数 变量_779A0125, 自定义_7B4D0141
    .局部变量 变量_789A0125, 字节集

    变量_789A0125 ＝ 到字节集 (变量_779A0125.成员_804D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_814D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_824D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_834D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_844D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_854D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_864D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_874D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_884D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_894D0135)
    变量_789A0125 ＝ 变量_789A0125 ＋ 到字节集 (变量_779A0125.成员_8A4D0135)
    
    返回 (变量_789A0125)

.子程序 位图文件头转字节集, 字节集
    .参数 变量_799A0125, 自定义_7C4D0141
    .局部变量 变量_7A9A0125, 字节集

    变量_7A9A0125 ＝ 到字节集 (变量_799A0125.成员_8B4D0135)
    
    变量_7A9A0125 ＝ 变量_7A9A0125 ＋ 到字节集 (变量_799A0125.成员_8C4D0135)
    
    变量_7A9A0125 ＝ 变量_7A9A0125 ＋ 到字节集 (变量_799A0125.成员_8D4D0135)
    
    变量_7A9A0125 ＝ 变量_7A9A0125 ＋ 到字节集 (变量_799A0125.成员_8E4D0135)
    变量_7A9A0125 ＝ 变量_7A9A0125 ＋ 到字节集 (变量_799A0125.成员_8F4D0135)
    返回 (变量_7A9A0125)

.子程序 取出位图数据, 字节集, 公开, 返回位图文件数据(写到文件后就是.BMP图片)
    .如果真 (场景被更新)
        RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
        场景被更新 ＝ 假
    .如果真结束
    返回 (到字节集 (到短整数 (19778)) ＋ 到字节集 (到整数 (取字节集长度 (位图数据) ＋ 14)) ＋ { 0, 0 } ＋ { 0, 0 } ＋ 到字节集 (到整数 (54 ＋ 取颜色表大小 ())) ＋ 位图数据)
    

.子程序 取出颜色数据, 字节集, 公开, 不含文件头的颜色部分的数据
    .如果真 (场景被更新)
        RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
        场景被更新 ＝ 假
    .如果真结束
    返回 (取字节集右边 (位图数据, 取颜色点阵大小 ()))

.子程序 取某点颜色, 整数型, 公开, 取得位图中某点颜色值(成功返回十进制颜色值,失败返回-1)
    .参数 横坐标, 整数型
    .参数 纵坐标, 整数型

    .如果真 (场景被更新)
        RtlMoveMemory (取颜色点阵地址 (), 位图指针, 取颜色点阵大小 ())
        场景被更新 ＝ 假
    .如果真结束
    返回 (GetPixel (场景句柄, 横坐标, 纵坐标))

.子程序 置某点颜色, 逻辑型, 公开, 设置位图中某点颜色值(成功返回真,失败返回假)
    .参数 横坐标, 整数型
    .参数 纵坐标, 整数型
    .参数 颜色值, 整数型, , 十进制RGB颜色值

    场景被更新 ＝ SetPixelV (场景句柄, 横坐标, 纵坐标, 颜色值) ≠ 0
    返回 (场景被更新)

.子程序 置剪辑板位图, 逻辑型, 公开, 将指定位图存放到当前Windows系统剪辑板中,剪辑板中的原有内容被覆盖(成功返回真,失败返回假)
    .局部变量 变量_809A0125, 整数型
    .局部变量 变量_819A0125, 整数型
    .局部变量 变量_829A0125, 整数型
    .局部变量 变量_839A0125, 整数型
    .局部变量 变量_849A0125, 自定义_7D4D0141

    GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_849A0125)
    变量_819A0125 ＝ CreateCompatibleDC (0)
    变量_829A0125 ＝ CreateCompatibleBitmap (屏幕设备句柄, 变量_849A0125.成员_914D0135, 变量_849A0125.成员_924D0135)
    变量_839A0125 ＝ SelectObject (变量_819A0125, 变量_829A0125)
    BitBlt (变量_819A0125, 0, 0, 变量_849A0125.成员_914D0135, 变量_849A0125.成员_924D0135, 场景句柄, 0, 0, #SRCCOPY)
    SelectObject (变量_819A0125, 变量_839A0125)
    DeleteDC (变量_819A0125)
    OpenClipboard (0)
    EmptyClipboard ()
    变量_809A0125 ＝ SetClipboardData (#CF_BITMAP, 变量_829A0125)
    CloseClipboard ()
    返回 (变量_809A0125 ≠ 0)

.子程序 置窗口位图, 逻辑型, 公开, 将位图画入指定窗口中(成功返回真,失败返回假)
    .参数 窗口句柄, 整数型
    .局部变量 变量_869A0125, 自定义_71960141
    .局部变量 变量_879A0125, 字节集
    .局部变量 变量_889A0125, 自定义_7D4D0141
    .局部变量 变量_899A0125, 整数型

    .如果真 (GetObjectA (位图句柄, 5 × 4 ＋ 2 ＋ 2, 变量_889A0125) ＝ 0)
        返回 (假)
    .如果真结束
    变量_869A0125.成员_76960135 ＝ 变量_889A0125.成员_954D0135
    变量_869A0125.成员_77960135 ＝ 0
    变量_869A0125.成员_75960135 ＝ 1
    变量_869A0125.成员_72960135 ＝ 40
    变量_869A0125.成员_73960135 ＝ 变量_889A0125.成员_914D0135
    变量_869A0125.成员_74960135 ＝ 变量_889A0125.成员_924D0135
    变量_879A0125 ＝ 取空白字节集 (变量_869A0125.成员_73960135 × 变量_869A0125.成员_74960135 × 4)
    GetDIBits3 (场景句柄, 位图句柄, 0, 变量_869A0125.成员_74960135, 变量_879A0125 [1], 变量_869A0125, 0)
    变量_899A0125 ＝ GetDC (窗口句柄)
    SetDIBitsToDevice (变量_899A0125, 0, 0, 变量_869A0125.成员_73960135, 变量_869A0125.成员_74960135, 0, 0, 0, 变量_869A0125.成员_74960135, 变量_879A0125 [1], 变量_869A0125, 0)
    DeleteDC (变量_899A0125)
    返回 (真)
    

