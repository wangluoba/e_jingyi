.版本 2

.程序集 类_HOOK_EX, , 公开
.程序集变量 集_回调地址, 整数型
.程序集变量 集_回调指针, 整数型
.程序集变量 集_回调指针ex, 整数型
.程序集变量 集_原代码, 字节集
.程序集变量 集_原长度, 整数型

.子程序 _初始化
    

.子程序 _销毁
    卸载 ()

.子程序 安装, 逻辑型, 公开, 将某个地址指向某个新地址，俗称hook。如果hook api 新地址参数必须全部为指针型(即整数型)，否则会有不可预知的错误。    如hook指令(即任意位置，非函数。此情况注意新地址取真实地址，否则状态可能被更改，和堆栈平衡。)，请勿使用静态回调功能。    开启回调：调用方法 回调() 或 回调ex() 即可全静态回调原函数，无需频繁安装与卸载，减少资源浪费CPU消耗。
    .参数 参_源地址, 整数型
    .参数 参_新地址, 整数型
    .参数 参_关闭回调, 逻辑型, 可空, 默认为假，开启静态回调 【非hook函数头部请勿开启。。用于不需要频繁安装与卸载的情况下，如果需要频繁安装与卸载，请关闭。】如果开启可使用方法 回调() 或者 回调ex()  直接回调
    .局部变量 变量_B7C60225, 字节集
    .局部变量 变量_B8C60225, 字节集
    .局部变量 变量_B9C60225, 字节集
    .局部变量 变量_BAC60225, 整数型
    .局部变量 变量_BBC60225, 字节集
    .局部变量 变量_BCC60225, 字节集
    .局部变量 变量_BDC60225, 整数型
    .局部变量 变量_BEC60225, 字节集
    .局部变量 变量_BFC60225, 字节集
    .局部变量 变量_C0C60225, 整数型
    .局部变量 变量_C1C60225, 字节集
    .局部变量 变量_C2C60225, 字节集
    .局部变量 变量_C3C60225, 字节集
    .局部变量 变量_C4C60225, 字节集
    .局部变量 变量_C5C60225, 字节集
    .局部变量 变量_C6C60225, 字节集
    .局部变量 变量_C7C60225, 字节集

    .如果真 (集_回调地址 ＞ 0)
        返回 (假)
    .如果真结束
    变量_BBC60225 ＝ { 104 } ＋ 到字节集 (参_新地址) ＋ { 195 }
    变量_B9C60225 ＝ 指针到字节集 (参_源地址, 12)
    .如果真 (参_关闭回调)
        集_原长度 ＝ 6
        集_回调地址 ＝ 参_源地址 ＋ 6
        集_原代码 ＝ 取字节集左边 (变量_B9C60225, 6)
        返回 (内存_修改内存 (参_源地址, 变量_BBC60225, 6))
    .如果真结束
    变量_BAC60225 ＝ 内存_取指令对其长度 (6, 变量_B9C60225)
    .如果真 (变量_BAC60225 ＜ 6)
        返回 (假)
    .如果真结束
    变量_B8C60225 ＝ 取字节集左边 (变量_B9C60225, 变量_BAC60225)
    变量_B8C60225 ＝ 内存_跳转偏移处理 (变量_B8C60225, 参_源地址)
    集_原长度 ＝ 变量_BAC60225
    集_回调地址 ＝ 参_源地址 ＋ 变量_BAC60225
    集_原代码 ＝ 变量_B8C60225
    变量_B7C60225 ＝ { 97, 201, 201 } ＋ 变量_B8C60225 ＋ { 104 } ＋ 到字节集 (集_回调地址) ＋ { 195 }
    集_回调指针 ＝ 内存_拷贝字节集 (变量_B7C60225)
    集_回调指针ex ＝ 内存_拷贝字节集 (取空白字节集 (1024))
    变量_BDC60225 ＝ 程序_取参数个数 (参_新地址)
    .判断开始 (变量_BDC60225 ＞ 0)
        变量_BCC60225 ＝ { 97, 201 }
        变量_C1C60225 ＝ { 129, 236 } ＋ 到字节集 (到整数 (变量_BDC60225 × 4))
        变量_C2C60225 ＝ { 81, 87, 86 }
        变量_C3C60225 ＝ { 199, 193 } ＋ 到字节集 (变量_BDC60225)
        变量_C4C60225 ＝ { 141, 188, 36, 12, 0, 0, 0 }
        变量_C5C60225 ＝ { 141, 181, 8, 0, 0, 0, 243, 165, 94, 95, 89 }
        变量_C6C60225 ＝ { 104 } ＋ 到字节集 (到整数 (集_回调指针ex ＋ 512))
        变量_B7C60225 ＝ 变量_BCC60225 ＋ 变量_C1C60225 ＋ 变量_C2C60225 ＋ 变量_C3C60225 ＋ 变量_C4C60225 ＋ 变量_C5C60225 ＋ 变量_C6C60225 ＋ 变量_B8C60225 ＋ { 104 } ＋ 到字节集 (集_回调地址) ＋ { 195 }
        内存_写到内存 (集_回调指针ex, 取指针_字节集型 (变量_B7C60225), 取字节集长度 (变量_B7C60225))
        
        变量_C4C60225 ＝ { 141, 180, 36, 12, 0, 0, 0 }
        变量_C5C60225 ＝ { 141, 189, 8, 0, 0, 0, 243, 165, 94, 95, 89 }
        变量_C7C60225 ＝ { 129, 196 } ＋ 到字节集 (到整数 (变量_BDC60225 × 4)) ＋ { 194, 4, 0 }
        变量_B7C60225 ＝ 变量_C1C60225 ＋ 变量_C2C60225 ＋ 变量_C3C60225 ＋ 变量_C4C60225 ＋ 变量_C5C60225 ＋ 变量_C7C60225
        内存_写到内存 (集_回调指针ex ＋ 512, 取指针_字节集型 (变量_B7C60225), 取字节集长度 (变量_B7C60225))
    .默认
        变量_BCC60225 ＝ { 97, 201 }
        变量_C6C60225 ＝ { 104 } ＋ 到字节集 (到整数 (集_回调指针ex ＋ 512))
        变量_B7C60225 ＝ 变量_BCC60225 ＋ 变量_C6C60225 ＋ 变量_B8C60225 ＋ { 104 } ＋ 到字节集 (集_回调地址) ＋ { 195 }
        内存_写到内存 (集_回调指针ex, 取指针_字节集型 (变量_B7C60225), 取字节集长度 (变量_B7C60225))
        
        变量_B7C60225 ＝ { 194, 4, 0 }
        内存_写到内存 (集_回调指针ex ＋ 512, 取指针_字节集型 (变量_B7C60225), 取字节集长度 (变量_B7C60225))
    .判断结束
    返回 (内存_修改内存 (参_源地址, 变量_BBC60225, 6))
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

.子程序 卸载, , 公开, 对象被销毁前自动调用,无特殊情况无需使用。
    .如果真 (集_回调地址 ＞ 0)
        内存_修改内存 (集_回调地址 － 集_原长度, 集_原代码, 6)
        集_回调地址 ＝ 0
        集_回调指针 ＝ 0
        集_原代码 ＝ { }
        集_原长度 ＝ 0
    .如果真结束
    

.子程序 回调, , 公开, 【静态回掉，需在安装时开启了回调功能。仅适用于函数hook】使用该方法后 将忽略该调用该方法处往后的一切代码 包括返回值。  如果对返回值和参数有要求可使用 回调ex()
    置入代码 ({ 96 })
    到整数 (集_回调指针)
    置入代码 ({ 80, 195 })

.子程序 回调ex, 整数型, 公开, 【静态回调，需在安装时开启了回调功能。仅适用于函数hook】使用该方法后，返回值为原函数返回值，如原函数返回的非整数型，那么此返回值可能是一个指针。如原函数会改动参数，那么改动后的参数便是函数内的参数，直接读取即可。 如果对返回值和参数无要求可使用 回调()
    置入代码 ({ 96 })
    到整数 (集_回调指针ex)
    置入代码 ({ 80, 195 })
    返回 (0)
    

.子程序 取原代码, 字节集, 公开, 返回原始代码。
    返回 (集_原代码)
    

