.版本 2

.程序集 集_组件
.程序集变量 类变量_3EB70215, 整数型

.子程序 画板_去背景色, , 公开, 去掉画板的背景，只留图片[精易]
    .参数 画板, 画板, , 要去背景的画板
    .参数 透明色, 整数型, , 透明度为1-100,如果画板上的图片背景为白色时，直接填入 #白色 ，可以连图片的白色背景也去掉
    .局部变量 变量_71030125, 字节集
    .局部变量 变量_72030125, 字节集
    .局部变量 变量_73030125, 整数型
    .局部变量 变量_74030125, 整数型
    .局部变量 变量_75030125, 字节集
    .局部变量 变量_76030125, 字节集
    .局部变量 变量_77030125, 字节集

    变量_72030125 ＝ 画板.取图片 (, )
    .如果 (-16777216 ＝ 画板.画板背景色)
        变量_76030125 ＝ 取字节集左边 (到字节集 (15526360), 3)
    .否则
        变量_76030125 ＝ 取字节集左边 (到字节集 (画板.画板背景色), 3)
    .如果结束
    画板.可视 ＝ 假
    变量_71030125 ＝ 快照 (画板.取窗口句柄 (), , )
    变量_73030125 ＝ (取字节集长度 (变量_72030125) － 54) ÷ 3
    变量_75030125 ＝ 取字节集左边 (到字节集 (透明色), 3)
    .计次循环首 (变量_73030125, 变量_74030125)
        变量_77030125 ＝ 取字节集中间 (变量_72030125, 55 ＋ 变量_74030125 × 3 － 3, 3)
        .如果真 (变量_77030125 ＝ 变量_75030125 或 变量_77030125 ＝ 变量_76030125)
            变量_72030125 [55 ＋ 变量_74030125 × 3 － 3] ＝ 变量_71030125 [55 ＋ 变量_74030125 × 3 － 3]
            变量_72030125 [55 ＋ 变量_74030125 × 3 － 3 ＋ 1] ＝ 变量_71030125 [55 ＋ 变量_74030125 × 3 － 3 ＋ 1]
            变量_72030125 [55 ＋ 变量_74030125 × 3 － 3 ＋ 2] ＝ 变量_71030125 [55 ＋ 变量_74030125 × 3 － 3 ＋ 2]
        .如果真结束
        
    .计次循环尾 ()
    画板.底图 ＝ 变量_72030125
    画板.可视 ＝ 真

.子程序 外部滚动条_显示隐藏, 逻辑型, 公开, 成功返回真；失败返回假
    .参数 窗口句柄, 整数型, , 要操作滚动条的控件句柄
    .参数 滚动条标识, 整数型, , 0 = 横向滚动条； 1 = 纵向滚动条； 3 = 横纵向滚动条；
    .参数 显示隐藏, 逻辑型, , 真 = 显示；假 = 隐藏

    返回 (ShowScrollBar (窗口句柄, 滚动条标识, 显示隐藏))

.子程序 时钟_创建, 整数型, 公开, 创建一个计时器; 成功返回非0整数标识符, 可以将此值传递给 时钟_销毁 来销毁计时器
    .参数 窗口句柄, 整数型, 可空, 要与计时器关联的窗口的句柄
    .参数 时钟标识, 整数型, 可空, 非零计时器标识符; 如果窗口句柄无效, 则忽略该参数
    .参数 时钟周期, 整数型, , 时钟周期; 以毫秒为单位
    .参数 时钟_周期事件, 子程序指针, , 周期事件

    返回 (SetTimer (窗口句柄, 时钟标识, 时钟周期, 到整数 (时钟_周期事件)))

.子程序 时钟_销毁, 逻辑型, 公开, 销毁一个时钟；成功返回真，失败返回假；
    .参数 窗口句柄, 整数型, 可空, 要与计时器关联的窗口的句柄
    .参数 时钟标识, 整数型, , 创建时用的时钟标识

    返回 (KillTimer (窗口句柄, 时钟标识))

.子程序 进度条_改颜色, , 公开
    .参数 进度条句柄, 整数型
    .参数 颜色, 整数型

    SendMessageA (进度条句柄, 1033, 1, 颜色)

.子程序 进度条_模拟, , 公开, 画板高度调个20就行了。宽度自己看着调
    .参数 画板, 画板
    .参数 最大位置, 整数型
    .参数 当前位置, 整数型
    .参数 进度条颜色, 整数型, 可空, 可人，默认为红色；比如 生命值 一般都用红色，真气值一般都用蓝色
    .参数 提示文本, 文本型, 可空, 比如 生命值 或者 真气值
    .参数 输出百分比, 整数型, 参考 可空, 用一个变量来接收百分比;不用的话可以留空；
    .参数 是否显示百分比, 逻辑型, 可空, 是否显示百分比；如 80%
    .局部变量 变量_390F0125, 双精度小数型
    .局部变量 变量_3A0F0125, 双精度小数型

    .如果真 (是否为空 (进度条颜色))
        进度条颜色 ＝ #红色
    .如果真结束
    画板.清除 (, , , )
    画板.自动重画 ＝ 真
    画板.刷子颜色 ＝ 进度条颜色
    变量_390F0125 ＝ 到数值 (当前位置 ÷ 最大位置) × 画板.宽度
    画板.填充矩形 (画板.画笔粗细, 画板.高度, 变量_390F0125, 画板.高度 ÷ 100)
    .如果真 (是否显示百分比)
        画板.定位写出 (画板.宽度 ÷ 2 － 40, 到数值 (4), 提示文本 ＋ 到文本 (当前位置) ＋ “ / ” ＋ 到文本 (最大位置) ＋ “  ” ＋ 到文本 (取整 (当前位置 ÷ 最大位置 × 100)) ＋ “%”)
    .如果真结束
    输出百分比 ＝ 取整 (当前位置 ÷ 最大位置 × 100)

.子程序 进度条_模拟S, , 公开, 画板高度调个20就行了。宽度自己看着调,源码由【yangyitzzg】提供
    .参数 画板, 画板
    .参数 最大位置, 整数型
    .参数 当前位置, 整数型
    .参数 进度条颜色, 整数型, 可空, 可人，默认为红色；比如 生命值 一般都用红色，真气值一般都用蓝色
    .参数 提示文本, 文本型, 可空, 比如 生命值 或者 真气值。留空不显示。和[是否显示百分比]二选一
    .参数 提示文本位置, 整数型, 可空, 默认:画板.宽度 ÷ 2 － 40
    .参数 输出百分比, 整数型, 参考 可空, 用一个变量来接收百分比;不用的话可以留空；
    .参数 是否显示百分比, 逻辑型, 可空, 是否显示百分比；如 80%。。留空不显示。和[提示文本]二选一
    .局部变量 变量_F87B0225, 双精度小数型
    .局部变量 变量_F97B0225, 双精度小数型

    .如果真 (是否为空 (进度条颜色))
        进度条颜色 ＝ #红色
    .如果真结束
    画板.清除 (, , , )
    画板.自动重画 ＝ 真
    画板.刷子颜色 ＝ 进度条颜色
    变量_F87B0225 ＝ 到数值 (当前位置 ÷ 最大位置) × 画板.宽度
    画板.填充矩形 (画板.画笔粗细, 画板.高度, 变量_F87B0225, 画板.高度 ÷ 100)
    .如果真 (是否为空 (提示文本位置))
        提示文本位置 ＝ 画板.宽度 ÷ 2 － 40
    .如果真结束
    .判断开始 (取反 (是否为空 (提示文本)))
        画板.定位写出 (提示文本位置, 到数值 (4), 提示文本)
    .判断 (是否显示百分比)
        画板.定位写出 (提示文本位置, 到数值 (4), 到文本 (当前位置) ＋ “ / ” ＋ 到文本 (最大位置) ＋ “  ” ＋ 到文本 (取整 (当前位置 ÷ 最大位置 × 100)) ＋ “%”)
    .默认
        
    .判断结束
    输出百分比 ＝ 取整 (当前位置 ÷ 最大位置 × 100)

.子程序 进度条_滚动, 整数型, 公开, 设置成功返回1，失败返回0。需要使用Windows通用组件库。
    .参数 进度条句柄, 整数型
    .参数 滚动速度, 整数型, 可空, 滚动速度默认为30，0为停止滚动。数值越大速度越慢，称之为滚动延迟应该是比较合适的。
    .局部变量 变量_79D40225, 整数型
    .局部变量 变量_7AD40225, 整数型

    
    变量_79D40225 ＝ GetWindowLongA (进度条句柄, #GWL_STYLE)
    .如果真 (位与 (变量_79D40225, #<?未知本地类型?>) ≠ #<?未知本地类型?>)
        变量_79D40225 ＝ 位异或 (变量_79D40225, #<?未知本地类型?>)
    .如果真结束
    SetWindowLongA (进度条句柄, #GWL_STYLE, 变量_79D40225)
    
    .判断开始 (是否为空 (滚动速度))
        变量_7AD40225 ＝ 30
    .默认
        变量_7AD40225 ＝ 滚动速度
    .判断结束
    
    .判断开始 (变量_7AD40225 ＞ 0)
        返回 (SendMessageA (进度条句柄, #<?未知本地类型?>, 1, 变量_7AD40225))
    .默认
        返回 (SendMessageA (进度条句柄, #<?未知本地类型?>, 0, 0))
    .判断结束
    

.子程序 外部列表框_清空, , 公开, 清空列表框
    .参数 句柄, 整数型, , 列表框句柄

    SendMessageA (句柄, 388, 0, 0)

.子程序 外部列表框_取项目数, 整数型, 公开, 取列表框总项目数
    .参数 句柄, 整数型, , 列表框句柄

    返回 (SendMessageA (句柄, 395, 0, 0))

.子程序 外部列表框_加入项目, , 公开, 添加新项目
    .参数 句柄, 整数型, , 列表框句柄
    .参数 项目文本, 文本型, , 要添加的项目文本

    SendMessageA (句柄, 385, -1, 取指针文本_ (项目文本))

.子程序 外部列表框_插入项目, , 公开, 插入新项目
    .参数 句柄, 整数型
    .参数 项目索引, 整数型, , 0表示第一项
    .参数 项目文本, 文本型, , 要插入的项目文本

    SendMessageA (句柄, 385, 项目索引, 取指针文本_ (项目文本))

.子程序 外部列表框_删除项目, , 公开, 删除指定项目
    .参数 句柄, 整数型, , 列表框句柄
    .参数 项目索引, 整数型, , 0表示第一项

    SendMessageA (句柄, 386, 项目索引, 0)

.子程序 外部列表框_取选中项, 整数型, 公开, 取列表框现行选中项
    .参数 句柄, 整数型, , 列表框句柄

    返回 (SendMessageA (句柄, 392, 0, 0))

.子程序 外部列表框_置选中项, , 公开, 置列表框现行选中项
    .参数 句柄, 整数型, , 列表框句柄
    .参数 项目索引, 整数型, , 0表示第一项

    SendMessageA (句柄, 390, 项目索引, 0)

.子程序 外部列表框_取项目文本, 文本型, 公开, 取列表框指定项的项目文本
    .参数 列表框句柄, 整数型, , 列表框句柄
    .参数 项目索引, 整数型, , 0表示第一项
    .局部变量 变量_EB0A0125, 文本型

    变量_EB0A0125 ＝ 取空白文本 (SendMessageA (列表框句柄, 394, 项目索引, 0))
    SendMessageA (列表框句柄, 393, 项目索引, 取指针文本_ (变量_EB0A0125))
    返回 (变量_EB0A0125)

.子程序 外部列表框_保存数据, 逻辑型, 公开, 如果要读入的话, 直接 列表框.列表项目 = 读入文件("文件名") 即可
    .参数 列表框句柄, 整数型, , 列表框句柄
    .参数 要保存的位置, 文本型, , 如: C:\001.lbb 即可
    .局部变量 变量_C5720125, 整数型
    .局部变量 变量_D9720125, 整数型
    .局部变量 变量_CA720125, 字节集
    .局部变量 变量_CD720125, 整数型
    .局部变量 变量_CF720125, 文本型

    变量_CD720125 ＝ 打开内存文件 ()
    变量_D9720125 ＝ 外部列表框_取项目数 (列表框句柄)
    插入字节集 (变量_CD720125, 到字节集 (到字节 (变量_D9720125)) ＋ { 0 })
    .计次循环首 (变量_D9720125, 变量_C5720125)
        变量_CF720125 ＝ 外部列表框_取项目文本 (列表框句柄, 变量_C5720125 － 1)
        插入字节集 (变量_CD720125, 到字节集 (取文本长度 (变量_CF720125)) ＋ 到字节集 (变量_CF720125))
    .计次循环尾 ()
    移动读写位置 (变量_CD720125, #文件首, 0)
    变量_CA720125 ＝ 读入字节集 (变量_CD720125, 取文件长度 (变量_CD720125))
    .如果 (写到文件 (要保存的位置, 变量_CA720125))
        关闭文件 (变量_CD720125)
        返回 (真)
    .否则
        关闭文件 (变量_CD720125)
    .如果结束
    返回 (假)

.子程序 外部列表框_取项目数值, 整数型, 公开, 取得指定项目数值
    .参数 句柄, 整数型, , 列表框句柄
    .参数 项目索引, 整数型, , 0表示第一项

    返回 (SendMessageA (句柄, 409, 项目索引, 0))

.子程序 外部列表框_鼠标坐标取项目索引, 整数型, 公开, 鼠标坐标位置的项目索引,一般放在列表框 鼠标位置被移动 事件里,成功返回列表框的项目索引，失败返回-1
    .参数 列表框窗口句柄, 整数型
    .局部变量 变量_554E0125, 精易_坐标

    变量_554E0125 ＝ 鼠标_取位置 ()
    返回 (LBItemFromPt (列表框窗口句柄, 变量_554E0125.横, 变量_554E0125.纵, 真))

.子程序 外部列表框_置项目数值, , 公开, 置指定项目数值
    .参数 句柄, 整数型, , 列表框句柄
    .参数 项目索引, 整数型
    .参数 项目数值, 整数型

    SendMessageA (句柄, 410, 项目索引, 项目数值)

.子程序 列表框_读入配置文件, , 公开, 读入文件到列表框里，该文件要用<列表框_保存文本>命令保存的格式！<该命令一般都与“列表框_保存为配置文件”成双使用！>
    .参数 要读的文件名, 文本型, , 文件全路径
    .参数 列表框, 列表框, , 列表框
    .参数 是否读取前后缀, 逻辑型, 可空, 默认为假，将读取前后缀！
    .参数 前缀文本, 文本型, 可空, 要读取的《前缀文本》,“是否读取前后缀”为真时本参数才有效！
    .参数 后缀文本, 文本型, 可空, 要读取的《后缀文本》,“是否读取前后缀”为真时本参数才有效！
    .局部变量 变量_F70A0125, 文本型, , "0"
    .局部变量 变量_F80A0125, 整数型
    .局部变量 变量_F90A0125, 文本型

    变量_F70A0125 ＝ 取配置节名 (要读的文件名)
    .如果 (是否读取前后缀 ＝ 真)
        .计次循环首 (取数组成员数 (变量_F70A0125), 变量_F80A0125)
            变量_F90A0125 ＝ 取出中间文本 (读配置项 (要读的文件名, 到文本 (变量_F80A0125), 到文本 (变量_F80A0125), ), 前缀文本, 后缀文本)
            列表框.加入项目 (变量_F90A0125, )
        .计次循环尾 ()
    .否则
        
        .计次循环首 (取数组成员数 (变量_F70A0125), 变量_F80A0125)
            列表框.加入项目 (读配置项 (要读的文件名, 到文本 (变量_F80A0125), 到文本 (变量_F80A0125), ), )
        .计次循环尾 ()
    .如果结束
    

.子程序 列表框_保存为配置文件, , 公开, 将所有列表框里的文本保存到一个文件里！<该命令一般都与“列表框_读入配置文件”成双使用！>
    .参数 要保存的文件名, 文本型, , 文件全路径
    .参数 列表框, 列表框, , 列表框
    .参数 加前缀, 文本型, 可空, 在文本前面加上一段字符或汉字
    .参数 加后缀, 文本型, 可空, 在文本后面加上一段字符或汉字
    .局部变量 变量_000B0125, 整数型
    .局部变量 变量_010B0125, 整数型

    变量_010B0125 ＝ 列表框.取项目数 ()
    .如果 (变量_010B0125 ＝ 0)
        删除文件 (要保存的文件名)
        写到文件 (要保存的文件名, 到字节集 (“”))
    .否则
        删除文件 (要保存的文件名)
        .计次循环首 (变量_010B0125, 变量_000B0125)
            写配置项 (要保存的文件名, 到文本 (变量_000B0125), 到文本 (变量_000B0125), 加前缀 ＋ 列表框.取项目文本 (变量_000B0125 － 1) ＋ 加后缀)
        .计次循环尾 ()
    .如果结束
    

.子程序 外部列表框_取鼠标处项目索引, 整数型, 公开, 请把些命令放在“_列表框_鼠标位置被移动”事件下
    .参数 列表框句柄, 整数型
    .参数 横向位置, 整数型, , 把“_列表框1_鼠标位置被移动”下的“横向位置”的参数放在这里
    .参数 纵向位置, 整数型, , 把“_列表框1_鼠标位置被移动”下的“纵向位置”的参数放在这里

    返回 (发送消息整数 (列表框句柄, 425, 0, 横向位置 ＋ 纵向位置 × 65536))

.子程序 外部列表框_查找表项, 整数型, 公开, 查找匹配字符串，忽略大小写，从指定开始表项序号开始查找，当查到某表项的文本字符串的前面包括指定的字符串则结束，找不到则转到列表框第一项继续查找，直到查完所有表项，如果起始查找位置为-1则从列表框第一项开始查找，如果找到则返回表项序号，否则返回 -1 。
    .参数 列表框句柄, 整数型
    .参数 标题, 文本型, , 本参数指定欲查找表项的标题文本。
    .参数 起始查找位置, 整数型, 可空, 本参数指定查找表项的起始位置。如果本参数被省略，默认值为 -1 ，即从首项开始查找。
    .参数 是否精确匹配, 逻辑型, 可空, 本参数指定匹配标题文本时是否为精确匹配，如果本参数为假，则只要表项标题首部包含指定文本即认为匹配成功。如果本参数被省略，默认值为真。
    .局部变量 变量_F3D50225, 整数型
    .局部变量 变量_F4D50225, 整数型

    .如果真 (是否为空 (起始查找位置))
        起始查找位置 ＝ -1
    .如果真结束
    .如果真 (是否为空 (是否精确匹配))
        是否精确匹配 ＝ 真
    .如果真结束
    变量_F3D50225 ＝ 选择 (是否精确匹配, #<?未知本地类型?>, #<?未知本地类型?>)
    变量_F4D50225 ＝ SendMessageA (列表框句柄, 变量_F3D50225, 起始查找位置, 取指针文本_ (标题))
    返回 (变量_F4D50225)

.子程序 取出中间文本, 文本型
    .参数 变量_030B0125, 文本型
    .参数 变量_040B0125, 文本型
    .参数 变量_050B0125, 文本型
    .局部变量 变量_060B0125, 整数型
    .局部变量 变量_070B0125, 整数型
    .局部变量 变量_080B0125, 整数型
    .局部变量 变量_090B0125, 文本型
    .局部变量 变量_0A0B0125, 文本型

    .如果真 (寻找文本 (变量_030B0125, 变量_040B0125, , 真) ≠ -1)
        变量_060B0125 ＝ 寻找文本 (变量_030B0125, 变量_040B0125, , 真)
        变量_090B0125 ＝ 取文本右边 (变量_030B0125, 取文本长度 (变量_030B0125) － (变量_060B0125 ＋ 取文本长度 (变量_040B0125) － 1))
        变量_070B0125 ＝ 寻找文本 (变量_090B0125, 变量_050B0125, 1, 真)
        变量_0A0B0125 ＝ 取文本左边 (变量_090B0125, 变量_070B0125 － 1)
        返回 (变量_0A0B0125)
    .如果真结束
    返回 (变量_0A0B0125)

.子程序 外部选择列表框_清空, , 公开, 清空选择列表框
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄

    SendMessageA (选择列表框句柄, 388, 0, 0)

.子程序 外部选择列表框_选中, 逻辑型, 公开, 成功返回真,失败返回假
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 选择列表框索引, 整数型, , 选择列表框索引,从1开始

    延时 (3)
    .如果真 (发送消息整数 (选择列表框句柄, 390, 选择列表框索引 － 1, 0) ≠ -1)
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 外部选择列表框_打勾, 逻辑型, 公开, 成功返回真,失败返回假
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 选择列表框索引, 整数型, , 选择列表框索引,从1开始

    延时 (3)
    .如果真 (发送消息整数 (选择列表框句柄, 390, 选择列表框索引 － 1, 0) ≠ -1)
        键盘_消息 (选择列表框句柄, #空格键, 5, 假)
        返回 (真)
    .如果真结束
    返回 (假)

.子程序 外部选择列表框_加入项目, , 公开, 添加新项目
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 项目文本, 文本型, , 要添加的项目文本

    SendMessageA (选择列表框句柄, 385, -1, 取指针文本_ (项目文本))

.子程序 外部选择列表框_插入项目, , 公开, 插入新项目
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 项目索引, 整数型, , 选择列表框索引,从1开始
    .参数 项目文本, 文本型, , 要插入的项目文本

    SendMessageA (选择列表框句柄, 385, 项目索引, 取指针文本_ (项目文本))

.子程序 外部选择列表框_取项目数, 整数型, 公开, 取选择列表框总项目数
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄

    返回 (SendMessageA (选择列表框句柄, 395, 0, 0))

.子程序 外部选择列表框_取项目数值, 整数型, 公开, 取得指定项目数值
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 项目索引, 整数型, , 选择列表框索引,从1开始

    返回 (SendMessageA (选择列表框句柄, 409, 项目索引 － 1, 0))

.子程序 外部选择列表框_置项目数值, , 公开, 置指定项目数值
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 项目索引, 整数型, , 选择列表框索引,从1开始
    .参数 项目数值, 整数型, , 要置入的项目数值

    SendMessageA (选择列表框句柄, 410, 项目索引 － 1, 项目数值)

.子程序 外部选择列表框_取项目文本, 文本型, 公开, 取选择列表框指定项的项目文本
    .参数 选择列表框句柄, 整数型, , 选择列表框句柄
    .参数 项目索引, 整数型, , 选择列表框索引,从1开始
    .局部变量 变量_055B0125, 文本型

    变量_055B0125 ＝ 取空白文本 (SendMessageA (选择列表框句柄, 394, 项目索引 － 1, 0))
    SendMessageA (选择列表框句柄, 393, 项目索引 － 1, 取指针文本_ (变量_055B0125))
    返回 (变量_055B0125)

.子程序 子程序4
    

.子程序 外部组合框_查找, 整数型, 公开, 返回-1表示没有找到。否则将返回找到的项目索引，索引从0开始。
    .参数 参_组合框句柄, 整数型
    .参数 参数_欲查找文本, 文本型, , 可以是文本前缀，如：查找“易语言4.12”，则可以是“易语言”
    .参数 参数_起始位置, 整数型, 可空, 默认为-1:表示从第一项开始查找。索引从0开始。

    .如果真 (是否为空 (参数_起始位置))
        参数_起始位置 ＝ -1
    .如果真结束
    返回 (SendMessageA (参_组合框句柄, #CB_FINDSTRING, 参数_起始位置, 取指针文本_ (参数_欲查找文本)))

.子程序 外部组合框_精确查找, 整数型, 公开, 本命令与查找相比，必须文本完全匹配才能找到项目。成功返回项目索引，失败返回-1。
    .参数 参_组合框句柄, 整数型
    .参数 参数_欲查找文本, 文本型, , 必须全字匹配
    .参数 参数_起始位置, 整数型, 可空, 默认为-1:表示从第一项开始查找。索引从0开始。

    .如果真 (是否为空 (参数_起始位置))
        参数_起始位置 ＝ -1
    .如果真结束
    返回 (SendMessageA (参_组合框句柄, #CB_FINDSTRINGEXACT, 参数_起始位置, 取指针文本_ (参数_欲查找文本)))

.子程序 外部组合框_向上展开列表, , 公开
    .参数 参_窗口句柄, 整数型

    类变量_3EB70215 ＝ SetWindowLongA (参_窗口句柄, #GWL_WNDPROC, 到整数 (&消息处理))
    外部组合框_弹开列表 (参_窗口句柄)
    SetWindowLongA (参_窗口句柄, #GWL_WNDPROC, 类变量_3EB70215)

.子程序 消息处理, 整数型
    .参数 变量_7AA70225, 整数型
    .参数 变量_7BA70225, 整数型
    .参数 变量_7CA70225, 整数型
    .参数 变量_7DA70225, 整数型
    .局部变量 变量_7EA70225, 精易_矩形
    .局部变量 变量_7FA70225, 精易_矩形
    .局部变量 变量_80A70225, 整数型

    .如果真 (变量_7BA70225 ＝ 308)
        GetWindowRect (变量_7DA70225, 变量_7EA70225)
        GetWindowRect (变量_7AA70225, 变量_7FA70225)
        SetWindowPos (变量_7DA70225, 0, 变量_7EA70225.左边, 变量_7FA70225.顶边 － (变量_7EA70225.底边 － 变量_7EA70225.顶边), 变量_7EA70225.右边 － 变量_7EA70225.左边, 变量_7EA70225.底边 － 变量_7EA70225.顶边, 0)
    .如果真结束
    返回 (CallWindowProcA (类变量_3EB70215, 变量_7AA70225, 变量_7BA70225, 变量_7CA70225, 变量_7DA70225))

.子程序 外部组合框_设置下拉高度, , 公开
    .参数 窗口句柄, 整数型
    .参数 高度, 整数型

    PostMessageA (窗口句柄, #CB_SETITEMHEIGHT, 0, 高度 － 6)

.子程序 外部组合框_设置下拉宽度, , 公开
    .参数 窗口句柄, 整数型
    .参数 宽度, 整数型

    PostMessageA (窗口句柄, #CB_SETDROPPEDWIDTH, 宽度, 0)

.子程序 外部组合框_设置高度, , 公开
    .参数 窗口句柄, 整数型
    .参数 高度, 整数型

    PostMessageA (窗口句柄, #CB_SETITEMHEIGHT, -1, 高度 － 6)

.子程序 外部组合框_取高度, 整数型, 公开
    .参数 窗口句柄, 整数型

    返回 (SendMessageA (窗口句柄, #CB_GETITEMHEIGHT, -1, 0) ＋ 6)
    

.子程序 外部组合框_取下拉高度, 整数型, 公开
    .参数 窗口句柄, 整数型

    返回 (SendMessageA (窗口句柄, #CB_GETITEMHEIGHT, 0, 0) ＋ 6)

.子程序 外部组合框_取下拉宽度, 整数型, 公开
    .参数 窗口句柄, 整数型

    返回 (SendMessageA (窗口句柄, #CB_GETDROPPEDWIDTH, 0, 0))

.子程序 外部组合框_清空, , 公开, 删除组合框所有项目
    .参数 句柄, 整数型, , 组合框句柄

    SendMessageA (句柄, #CB_RESETCONTENT, 0, 0)

.子程序 外部组合框_加入项目, , 公开, 给组合框添加项目
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目文本, 文本型, , 要添加的项目外部
    .参数 重复文本是否不加入, 逻辑型, 可空, 可空，默认为假，加入。真=有重复的不加入
    .局部变量 变量_20940125, 整数型

    变量_20940125 ＝ SendMessageA (句柄, #CB_FINDSTRINGEXACT, 0, 取指针文本_ (项目文本))
    .如果真 (变量_20940125 ≠ -1 且 重复文本是否不加入)
        返回 ()
    .如果真结束
    SendMessageA (句柄, #CB_ADDSTRING, 0, 取指针文本_ (项目文本))

.子程序 外部组合框_插入项目, , 公开, 指定位置插入项目
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目索引, 整数型, , 插入位置
    .参数 项目文本, 文本型, , 要插入的项目文本

    SendMessageA (句柄, #CB_INSERTSTRING, 项目索引, 取指针文本_ (项目文本))

.子程序 外部组合框_取项目数, 整数型, 公开, 取回组合框总项目数
    .参数 句柄, 整数型, , 组合框句柄

    返回 (SendMessageA (句柄, #CB_GETCOUNT, 0, 0))

.子程序 外部组合框_取选中项, 整数型, 公开, 取回组合框现行选中项
    .参数 句柄, 整数型, , 组合框句柄

    返回 (SendMessageA (句柄, #CB_GETCURSEL, 0, 0))

.子程序 外部组合框_删除项目, , 公开, 删除指定索引项目
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目索引, 整数型, , 要删除的项目索引

    SendMessageA (句柄, #CB_DELETESTRING, 项目索引, 0)

.子程序 外部组合框_弹开列表, , 公开, 打开组合框下拉列表
    .参数 句柄, 整数型, , 组合框句柄

    SendMessageA (句柄, #CB_SHOWDROPDOWN, 1, 0)

.子程序 外部组合框_关闭列表, , 公开, 关闭组合框下拉列表
    .参数 句柄, 整数型, , 组合框句柄

    SendMessageA (句柄, #CB_SHOWDROPDOWN, 0, 0)

.子程序 外部组合框_取项目文本, 文本型, 公开, 取回组合框指定索引项目文本
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目索引, 整数型, , 项目索引，0表示第一行
    .局部变量 变量_250B0125, 文本型

    变量_250B0125 ＝ 取空白文本 (SendMessageA (句柄, #CB_GETLBTEXTLEN, 项目索引, 0))
    SendMessageA (句柄, #CB_GETLBTEXT, 项目索引, 取指针文本_ (变量_250B0125))
    返回 (变量_250B0125)

.子程序 外部组合框_取项目数值, 整数型, 公开, 取组合框指定项目数值
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目索引, 整数型, , 0表示第一项

    返回 (SendMessageA (句柄, #CB_GETITEMDATA, 项目索引, 0))

.子程序 外部组合框_置项目数值, , 公开, 置组合框指定项目数值
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目索引, 整数型, , 0表示第一项
    .参数 数值, 整数型, , 要置的项目数值

    SendMessageA (句柄, #CB_SETITEMDATA, 项目索引, 数值)

.子程序 外部组合框_置现行选中项, , 公开, 选中指定项目
    .参数 句柄, 整数型, , 组合框句柄
    .参数 项目索引, 整数型, , 0表示第一项
    .局部变量 变量_B7D40225, COMBOBOXINFO
    .局部变量 变量_BCD40225, 整数型

    SendMessageA (句柄, #CB_SETCURSEL, 项目索引, 0)
    变量_B7D40225 ＝ 外部组合框_取结构信息 (句柄)
    变量_BCD40225 ＝ 窗口_取控件ID (变量_B7D40225.hwndList)
    SendMessageA (句柄, #WM_COMMAND, 合并整数 (变量_BCD40225, #<?未知本地类型?>), 变量_B7D40225.hwndList)

.子程序 外部组合框_保存数据, 逻辑型, 公开, 如果要读入的话,直接 组合框.列表项目=读入文件(C:/001.lbb) 即可
    .参数 组合框句柄, 整数型, , 组合框句柄
    .参数 要保存的位置, 文本型, 可空, 可空  默认将保存在根目录下的data.zbb
    .局部变量 变量_89770125, 整数型
    .局部变量 变量_8A770125, 整数型
    .局部变量 变量_8B770125, 整数型
    .局部变量 变量_8C770125, 文本型
    .局部变量 变量_8D770125, 字节集

    .如果真 (是否为空 (要保存的位置))
        要保存的位置 ＝ 取运行目录 () ＋ “\data.zbb”
    .如果真结束
    变量_89770125 ＝ 打开内存文件 ()
    变量_8A770125 ＝ 外部组合框_取项目数 (组合框句柄)
    插入字节集 (变量_89770125, 到字节集 (到字节 (变量_8A770125)) ＋ { 0 })
    .计次循环首 (变量_8A770125, 变量_8B770125)
        变量_8C770125 ＝ 外部组合框_取项目文本 (组合框句柄, 变量_8B770125 － 1)
        插入字节集 (变量_89770125, 到字节集 (取文本长度 (变量_8C770125)) ＋ 到字节集 (变量_8C770125))
    .计次循环尾 ()
    移动读写位置 (变量_89770125, #文件首, 0)
    变量_8D770125 ＝ 读入字节集 (变量_89770125, 取文件长度 (变量_89770125))
    .如果 (写到文件 (要保存的位置, 变量_8D770125))
        关闭文件 (变量_89770125)
        返回 (真)
    .否则
        关闭文件 (变量_89770125)
    .如果结束
    返回 (假)

.子程序 外部组合框_取结构信息, COMBOBOXINFO, 公开, 返回组合框的结构信息
    .参数 组合框句柄, 整数型
    .局部变量 变量_B0D40225, COMBOBOXINFO

    变量_B0D40225.cbSize ＝ 4 × 13
    GetComboBoxInfo (组合框句柄, 变量_B0D40225)
    返回 (变量_B0D40225)

.子程序 外部组合框_置可见项的最小数, , 公开, 设置组合框下拉列表中可见项的最小数量
    .参数 窗口句柄, 整数型, , 必须勾上Windows通用组件库6.0
    .参数 可见项的最小数, 整数型

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_VISTA)
        输出调试文本 (#<?未知本地类型?>)
        返回 ()
    .如果真结束
    SendMessageA (窗口句柄, #<?未知本地类型?>, 可见项的最小数, #NULL)

.子程序 外部组合框_取可见项的最小数, 整数型, 公开, 获取组合框下拉列表中可见项的最小数目
    .参数 窗口句柄, 整数型, , 必须勾上Windows通用组件库6.0

    .如果真 (_WIN32_WINNT ＜ #_WIN32_WINNT_VISTA)
        输出调试文本 (#<?未知本地类型?>)
        返回 (0)
    .如果真结束
    返回 (SendMessageA (窗口句柄, #<?未知本地类型?>, #NULL, #NULL))

.子程序 子程序3
    

.子程序 外部超级列表框_保存数据, 逻辑型, 公开, 如果要读入的话,直接 超级列表框.表项=读入文件(C:\001.ebb) 即可
    .参数 超级列表框句柄, 整数型, , 超级列表框句柄
    .参数 要保存的位置, 文本型, , 如: C:\001.ebb 即可
    .参数 列表类型, 整数型, 可空, 默认为"报表列表框"  0=报表列表框 1=大图标列表框
    .参数 不保存指定列的索引, 整数型, 可空, 输入不保存指定列的索引,如:我不保存第1列,直接输入0,因为索引是多0开始的
    .局部变量 变量_3E6F0125, 整数型
    .局部变量 变量_3F6F0125, 字节集
    .局部变量 变量_406F0125, 整数型
    .局部变量 变量_416F0125, 整数型
    .局部变量 变量_426F0125, 整数型
    .局部变量 变量_436F0125, 外部超级列表框
    .局部变量 变量_676F0125, 文本型

    变量_436F0125.初始化 (超级列表框句柄)
    变量_426F0125 ＝ 打开内存文件 ()
    .判断开始 (列表类型 ＝ 0)
        变量_3E6F0125 ＝ 变量_436F0125.取列数 () － 1
        .计次循环首 (变量_436F0125.取表项数 (), 变量_406F0125)
            变量_676F0125 ＝ 变量_436F0125.取标题 (变量_406F0125 － 1, 0)
            插入字节集 (变量_426F0125, { 0 } ＋ 到字节集 (变量_436F0125.取图片 (变量_406F0125 － 1, 0)) ＋ { 255, 255, 255, 255, 0, 0, 0, 0 } ＋ 到字节集 (变量_436F0125.取表项数值 (变量_406F0125 － 1)) ＋ 到字节集 (变量_676F0125) ＋ { 0, 0 })
            .如果 (是否为空 (不保存指定列的索引))
                .计次循环首 (变量_3E6F0125, 变量_416F0125)
                    变量_676F0125 ＝ 变量_436F0125.取标题 (变量_406F0125 － 1, 变量_416F0125)
                    插入字节集 (变量_426F0125, { 1 } ＋ 到字节集 (变量_436F0125.取图片 (变量_406F0125 － 1, 变量_416F0125)) ＋ { 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0 } ＋ 到字节集 (变量_676F0125) ＋ { 0, 0 })
                .计次循环尾 ()
            .否则
                .计次循环首 (变量_3E6F0125, 变量_416F0125)
                    .如果 (不保存指定列的索引 ＝ 变量_416F0125)
                        变量_676F0125 ＝ “”
                    .否则
                        变量_676F0125 ＝ 变量_436F0125.取标题 (变量_406F0125 － 1, 变量_416F0125)
                    .如果结束
                    插入字节集 (变量_426F0125, { 1, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0 } ＋ 到字节集 (变量_676F0125) ＋ { 0, 0 })
                .计次循环尾 ()
            .如果结束
            
        .计次循环尾 ()
    .判断 (列表类型 ＝ 1)
        .计次循环首 (变量_436F0125.取表项数 (), 变量_406F0125)
            变量_676F0125 ＝ 变量_436F0125.取标题 (变量_406F0125 － 1, 0)
            插入字节集 (变量_426F0125, { 0 } ＋ 到字节集 (变量_436F0125.取图片 (变量_406F0125 － 1, 0)) ＋ { 255, 255, 255, 255, 0, 0, 0, 0 } ＋ 到字节集 (变量_436F0125.取表项数值 (变量_406F0125 － 1)) ＋ 到字节集 (变量_676F0125) ＋ { 0, 0 })
        .计次循环尾 ()
    .默认
        
    .判断结束
    移动读写位置 (变量_426F0125, #文件首, 0)
    变量_3F6F0125 ＝ 读入字节集 (变量_426F0125, 取文件长度 (变量_426F0125))
    .如果 (写到文件 (要保存的位置, 变量_3F6F0125))
        关闭文件 (变量_426F0125)
        返回 (真)
    .否则
        关闭文件 (变量_426F0125)
    .如果结束
    返回 (假)
    

.子程序 外部超级列表框_保存数据_NEW, 逻辑型, 公开, BUG命令已弃用,如果要读入的话,直接 超级列表框.表项=读入文件(C:\001.ebb) 即可
    .参数 超级列表框句柄, 整数型, , 超级列表框句柄
    .参数 要保存的位置, 文本型, , 如: C:\001.ebb 即可
    .参数 列表类型, 整数型, 可空, 默认为"报表列表框"  0=报表列表框 1=大图标列表框
    .参数 不保存指定列的索引, 整数型, 可空, 输入不保存指定列的索引,如:我不保存第1列,直接输入0,因为索引是多0开始的
    .局部变量 变量_5FCF0125, 整数型
    .局部变量 变量_60CF0125, 整数型
    .局部变量 变量_61CF0125, 字节集
    .局部变量 变量_62CF0125, 整数型
    .局部变量 变量_63CF0125, 整数型
    .局部变量 变量_64CF0125, 整数型
    .局部变量 变量_65CF0125, 外部超级列表框
    .局部变量 变量_66CF0125, 文本型
    .局部变量 变量_68CF0125, 整数型
    .局部变量 变量_69CF0125, 整数型

    .如果真 (变量_65CF0125.初始化 (超级列表框句柄) ＝ 假)
        输出调试文本 (“初始化超级列表框失败”)
        返回 (假)
    .如果真结束
    .如果真 (是否为空 (不保存指定列的索引))
        不保存指定列的索引 ＝ -1
    .如果真结束
    变量_64CF0125 ＝ 打开内存文件 ()
    变量_5FCF0125 ＝ 变量_65CF0125.取列数 ()
    变量_60CF0125 ＝ 变量_65CF0125.取表项数 ()
    .计次循环首 (变量_60CF0125, 变量_62CF0125)
        变量_68CF0125 ＝ 0
        .计次循环首 (变量_5FCF0125, 变量_63CF0125)
            .如果 (变量_63CF0125 － 1 ＝ 不保存指定列的索引)
                
                到循环尾 ()
            .否则
                
            .如果结束
            
            变量_66CF0125 ＝ 变量_65CF0125.取标题 (变量_62CF0125 － 1, 变量_63CF0125 － 1)
            
            .判断开始 (变量_68CF0125 ＝ 0)
                .判断开始 (变量_63CF0125 － 1 ＝ 0)
                    变量_69CF0125 ＝ 变量_65CF0125.取表项数值 (变量_62CF0125 － 1)
                    .判断开始 (变量_69CF0125 ＝ 0)
                        插入字节集 (变量_64CF0125, { 0 } ＋ 到字节集 (变量_65CF0125.取图片 (变量_62CF0125 － 1, 变量_63CF0125 － 1)) ＋ { 255, 255, 255, 255, 0, 0, 0, 0, 0, 0 } ＋ 到字节集 (变量_66CF0125) ＋ { 0, 0 })
                    .默认
                        插入字节集 (变量_64CF0125, { 0 } ＋ 到字节集 (变量_65CF0125.取图片 (变量_62CF0125 － 1, 变量_63CF0125 － 1)) ＋ { 255, 255, 255, 255, 0, 0, 0, 0 } ＋ 到字节集 (变量_69CF0125) ＋ 到字节集 (变量_66CF0125) ＋ { 0, 0 })
                    .判断结束
                    
                    
                .默认
                    插入字节集 (变量_64CF0125, { 0 } ＋ { 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0 } ＋ 到字节集 (变量_65CF0125.取表项数值 (变量_62CF0125 － 1)) ＋ 到字节集 (变量_66CF0125) ＋ { 0, 0 })
                .判断结束
                
            .默认
                插入字节集 (变量_64CF0125, { 1, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0 } ＋ 到字节集 (变量_66CF0125) ＋ { 0, 0 })
            .判断结束
            
            变量_68CF0125 ＝ 变量_68CF0125 ＋ 1
        .计次循环尾 ()
    .计次循环尾 ()
    移动读写位置 (变量_64CF0125, #文件首, 0)
    变量_61CF0125 ＝ 读入字节集 (变量_64CF0125, 取文件长度 (变量_64CF0125))
    关闭文件 (变量_64CF0125)
    写到文件 (要保存的位置, 变量_61CF0125)
    返回 (真)
    

.子程序 外部超级列表框_上下移动, 文本型, 公开, 成功返回空文本，失败返回错误提示文本
    .参数 超级列表框句柄, 整数型
    .参数 移动方向, 整数型, , 1=上移1行，2=下移1行，3=移到第一行，4=移到最后一行
    .参数 是否移动第1列, 逻辑型, 可空, 假如第1列是序号的话,可以不移动,设置为真将移动,默认为假,不移动
    .局部变量 变量_D9880125, 整数型
    .局部变量 变量_DA880125, 外部超级列表框
    .局部变量 变量_DB880125, 整数型
    .局部变量 变量_DC880125, 整数型
    .局部变量 变量_DD880125, 文本型
    .局部变量 变量_DE880125, 文本型, , "0"
    .局部变量 变量_EF880125, 整数型
    .局部变量 变量_C3930125, 逻辑型

    变量_DA880125.初始化 (超级列表框句柄, 真)
    变量_C3930125 ＝ 变量_DA880125.单一选择 ()
    变量_D9880125 ＝ 变量_DA880125.取现行选中项 ()
    .判断开始 (变量_D9880125 ＝ -1)
        窗口_置焦点 (超级列表框句柄)
        返回 (“请选中你要移动的项目”)
    .判断 (变量_D9880125 ＝ 0 且 移动方向 ＝ 1)
        返回 (“已在最顶部,无法再上移了”)
    .判断 (变量_DA880125.取表项数 () － 1 ＝ 变量_D9880125 且 移动方向 ＝ 2)
        返回 (“已在最底部,无法再下移”)
    .判断 (变量_D9880125 ＝ 0 且 移动方向 ＝ 3)
        返回 (“已在第一行,无需再移动”)
    .判断 (变量_DA880125.取表项数 () － 1 ＝ 变量_D9880125 且 移动方向 ＝ 4)
        返回 (“已在最后一行,无需再移动”)
    .默认
        
    .判断结束
    .判断开始 (移动方向 ＝ 1)
        变量_EF880125 ＝ 变量_D9880125 － 1
    .判断 (移动方向 ＝ 2)
        变量_EF880125 ＝ 变量_D9880125 ＋ 1
    .默认
        
    .判断结束
    变量_DC880125 ＝ 变量_DA880125.取列数 ()
    
    .计次循环首 (变量_DC880125, 变量_DB880125)
        加入成员 (变量_DE880125, 变量_DA880125.取标题 (变量_D9880125, 变量_DB880125 － 1))
    .计次循环尾 ()
    加入成员 (变量_DE880125, 到文本 (变量_DA880125.取表项数值 (变量_D9880125)))
    加入成员 (变量_DE880125, 到文本 (变量_DA880125.取图片 (变量_D9880125, 0)))
    .判断开始 (移动方向 ＝ 1 或 移动方向 ＝ 2)
        变量_DA880125.置现行选中项 (变量_EF880125)
        变量_DA880125.保证显示 (变量_EF880125)
        
        .计次循环首 (变量_DC880125, 变量_DB880125)
            .如果真 (是否移动第1列 ＝ 假 且 变量_DB880125 ＝ 1)
                到循环尾 ()
            .如果真结束
            变量_DA880125.置标题 (变量_D9880125, 变量_DB880125 － 1, 变量_DA880125.取标题 (变量_EF880125, 变量_DB880125 － 1))
        .计次循环尾 ()
        变量_DA880125.置表项数值 (变量_D9880125, 变量_DA880125.取表项数值 (变量_EF880125))
        变量_DA880125.置图片 (变量_D9880125, 0, 变量_DA880125.取图片 (变量_EF880125, 0))
        
        .计次循环首 (变量_DC880125, 变量_DB880125)
            .如果真 (是否移动第1列 ＝ 假 且 变量_DB880125 ＝ 1)
                到循环尾 ()
            .如果真结束
            变量_DA880125.置标题 (变量_EF880125, 变量_DB880125 － 1, 变量_DE880125 [变量_DB880125])
        .计次循环尾 ()
        .如果真 (取数组成员数 (变量_DE880125) ＝ 变量_DB880125 ＋ 1)
            变量_DA880125.置表项数值 (变量_EF880125, 到数值 (变量_DE880125 [变量_DB880125]))
            变量_DA880125.置图片 (变量_EF880125, 0, 到数值 (变量_DE880125 [变量_DB880125 ＋ 1]))
        .如果真结束
        
    .判断 (移动方向 ＝ 3 或 移动方向 ＝ 4)
        .判断开始 (移动方向 ＝ 3)
            变量_EF880125 ＝ 0
        .判断 (移动方向 ＝ 4)
            变量_EF880125 ＝ -1
        .默认
            
        .判断结束
        变量_DA880125.删除表项 (变量_D9880125)
        变量_EF880125 ＝ 变量_DA880125.插入表项 (变量_EF880125, 变量_DE880125 [1], 到数值 (变量_DE880125 [变量_DC880125 ＋ 2]), , , 到数值 (变量_DE880125 [变量_DC880125 ＋ 1]))
        变量_DA880125.置现行选中项 (变量_EF880125)
        变量_DA880125.保证显示 (变量_EF880125)
        .计次循环首 (变量_DC880125 － 1, 变量_DB880125)
            变量_DA880125.置标题 (变量_EF880125, 变量_DB880125, 变量_DE880125 [变量_DB880125 ＋ 1])
        .计次循环尾 ()
    .默认
        
    .判断结束
    变量_DA880125.单一选择 (变量_C3930125)
    返回 (“”)

.子程序 外部超级列表框_上移, , 公开
    .参数 超级列表框句柄, 整数型
    .参数 是否上移第1列, 逻辑型, 可空, 假如第1列是序号的话,可以不上移,设置为真将上移,默认为假,不上移
    .局部变量 变量_18760125, 整数型
    .局部变量 变量_19760125, 外部超级列表框
    .局部变量 变量_1A760125, 整数型
    .局部变量 变量_1B760125, 整数型
    .局部变量 变量_1C760125, 文本型
    .局部变量 变量_1D760125, 文本型, , "0"

    变量_19760125.初始化 (超级列表框句柄, 真)
    变量_18760125 ＝ 变量_19760125.取现行选中项 ()
    .如果真 (变量_18760125 ≤ 0)
        返回 ()
    .如果真结束
    变量_1B760125 ＝ 变量_19760125.取列数 ()
    变量_19760125.置现行选中项 (变量_18760125 － 1)
    
    .计次循环首 (变量_1B760125, 变量_1A760125)
        加入成员 (变量_1D760125, 变量_19760125.取标题 (变量_18760125, 变量_1A760125 － 1))
    .计次循环尾 ()
    加入成员 (变量_1D760125, 到文本 (变量_19760125.取表项数值 (变量_18760125)))
    
    .计次循环首 (变量_1B760125, 变量_1A760125)
        .如果真 (是否上移第1列 ＝ 假 且 变量_1A760125 ＝ 1)
            到循环尾 ()
        .如果真结束
        变量_19760125.置标题 (变量_18760125, 变量_1A760125 － 1, 变量_19760125.取标题 (变量_18760125 － 1, 变量_1A760125 － 1))
    .计次循环尾 ()
    
    .计次循环首 (变量_1B760125, 变量_1A760125)
        .如果真 (是否上移第1列 ＝ 假 且 变量_1A760125 ＝ 1)
            到循环尾 ()
        .如果真结束
        变量_19760125.置标题 (变量_18760125 － 1, 变量_1A760125 － 1, 变量_1D760125 [变量_1A760125])
    .计次循环尾 ()

.子程序 外部超级列表框_下移, , 公开
    .参数 超级列表框句柄, 整数型
    .参数 是否下移第1列, 逻辑型, 可空, 假如第1列是序号的话,可以不下移,设置为真将下移,默认为假,不下移
    .局部变量 变量_20760125, 整数型
    .局部变量 变量_21760125, 外部超级列表框
    .局部变量 变量_22760125, 整数型
    .局部变量 变量_23760125, 整数型
    .局部变量 变量_24760125, 文本型
    .局部变量 变量_25760125, 文本型, , "0"

    变量_21760125.初始化 (超级列表框句柄, 真)
    变量_20760125 ＝ 变量_21760125.取现行选中项 ()
    .如果真 (变量_20760125 ＝ -1 或 变量_21760125.取表项数 () － 1 ＝ 变量_20760125)
        返回 ()
    .如果真结束
    变量_23760125 ＝ 变量_21760125.取列数 ()
    变量_21760125.置现行选中项 (变量_20760125 ＋ 1)
    
    .计次循环首 (变量_23760125, 变量_22760125)
        加入成员 (变量_25760125, 变量_21760125.取标题 (变量_20760125, 变量_22760125 － 1))
    .计次循环尾 ()
    加入成员 (变量_25760125, 到文本 (变量_21760125.取表项数值 (变量_20760125)))
    
    .计次循环首 (变量_23760125, 变量_22760125)
        .如果真 (是否下移第1列 ＝ 假 且 变量_22760125 ＝ 1)
            到循环尾 ()
        .如果真结束
        变量_21760125.置标题 (变量_20760125, 变量_22760125 － 1, 变量_21760125.取标题 (变量_20760125 ＋ 1, 变量_22760125 － 1))
    .计次循环尾 ()
    
    .计次循环首 (变量_23760125, 变量_22760125)
        .如果真 (是否下移第1列 ＝ 假 且 变量_22760125 ＝ 1)
            到循环尾 ()
        .如果真结束
        变量_21760125.置标题 (变量_20760125 ＋ 1, 变量_22760125 － 1, 变量_25760125 [变量_22760125])
    .计次循环尾 ()

.子程序 外部超级列表框_自动调整列宽, , 公开
    .参数 超级列表框句柄, 整数型
    .参数 要自动调整的列索引, 整数型

    SendMessageA (超级列表框句柄, #LVM_SETCOLUMNWIDTH, 要自动调整的列索引, -1)

.子程序 外部超级列表框_取鼠标处列坐标, 精易_坐标, 公开
    .参数 超级列表框句柄, 整数型
    .参数 超级列表框行号, 整数型
    .局部变量 变量_14700125, 精易_坐标

    SendMessageA (超级列表框句柄, 4096 ＋ 16, 超级列表框行号, 取数据_通用型 (变量_14700125))
    返回 (变量_14700125)

.子程序 外部超级列表框_取鼠标处行列号, , 公开
    .参数 超级列表框句柄, 整数型
    .参数 超级列表框行号, 整数型, 参考
    .参数 超级列表框列号, 整数型, 参考
    .局部变量 变量_18700125, 表项结构信息
    .局部变量 变量_19700125, 精易_坐标

    变量_19700125 ＝ 窗口_取坐标 (超级列表框句柄)
    变量_18700125.横向 ＝ 变量_19700125.横
    变量_18700125.纵向 ＝ 变量_19700125.纵
    SendMessageA (超级列表框句柄, #LVM_SUBITEMHITTEST, 0, 取数据_通用型 (变量_18700125))
    超级列表框行号 ＝ 变量_18700125.行
    超级列表框列号 ＝ 变量_18700125.列

.子程序 子程序5
    

.子程序 外部编辑框_复制, , 公开, 通过句柄对指定编辑框进行复制操作
    .参数 编辑框句柄, 整数型
    .局部变量 变量_E4280125, 文本型

    变量_E4280125 ＝ 外部编辑框_取内容 (编辑框句柄)
    剪辑板_置文本 (变量_E4280125)

.子程序 外部编辑框_剪切, , 公开, 通过句柄对指定编辑框进行剪切操作
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .局部变量 变量_88280125, 文本型

    变量_88280125 ＝ 外部编辑框_取内容 (编辑框句柄)
    外部编辑框_置内容 (编辑框句柄, “”)
    剪辑板_置文本 (变量_88280125)

.子程序 外部编辑框_删除, , 公开, 清空编辑框里的内容
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    外部编辑框_置内容 (编辑框句柄, “”)

.子程序 外部编辑框_撤消, , 公开, 通过句柄对指定编辑框进行撤销操作
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    发送消息整数 (编辑框句柄, 199, 1, 0)

.子程序 外部编辑框_全选, , 公开, 通过句柄对指定编辑框的内容进行全选
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    窗口_置控件焦点 (编辑框句柄)
    外部编辑框_选中按位置 (编辑框句柄, 0, 取文本长度 (外部编辑框_取内容 (编辑框句柄)))

.子程序 外部编辑框_取行数, 整数型, 公开, 通过句柄取指定编辑框的总行数
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    返回 (发送消息整数 (编辑框句柄, 186, 0, 0))

.子程序 外部编辑框_滚动行, , 公开, 上下滚动编辑里面的文本
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 要滚动的行数, 整数型, , 正数向下滚动，负数向上滚动

    .如果真 (要滚动的行数 ＜ 0)
        发送消息整数 (编辑框句柄, 182, 0, 要滚动的行数)
    .如果真结束
    .如果真 (要滚动的行数 ＞ 0)
        发送消息整数 (编辑框句柄, 182, 1, 要滚动的行数)
    .如果真结束
    

.子程序 外部编辑框_置内容, , 公开, 通过句柄设置编辑框的内容
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 文本, 文本型, , 要发送的文本

    SendMessageA (编辑框句柄, 12, 0, 取指针文本_ (文本))

.子程序 外部编辑框_取内容, 文本型, 公开, 通过句柄取指定编辑框的内容
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .局部变量 变量_71280125, 文本型
    .局部变量 变量_72280125, 文本型

    返回 (窗口_取控件内容 (编辑框句柄))

.子程序 外部编辑框_置左右边距, , 公开, 通过句柄设置编辑框的左右边距
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 左边距, 整数型, , 新的距离值
    .参数 右边距, 整数型, , 新的距离值

    发送消息整数 (编辑框句柄, 211, 位或 (1, 2), 合并整数 (左边距, 右边距))

.子程序 外部编辑框_置四边距, , 公开, 设置编辑框文字与四周边框的距离
    .参数 编辑框句柄, 整数型, , 直接 编辑框.取窗口句柄() 来获取
    .参数 边距距离, 整数型, , 新的距离值
    .局部变量 变量_04A80125, 精易_矩形
    .局部变量 变量_48C30125, 精易_坐标

    GetClientRect (编辑框句柄, 变量_04A80125)
    InflateRect (变量_04A80125, －边距距离, －边距距离)
    变量_48C30125.横 ＝ 变量_04A80125.左边
    变量_48C30125.纵 ＝ 变量_04A80125.顶边
    SendMessageA (编辑框句柄, 179, 0, 取数据_通用型 (变量_48C30125))

.子程序 外部编辑框_转成IE地址框, , 公开, 把普通的编辑框转成IE地址框
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    SHAutoComplete (编辑框句柄, 0)

.子程序 外部编辑框_取消选择, , 公开, 取消编辑框内容的选择
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    外部编辑框_选中按位置 (编辑框句柄, 0, 0)

.子程序 外部编辑框_加入文本, , 公开, 通过句柄给编辑框添加文本
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 文本内容, 文本型, , 要添加的内容

    外部编辑框_置起始选择位置 (编辑框句柄, 外部编辑框_取文本长度 (编辑框句柄))
    文本_发送 (编辑框句柄, 文本内容)

.子程序 外部编辑框_滚到最后行, , 公开, 让编辑滚动到最后一行
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    发送消息整数 (编辑框句柄, 182, 0, 65535)

.子程序 外部编辑框_选中按内容, , 公开, 选中编辑框指定的内容,如果指定的编辑框内没有指定的内容将不选择；
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 要选择的内容, 文本型, , 搜索指定编辑框的内容并选择
    .局部变量 变量_B4280125, 文本型
    .局部变量 变量_B5280125, 整数型
    .局部变量 变量_B6280125, 整数型

    变量_B4280125 ＝ 外部编辑框_取内容 (编辑框句柄)
    变量_B5280125 ＝ 寻找文本 (变量_B4280125, 要选择的内容, , 假)
    .如果真 (变量_B5280125 ≥ -1)
        变量_B6280125 ＝ 变量_B5280125 ＋ 取文本长度 (要选择的内容) － 1
        
        外部编辑框_选中按位置 (编辑框句柄, 变量_B5280125, 变量_B6280125)
    .如果真结束
    

.子程序 外部编辑框_选中按位置, , 公开, 按起始位置和结束位置选择编辑框内的文本;
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 开始位置, 整数型, , 开始选择位置,从1开始
    .参数 结束位置, 整数型, , 结束选择位置

    窗口_置控件焦点 (编辑框句柄)
    发送消息整数 (编辑框句柄, 177, 开始位置 － 1, 结束位置)

.子程序 外部编辑框_取光标位置, 整数型, 公开, 取光标编辑框的当前位置
    .参数 编辑框句柄, 整数型, , 编辑框句柄

    返回 (发送消息整数 (编辑框句柄, 176, 0, 0) ％ 65536)

.子程序 外部编辑框_置起始选择位置, , 公开
    .参数 编辑框句柄, 整数型
    .参数 起始选择位置, 整数型

    发送消息整数 (编辑框句柄, 177, 起始选择位置, 起始选择位置)

.子程序 外部编辑框_取文本长度, 整数型
    .参数 变量_59BA0125, 整数型

    返回 (发送消息整数 (变量_59BA0125, 14, 0, 0))

.子程序 外部编辑框_限制字符数, , 公开, 限制编辑框的输入字符数
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 欲即制的字符数量, 整数型, , 欲即制的字符数量

    发送消息整数 (编辑框句柄, 197, 欲即制的字符数量, 0)

.子程序 外部编辑框_替换内容, , 公开, 通过句柄对指定编辑框的内容进行替换
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 欲替换的文本, 文本型, , 欲替换的文本
    .参数 替换成的文本, 文本型, , 替换成的文本
    .参数 起始位置, 整数型, 可空, 留空为从 1 开始
    .参数 替换的次数, 整数型, 可空, 留空为替换1次；
    .参数 是否区分大小写, 逻辑型, 可空, 默认为假，不区分；
    .局部变量 变量_59720125, 文本型
    .局部变量 变量_5A720125, 整数型

    变量_59720125 ＝ 外部编辑框_取内容 (编辑框句柄)
    .如果真 (替换的次数 ＝ 0)
        替换的次数 ＝ 1
    .如果真结束
    .如果真 (起始位置 ＝ 0)
        起始位置 ＝ 1
    .如果真结束
    变量_59720125 ＝ 子文本替换 (变量_59720125, 欲替换的文本, 替换成的文本, 起始位置, 替换的次数, 是否区分大小写)
    外部编辑框_置内容 (编辑框句柄, 变量_59720125)

.子程序 外部编辑框_替换选中内容
    .参数 变量_56290125, 整数型
    .参数 变量_58290125, 文本型

    发送消息文本 (变量_56290125, 194, 0, 变量_58290125)

.子程序 外部编辑框_设为只读方式, , 公开, 设置编辑框为只读方式
    .参数 编辑框句柄, 整数型
    .参数 类型, 整数型, 可空, 默认为1；1=只读方式；2=普通方式；

    .如果真 (类型 ＝ 0 或 类型 ＝ 1)
        发送消息整数 (编辑框句柄, 207, -1, 0)
    .如果真结束
    .如果真 (类型 ＝ 2)
        发送消息整数 (编辑框句柄, 207, 0, 0)
    .如果真结束
    

.子程序 外部编辑框_设为密码方式, , 公开, 设置编辑框为密码方式
    .参数 编辑框句柄, 整数型
    .参数 类型, 整数型, 可空, 默认为1；1=密码方式；2=普通方式；

    .如果真 (类型 ＝ 0 或 类型 ＝ 1)
        发送消息整数 (编辑框句柄, 204, 1, 0)
    .如果真结束
    .如果真 (类型 ＝ 2)
        发送消息整数 (编辑框句柄, 204, 0, 0)
    .如果真结束
    

.子程序 外部编辑框_取指定行文本, 文本型, 公开, 取回编辑框指定行的文本
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 行号, 整数型, , 0表示第一行
    .局部变量 变量_EC280125, 文本型

    变量_EC280125 ＝ 取空白文本 (255)
    发送消息文本 (编辑框句柄, 196, 行号 － 1, 变量_EC280125)
    返回 (删尾空 (变量_EC280125))

.子程序 外部编辑框_取密码框文本, 文本型, 公开
    .参数 编辑框句柄, 整数型
    .局部变量 变量_E3580125, 整数型
    .局部变量 变量_E4580125, 文本型
    .局部变量 变量_C3E50125, 整数型

    
    变量_E3580125 ＝ 发送消息整数 (编辑框句柄, 210, 0, 0)
    .如果真 (变量_E3580125 ≠ 0)
        投递消息整数 (编辑框句柄, 204, 0, 0)
        变量_E4580125 ＝ 取空白文本 (255)
        发送消息文本 (编辑框句柄, 13, 256, 变量_E4580125)
        .如果真 (删首尾空 (变量_E4580125) ＝ “”)
            变量_C3E50125 ＝ GetWindowTextLengthA (编辑框句柄)
            变量_E4580125 ＝ 取空白文本 (变量_C3E50125 ＋ 1)
            GetWindowTextA (编辑框句柄, 变量_E4580125, 变量_C3E50125 ＋ 1)
        .如果真结束
        投递消息整数 (编辑框句柄, 204, 变量_E3580125, 0)
    .如果真结束
    返回 (删首尾空 (变量_E4580125))

.子程序 外部编辑框_内容是否改变过, 逻辑型, 公开, 判断编辑框的内容从程序创建完毕后是否改变过；真=改变过；假=没改变过；
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .局部变量 变量_73290125, 整数型

    变量_73290125 ＝ 发送消息整数 (编辑框句柄, 184, 0, 0)
    .如果真 (变量_73290125 ＝ 0)
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 外部编辑框_取指定行文本长度, 整数型, 公开, 取得编辑框指定行文本长度
    .参数 编辑框句柄, 整数型, , 编辑框句柄
    .参数 行号, 整数型, , 0表示第一行

    返回 (SendMessageA (编辑框句柄, 193, SendMessageA (编辑框句柄, 187, 行号, 0), 0))

.子程序 外部编辑框_在光标处加入文本, , 公开
    .参数 编辑框句柄, 整数型
    .参数 要插入的文本, 文本型
    .局部变量 变量_07290125, 整数型
    .局部变量 变量_08290125, 整数型
    .局部变量 变量_09290125, 整数型
    .局部变量 变量_0A290125, 整数型
    .局部变量 变量_0B290125, 整数型

    窗口_置控件焦点 (编辑框句柄)
    SendMessageA (编辑框句柄, 194, 1, 取指针文本_ (要插入的文本))
    
    
    
    

.子程序 外部编辑框_取光标所在行和列号, , 公开, 取得选定字符或光标所在行号和列号
    .参数 句柄, 整数型, , 编辑框句柄
    .参数 行号, 整数型, 参考 可空, 调用前设置一个变量用于装载返回的行号
    .参数 列号, 整数型, 参考 可空, 调用前设置一个变量用于装载返回的列号
    .局部变量 变量_64280125, 整数型

    窗口_置焦点 (句柄)
    
    
    
    
    SendMessageA (句柄, 176, 取指针整数_ (变量_64280125), 0)
    行号 ＝ SendMessageA (句柄, 201, 变量_64280125, 0)
    列号 ＝ 变量_64280125 － SendMessageA (句柄, 187, 行号, 0)
    行号 ＝ 行号 ＋ 1
    列号 ＝ 列号 ＋ 1

.子程序 外部编辑框_取光标所在行和列号W, , 公开, 取得选定字符或光标所在行号和列号  Unicode编码窗口适用
    .参数 句柄, 整数型, , 编辑框句柄
    .参数 行号, 整数型, 参考 可空, 调用前设置一个变量用于装载返回的行号
    .参数 列号, 整数型, 参考 可空, 调用前设置一个变量用于装载返回的列号
    .局部变量 变量_6FC30225, 整数型

    窗口_置焦点 (句柄)
    SendMessageW (句柄, 176, 取指针整数_ (变量_6FC30225), 0)
    行号 ＝ SendMessageW (句柄, 201, 变量_6FC30225, 0)
    列号 ＝ 变量_6FC30225 － SendMessageW (句柄, 187, 行号, 0)
    行号 ＝ 行号 ＋ 1
    列号 ＝ 列号 ＋ 1

.子程序 外部选择框_选中, , 公开, 选中外部程序的选择框
    .参数 窗口句柄, 整数型

    
    SendMessageA (窗口句柄, 241, 1, 0)

.子程序 外部选择框_取消选中, , 公开, 取消选中外部程序的选择框
    .参数 窗口句柄, 整数型

    
    SendMessageA (窗口句柄, 241, 0, 0)

.子程序 外部选择框_取状态, 逻辑型, 公开, 判断目标选择框是否选中，选中返回真，没选中返回假；
    .参数 窗口句柄, 整数型, , 目标选择框的句柄

    .如果真 (SendMessageA (窗口句柄, 240, 0, 0) ＝ 0)
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 外部选择框_点击, , 公开, 会触发选择框选中与取消选中事件
    .参数 窗口句柄, 整数型
    .局部变量 变量_ACDB0225, 整数型

    变量_ACDB0225 ＝ 窗口_取控件ID (窗口句柄)
    SendMessageA (窗口句柄, #WM_COMMAND, 合并整数 (变量_ACDB0225, 0), 窗口句柄)

.子程序 外部单选框_选中, , 公开, 选中外部程序的单选框
    .参数 窗口句柄, 整数型

    SendMessageA (窗口句柄, 241, 1, 0)

.子程序 外部单选框_取消选中, , 公开, 取消选中外部程序的单选框
    .参数 窗口句柄, 整数型

    SendMessageA (窗口句柄, 241, 0, 0)
    
    

.子程序 外部单选框_取状态, 逻辑型, 公开, 判断目标单选框是否选中，选中返回真，没选中返回假；
    .参数 窗口句柄, 整数型, , 目标单选框的句柄

    .如果真 (SendMessageA (窗口句柄, 240, 0, 0) ＝ 0)
        返回 (假)
    .如果真结束
    返回 (真)

.子程序 树形框_允许拖动, 逻辑型, 公开, 允许鼠标左键拖放操作目标的项
    .参数 树形框句柄, 整数型
    .参数 项拖动处理函数, 整数型, 可空, int TreeMoveProc(HTREEITEM oldhItem, HTREEITEM newhItem);
    .局部变量 变量_320B0325, 整数型
    .局部变量 变量_0A090325, 整数型
    .局部变量 变量_5A090325, 整数型
    .局部变量 变量_09090325, 整数型

    变量_320B0325 ＝ SendMessageW (树形框句柄, #<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_320B0325 ＝ #NULL)
        返回 (假)
    .如果真结束
    树形框_禁用拖动 (树形框句柄)
    变量_5A090325 ＝ SetWindowLongW (树形框句柄, #GWL_WNDPROC, 到整数 (&Drop_TreeProc))
    SetPropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldTreeProc”, 变量_5A090325)
    SetPropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldCallProc”, 项拖动处理函数)
    变量_09090325 ＝ GetParent (树形框句柄)
    变量_0A090325 ＝ SetWindowLongW (变量_09090325, #GWL_WNDPROC, 到整数 (&Drop_WndProc))
    SetPropA (变量_09090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldWndProc”, 变量_0A090325)
    返回 (变量_5A090325 ≠ #NULL 且 变量_0A090325 ≠ #NULL)

.子程序 树形框_禁用拖动, , 公开, 禁用鼠标左键拖放操作目标的项
    .参数 树形框句柄, 整数型
    .局部变量 变量_56090325, 整数型
    .局部变量 变量_5B090325, 整数型
    .局部变量 变量_55090325, 整数型

    变量_5B090325 ＝ GetPropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldTreeProc”)
    .如果真 (变量_5B090325 ≠ #NULL)
        SetWindowLongW (树形框句柄, #GWL_WNDPROC, 变量_5B090325)
        RemovePropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldTreeProc”)
    .如果真结束
    RemovePropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldCallProc”)
    变量_55090325 ＝ GetParent (树形框句柄)
    变量_56090325 ＝ GetPropA (变量_55090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldWndProc”)
    .如果真 (变量_56090325 ≠ #NULL)
        SetWindowLongW (变量_55090325, #GWL_WNDPROC, 变量_56090325)
        RemovePropA (变量_55090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldWndProc”)
    .如果真结束
    RemovePropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|hItem”)
    RemovePropA (树形框句柄, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|DropMove”)

.子程序 Drop_TreeProc, 整数型
    .参数 变量_1C090325, 整数型
    .参数 变量_1D090325, 整数型
    .参数 变量_1E090325, 整数型
    .参数 变量_1F090325, 整数型
    .局部变量 变量_20090325, 整数型
    .局部变量 变量_41090325, 整数型
    .局部变量 变量_45090325, 整数型
    .局部变量 变量_46090325, 整数型
    .局部变量 变量_47090325, 精易_矩形
    .局部变量 变量_48090325, 整数型
    .局部变量 变量_4E090325, 整数型

    变量_20090325 ＝ GetPropA (变量_1C090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldTreeProc”)
    .判断开始 (变量_1D090325 ＝ #WM_LBUTTONUP)
        变量_41090325 ＝ GetPropA (变量_1C090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|DropMove”)
        .如果真 (变量_41090325 ＝ 1)
            DLL_ImageList_DragLeave (变量_1C090325)
            DLL_ImageList_EndDrag ()
            变量_45090325 ＝ LOWORD (变量_1F090325)
            变量_46090325 ＝ HIWORD (变量_1F090325)
            GetWindowRect (变量_1C090325, 变量_47090325)
            .如果 (变量_45090325 ＜ 0 或 变量_45090325 ＞ 变量_47090325.右边 － 变量_47090325.左边 或 变量_46090325 ＜ 0 或 变量_46090325 ＞ 变量_47090325.底边 － 变量_47090325.顶边)
                SendMessageW (变量_1C090325, #<?未知本地类型?>, #<?未知本地类型?>, #NULL)
            .否则
                变量_48090325 ＝ SendMessageW (变量_1C090325, #<?未知本地类型?>, #<?未知本地类型?>, #NULL)
                Drop_TreeMove (变量_1C090325, GetPropA (变量_1C090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|hItem”), 变量_48090325)
                SendMessageW (变量_1C090325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_48090325)
                SendMessageW (变量_1C090325, #<?未知本地类型?>, #<?未知本地类型?>, #NULL)
            .如果结束
            鼠标_释放 ()
            RemovePropA (变量_1C090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|hItem”)
            RemovePropA (变量_1C090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|DropMove”)
        .如果真结束
        
    .判断 (变量_1D090325 ＝ #<?未知本地类型?>)
        变量_41090325 ＝ GetPropA (变量_1C090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|DropMove”)
        .如果真 (变量_41090325 ＝ 1)
            变量_45090325 ＝ LOWORD (变量_1F090325)
            变量_46090325 ＝ HIWORD (变量_1F090325)
            变量_4E090325 ＝ LocalAlloc (#LMEM_ZEROINIT, 16)
            .如果真 (变量_4E090325 ≠ #NULL)
                DLL_ImageList_DragMove (变量_45090325, 变量_46090325)
                DLL_ImageList_DragShowNolock (假)
                __set (变量_4E090325, 0, 变量_45090325)
                __set (变量_4E090325, 4, 变量_46090325)
                变量_48090325 ＝ SendMessageW (变量_1C090325, #<?未知本地类型?>, 0, 变量_4E090325)
                .如果真 (变量_48090325 ≠ #NULL)
                    SendMessageW (变量_1C090325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_48090325)
                .如果真结束
                DLL_ImageList_DragShowNolock (真)
                LocalFree (变量_4E090325)
            .如果真结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    返回 (DLL_CallWindowProcW (变量_20090325, 变量_1C090325, 变量_1D090325, 变量_1E090325, 变量_1F090325))

.子程序 Drop_WndProc, 整数型
    .参数 变量_12090325, 整数型
    .参数 变量_13090325, 整数型
    .参数 变量_14090325, 整数型
    .参数 变量_15090325, 整数型
    .局部变量 变量_16090325, 整数型
    .局部变量 变量_2E090325, 整数型
    .局部变量 变量_2A090325, 整数型
    .局部变量 变量_21090325, 整数型
    .局部变量 变量_22090325, 整数型
    .局部变量 变量_23090325, 整数型
    .局部变量 变量_28090325, 整数型
    .局部变量 变量_29090325, 整数型

    变量_16090325 ＝ GetPropA (变量_12090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldWndProc”)
    .如果真 (变量_13090325 ＝ #WM_NOTIFY)
        变量_21090325 ＝ __get (变量_15090325, 8)
        .如果真 (变量_21090325 ＝ #<?未知本地类型?> 或 变量_21090325 ＝ #<?未知本地类型?>)
            变量_2A090325 ＝ __get (变量_15090325, 0)
            变量_2E090325 ＝ GetPropA (变量_2A090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldTreeProc”)
            .如果真 (变量_2E090325 ≠ #NULL)
                变量_22090325 ＝ __get (变量_15090325, 60)
                SetPropA (变量_2A090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|hItem”, 变量_22090325)
                变量_23090325 ＝ SendMessageW (变量_2A090325, #<?未知本地类型?>, 0, 变量_22090325)
                DLL_ImageList_BeginDrag (变量_23090325, 0, 0, 0)
                变量_28090325 ＝ __get (变量_15090325, 96)
                变量_29090325 ＝ __get (变量_15090325, 100)
                DLL_ImageList_DragEnter (变量_2A090325, 变量_28090325, 变量_29090325)
                SendMessageW (变量_2A090325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_22090325)
                鼠标_捕获 (变量_2A090325)
                SetPropA (变量_2A090325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|DropMove”, 1)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    返回 (DLL_CallWindowProcW (变量_16090325, 变量_12090325, 变量_13090325, 变量_14090325, 变量_15090325))

.子程序 Drop_TreeMove
    .参数 变量_460B0325, 整数型
    .参数 变量_3E0B0325, 整数型
    .参数 变量_3F0B0325, 整数型
    .局部变量 变量_950B0325, 整数型
    .局部变量 变量_4E0B0325, 整数型
    .局部变量 变量_560B0325, 逻辑型
    .局部变量 变量_760B0325, 整数型
    .局部变量 变量_720B0325, 整数型
    .局部变量 变量_520B0325, 整数型, , "0"
    .局部变量 变量_7E0B0325, 整数型
    .局部变量 变量_7B0B0325, 整数型
    .局部变量 变量_860B0325, 整数型
    .局部变量 变量_7D0B0325, 整数型
    .局部变量 变量_7C0B0325, 整数型, , "0"
    .局部变量 变量_910B0325, 整数型
    .局部变量 变量_850B0325, 整数型

    变量_950B0325 ＝ GetPropA (变量_460B0325, “{59E4C6F6-9104-4D10-9844-7FD21D8283AC}|oldCallProc”)
    .如果真 (变量_950B0325 ≠ #NULL)
        .如果真 (调用子程序_ (变量_950B0325, 变量_3E0B0325, 变量_3F0B0325, , , , , , , , , , , , , ) ≠ 0)
            返回 ()
        .如果真结束
        
    .如果真结束
    
    变量_4E0B0325 ＝ 变量_3F0B0325
    .判断循环首 (变量_4E0B0325 ≠ #NULL)
        .如果真 (变量_4E0B0325 ＝ 变量_3E0B0325)
            变量_560B0325 ＝ 真
            跳出循环 ()
        .如果真结束
        变量_4E0B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_4E0B0325)
    .判断循环尾 ()
    .如果真 (变量_560B0325)
        返回 ()
    .如果真结束
    
    变量_4E0B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_3E0B0325)
    .如果真 (变量_4E0B0325 ＝ 变量_3F0B0325)
        返回 ()
    .如果真结束
    
    变量_760B0325 ＝ 68 ＋ 2 × #MAX_PATH
    变量_720B0325 ＝ LocalAlloc (#LMEM_ZEROINIT, 变量_760B0325)
    .如果真 (变量_720B0325 ＝ #NULL)
        返回 ()
    .如果真结束
    
    __set (变量_720B0325, 8, #<?未知本地类型?>)
    __set (变量_720B0325, 12, 变量_3E0B0325)
    SendMessageW (变量_460B0325, #<?未知本地类型?>, 0, 变量_720B0325 ＋ 8)
    .如果 (__get (变量_720B0325, 40) ＝ 0)
        加入成员 (变量_520B0325, 变量_3E0B0325)
    .否则
        变量_560B0325 ＝ 假
        变量_910B0325 ＝ 变量_3E0B0325
        .判断循环首 (变量_910B0325 ≠ #NULL 且 变量_560B0325 ＝ 假)
            加入成员 (变量_520B0325, 变量_910B0325)
            变量_7E0B0325 ＝ 变量_910B0325
            变量_910B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_910B0325)
            .如果真 (变量_910B0325 ＝ #NULL)
                变量_910B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_7E0B0325)
                .判断循环首 (变量_910B0325 ＝ #NULL)
                    变量_4E0B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_7E0B0325)
                    .如果真 (变量_4E0B0325 ＝ 变量_3E0B0325)
                        变量_560B0325 ＝ 真
                        跳出循环 ()
                    .如果真结束
                    变量_7E0B0325 ＝ 变量_4E0B0325
                    变量_910B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_4E0B0325)
                .判断循环尾 ()
            .如果真结束
            
        .判断循环尾 ()
    .如果结束
    
    变量_7B0B0325 ＝ Drop_GetLayer (变量_460B0325, 变量_3E0B0325)
    变量_7D0B0325 ＝ 取数组成员数 (变量_520B0325)
    SendMessageW (变量_460B0325, #<?未知本地类型?>, 0, 0)
    .计次循环首 (变量_7D0B0325, 变量_850B0325)
        变量_860B0325 ＝ Drop_GetLayer (变量_460B0325, 变量_520B0325 [变量_850B0325]) － 变量_7B0B0325
        memset (变量_720B0325, 0, 变量_760B0325)
        __set (变量_720B0325, 8, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>))
        __set (变量_720B0325, 12, 变量_520B0325 [变量_850B0325])
        __set (变量_720B0325, 24, 变量_720B0325 ＋ 68)
        __set (变量_720B0325, 28, #MAX_PATH)
        SendMessageW (变量_460B0325, #<?未知本地类型?>, 0, 变量_720B0325 ＋ 8)
        __set (变量_720B0325, 0, 变量_3F0B0325)
        .如果真 (变量_860B0325 ＞ 0 且 变量_860B0325 ≤ 取数组成员数 (变量_7C0B0325))
            __set (变量_720B0325, 0, 变量_7C0B0325 [变量_860B0325])
        .如果真结束
        __set (变量_720B0325, 4, #<?未知本地类型?>)
        __set (变量_720B0325, 8, 位或 (#<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>))
        __set (变量_720B0325, 12, 变量_3F0B0325)
        变量_7E0B0325 ＝ SendMessageW (变量_460B0325, #<?未知本地类型?>, 0, 变量_720B0325)
        .判断开始 (变量_860B0325 ＝ 取数组成员数 (变量_7C0B0325))
            加入成员 (变量_7C0B0325, 变量_7E0B0325)
        .判断 (变量_860B0325 ＞ 0 且 变量_860B0325 ＋ 1 ≤ 取数组成员数 (变量_7C0B0325))
            变量_7C0B0325 [变量_860B0325 ＋ 1] ＝ 变量_7E0B0325
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    LocalFree (变量_720B0325)
    
    SendMessageW (变量_460B0325, #<?未知本地类型?>, 0, 变量_3E0B0325)
    SendMessageW (变量_460B0325, #<?未知本地类型?>, 1, 0)

.子程序 Drop_GetLayer, 整数型
    .参数 变量_660B0325, 整数型
    .参数 变量_650B0325, 整数型
    .局部变量 变量_6A0B0325, 整数型

    .判断循环首 (变量_650B0325 ≠ #NULL)
        变量_650B0325 ＝ SendMessageW (变量_660B0325, #<?未知本地类型?>, #<?未知本地类型?>, 变量_650B0325)
        递增 (变量_6A0B0325)
    .判断循环尾 ()
    返回 (变量_6A0B0325)

