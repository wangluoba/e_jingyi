.版本 2

.程序集 外部树型框, , 公开
.程序集变量 m_hItemParent, 长整数型, , "0", 有父项目的句柄组
.程序集变量 集_单一项目, 自定义_4E5C0141
.程序集变量 集_树型框项目, 自定义_4F5C0141
.程序集变量 集_外部数据地址1, 整数型
.程序集变量 集_外部数据地址2, 整数型
.程序集变量 集_项目地址, 整数型
.程序集变量 m_hWnd, 整数型
.程序集变量 _数据地址, 整数型, , , 加入项目1 使用，可避免重复使用一些API函数
.程序集变量 _项目, 自定义_505C0141, , , 加入项目1 使用
.程序集变量 _搜索回调Call, 整数型
.程序集变量 m_hProc, 整数型, , , 树型框所在进程的进程句柄, 此值作为判断是否操作外部进程, 操作内部进程此值为0
.程序集变量 m_hItems, 长整数型, , "0", 树型框所有项目句柄
.程序集变量 m_isWow64, 逻辑型, , , 是否运行在Wow64环境下, 为真则进程是32位程序
.程序集变量 m_item, 整数型, , , 项目缓冲区, 所有发送TVITEMEXW结构的都使用这个地址, 包含文本缓冲区
.程序集变量 m_itemSize, 整数型, , , m_item 当前的尺寸, 缓冲区变大时需要重新分配

.子程序 _初始化
    集_单一项目.成员_615C0135 ＝ 260
    集_树型框项目.成员_6C5C0135 ＝ 260

.子程序 _销毁
    .如果 (m_hProc ≠ 0)
        .如果真 (m_item ≠ 0)
            VirtualFreeEx (m_hProc, m_item, 0, #MEM_RELEASE)
        .如果真结束
        CloseProc (m_hProc)
    .否则
        
        .如果真 (m_item ≠ 0)
            LocalFree (m_item)
        .如果真结束
        
    .如果结束
    
    m_item ＝ 0
    m_itemSize ＝ 0
    
    清除数组 (m_hItems)

.子程序 初始化, 逻辑型, 公开
    .参数 树型框句柄, 整数型
    .参数 树型框类名, 文本型, 可空
    .参数 是否操作外部控件, 逻辑型, 可空
    .局部变量 变量_EEE00225, 逻辑型
    .局部变量 变量_EFE00225, 逻辑型
    .局部变量 变量_8AE10225, 逻辑型
    .局部变量 变量_B2E10225, 整数型
    .局部变量 变量_B3E10225, 整数型

    x64Init ()
    
    变量_8AE10225 ＝ 系统_是否64位操作系统 () ＝ 假
    m_isWow64 ＝ 变量_8AE10225
    
    .如果真 (窗口_句柄是否有效 (树型框句柄) ＝ 假)
        返回 (假)
    .如果真结束
    _数据地址 ＝ 0
    
    
    .如果真 (m_hWnd ＝ 树型框句柄 且 全局变量_A5D00205 ＝ 取项目数 ())
        返回 (真)
    .如果真结束
    
    变量_B2E10225 ＝ 进程_取自进程ID ()
    变量_B3E10225 ＝ 窗口_句柄取进程ID (树型框句柄)
    是否操作外部控件 ＝ 变量_B2E10225 ≠ 变量_B3E10225
    
    .如果 (是否操作外部控件)
        m_hProc ＝ OpenProc (树型框句柄)
        .如果真 (m_hProc ＝ 0)
            返回 (假)
        .如果真结束
        .如果真 (变量_8AE10225 ＝ 假 且 IsWow64Process (m_hProc, m_isWow64) ＝ 假)
            m_isWow64 ＝ 真
        .如果真结束
        
    .否则
        m_isWow64 ＝ 真
    .如果结束
    
    m_hWnd ＝ 树型框句柄
    .如果真 (m_isWow64 ＝ 假)
        输出调试文本 (“不支持x64”)
        返回 (假)
    .如果真结束
    
    内部_遍历句柄 ()
    返回 (真)

.子程序 OpenProc, 整数型
    .参数 变量_08DC0225, 整数型
    .局部变量 变量_09DC0225, 整数型

    .判断开始 (IsWindow (变量_08DC0225) ≠ 0)
        GetWindowThreadProcessId (变量_08DC0225, 变量_09DC0225)
    .默认
        变量_09DC0225 ＝ 变量_08DC0225
    .判断结束
    返回 (OpenProcess (#PROCESS_ALL_ACCESS, 0, 变量_09DC0225))

.子程序 CloseProc
    .参数 变量_0ADC0225, 整数型, 参考

    .如果真 (变量_0ADC0225 ＞ 0)
        CloseHandle (变量_0ADC0225)
    .如果真结束
    变量_0ADC0225 ＝ 0

.子程序 make_TVITEMW, 整数型
    .参数 变量_45DC0225, 整数型
    .参数 变量_46DC0225, 长整数型
    .参数 变量_47DC0225, 整数型, 可空
    .参数 变量_48DC0225, 整数型, 可空
    .参数 变量_49DC0225, 整数型, 可空
    .参数 变量_4ADC0225, 整数型, 可空
    .参数 变量_4BDC0225, 整数型, 可空
    .参数 变量_4CDC0225, 整数型, 可空
    .参数 变量_4DDC0225, 长整数型, 可空
    .参数 变量_4EDC0225, 整数型, 可空
    .参数 变量_4FDC0225, 整数型, 可空
    .参数 变量_50DC0225, 长整数型, 可空
    .参数 变量_51DC0225, 整数型, 可空
    .参数 变量_52DC0225, 长整数型, 可空
    .参数 变量_53DC0225, 长整数型, 可空
    .局部变量 变量_54DC0225, 整数型
    .局部变量 变量_55DC0225, 整数型
    .局部变量 变量_56DC0225, 整数型

    变量_55DC0225 ＝ 4096
    .判断开始 (m_hProc ≠ 0)
        .如果真 (变量_49DC0225 ＋ 80 ＞ 变量_55DC0225)
            变量_55DC0225 ＝ 变量_49DC0225 ＋ 80
            变量_55DC0225 ＝ 变量_55DC0225 ＼ (4096 × 4096) ＋ 选择 (变量_55DC0225 ％ 4096 ≠ 0, 4096, 0)
        .如果真结束
        
        .如果真 (变量_55DC0225 ＞ m_itemSize)
            .如果真 (m_itemSize ≠ 0 且 m_item ≠ 0)
                VirtualFreeEx (m_hProc, m_item, 0, #MEM_RELEASE)
            .如果真结束
            m_itemSize ＝ 变量_55DC0225
            m_item ＝ VirtualAllocEx (m_hProc, 0, m_itemSize, #MEM_COMMIT, #PAGE_READWRITE)
            .如果真 (m_item ＝ 0)
                m_itemSize ＝ 0
                返回 (0)
            .如果真结束
            
            m_item ＝ m_item ＋ 16
        .如果真结束
        
        变量_54DC0225 ＝ m_item ＋ 80
        .判断开始 (m_isWow64)
            WriteProcessMemory_整数3 (m_hProc, m_item ＋ 0, 变量_45DC0225, 4, 0)
            WriteProcessMemory_整数3 (m_hProc, m_item ＋ 4, 变量_46DC0225, 4, 0)
            
            .如果真 (取反 (是否为空 (变量_52DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item － 8, 变量_45DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_53DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item － 4, 变量_45DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_47DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 8, 变量_47DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_48DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 12, 变量_48DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_49DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 16, 变量_54DC0225, 4, 0)
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 20, 变量_49DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4ADC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 24, 变量_4ADC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4BDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 28, 变量_4BDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4CDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 32, 变量_4CDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4DDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 36, 变量_4DDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4EDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 40, 变量_4EDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4FDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 44, 变量_4FDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_50DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 48, 变量_50DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_51DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 52, 变量_51DC0225, 4, 0)
            .如果真结束
            
        .默认
            
            WriteProcessMemory_整数3 (m_hProc, m_item ＋ 0, 变量_45DC0225, 4, 0)
            DLL_WriteProcessMemory4 (m_hProc, m_item ＋ 8, 取指针_通用型 (变量_46DC0225), 8, 0)
            .如果真 (取反 (是否为空 (变量_52DC0225)))
                DLL_WriteProcessMemory4 (m_hProc, m_item － 16, 取指针_通用型 (变量_52DC0225), 8, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_53DC0225)))
                DLL_WriteProcessMemory4 (m_hProc, m_item － 8, 取指针_通用型 (变量_53DC0225), 8, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_47DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 16, 变量_47DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_48DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 20, 变量_48DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_49DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 24, 变量_54DC0225, 4, 0)
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 32, 变量_49DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4ADC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 36, 变量_4ADC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4BDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 40, 变量_4BDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4CDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 44, 变量_4CDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4DDC0225)))
                DLL_WriteProcessMemory4 (m_hProc, m_item ＋ 48, 取指针_通用型 (变量_4DDC0225), 8, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4EDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 56, 变量_4EDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_4FDC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 60, 变量_4FDC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_50DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 64, 变量_50DC0225, 4, 0)
            .如果真结束
            .如果真 (取反 (是否为空 (变量_51DC0225)))
                WriteProcessMemory_整数3 (m_hProc, m_item ＋ 72, 变量_51DC0225, 4, 0)
            .如果真结束
            
            
        .判断结束
        
    .默认
        
        .如果真 (变量_55DC0225 ＞ m_itemSize)
            .如果真 (m_itemSize ≠ 0 且 m_item ≠ 0)
                LocalFree (m_item)
            .如果真结束
            m_itemSize ＝ 变量_55DC0225
            m_item ＝ LocalAlloc (#LMEM_ZEROINIT, m_itemSize)
            .如果真 (m_item ＝ 0)
                m_itemSize ＝ 0
                返回 (0)
            .如果真结束
            m_item ＝ m_item ＋ 16
        .如果真结束
        
        变量_54DC0225 ＝ m_item ＋ 80
        __set (m_item, 0, 变量_45DC0225)
        __set (m_item, 4, 变量_46DC0225)
        
        .如果真 (取反 (是否为空 (变量_52DC0225)))
            __set (m_item － 8, 0, 变量_52DC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_53DC0225)))
            __set (m_item － 4, 8, 变量_53DC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_47DC0225)))
            __set (m_item, 8, 变量_47DC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_48DC0225)))
            __set (m_item, 12, 变量_48DC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_49DC0225)))
            __set (m_item, 16, 变量_54DC0225)
            __set (m_item, 20, 变量_49DC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_4ADC0225)))
            __set (m_item, 24, 变量_4ADC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_4BDC0225)))
            __set (m_item, 28, 变量_4BDC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_4CDC0225)))
            __set (m_item, 32, 变量_4CDC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_4DDC0225)))
            __set (m_item, 36, 变量_4DDC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_4EDC0225)))
            __set (m_item, 40, 变量_4EDC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_4FDC0225)))
            __set (m_item, 44, 变量_4FDC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_50DC0225)))
            __set (m_item, 48, 变量_50DC0225)
        .如果真结束
        .如果真 (取反 (是否为空 (变量_51DC0225)))
            __set (m_item, 52, 变量_51DC0225)
        .如果真结束
        
    .判断结束
    返回 (m_item)

.子程序 __SendMsgW, 长整数型
    .参数 变量_23DC0225, 整数型
    .参数 变量_24DC0225, 长整数型
    .参数 变量_25DC0225, 长整数型

    返回 (SendMessageW (m_hWnd, 变量_23DC0225, 变量_24DC0225, 变量_25DC0225))
    ' .如果真 (m_isWow64)
        
    ' .如果真结束
    

.子程序 __SendMsgA, 长整数型
    .参数 变量_26DC0225, 整数型
    .参数 变量_27DC0225, 长整数型
    .参数 变量_28DC0225, 长整数型

    .如果真 (m_isWow64)
        返回 (SendMessageA (m_hWnd, 变量_26DC0225, 变量_27DC0225, 变量_28DC0225))
    .如果真结束
    返回 (SendMsgA (m_hWnd, 变量_26DC0225, 变量_27DC0225, 变量_28DC0225))

.子程序 write_Text, 逻辑型
    .参数 变量_C3DC0225, 字节集
    .局部变量 变量_C4DC0225, 整数型
    .局部变量 变量_C5DC0225, 整数型

    .如果真 (m_item ＝ 0)
        返回 (假)
    .如果真结束
    变量_C5DC0225 ＝ 80
    变量_C4DC0225 ＝ DLL_lstrlenW (取指针_字节集型 (变量_C3DC0225)) × 2 ＋ 2
    .判断开始 (m_hProc ≠ 0)
        返回 (WriteProcessMemory_字节集 (m_hProc, m_item ＋ 变量_C5DC0225, 变量_C3DC0225, 变量_C4DC0225, 0))
    .默认
        RtlMoveMemory (m_item ＋ 变量_C5DC0225, 取指针_字节集型 (变量_C3DC0225), 变量_C4DC0225)
    .判断结束
    返回 (真)

.子程序 read_Text, 字节集
    .参数 变量_C6DC0225, 整数型, 可空
    .局部变量 变量_C7DC0225, 字节集
    .局部变量 变量_C8DC0225, 整数型
    .局部变量 变量_C9DC0225, 整数型

    .如果真 (m_item ＝ 0)
        返回 ({ })
    .如果真结束
    变量_C9DC0225 ＝ 80
    .如果真 (变量_C6DC0225 ＝ 0)
        变量_C6DC0225 ＝ 2000
    .如果真结束
    
    .判断开始 (m_hProc ≠ 0)
        变量_C7DC0225 ＝ 取空白字节集 (变量_C6DC0225)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_C9DC0225, 变量_C7DC0225, 变量_C6DC0225, 0)
    .默认
        变量_C7DC0225 ＝ 指针到字节集 (m_item ＋ 变量_C9DC0225, 变量_C6DC0225)
    .判断结束
    变量_C8DC0225 ＝ DLL_lstrlenW (取指针_字节集型 (变量_C7DC0225)) × 2 ＋ 2
    .如果真 (变量_C8DC0225 ＝ 变量_C6DC0225)
        返回 (变量_C7DC0225)
    .如果真结束
    .如果真 (变量_C8DC0225 ＞ 变量_C6DC0225)
        变量_C8DC0225 ＝ 变量_C6DC0225
    .如果真结束
    返回 (取字节集左边 (变量_C7DC0225, 变量_C8DC0225))

.子程序 read_State, 整数型
    .局部变量 变量_CADC0225, 整数型
    .局部变量 变量_CBDC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_CADC0225 ＝ 选择 (m_isWow64, 8, 16)
    .判断开始 (m_hProc ≠ 0)
        变量_CBDC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_CADC0225, 变量_CBDC0225, 4, 0)
    .默认
        变量_CBDC0225 ＝ 指针到字节集 (m_item ＋ 变量_CADC0225, 4)
    .判断结束
    返回 (取字节集数据 (变量_CBDC0225, #整数型, ))

.子程序 read_StateMask, 整数型
    .局部变量 变量_CCDC0225, 整数型
    .局部变量 变量_CDDC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_CCDC0225 ＝ 选择 (m_isWow64, 12, 20)
    .判断开始 (m_hProc ≠ 0)
        变量_CDDC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_CCDC0225, 变量_CDDC0225, 4, 0)
    .默认
        变量_CDDC0225 ＝ 指针到字节集 (m_item ＋ 变量_CCDC0225, 4)
    .判断结束
    返回 (取字节集数据 (变量_CDDC0225, #整数型, ))

.子程序 read_Image, 整数型
    .局部变量 变量_CEDC0225, 整数型
    .局部变量 变量_CFDC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_CEDC0225 ＝ 选择 (m_isWow64, 24, 36)
    .判断开始 (m_hProc ≠ 0)
        变量_CFDC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_CEDC0225, 变量_CFDC0225, 4, 0)
    .默认
        变量_CFDC0225 ＝ 指针到字节集 (m_item ＋ 变量_CEDC0225, 4)
    .判断结束
    返回 (取字节集数据 (变量_CFDC0225, #整数型, ))

.子程序 read_SelectedImage, 整数型
    .局部变量 变量_D0DC0225, 整数型
    .局部变量 变量_D1DC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_D0DC0225 ＝ 选择 (m_isWow64, 28, 40)
    .判断开始 (m_hProc ≠ 0)
        变量_D1DC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_D0DC0225, 变量_D1DC0225, 4, 0)
    .默认
        变量_D1DC0225 ＝ 指针到字节集 (m_item ＋ 变量_D0DC0225, 4)
    .判断结束
    返回 (取字节集数据 (变量_D1DC0225, #整数型, ))

.子程序 read_Children, 整数型
    .局部变量 变量_D2DC0225, 整数型
    .局部变量 变量_D3DC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_D2DC0225 ＝ 选择 (m_isWow64, 32, 44)
    .判断开始 (m_hProc ≠ 0)
        变量_D3DC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_D2DC0225, 变量_D3DC0225, 4, 0)
    .默认
        变量_D3DC0225 ＝ 指针到字节集 (m_item ＋ 变量_D2DC0225, 4)
    .判断结束
    返回 (取字节集数据 (变量_D3DC0225, #整数型, ))

.子程序 read_Param, 长整数型
    .局部变量 变量_D4DC0225, 整数型
    .局部变量 变量_D5DC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_D4DC0225 ＝ 选择 (m_isWow64, 36, 48)
    .如果真 (m_hProc ≠ 0)
        变量_D5DC0225 ＝ 取空白字节集 (8)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_D4DC0225, 变量_D5DC0225, 8, 0)
        返回 (取字节集数据 (变量_D5DC0225, #长整数型, ))
    .如果真结束
    
    变量_D5DC0225 ＝ 指针到字节集 (m_item ＋ 变量_D4DC0225, 4)
    返回 (取字节集数据 (变量_D5DC0225, #整数型, ))

.子程序 read_Integral, 整数型
    .局部变量 变量_D6DC0225, 整数型
    .局部变量 变量_D7DC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_D6DC0225 ＝ 选择 (m_isWow64, 40, 56)
    .如果真 (m_hProc ≠ 0)
        变量_D7DC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_D6DC0225, 变量_D7DC0225, 4, 0)
        返回 (取字节集数据 (变量_D7DC0225, #整数型, ))
    .如果真结束
    
    变量_D7DC0225 ＝ 指针到字节集 (m_item ＋ 变量_D6DC0225, 4)
    返回 (取字节集数据 (变量_D7DC0225, #整数型, ))

.子程序 read_StateEx, 整数型
    .局部变量 变量_D8DC0225, 整数型
    .局部变量 变量_D9DC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_D8DC0225 ＝ 选择 (m_isWow64, 44, 60)
    .如果真 (m_hProc ≠ 0)
        变量_D9DC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_D8DC0225, 变量_D9DC0225, 4, 0)
        返回 (取字节集数据 (变量_D9DC0225, #整数型, ))
    .如果真结束
    
    变量_D9DC0225 ＝ 指针到字节集 (m_item ＋ 变量_D8DC0225, 4)
    返回 (取字节集数据 (变量_D9DC0225, #整数型, ))

.子程序 read_hwnd, 长整数型
    .局部变量 变量_DADC0225, 整数型
    .局部变量 变量_DBDC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_DADC0225 ＝ 选择 (m_isWow64, 48, 64)
    .如果真 (m_hProc ≠ 0)
        变量_DBDC0225 ＝ 取空白字节集 (8)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_DADC0225, 变量_DBDC0225, 8, 0)
        返回 (取字节集数据 (变量_DBDC0225, #长整数型, ))
    .如果真结束
    
    变量_DBDC0225 ＝ 指针到字节集 (m_item ＋ 变量_DADC0225, 4)
    返回 (取字节集数据 (变量_DBDC0225, #整数型, ))

.子程序 read_ExpandedImage, 整数型
    .局部变量 变量_DCDC0225, 整数型
    .局部变量 变量_DDDC0225, 字节集

    .如果真 (m_item ＝ 0)
        返回 (0)
    .如果真结束
    变量_DCDC0225 ＝ 选择 (m_isWow64, 52, 72)
    .如果真 (m_hProc ≠ 0)
        变量_DDDC0225 ＝ 取空白字节集 (4)
        ReadProcessMemory_字节集 (m_hProc, m_item ＋ 变量_DCDC0225, 变量_DDDC0225, 4, 0)
        返回 (取字节集数据 (变量_DDDC0225, #整数型, ))
    .如果真结束
    
    变量_DDDC0225 ＝ 指针到字节集 (m_item ＋ 变量_DCDC0225, 4)
    返回 (取字节集数据 (变量_DDDC0225, #整数型, ))

.子程序 取项目数, 整数型, 公开, 返回树型框中所有项目的数目。
    返回 (__SendMsgW (#<?未知本地类型?>, 0, 0))

.子程序 取项目句柄数组, 整数型, 公开
    .参数 句柄组, 长整数型, 参考 数组

    句柄组 ＝ m_hItems
    返回 (取数组成员数 (句柄组))

.子程序 取缩进层次, 整数型, 公开, 返回指定项目所处缩进层次，层次值从1开始。如果未找到指定项目，返回 0 。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (0)
    .如果真结束
    返回 (取缩进层次_句柄 (m_hItems [项目索引 ＋ 1]))

.子程序 取缩进层次_句柄, 整数型, 公开
    .参数 项目句柄, 长整数型
    .局部变量 变量_ACD00225, 长整数型
    .局部变量 变量_ADD00225, 整数型

    变量_ADD00225 ＝ 1
    变量_ACD00225 ＝ __SendMsgW (#<?未知本地类型?>, 3, 项目句柄)
    .判断循环首 (变量_ACD00225 ≠ 0)
        变量_ACD00225 ＝ __SendMsgW (#<?未知本地类型?>, 3, 变量_ACD00225)
        变量_ADD00225 ＝ 变量_ADD00225 ＋ 1
    .判断循环尾 ()
    返回 (变量_ADD00225)

.子程序 取项目文本, 文本型, 公开, 返回指定项目的文本。如果该项目不存在，将返回空文本。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (“”)
    .如果真结束
    返回 (取项目文本_句柄 (m_hItems [项目索引 ＋ 1]))

.子程序 取项目文本W, 字节集, 公开, 返回指定项目的文本。如果该项目不存在，将返回空文本。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 ({ })
    .如果真结束
    返回 (取项目文本_句柄W (m_hItems [项目索引 ＋ 1]))

.子程序 取项目文本_句柄W, 字节集, 公开
    .参数 项目句柄, 长整数型

    .如果真 (项目句柄 ＝ 0)
        返回 ({ })
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, 项目句柄, , , 2000, , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (read_Text (2000))

.子程序 取项目文本_句柄, 文本型, 公开
    .参数 项目句柄, 长整数型

    返回 (编码_Unicode到Ansi (取项目文本_句柄W (项目句柄)))

.子程序 取图片, 整数型, 公开, 返回指定项目的图片索引。如果该项目不存在，将返回 -1 
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (-1)
    .如果真结束
    返回 (取图片_句柄 (m_hItems [项目索引 ＋ 1]))

.子程序 取图片_句柄, 整数型, 公开
    .参数 项目句柄, 长整数型

    .如果真 (项目句柄 ＝ 0)
        返回 (0)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, 项目句柄, , , , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (read_Image ())

.子程序 取选中图片, 整数型, 公开, 返回指定项目被选中后的图片索引。如果该项目不存在，将返回 -1 。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (-1)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (read_SelectedImage ())

.子程序 取项目数值, 整数型, 公开, 返回与指定项目相关联的数值。如果该项目不存在，将返回 0 。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (-1)
    .如果真结束
    返回 (取项目数值_句柄 (m_hItems [项目索引 ＋ 1]))

.子程序 取项目数值_句柄, 整数型, 公开, 返回与指定项目相关联的数值。如果该项目不存在，将返回 0 。
    .参数 项目句柄, 长整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目句柄 ＝ 0)
        返回 (0)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, 项目句柄, , , , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (read_Param ())

.子程序 置图片, 逻辑型, 公开, 设置在指定项目首部所显示图片的索引。成功返回真，失败返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 图片索引, 整数型, , 图片索引用于指定图片组属性中的某张图片，从 0 开始。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , , 图片索引, , , , , , , , , )
    返回 (__SendMsgW (#<?未知本地类型?>, 0, m_item) ≠ 0)

.子程序 置选中图片, 逻辑型, 公开, 设置指定项目被选中后所显示图片的索引。成功返回真，失败返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 图片索引, 整数型, , 图片索引用于指定图片组属性中的某张图片，从 0 开始。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , , , 图片索引, , , , , , , , )
    返回 (__SendMsgW (#<?未知本地类型?>, 0, m_item) ≠ 0)

.子程序 置项目数值, 逻辑型, 公开, 设置与指定项目相关联的数值。成功返回真，失败返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 欲置入的项目数值, 整数型, 可空, 可以被省略。该数值与指定项目相关联。如果本参数被省略，默认值为 0 。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , , , , , 欲置入的项目数值, , , , , , )
    返回 (__SendMsgW (#<?未知本地类型?>, 0, m_item) ≠ 0)

.子程序 置项目文本W, 逻辑型, 公开, 设置指定项目的文本。成功返回真，失败返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 欲置入的项目文本, 字节集

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    write_Text (欲置入的项目文本)
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , 4000, , , , , , , , , , )
    返回 (__SendMsgW (#<?未知本地类型?>, 0, m_item) ≠ 0)

.子程序 置项目文本, 逻辑型, 公开, 设置指定项目的文本。成功返回真，失败返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 欲置入的项目文本, 文本型

    返回 (置项目文本W (项目索引, 编码_Ansi到Unicode (欲置入的项目文本, )))

.子程序 保证显示, , 公开
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 ()
    .如果真结束
    保证显示_句柄 (m_hItems [项目索引 ＋ 1])

.子程序 保证显示_句柄, , 公开
    .参数 项目句柄, 长整数型, , 0 为项目一，1 为项目二，如此类推。

    __SendMsgW (#<?未知本地类型?>, 0, 项目句柄)

.子程序 扩展, , 公开, 将指打开指定项目的下属分枝。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .判断开始 (项目索引 ＞ 99999)
        __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 项目索引)
    .判断 (项目索引 ＋ 1 ≤ 取数组成员数 (m_hItems) 且 项目索引 ≥ 0)
        __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, m_hItems [项目索引 ＋ 1])
    .默认
        
    .判断结束
    

.子程序 扩展全部, , 公开
    .参数 不扩展第一项, 逻辑型, 可空
    .局部变量 变量_2FDD0225, 整数型

    .如果真 (取数组成员数 (m_hItemParent) ＝ 0)
        内部_遍历句柄_父项目 ()
    .如果真结束
    .计次循环首 (取数组成员数 (m_hItemParent), 变量_2FDD0225)
        .如果真 (不扩展第一项 且 变量_2FDD0225 ＝ 1)
            到循环尾 ()
        .如果真结束
        __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, m_hItemParent [变量_2FDD0225])
    .计次循环尾 ()

.子程序 收缩, , 公开, 缩回指定项目的下属分枝。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ≤ 取数组成员数 (m_hItems) 且 项目索引 ≥ 0)
        .判断开始 (项目索引 ＞ 99999)
            __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 项目索引)
        .默认
            __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, m_hItems [项目索引 ＋ 1])
        .判断结束
        
    .如果真结束
    

.子程序 收缩全部, , 公开
    .局部变量 变量_3CDD0225, 整数型

    .如果真 (取数组成员数 (m_hItemParent) ＝ 0)
        内部_遍历句柄_父项目 ()
    .如果真结束
    .计次循环首 (取数组成员数 (m_hItemParent), 变量_3CDD0225)
        .如果真 (变量_3CDD0225 ＝ 1)
            到循环尾 ()
        .如果真结束
        __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, m_hItemParent [变量_3CDD0225])
    .计次循环尾 ()

.子程序 强制刷新, , 公开
    内部_遍历句柄 ()

.子程序 排序, , 公开
    .参数 排序1级缩进, 逻辑型, 可空, 是否排序缩进层次为1的，可空为不排序。
    .参数 排序指定层次, 整数型, 可空, 可空，0=全部排序(默认)，排序大于为等于此值的缩进层次，如：2，将排序缩进层次≥2的项目，-1=不排序
    .局部变量 变量_43DD0225, 整数型

    .如果真 (取数组成员数 (m_hItemParent) ＝ 0)
        内部_遍历句柄_父项目 ()
    .如果真结束
    
    .如果真 (排序1级缩进)
        __SendMsgW (#<?未知本地类型?>, 0, 0)
    .如果真结束
    
    .如果真 (排序指定层次 ＝ -1)
        返回 ()
    .如果真结束
    
    .计次循环首 (取数组成员数 (m_hItemParent), 变量_43DD0225)
        .如果 (排序指定层次 ＞ 0)
            .如果真 (取缩进层次 (变量_43DD0225) ≥ 排序指定层次)
                __SendMsgW (#<?未知本地类型?>, 0, m_hItemParent [变量_43DD0225])
            .如果真结束
            
        .否则
            
            __SendMsgW (#<?未知本地类型?>, 0, m_hItemParent [变量_43DD0225])
        .如果结束
        
    .计次循环尾 ()

.子程序 排序_句柄, , 公开
    .参数 项目句柄, 长整数型

    __SendMsgW (#<?未知本地类型?>, 0, 项目句柄)

.子程序 加入项目, 整数型, 公开, 将单个或一批项目加入到树型框中，如果仅加入一个项目，成功返回加入后该项目所处的位置，失败返回 -1 。如果成批加入项目，成功返回 0 ，失败返回 -1 。成批加入项目可以用作一次性快速加入大量项目到树型框中。
    .参数 父项目索引, 整数型, 可空, 可以被省略。指定欲加入项目所处的父项目，0 为项目一，1 为项目二，如此类推。如果没有父项目（即欲加入项目为顶层项目），请提供值 -1 。如果本参数被省略，默认值为 -1 。
    .参数 项目数据1, 项目数据, 可空, 用于只加入一个项目，如欲批量加入，请留空
    .参数 项目数据2, 项目数据, 可空 数组, 用于批量加入项目
    .参数 加入方式, 整数型, 可空, 可以被省略。默认为 3
    .参数 加入完成后是否排序, 逻辑型, 可空
    .局部变量 变量_ECD00225, 整数型
    .局部变量 变量_EDD00225, 整数型
    .局部变量 变量_EED00225, 整数型
    .局部变量 变量_EFD00225, 自定义_505C0141
    .局部变量 变量_F0D00225, 自定义_515C0141
    .局部变量 变量_F1D00225, 整数型
    .局部变量 变量_F2D00225, 字节集
    .局部变量 变量_F3D00225, 长整数型
    .局部变量 变量_3FF50225, 长整数型

    .判断开始 (父项目索引 ＞ 99999)
        连续赋值 (父项目索引, 变量_EFD00225.成员_725C0135, 变量_F0D00225.成员_7F5C0135)
        
    .判断 (是否为空 (父项目索引) ＝ 假 且 父项目索引 ＋ 1 ≤ 取数组成员数 (m_hItems) 且 父项目索引 ≥ 0)
        连续赋值 (m_hItems [父项目索引 ＋ 1], 变量_EFD00225.成员_725C0135, 变量_F0D00225.成员_7F5C0135)
    .默认
        
    .判断结束
    
    .如果真 (是否为空 (加入方式) 或 加入方式 ＞ 4 或 加入方式 ＜ 1)
        加入方式 ＝ 3
    .如果真结束
    
    .判断开始 (是否为空 (项目数据1) ＝ 假)
        变量_EFD00225.成员_735C0135 ＝ 多项选择 (加入方式, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
        变量_EFD00225.成员_785C0135 ＝ 项目数据1.项目文本
        变量_EFD00225.成员_7A5C0135 ＝ 项目数据1.图片索引
        变量_EFD00225.成员_7B5C0135 ＝ 项目数据1.选中图片索引
        变量_EFD00225.成员_7D5C0135 ＝ 项目数据1.项目数值
        变量_EFD00225.成员_745C0135 ＝ #<?未知本地类型?>
        变量_EED00225 ＝ DLL_lstrcpyn2 (变量_EFD00225, 变量_EFD00225, 0)
        变量_3FF50225 ＝ __SendMsgW (#<?未知本地类型?>, 0, 变量_EED00225)
        加入成员 (m_hItems, 变量_3FF50225)
        返回 (变量_3FF50225)
    .判断 (是否为空 (项目数据2) ＝ 假)
        __SendMsgW (#<?未知本地类型?>, 0, 0)
        .判断开始 (加入方式 ＝ 2)
            变量_EDD00225 ＝ 变量_ECD00225
            .判断循环首 (变量_EDD00225 ＞ 0)
                变量_EFD00225.成员_735C0135 ＝ 多项选择 (加入方式, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
                变量_EFD00225.成员_745C0135 ＝ #<?未知本地类型?>
                变量_EFD00225.成员_785C0135 ＝ 项目数据2 [变量_EDD00225].项目文本
                变量_EFD00225.成员_7A5C0135 ＝ 项目数据2 [变量_EDD00225].图片索引
                变量_EFD00225.成员_7B5C0135 ＝ 项目数据2 [变量_EDD00225].选中图片索引
                变量_EFD00225.成员_7D5C0135 ＝ 项目数据2 [变量_EDD00225].项目数值
                变量_EED00225 ＝ DLL_lstrcpyn2 (变量_EFD00225, 变量_EFD00225, 0)
                __SendMsgW (#<?未知本地类型?>, 0, 变量_EED00225)
                变量_EDD00225 ＝ 变量_EDD00225 － 1
            .判断循环尾 ()
            
        .默认
            变量_ECD00225 ＝ 取数组成员数 (项目数据2)
            .判断循环首 (变量_EDD00225 ＜ 变量_ECD00225)
                变量_EDD00225 ＝ 变量_EDD00225 ＋ 1
                变量_EFD00225.成员_735C0135 ＝ 多项选择 (加入方式, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>, #<?未知本地类型?>)
                变量_EFD00225.成员_745C0135 ＝ #<?未知本地类型?>
                变量_EFD00225.成员_785C0135 ＝ 项目数据2 [变量_EDD00225].项目文本
                变量_EFD00225.成员_7A5C0135 ＝ 项目数据2 [变量_EDD00225].图片索引
                变量_EFD00225.成员_7B5C0135 ＝ 项目数据2 [变量_EDD00225].选中图片索引
                变量_EFD00225.成员_7D5C0135 ＝ 项目数据2 [变量_EDD00225].项目数值
                变量_EED00225 ＝ DLL_lstrcpyn2 (变量_EFD00225, 变量_EFD00225, 0)
                项目数据2 [变量_EDD00225].项目句柄 ＝ __SendMsgW (#<?未知本地类型?>, 0, 变量_EED00225)
                .如果真 (项目数据2 [变量_EDD00225].是否加粗)
                    加粗_句柄 (项目数据2 [变量_EDD00225].项目句柄)
                .如果真结束
                
            .判断循环尾 ()
        .判断结束
        .如果真 (加入完成后是否排序)
            排序 (真, -1)
        .如果真结束
        __SendMsgW (#<?未知本地类型?>, 1, 0)
        返回 (0)
    .默认
        返回 (-1)
    .判断结束
    

.子程序 加入项目W, 长整数型, 公开
    .参数 父项目句柄, 长整数型, 可空
    .参数 项目文本, 字节集
    .参数 图片索引, 整数型, 可空
    .参数 选中图片索引, 整数型, 可空
    .参数 项目数值, 整数型, 可空
    .参数 是否加粗, 逻辑型, 可空

    make_TVITEMW (#<?未知本地类型?>, 0, 选择 (是否加粗, #<?未知本地类型?>, 0), 16, 4000, 图片索引, 选中图片索引, , 项目数值, , , , , 父项目句柄, 3)
    write_Text (项目文本)
    .如果真 (m_isWow64)
        返回 (__SendMsgW (#<?未知本地类型?>, 0, m_item － 8))
    .如果真结束
    返回 (__SendMsgW (#<?未知本地类型?>, 0, m_item － 16))

.子程序 删除项目, 逻辑型, 公开, 删除树型框中的指定项目。成功返回真，失败返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    返回 (__SendMsgW (#<?未知本地类型?>, 0, m_hItems [项目索引 ＋ 1]) ≠ 0)

.子程序 清空, , 公开, 删除树型框中的所有项目。
    
    __SendMsgW (#<?未知本地类型?>, 0, 0)
    

.子程序 取父项目, 整数型, 公开, 返回指定项目的父项目索引。如果该项目为顶层项目，将返回 -1 。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .局部变量 变量_95DD0225, 整数型
    .局部变量 变量_96DD0225, 整数型
    .局部变量 变量_97DD0225, 长整数型

    变量_96DD0225 ＝ 取数组成员数 (m_hItems)
    .如果真 (项目索引 ＋ 1 ＞ 变量_96DD0225 或 项目索引 ＜ 0)
        返回 (-1)
    .如果真结束
    变量_97DD0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, m_hItems [项目索引 ＋ 1])
    .如果真 (变量_97DD0225 ＝ 0)
        返回 (-1)
    .如果真结束
    
    .判断循环首 (变量_95DD0225 ＜ 变量_96DD0225)
        变量_95DD0225 ＝ 变量_95DD0225 ＋ 1
        .如果真 (m_hItems [变量_95DD0225] ＝ 变量_97DD0225)
            返回 (变量_95DD0225 － 1)
        .如果真结束
        
    .判断循环尾 ()
    返回 (-1)

.子程序 取父项目文本, 文本型, 公开
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    返回 (取项目文本 (取父项目 (项目索引)))

.子程序 是否有子项目, 逻辑型, 公开, 如果指定项目存在子项目，返回真，否则返回假。如果本命令返回真，意味着指定项目的下一项即为此项目的第一个子项目。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (read_Children () ≠ 0)

.子程序 是否已扩展, 逻辑型, 公开, 如果树型框中的指定项目具有子项目并已扩展显示，返回真，否则返回假。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。
    .局部变量 变量_A6DD0225, 整数型

    变量_A6DD0225 ＝ 取数组成员数 (m_hItems)
    .如果真 (项目索引 ＋ 1 ≥ 变量_A6DD0225 或 项目索引 ＜ 0)
        
        返回 (假)
    .如果真结束
    变量_A6DD0225 ＝ __SendMsgW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], 0)
    返回 (位与 (变量_A6DD0225, 32) ＝ 32)

.子程序 置背景色, , 公开
    .参数 背景颜色, 整数型

    __SendMsgW (#<?未知本地类型?>, 0, 背景颜色)

.子程序 取背景色, 整数型, 公开
    返回 (__SendMsgW (#<?未知本地类型?>, 0, 0))

.子程序 置项目间隔, , 公开
    .参数 间隔距离, 整数型, 可空, 默认为16

    .如果真 (是否为空 (间隔距离))
        间隔距离 ＝ 16
    .如果真结束
    __SendMsgW (#<?未知本地类型?>, 间隔距离, 0)

.子程序 取项目间隔, 整数型, 公开
    返回 (__SendMsgW (#<?未知本地类型?>, 0, 0))

.子程序 置文本颜色, , 公开
    .参数 文本颜色, 整数型

    __SendMsgW (#<?未知本地类型?>, 0, 文本颜色)

.子程序 取文本颜色, 整数型, 公开
    返回 (__SendMsgW (#<?未知本地类型?>, 0, 0))

.子程序 置连线颜色, , 公开
    .参数 连线颜色, 整数型

    __SendMsgW (#<?未知本地类型?>, 0, 连线颜色)

.子程序 取连线颜色, 整数型, 公开
    返回 (__SendMsgW (#<?未知本地类型?>, 0, 0))

.子程序 使用复选框, , 公开
    .如果真 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?>)
        SetWindowLongA (m_hWnd, #GWL_STYLE, 位或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
    .如果真结束
    

.子程序 使用热点跟踪, , 公开
    .如果真 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?>)
        SetWindowLongA (m_hWnd, #GWL_STYLE, 位或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
    .如果真结束
    

.子程序 禁止滚动条, 逻辑型, 公开, 返回禁止的状态
    .参数 禁止, 逻辑型, 可空, 真为禁止，假为解除禁止。默认为真

    .判断开始 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?> 且 (禁止 或 是否为空 (禁止)))
        SetWindowLongA (m_hWnd, #GWL_STYLE, 位或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
        返回 (真)
    .判断 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ＝ #<?未知本地类型?> 且 取反 (禁止) 且 取反 (是否为空 (禁止)))
        SetWindowLongA (m_hWnd, #GWL_STYLE, 位异或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
        返回 (假)
    .默认
        返回 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?>)
    .判断结束
    

.子程序 禁止水平滚动条, 逻辑型, 公开, 返回禁止的状态
    .参数 禁止, 逻辑型, 可空, 真为禁止，假为解除禁止。默认为真

    .判断开始 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?> 且 (禁止 或 是否为空 (禁止)))
        SetWindowLongA (m_hWnd, #GWL_STYLE, 位或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
        返回 (真)
    .判断 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ＝ #<?未知本地类型?> 且 取反 (禁止) 且 取反 (是否为空 (禁止)))
        SetWindowLongA (m_hWnd, #GWL_STYLE, 位异或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
        返回 (假)
    .默认
        返回 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?>)
    .判断结束
    

.子程序 使用整行选择, 逻辑型, 公开, 要使用本功能，就不能使用显示连线。
    .参数 是否使用, 逻辑型, 可空, 真为使用，假为不使用。默认为真。

    .判断开始 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), 2) ≠ 2)
        .判断开始 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?> 且 (是否使用 或 是否为空 (是否使用)))
            SetWindowLongA (m_hWnd, #GWL_STYLE, 位或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
            返回 (真)
        .判断 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ＝ #<?未知本地类型?> 且 取反 (是否使用) 且 取反 (是否为空 (是否使用)))
            SetWindowLongA (m_hWnd, #GWL_STYLE, 位异或 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>))
            返回 (假)
        .默认
            返回 (位与 (GetWindowLongA (m_hWnd, #GWL_STYLE), #<?未知本地类型?>) ≠ #<?未知本地类型?>)
        .判断结束
        
    .默认
        暂停 ()
        返回 (假)
    .判断结束
    

.子程序 是否选中, 逻辑型, 公开
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], , , , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (位与 (read_State (), 8192) ＝ 8192)

.子程序 选中项目, 逻辑型, 公开, 操作成功返回真
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
    .参数 是否选中, 逻辑型, 可空, 可以被省略。设置项目的选中状态，默认为真。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 (假)
    .如果真结束
    make_TVITEMW (位或 (#<?未知本地类型?>, #<?未知本地类型?>), m_hItems [项目索引 ＋ 1], 选择 (是否选中 或 是否为空 (是否选中), 8192, 4096), 61440, , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)
    返回 (位与 (read_State (), 8192) ＝ 8192)

.子程序 加粗, , 公开
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 ()
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], #<?未知本地类型?>, 16, , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)

.子程序 加粗_句柄, , 公开
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 ()
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], #<?未知本地类型?>, 16, , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)

.子程序 取消加粗, , 公开, 将指定项目的标题取消加粗显示。
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 ()
    .如果真结束
    make_TVITEMW (#<?未知本地类型?>, m_hItems [项目索引 ＋ 1], 位取反 (#<?未知本地类型?>), 16, , , , , , , , , , , )
    __SendMsgW (#<?未知本地类型?>, 0, m_item)

.子程序 取可显示数量, 整数型, 公开, 取当前在树形框的用户区中大约可以显示的项目数量
    返回 (__SendMsgW (#<?未知本地类型?>, 0, 0))

.子程序 取第一项索引, 整数型, 公开, 取在当前树形框中显示的第一条项目的索引。失败返回-1
    .局部变量 变量_FADD0225, 长整数型
    .局部变量 变量_FBDD0225, 整数型
    .局部变量 变量_FCDD0225, 整数型

    变量_FADD0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 0)
    变量_FBDD0225 ＝ 取数组成员数 (m_hItems)
    .判断循环首 (变量_FCDD0225 ＜ 变量_FBDD0225)
        变量_FCDD0225 ＝ 变量_FCDD0225 ＋ 1
        .如果真 (变量_FADD0225 ＝ m_hItems [变量_FCDD0225])
            返回 (变量_FCDD0225 － 1)
        .如果真结束
        
    .判断循环尾 ()
    返回 (-1)

.子程序 取现行选中项, 整数型, 公开
    .局部变量 变量_02DE0225, 长整数型
    .局部变量 变量_03DE0225, 整数型
    .局部变量 变量_04DE0225, 整数型

    变量_02DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 0)
    .如果真 (变量_02DE0225 ≠ 0)
        变量_03DE0225 ＝ 取数组成员数 (m_hItems)
        .判断循环首 (变量_04DE0225 ＜ 变量_03DE0225)
            变量_04DE0225 ＝ 变量_04DE0225 ＋ 1
            .如果真 (m_hItems [变量_04DE0225] ＝ 变量_02DE0225)
                返回 (变量_04DE0225 － 1)
            .如果真结束
            
        .判断循环尾 ()
    .如果真结束
    返回 (-1)

.子程序 置现行选中项, , 公开
    .参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。

    .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
        返回 ()
    .如果真结束
    置现行选中项_句柄 (m_hItems [项目索引 ＋ 1])

.子程序 置现行选中项_句柄, , 公开
    .参数 项目句柄, 整数型, , 0 为项目一，1 为项目二，如此类推。

    __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 项目句柄)

.子程序 取全部选中项, 变体型, 公开, 返回选中项索引数组
    .局部变量 变量_12DE0225, 变体型
    .局部变量 变量_13DE0225, 整数型, , "0"
    .局部变量 变量_14DE0225, 整数型
    .局部变量 变量_15DE0225, 整数型
    .局部变量 变量_16DE0225, 整数型

    变量_12DE0225.置类型 (#变体类型.数值型数组)
    变量_14DE0225 ＝ 取数组成员数 (m_hItems)
    重定义数组 (变量_13DE0225, 假, 变量_14DE0225)
    .判断循环首 (变量_16DE0225 ＜ 变量_14DE0225)
        变量_16DE0225 ＝ 变量_16DE0225 ＋ 1
        make_TVITEMW (#<?未知本地类型?>, m_hItems [变量_16DE0225], , , , , , , , , , , , , )
        __SendMsgW (#<?未知本地类型?>, 0, 集_外部数据地址1)
        .如果真 (位与 (read_State (), 8192) ＝ 8192)
            变量_15DE0225 ＝ 变量_15DE0225 ＋ 1
            变量_13DE0225 [变量_15DE0225] ＝ 变量_16DE0225 － 1
        .如果真结束
        
    .判断循环尾 ()
    重定义数组 (变量_13DE0225, 真, 变量_15DE0225)
    变量_12DE0225.赋值 (变量_13DE0225, )
    返回 (变量_12DE0225)

.子程序 更新缓存, , 公开, 如果项目增加或减少，需要调用此命令进行更新
    内部_遍历句柄 ()

.子程序 置外部操作, , 公开
    .参数 是否操作外部控件, 逻辑型

    .如果真 (m_hProc ＝ 0 且 是否操作外部控件)
        m_hProc ＝ OpenProc (m_hWnd)
    .如果真结束
    

.子程序 内部_遍历句柄
    .局部变量 变量_22DE0225, 长整数型
    .局部变量 变量_23DE0225, 长整数型
    .局部变量 变量_24DE0225, 长整数型
    .局部变量 变量_25DE0225, 逻辑型
    .局部变量 变量_26DE0225, 整数型

    清除数组 (m_hItemParent)
    重定义数组 (m_hItems, 假, 取项目数 ())
    变量_23DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 0)
    
    .判断循环首 (变量_23DE0225 ≠ 0)
        变量_26DE0225 ＝ 变量_26DE0225 ＋ 1
        m_hItems [变量_26DE0225] ＝ 变量_23DE0225
        变量_24DE0225 ＝ 变量_23DE0225
        变量_23DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_23DE0225)
        .如果真 (变量_23DE0225 ＝ 0)
            变量_23DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_24DE0225)
            
            .判断循环首 (变量_23DE0225 ＝ 0)
                变量_22DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_24DE0225)
                .如果真 (变量_22DE0225 ＝ 0)
                    变量_25DE0225 ＝ 真
                    跳出循环 ()
                .如果真结束
                变量_24DE0225 ＝ 变量_22DE0225
                变量_23DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_22DE0225)
            .判断循环尾 ()
        .如果真结束
        .如果真 (变量_25DE0225)
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()

.子程序 内部_遍历句柄_父项目
    .局部变量 变量_2DD10225, 整数型
    .局部变量 变量_2ED10225, 整数型

    重定义数组 (m_hItemParent, 假, 取数组成员数 (m_hItems))
    .计次循环首 (取数组成员数 (m_hItems), 变量_2DD10225)
        .如果真 (是否有子项目 (变量_2DD10225 － 1))
            变量_2ED10225 ＝ 变量_2ED10225 ＋ 1
            m_hItemParent [变量_2ED10225] ＝ m_hItems [变量_2DD10225]
        .如果真结束
        
    .计次循环尾 ()
    重定义数组 (m_hItemParent, 真, 变量_2ED10225)

.子程序 遍历句柄_子项目, 整数型, 公开, 遍历指定父项目下的所有子项目句柄
    .参数 父项目句柄, 整数型
    .参数 项目数据, 项目数据, 参考 可空 数组
    .参数 是否提取项目数值, 逻辑型, 可空
    .局部变量 变量_31DE0225, 长整数型
    .局部变量 变量_32DE0225, 项目数据

    变量_31DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 父项目句柄)
    .如果真 (变量_31DE0225 ＝ 0)
        返回 (0)
    .如果真结束
    .判断开始 (是否提取项目数值)
        .判断循环首 (变量_31DE0225 ≠ 0)
            
            变量_32DE0225.项目文本 ＝ 取项目文本_句柄 (变量_31DE0225)
            变量_32DE0225.项目句柄 ＝ 变量_31DE0225
            变量_32DE0225.项目数值 ＝ 取项目数值_句柄 (变量_31DE0225)
            加入成员 (项目数据, 变量_32DE0225)
            变量_31DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_31DE0225)
        .判断循环尾 ()
        
    .默认
        .判断循环首 (变量_31DE0225 ≠ 0)
            
            变量_32DE0225.项目文本 ＝ 取项目文本_句柄 (变量_31DE0225)
            变量_32DE0225.项目句柄 ＝ 变量_31DE0225
            加入成员 (项目数据, 变量_32DE0225)
            变量_31DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_31DE0225)
        .判断循环尾 ()
    .判断结束
    返回 (取数组成员数 (项目数据))

.子程序 句柄取索引, 整数型, 公开, 用树型框的项目句柄获取他的项目索引
    .参数 欲查找句柄, 整数型
    .局部变量 变量_3DDE0225, 整数型
    .局部变量 变量_3EDE0225, 整数型

    变量_3DDE0225 ＝ 1
    变量_3EDE0225 ＝ 取数组成员数 (m_hItems)
    .判断循环首 (变量_3DDE0225 ＜ 变量_3EDE0225)
        .如果真 (m_hItems [变量_3DDE0225] ＝ 欲查找句柄)
            返回 (变量_3DDE0225 － 1)
        .如果真结束
        
        .如果真 (m_hItems [变量_3EDE0225] ＝ 欲查找句柄)
            返回 (变量_3EDE0225 － 1)
        .如果真结束
        .判断开始 (变量_3DDE0225 ＜ 变量_3EDE0225)
            变量_3DDE0225 ＝ 变量_3DDE0225 ＋ 1
            变量_3EDE0225 ＝ 变量_3EDE0225 － 1
        .默认
            返回 (0)
        .判断结束
        
    .判断循环尾 ()
    返回 (0)

.子程序 索引取句柄, 整数型, 公开, 失败返回-1
    .参数 项目索引, 整数型, , 从0开始
    .局部变量 变量_38D10225, 整数型

    变量_38D10225 ＝ 项目索引 ＋ 1
    .如果真 (取数组成员数 (m_hItems) ＝ 0)
        内部_遍历句柄 ()
    .如果真结束
    .如果真 (变量_38D10225 ＞ 0 且 变量_38D10225 ≤ 取数组成员数 (m_hItems))
        返回 (m_hItems [变量_38D10225])
    .如果真结束
    返回 (-1)

.子程序 查找项目, 整数型, 公开, 成功返回项目索引
    .参数 项目文本, 文本型
    .参数 精确查找, 逻辑型, 可空, 可空，默认为假，真=精确查找
    .参数 项目句柄, 整数型, 参考 可空
    .局部变量 变量_41DE0225, 整数型
    .局部变量 变量_42DE0225, 整数型

    内部_遍历句柄 ()
    变量_41DE0225 ＝ 0
    变量_42DE0225 ＝ 取数组成员数 (m_hItems)
    .判断开始 (精确查找)
        .判断循环首 (变量_41DE0225 ＜ 变量_42DE0225)
            .如果真 (取项目文本 (变量_41DE0225) ＝ 项目文本)
                .如果真 (是否为空 (项目句柄) ＝ 假)
                    项目句柄 ＝ m_hItems [变量_41DE0225 ＋ 1]
                .如果真结束
                返回 (变量_41DE0225)
            .如果真结束
            
            .如果真 (取项目文本 (变量_42DE0225) ＝ 项目文本)
                .如果真 (是否为空 (项目句柄) ＝ 假)
                    项目句柄 ＝ m_hItems [变量_42DE0225 ＋ 1]
                .如果真结束
                返回 (变量_42DE0225)
            .如果真结束
            .判断开始 (变量_41DE0225 ＜ 变量_42DE0225)
                变量_41DE0225 ＝ 变量_41DE0225 ＋ 1
                变量_42DE0225 ＝ 变量_42DE0225 － 1
            .默认
                返回 (-1)
            .判断结束
            
        .判断循环尾 ()
        
    .默认
        .判断循环首 (变量_41DE0225 ＜ 变量_42DE0225)
            .如果真 (寻找文本 (取项目文本 (变量_41DE0225), 项目文本, , 假) ≠ -1)
                .如果真 (是否为空 (项目句柄) ＝ 假)
                    项目句柄 ＝ m_hItems [变量_41DE0225 ＋ 1]
                .如果真结束
                返回 (变量_41DE0225)
            .如果真结束
            
            .如果真 (寻找文本 (取项目文本 (变量_42DE0225), 项目文本, , 假) ≠ -1)
                .如果真 (是否为空 (项目句柄) ＝ 假)
                    项目句柄 ＝ m_hItems [变量_42DE0225 ＋ 1]
                .如果真结束
                返回 (变量_42DE0225)
            .如果真结束
            .判断开始 (变量_41DE0225 ＜ 变量_42DE0225)
                变量_41DE0225 ＝ 变量_41DE0225 ＋ 1
                变量_42DE0225 ＝ 变量_42DE0225 － 1
            .默认
                返回 (-1)
            .判断结束
            
        .判断循环尾 ()
        
    .判断结束
    返回 (-1)

.子程序 查找项目数值, 整数型, 公开, 成功返回索引
    .参数 项目数值, 整数型
    .局部变量 变量_3FD10225, 整数型
    .局部变量 变量_40D10225, 整数型

    变量_3FD10225 ＝ 0
    变量_40D10225 ＝ 取数组成员数 (m_hItems)
    .判断循环首 (变量_3FD10225 ≤ 变量_40D10225)
        .如果真 (取项目数值 (变量_3FD10225) ＝ 项目数值)
            返回 (变量_3FD10225)
        .如果真结束
        
        .如果真 (取项目数值 (变量_40D10225) ＝ 项目数值)
            返回 (变量_40D10225)
            
        .如果真结束
        .判断开始 (变量_3FD10225 ＜ 变量_40D10225)
            变量_3FD10225 ＝ 变量_3FD10225 ＋ 1
            变量_40D10225 ＝ 变量_40D10225 － 1
        .默认
            返回 (-1)
        .判断结束
        
    .判断循环尾 ()
    返回 (-1)

.子程序 查找项目_外部, 整数型, 公开, 返回结果数量，被查找出来的项目数值，对应目标树型框的项目索引
    .参数 欲查找的文本, 文本型
    .参数 结果树型框句柄, 整数型, , 用于存放结果的树型框句柄
    .参数 查找结果是否扩展, 逻辑型, 可空, 查找后，结果项目是否扩展开
    .参数 是否同步图标, 逻辑型, 可空, 是否同步项目的图标，会影响速度
    .参数 搜索时禁止重绘, 逻辑型, 可空, 禁止重绘，可能会导致未找到时(只有1个项目时，无法重绘)
    .参数 搜索状态回调Call, 整数型, 可空, 共2个参数，参数1:状态文本(文本型)，参数2:备用(整数)
    .局部变量 变量_4BDE0225, 长整数型
    .局部变量 变量_4CDE0225, 外部树型框
    .局部变量 变量_4DDE0225, 项目数据
    .局部变量 变量_4EDE0225, 长整数型
    .局部变量 变量_4FDE0225, 整数型
    .局部变量 变量_50DE0225, 整数型
    .局部变量 变量_51DE0225, 整数型
    .局部变量 变量_52DE0225, 整数型

    .如果真 (IsWindow (结果树型框句柄) ＝ 0)
        输出调试文本 (“结果树型框句柄 - 无效”)
        返回 (0)
    .如果真结束
    变量_4CDE0225.初始化 (结果树型框句柄, , m_hProc ≠ 0)
    变量_4CDE0225.清空 ()
    变量_4CDE0225.更新缓存 ()
    .如果 (搜索状态回调Call ＞ 0)
        _搜索回调Call ＝ 搜索状态回调Call
    .否则
        _搜索回调Call ＝ 0
    .如果结束
    变量_52DE0225 ＝ 0
    变量_4FDE0225 ＝ 取图片 (0)
    变量_4CDE0225.加入项目W (, 取项目文本W (0), 变量_4FDE0225, 变量_4FDE0225, 取项目数值 (0), 真)
    变量_4CDE0225.更新缓存 ()
    .如果真 (搜索时禁止重绘)
        __SendMsgW (#<?未知本地类型?>, 0, 0)
    .如果真结束
    变量_4EDE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 0)
    内部_递归子项目 (m_hWnd, 变量_4EDE0225, 欲查找的文本, 变量_50DE0225, 变量_51DE0225, 变量_4BDE0225, 变量_4CDE0225, , 是否同步图标, 变量_52DE0225)
    .如果真 (变量_4CDE0225.取子项目数 (0) ＝ 0)
        变量_50DE0225 ＝ 变量_50DE0225 － 1
        变量_51DE0225 ＝ 变量_51DE0225 － 1
        变量_4CDE0225.删除项目 (0)
    .如果真结束
    
    .判断循环首 (变量_4EDE0225 ＞ 0)
        变量_50DE0225 ＝ 变量_50DE0225 ＋ 1
        变量_51DE0225 ＝ 变量_51DE0225 ＋ 1
        变量_4EDE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_4EDE0225)
        .如果真 (变量_4EDE0225 ＝ 0)
            跳出循环 ()
        .如果真结束
        
        变量_4FDE0225 ＝ 取图片_句柄 (变量_4EDE0225)
        变量_4CDE0225.加入项目W (, 取项目文本_句柄W (变量_4EDE0225), 变量_4FDE0225, 变量_4FDE0225, 取项目数值_句柄 (变量_4EDE0225), 真)
        变量_4CDE0225.更新缓存 ()
        .如果真 (取项目文本_句柄 (变量_4EDE0225) ＝ “”)
            暂停 ()
        .如果真结束
        
        变量_4BDE0225 ＝ 变量_50DE0225
        内部_递归子项目 (m_hWnd, 变量_4EDE0225, 欲查找的文本, 变量_50DE0225, 变量_51DE0225, 变量_4BDE0225, 变量_4CDE0225, , 是否同步图标, 变量_52DE0225)
        .如果真 (变量_4CDE0225.取子项目数 (变量_4BDE0225) ＝ 0)
            变量_4CDE0225.删除项目 (变量_4BDE0225)
            变量_50DE0225 ＝ 变量_50DE0225 － 1
        .如果真结束
        
    .判断循环尾 ()
    .如果真 (搜索时禁止重绘)
        __SendMsgW (#<?未知本地类型?>, 1, 0)
    .如果真结束
    .如果真 (查找结果是否扩展)
        变量_4CDE0225.扩展全部 ()
    .如果真结束
    内部_加入父项目 (, -1, , , , , )
    变量_4CDE0225.置现行选中项 (0)
    返回 (变量_52DE0225)

.子程序 内部_递归子项目, 逻辑型
    .参数 变量_4FD10225, 整数型
    .参数 变量_50D10225, 长整数型, 可空
    .参数 变量_51D10225, 文本型
    .参数 变量_52D10225, 整数型, 参考
    .参数 变量_53D10225, 整数型, 参考
    .参数 变量_54D10225, 整数型, 可空
    .参数 变量_55D10225, 外部树型框, 可空
    .参数 变量_56D10225, 逻辑型, 参考 可空
    .参数 变量_57D10225, 逻辑型, 可空
    .参数 变量_58D10225, 整数型, 参考
    .局部变量 变量_73DE0225, 长整数型
    .局部变量 变量_74DE0225, 文本型
    .局部变量 变量_75DE0225, 整数型
    .局部变量 变量_76DE0225, 整数型
    .局部变量 变量_77DE0225, 文本型

    变量_73DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_50D10225)
    .如果真 (变量_73DE0225 ＝ 0)
        返回 (假)
    .如果真结束
    .判断循环首 (变量_73DE0225 ＞ 0)
        变量_53D10225 ＝ 变量_53D10225 ＋ 1
        变量_74DE0225 ＝ 取项目文本_句柄 (变量_73DE0225)
        .判断开始 (__SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_73DE0225) ＞ 0)
            变量_52D10225 ＝ 变量_52D10225 ＋ 1
            变量_56D10225 ＝ 假
            .如果真 (变量_57D10225)
                变量_76DE0225 ＝ 取图片_句柄 (变量_73DE0225)
            .如果真结束
            
            
            .如果真 (_搜索回调Call ＞ 0)
                变量_77DE0225 ＝ “正在搜索[” ＋ 变量_74DE0225 ＋ “]...”
                程序_Call (_搜索回调Call, 取指针文本_ (变量_77DE0225), 0, , , )
            .如果真结束
            
            变量_75DE0225 ＝ 内部_加入父项目 (变量_55D10225, 变量_54D10225, 变量_74DE0225, 变量_73DE0225, 变量_52D10225, 变量_76DE0225, 变量_53D10225)
            内部_递归子项目 (变量_4FD10225, 变量_73DE0225, 变量_51D10225, 变量_52D10225, 变量_53D10225, 变量_75DE0225, 变量_55D10225, 变量_56D10225, 变量_57D10225, 变量_58D10225)
            
            .判断开始 (变量_55D10225.取子项目数 (变量_75DE0225) ＝ 0 且 寻找文本 (变量_74DE0225, 变量_51D10225, , 真) ＝ -1)
                变量_52D10225 ＝ 变量_52D10225 － 1
                变量_55D10225.删除项目 (变量_75DE0225)
                
            .默认
                变量_58D10225 ＝ 变量_58D10225 ＋ 1
            .判断结束
            
        .判断 (寻找文本 (变量_74DE0225, 变量_51D10225, , 真) ≠ -1)
            变量_58D10225 ＝ 变量_58D10225 ＋ 1
            变量_52D10225 ＝ 变量_52D10225 ＋ 1
            变量_56D10225 ＝ 真
            .如果真 (变量_57D10225)
                变量_76DE0225 ＝ 取图片_句柄 (变量_73DE0225)
            .如果真结束
            变量_55D10225.加入项目W (变量_54D10225, 编码_Ansi到Unicode (变量_74DE0225, ), 变量_76DE0225, 变量_76DE0225, 变量_53D10225, )
        .默认
            
        .判断结束
        变量_73DE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_73DE0225)
    .判断循环尾 ()
    返回 (真)

.子程序 内部_加入父项目, 整数型
    .参数 变量_5ED10225, 外部树型框, 可空
    .参数 变量_5FD10225, 整数型, 可空
    .参数 变量_60D10225, 文本型, 可空
    .参数 变量_61D10225, 整数型, 可空
    .参数 变量_62D10225, 整数型, 可空
    .参数 变量_63D10225, 整数型, 可空
    .参数 变量_64D10225, 整数型, 可空
    .局部变量 变量_67D10225, 整数型

    .如果真 (变量_5FD10225 ＝ -1)
        清除数组 (全局变量_65D10205)
        清除数组 (全局变量_66D10205)
        返回 (0)
    .如果真结束
    .计次循环首 (取数组成员数 (全局变量_66D10205), 变量_67D10225)
        .如果真 (全局变量_65D10205 [变量_67D10225] ＝ 变量_61D10225)
            返回 (全局变量_66D10205 [变量_67D10225])
        .如果真结束
        
    .计次循环尾 ()
    变量_5ED10225.加入项目W (变量_5FD10225, 编码_Ansi到Unicode (变量_60D10225, ), 变量_63D10225, 变量_63D10225, 变量_64D10225, 真)
    变量_5ED10225.更新缓存 ()
    加入成员 (全局变量_65D10205, 变量_61D10225)
    加入成员 (全局变量_66D10205, 变量_62D10225)
    返回 (变量_62D10225)

.子程序 取子项目数, 整数型, 公开, 获取当前选中项目的子项目数量
    .参数 项目索引, 整数型, 可空, 可空，默认取选中项的子项目数
    .局部变量 变量_78DE0225, 长整数型
    .局部变量 变量_79DE0225, 整数型
    .局部变量 变量_7ADE0225, 长整数型

    .如果 (是否为空 (项目索引))
        变量_78DE0225 ＝ __SendMsgW (#<?未知本地类型?>, 9, 0)
        
    .否则
        .如果真 (项目索引 ＋ 1 ＞ 取数组成员数 (m_hItems) 或 项目索引 ＜ 0)
            返回 (0)
        .如果真结束
        变量_78DE0225 ＝ m_hItems [项目索引 ＋ 1]
    .如果结束
    
    变量_7ADE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_78DE0225)
    变量_79DE0225 ＝ 0
    .判断循环首 (变量_7ADE0225 ＞ 0)
        变量_79DE0225 ＝ 变量_79DE0225 ＋ 1
        变量_7ADE0225 ＝ __SendMsgW (#<?未知本地类型?>, #<?未知本地类型?>, 变量_7ADE0225)
    .判断循环尾 ()
    返回 (变量_79DE0225)

.子程序 双击项目, , 公开
    .参数 项目句柄, 长整数型
    .局部变量 变量_7DDE0225, 精易_矩形
    .局部变量 变量_7EDE0225, 整数型

    变量_7EDE0225 ＝ 取指针_通用型 (项目句柄)
    变量_7DDE0225.左边 ＝ __get (变量_7EDE0225, 0)
    变量_7DDE0225.顶边 ＝ __get (变量_7EDE0225, 4)
    .计次循环首 (2, )
        __SendMsgW (#<?未知本地类型?>, 0, 取数据_通用型 (变量_7DDE0225))
        __SendMsgW (#<?未知本地类型?>, 0, 项目句柄)
    .计次循环尾 ()
    鼠标_消息 (m_hWnd, 变量_7DDE0225.左边 ＋ 50, 变量_7DDE0225.顶边 ＋ 10, , 2)
    鼠标_移动 (m_hWnd, 变量_7DDE0225.左边 ＋ 50, 变量_7DDE0225.顶边 ＋ 10)

.子程序 取所有父项目, 整数型, 公开, 获取所有有子项目的项目索引，成功返回获取到的数量
    .参数 项目索引数组, 整数型, 参考 数组, 用于存放父项目索引的数组
    .参数 排除父项目, 文本型, 可空, 如：类，将不获取类下的所有有子项目的父项目索引
    .参数 缩进层次, 整数型, 可空, 可空，默认为所有。获取小于或等于这个层次的父项目，缩进层次从1开始
    .参数 指定缩进层次, 整数型, 可空, 可空，默认为所有。如果有指定，第23参数将无效，只获取指定缩进层次的父项目
    .局部变量 变量_72D10225, 整数型
    .局部变量 变量_73D10225, 整数型
    .局部变量 变量_74D10225, 文本型

    清除数组 (项目索引数组)
    .计次循环首 (取项目数 (), 变量_72D10225)
        .如果真 (是否有子项目 (变量_72D10225 － 1) ＝ 假)
            到循环尾 ()
        .如果真结束
        
        .判断开始 (是否为空 (指定缩进层次) ＝ 假)
            变量_73D10225 ＝ 取缩进层次 (变量_72D10225 － 1)
            .如果真 (变量_73D10225 ≠ 指定缩进层次)
                到循环尾 ()
            .如果真结束
            
        .默认
            .如果真 (缩进层次 ≠ 0)
                变量_73D10225 ＝ 取缩进层次 (变量_72D10225 － 1)
                .如果真 (变量_73D10225 ＞ 缩进层次)
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            .如果真 (是否为空 (排除父项目) ＝ 假)
                变量_74D10225 ＝ 取项目文本 (取父项目 (变量_72D10225 － 1))
                .如果真 (变量_74D10225 ＝ 排除父项目)
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            
        .判断结束
        加入成员 (项目索引数组, 变量_72D10225 － 1)
    .计次循环尾 ()
    返回 (取数组成员数 (项目索引数组))

.子程序 取上一个同级项目, 整数型, 公开
    .参数 项目索引, 整数型
    .局部变量 变量_B0DA0225, 整数型
    .局部变量 变量_B1DA0225, 整数型
    .局部变量 变量_B2DA0225, 整数型

    变量_B0DA0225 ＝ 取数组成员数 (m_hItems)
    .如果真 (项目索引 ＜ 0 或 项目索引 ≥ 变量_B0DA0225)
        返回 (-1)
    .如果真结束
    
    
    变量_B1DA0225 ＝ __SendMsgW (#<?未知本地类型?>, 2, m_hItems [项目索引 ＋ 1])
    .如果真 (变量_B1DA0225 ＝ 0)
        返回 (-1)
    .如果真结束
    .计次循环首 (变量_B0DA0225, 变量_B2DA0225)
        .如果真 (m_hItems [变量_B2DA0225] ＝ 变量_B1DA0225)
            返回 (变量_B2DA0225 － 1)
        .如果真结束
        
    .计次循环尾 ()
    返回 (-1)

.子程序 取下一个同级项目, 整数型, 公开
    .参数 项目索引, 整数型
    .局部变量 变量_B5DA0225, 整数型
    .局部变量 变量_B6DA0225, 整数型
    .局部变量 变量_B7DA0225, 整数型

    变量_B5DA0225 ＝ 取数组成员数 (m_hItems)
    .如果真 (项目索引 ＜ 0 或 项目索引 ≥ 变量_B5DA0225)
        返回 (-1)
    .如果真结束
    
    
    变量_B6DA0225 ＝ __SendMsgW (#<?未知本地类型?>, 1, m_hItems [项目索引 ＋ 1])
    .如果真 (变量_B6DA0225 ＝ 0)
        返回 (-1)
    .如果真结束
    .计次循环首 (变量_B5DA0225, 变量_B7DA0225)
        .如果真 (m_hItems [变量_B7DA0225] ＝ 变量_B6DA0225)
            返回 (变量_B7DA0225 － 1)
        .如果真结束
        
    .计次循环尾 ()
    返回 (-1)

