.版本 2

.程序集 类_RegExp, , 公开, 线程内请先调用 _COM初始化(0)
.程序集变量 m_RegExp, 对象
.程序集变量 m_Matches, 对象
.程序集变量 m_Match, 对象
.程序集变量 m_SubMatches, 对象
.程序集变量 m_Search, 变体型
.程序集变量 m_Null, 逻辑型

.子程序 _初始化
    m_Null ＝ 真

.子程序 _销毁
    m_RegExp.清除 ()
    m_Matches.清除 ()
    m_Search.清除 ()
    CoUninitialize ()

.子程序 继承, , 公开, 内部使用
    .参数 RegExpClass, 类_RegExp, 参考 可空
    .参数 RegExp, 变体型, 可空
    .参数 Matches, 变体型, 可空
    .参数 Match, 变体型, 可空
    .参数 SubMatches, 变体型, 可空
    .参数 Search, 变体型, 可空
    .参数 Null, 逻辑型, 可空
    .局部变量 变量_70A50225, 变体型
    .局部变量 变量_71A50225, 变体型
    .局部变量 变量_72A50225, 变体型
    .局部变量 变量_73A50225, 变体型
    .局部变量 变量_74A50225, 变体型
    .局部变量 变量_75A50225, 逻辑型

    .如果 (是否为空 (RegExpClass) ＝ 假)
        变量_70A50225.赋值 (m_RegExp, )
        变量_71A50225.赋值 (m_Matches, )
        变量_72A50225.赋值 (m_Match, )
        变量_73A50225.赋值 (m_SubMatches, )
        变量_74A50225 ＝ m_Search
        变量_75A50225 ＝ m_Null
        RegExpClass.继承 (, 变量_70A50225, 变量_71A50225, 变量_72A50225, 变量_73A50225, 变量_74A50225, 变量_75A50225)
    .否则
        m_RegExp ＝ RegExp.取对象 ()
        m_Matches ＝ Matches.取对象 ()
        m_Match ＝ Match.取对象 ()
        m_SubMatches ＝ SubMatches.取对象 ()
        m_Search ＝ Search
        m_Null ＝ Null
    .如果结束
    

.子程序 创建, 逻辑型, 公开, 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
    .参数 正则表达式文本, 文本型
    .参数 被搜索的文本, 文本型
    .参数 是否区分大小写, 逻辑型, 可空
    .参数 是否匹配多行, 逻辑型, 可空
    .参数 是否全局匹配, 逻辑型, 可空
    .局部变量 变量_7BA50225, 文本型

    是否区分大小写 ＝ 取反 (选择 (是否为空 (是否区分大小写), 假, 是否区分大小写))
    是否匹配多行 ＝ 选择 (是否为空 (是否匹配多行), 真, 是否匹配多行)
    是否全局匹配 ＝ 选择 (是否为空 (是否全局匹配), 真, 是否全局匹配)
    m_RegExp.清除 ()
    m_Matches.清除 ()
    CoInitialize (0)
    m_RegExp.创建 (“VBScript.RegExp”, )
    m_RegExp.写属性 (“IgnoreCase”, 是否区分大小写)
    m_RegExp.写属性 (“Multiline”, 是否匹配多行)
    m_RegExp.写属性 (“Singleline”, 真)
    m_RegExp.写属性 (“Global”, 是否全局匹配)
    变量_7BA50225 ＝ 正则表达式文本
    m_RegExp.写属性 (“Pattern”, 变量_7BA50225)
    
    m_Search.赋值 (被搜索的文本, )
    m_Matches ＝ m_RegExp.对象型方法 (“Execute”, m_Search)
    m_Null ＝ m_Matches.是否为空 ()
    返回 (m_Null ＝ 假)

.子程序 创建类, 类_RegExp, 公开, 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
    .参数 正则表达式文本, 文本型
    .参数 被搜索的文本, 文本型
    .参数 是否区分大小写, 逻辑型, 可空
    .参数 是否匹配多行, 逻辑型, 可空
    .参数 是否全局匹配, 逻辑型, 可空
    .局部变量 变量_81A50225, 类_RegExp

    是否区分大小写 ＝ 取反 (选择 (是否为空 (是否区分大小写), 假, 是否区分大小写))
    是否匹配多行 ＝ 选择 (是否为空 (是否匹配多行), 真, 是否匹配多行)
    是否全局匹配 ＝ 选择 (是否为空 (是否全局匹配), 真, 是否全局匹配)
    创建 (正则表达式文本, 被搜索的文本, 是否区分大小写, 是否匹配多行, 是否全局匹配)
    继承 (变量_81A50225)
    返回 (变量_81A50225)
    

.子程序 是否空, 逻辑型, 公开
    返回 (m_Null)
    

.子程序 取匹配, 文本型, 公开, 取出该正则匹配到的文本
    .参数 匹配索引, 整数型, 可空, 索引值从1开始,留空默认1
    .局部变量 变量_83A50225, 对象
    .局部变量 变量_84A50225, 文本型
    .局部变量 变量_85A50225, 整数型

    变量_85A50225 ＝ 选择 (是否为空 (匹配索引), 1, 匹配索引 － 1)
    变量_83A50225 ＝ m_Matches.读对象型属性 (“Item”, 变量_85A50225)
    变量_84A50225 ＝ 变量_83A50225.读属性 (“Value”, ).取文本 ()
    m_Match ＝ 变量_83A50225
    返回 (变量_84A50225)

.子程序 创建自匹配, 类_RegExp, 公开, 根据指定匹配文本创建一个正则表达式对象。本对象中的原有内容将被释放
    .参数 正则表达式文本, 文本型
    .参数 匹配索引, 整数型, , 索引值从1开始,留空默认1
    .参数 是否区分大小写, 逻辑型, 可空
    .参数 是否匹配多行, 逻辑型, 可空
    .参数 是否全局匹配, 逻辑型, 可空

    是否区分大小写 ＝ 取反 (选择 (是否为空 (是否区分大小写), 假, 是否区分大小写))
    是否匹配多行 ＝ 选择 (是否为空 (是否匹配多行), 真, 是否匹配多行)
    是否全局匹配 ＝ 选择 (是否为空 (是否全局匹配), 真, 是否全局匹配)
    返回 (创建类 (正则表达式文本, 取匹配 (匹配索引), 是否区分大小写, 是否匹配多行, 是否全局匹配))
    

.子程序 替换, 文本型, 公开, 替换在正则表达式查找中找到的文本
    .参数 用作替换的文本, 文本型, 可空, 用作替换的文本
    .局部变量 变量_8CA50225, 变体型

    变量_8CA50225.赋值 (用作替换的文本, )
    返回 (m_RegExp.文本方法 (“Replace”, m_Search, 变量_8CA50225))
    

.子程序 创建自替换, 类_RegExp, 公开, 根据指定匹配文本创建一个正则表达式对象。本对象中的原有内容将被释放
    .参数 正则表达式文本, 文本型
    .参数 用作替换的文本, 文本型, , 索引值从1开始,留空默认1
    .参数 是否区分大小写, 逻辑型, 可空
    .参数 是否匹配多行, 逻辑型, 可空
    .参数 是否全局匹配, 逻辑型, 可空

    是否区分大小写 ＝ 取反 (选择 (是否为空 (是否区分大小写), 假, 是否区分大小写))
    是否匹配多行 ＝ 选择 (是否为空 (是否匹配多行), 真, 是否匹配多行)
    是否全局匹配 ＝ 选择 (是否为空 (是否全局匹配), 真, 是否全局匹配)
    返回 (创建类 (正则表达式文本, 替换 (用作替换的文本), 是否区分大小写, 是否匹配多行, 是否全局匹配))
    

.子程序 取子匹配, 文本型, 公开, 取出该正则的子表达式匹配到的文本
    .参数 匹配索引, 整数型, 可空, 索引值从1开始
    .参数 子表达式索引, 整数型, 可空, 欲取其值的子表达式,该参数对应与正则表达式中的一个子表达式以圆括号"( )"为标记,索引从1开始
    .局部变量 变量_94A50225, 对象
    .局部变量 变量_95A50225, 对象
    .局部变量 变量_96A50225, 文本型
    .局部变量 变量_97A50225, 整数型

    变量_97A50225 ＝ 选择 (是否为空 (匹配索引), 1, 匹配索引 － 1)
    变量_94A50225 ＝ m_Matches.读对象型属性 (“Item”, 变量_97A50225)
    变量_95A50225 ＝ 变量_94A50225.读对象型属性 (“SubMatches”, )
    变量_97A50225 ＝ 选择 (是否为空 (子表达式索引), 1, 子表达式索引 － 1)
    变量_96A50225 ＝ 变量_95A50225.读属性 (“Item”, 变量_97A50225).取文本 ()
    m_Match ＝ 变量_94A50225
    m_SubMatches ＝ 变量_95A50225
    返回 (变量_96A50225)

.子程序 创建自子匹配, 类_RegExp, 公开, 根据指定匹配文本创建一个正则表达式对象。本对象中的原有内容将被释放
    .参数 正则表达式文本, 文本型
    .参数 匹配索引, 整数型, , 索引值从1开始
    .参数 子表达式索引, 整数型, , 欲取其值的子表达式,该参数对应与正则表达式中的一个子表达式以圆括号"( )"为标记,索引从1开始
    .参数 是否区分大小写, 逻辑型, 可空
    .参数 是否匹配多行, 逻辑型, 可空
    .参数 是否全局匹配, 逻辑型, 可空

    是否区分大小写 ＝ 取反 (选择 (是否为空 (是否区分大小写), 假, 是否区分大小写))
    是否匹配多行 ＝ 选择 (是否为空 (是否匹配多行), 真, 是否匹配多行)
    是否全局匹配 ＝ 选择 (是否为空 (是否全局匹配), 真, 是否全局匹配)
    返回 (创建类 (正则表达式文本, 取子匹配 (匹配索引, 子表达式索引), 是否区分大小写, 是否匹配多行, 是否全局匹配))
    
    

.子程序 取匹配数, 整数型, 公开, 取出该正则匹配到的数量
    返回 (m_Matches.读数值属性 (“Count”, ))

.子程序 取子匹配数, 整数型, 公开, 取出该正则的子表达式匹配到的数量
    返回 (m_Matches.读对象型属性 (“Item”, 0).读对象型属性 (“SubMatches”, ).读数值属性 (“Count”, ))

.子程序 取位置, 整数型, 公开, 取匹配起始位置
    .参数 匹配索引, 整数型, 可空
    .局部变量 变量_9FA50225, 整数型
    .局部变量 变量_A0A50225, 字节集
    .局部变量 变量_A1A50225, 整数型
    .局部变量 变量_A2A50225, 整数型
    .局部变量 变量_A3A50225, 整数型
    .局部变量 变量_A4A50225, 整数型
    .局部变量 变量_A5A50225, 整数型
    .局部变量 变量_A6A50225, 整数型

    变量_A4A50225 ＝ 选择 (是否为空 (匹配索引), 1, 匹配索引 － 1)
    取匹配 (变量_A4A50225)
    变量_9FA50225 ＝ m_Match.读数值属性 (“FirstIndex”, )
    .如果真 (变量_9FA50225 ＞ 0)
        变量_A0A50225 ＝ 到字节集 (m_Search.取文本 ())
        变量_A1A50225 ＝ 取字节集长度 (变量_A0A50225)
        变量_A5A50225 ＝ 1
        变量_A6A50225 ＝ 0
        .判断循环首 (变量_A5A50225 ＜ 变量_A1A50225)
            .判断开始 (变量_A5A50225 ＋ 1 ＞ 变量_A1A50225)
                变量_A2A50225 ＝ 1
            .判断 (变量_A0A50225 [变量_A5A50225] ＞ 128)
                变量_A2A50225 ＝ 2
            .默认
                变量_A2A50225 ＝ 1
            .判断结束
            .如果真 (变量_A6A50225 ≥ 变量_9FA50225)
                跳出循环 ()
            .如果真结束
            变量_A5A50225 ＝ 变量_A5A50225 ＋ 变量_A2A50225
            变量_A6A50225 ＝ 变量_A6A50225 ＋ 1
        .判断循环尾 ()
    .如果真结束
    返回 (变量_A5A50225)

